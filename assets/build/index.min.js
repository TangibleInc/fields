(function () {
    'use strict';

    (function() {
        const env = {"NODE_ENV":"development"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    var __defProp$1y = Object.defineProperty;
    var __name$1y = (target, value) => __defProp$1y(target, "name", { value, configurable: true });
    const prefix$4 = "tangible/fields/";
    const triggerEvent = /* @__PURE__ */ __name$1y((name, args = {}) => {
      const event = new CustomEvent(prefix$4 + name, { detail: args });
      window.dispatchEvent(event);
    }, "triggerEvent");
    const addEventListener = /* @__PURE__ */ __name$1y((name, callback) => {
      const eventCallback = /* @__PURE__ */ __name$1y((event) => callback(event.detail ?? {}, event), "eventCallback");
      window.addEventListener(prefix$4 + name, eventCallback);
      return eventCallback;
    }, "addEventListener");
    const removeEventListener = /* @__PURE__ */ __name$1y((name, callback) => window.removeEventListener(prefix$4 + name, callback), "removeEventListener");

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== 'undefined' ? (wp.element).useLayoutEffect : ()=>{};

    /*
     * Copyright 2023 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn) {
        const ref = (0, wp.element.useRef)(null);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            ref.current = fn;
        }, [
            fn
        ]);
        // @ts-ignore
        return (0, wp.element.useCallback)((...args)=>{
            const f = ref.current;
            return f === null || f === void 0 ? void 0 : f(...args);
        }, []);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
        let [value, setValue] = (0, wp.element.useState)(defaultValue);
        let effect = (0, wp.element.useRef)(null);
        // Store the function in a ref so we can always access the current version
        // which has the proper `value` in scope.
        let nextRef = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{
            if (!effect.current) return;
            // Run the generator to the next yield.
            let newValue = effect.current.next();
            // If the generator is done, reset the effect.
            if (newValue.done) {
                effect.current = null;
                return;
            }
            // If the value is the same as the current value,
            // then continue to the next yield. Otherwise,
            // set the value in state and wait for the next layout effect.
            if (value === newValue.value) nextRef();
            else setValue(newValue.value);
        });
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            // If there is an effect currently running, continue to the next yield.
            if (effect.current) nextRef();
        });
        let queue = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((fn)=>{
            effect.current = fn(value);
            nextRef();
        });
        return [
            value,
            queue
        ];
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is
    // guarded by a check that it only runs on the client side.
    // eslint-disable-next-line rulesdir/useLayoutEffectRule

    // Default context value to use in case there is no SSRProvider. This is fine for
    // client-only apps. In order to support multiple copies of React Aria potentially
    // being on the page at once, the prefix is set to a random number. SSRProvider
    // will reset this to zero for consistency between server and client, so in the
    // SSR case multiple copies of React Aria is not supported.
    const $b5e257d569688ac6$var$defaultContext = {
        prefix: String(Math.round(Math.random() * 10000000000)),
        current: 0
    };
    const $b5e257d569688ac6$var$SSRContext = /*#__PURE__*/ (wp.element).createContext($b5e257d569688ac6$var$defaultContext);
    const $b5e257d569688ac6$var$IsSSRContext = /*#__PURE__*/ (wp.element).createContext(false);
    let $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
    let $b5e257d569688ac6$var$componentIds = new WeakMap();
    function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
        let ctx = (0, wp.element.useContext)($b5e257d569688ac6$var$SSRContext);
        let ref = (0, wp.element.useRef)(null);
        // eslint-disable-next-line rulesdir/pure-render
        if (ref.current === null && !isDisabled) {
            var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
            // In strict mode, React renders components twice, and the ref will be reset to null on the second render.
            // This means our id counter will be incremented twice instead of once. This is a problem because on the
            // server, components are only rendered once and so ids generated on the server won't match the client.
            // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this
            // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.
            // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.
            // To ensure that we only increment the global counter once, we store the starting id for this component in
            // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.
            // Since React runs the second render immediately after the first, this is safe.
            // @ts-ignore
            let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (wp.element).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
            if (currentOwner) {
                let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
                if (prevComponentValue == null) // On the first render, and first call to useId, store the id and state in our weak map.
                $b5e257d569688ac6$var$componentIds.set(currentOwner, {
                    id: ctx.current,
                    state: currentOwner.memoizedState
                });
                else if (currentOwner.memoizedState !== prevComponentValue.state) {
                    // On the second render, the memoizedState gets reset by React.
                    // Reset the counter, and remove from the weak map so we don't
                    // do this for subsequent useId calls.
                    ctx.current = prevComponentValue.id;
                    $b5e257d569688ac6$var$componentIds.delete(currentOwner);
                }
            }
            // eslint-disable-next-line rulesdir/pure-render
            ref.current = ++ctx.current;
        }
        // eslint-disable-next-line rulesdir/pure-render
        return ref.current;
    }
    function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
        let ctx = (0, wp.element.useContext)($b5e257d569688ac6$var$SSRContext);
        // If we are rendering in a non-DOM environment, and there's no SSRProvider,
        // provide a warning to hint to the developer to add one.
        if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
        let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
        let prefix = ctx === $b5e257d569688ac6$var$defaultContext && process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${ctx.prefix}`;
        return defaultId || `${prefix}-${counter}`;
    }
    function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
        // @ts-ignore
        let id = (wp.element).useId();
        let [didSSR] = (0, wp.element.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
        let prefix = didSSR || process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
        return defaultId || `${prefix}-${id}`;
    }
    const $b5e257d569688ac6$export$619500959fc48b26 = typeof (wp.element)['useId'] === 'function' ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
    function $b5e257d569688ac6$var$getSnapshot() {
        return false;
    }
    function $b5e257d569688ac6$var$getServerSnapshot() {
        return true;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function $b5e257d569688ac6$var$subscribe(onStoreChange) {
        // noop
        return ()=>{};
    }
    function $b5e257d569688ac6$export$535bd6ca7f90a273() {
        // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.
        if (typeof (wp.element)['useSyncExternalStore'] === 'function') return (wp.element)['useSyncExternalStore']($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
        // eslint-disable-next-line react-hooks/rules-of-hooks
        return (0, wp.element.useContext)($b5e257d569688ac6$var$IsSSRContext);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    // copied from SSRProvider.tsx to reduce exports, if needed again, consider sharing
    let $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
    let $bdb11010cef70236$var$idsUpdaterMap = new Map();
    function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
        let [value, setValue] = (0, wp.element.useState)(defaultId);
        let nextId = (0, wp.element.useRef)(null);
        let res = ($b5e257d569688ac6$export$619500959fc48b26)(value);
        let updateValue = (0, wp.element.useCallback)((val)=>{
            nextId.current = val;
        }, []);
        if ($bdb11010cef70236$var$canUseDOM) $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let r = res;
            return ()=>{
                $bdb11010cef70236$var$idsUpdaterMap.delete(r);
            };
        }, [
            res
        ]);
        // This cannot cause an infinite loop because the ref is updated first.
        // eslint-disable-next-line
        (0, wp.element.useEffect)(()=>{
            let newId = nextId.current;
            if (newId) {
                nextId.current = null;
                setValue(newId);
            }
        });
        return res;
    }
    function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
        if (idA === idB) return idA;
        let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
        if (setIdA) {
            setIdA(idB);
            return idB;
        }
        let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
        if (setIdB) {
            setIdB(idA);
            return idA;
        }
        return idB;
    }
    function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
        let id = $bdb11010cef70236$export$f680877a34711e37();
        let [resolvedId, setResolvedId] = ($1dbecbe27a04f9af$export$14d238f342723f25)(id);
        let updateId = (0, wp.element.useCallback)(()=>{
            setResolvedId(function*() {
                yield id;
                yield document.getElementById(id) ? id : undefined;
            });
        }, [
            id,
            setResolvedId
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [
            id,
            updateId,
            ...depArray
        ]);
        return resolvedId;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ /**
     * Calls all functions in the order they were chained with the same arguments.
     */ function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
        return (...args)=>{
            for (let callback of callbacks)if (typeof callback === 'function') callback(...args);
        };
    }

    const $431fbd86ca7dc216$export$b204af158042fbac = (el)=>{
        var _el_ownerDocument;
        return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
    };
    const $431fbd86ca7dc216$export$f21a1ffae260145a = (el)=>{
        if (el && 'window' in el && el.window === el) return el;
        const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
        return doc.defaultView || window;
    };

    function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
        // Start with a base clone of the first argument. This is a lot faster than starting
        // with an empty object and adding properties as we go.
        let result = {
            ...args[0]
        };
        for(let i = 1; i < args.length; i++){
            let props = args[i];
            for(let key in props){
                let a = result[key];
                let b = props[key];
                // Chain events
                if (typeof a === 'function' && typeof b === 'function' && // This is a lot faster than a regex.
                key[0] === 'o' && key[1] === 'n' && key.charCodeAt(2) >= /* 'A' */ 65 && key.charCodeAt(2) <= /* 'Z' */ 90) result[key] = ($ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);
                else if ((key === 'className' || key === 'UNSAFE_className') && typeof a === 'string' && typeof b === 'string') result[key] = (clsx)(a, b);
                else if (key === 'id' && a && b) result.id = ($bdb11010cef70236$export$cd8c9cb68f842629)(a, b);
                else result[key] = b !== undefined ? b : a;
            }
        }
        return result;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ const $65484d02dcb7eb3e$var$DOMPropNames = new Set([
        'id'
    ]);
    const $65484d02dcb7eb3e$var$labelablePropNames = new Set([
        'aria-label',
        'aria-labelledby',
        'aria-describedby',
        'aria-details'
    ]);
    // See LinkDOMProps in dom.d.ts.
    const $65484d02dcb7eb3e$var$linkPropNames = new Set([
        'href',
        'hrefLang',
        'target',
        'rel',
        'download',
        'ping',
        'referrerPolicy'
    ]);
    const $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
    function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
        let { labelable: labelable, isLink: isLink, propNames: propNames } = opts;
        let filteredProps = {};
        for(const prop in props)if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || isLink && $65484d02dcb7eb3e$var$linkPropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
        return filteredProps;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
        if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
            preventScroll: true
        });
        else {
            let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
            element.focus();
            $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
        }
    }
    let $7215afc6de606d6b$var$supportsPreventScrollCached = null;
    function $7215afc6de606d6b$var$supportsPreventScroll() {
        if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
            $7215afc6de606d6b$var$supportsPreventScrollCached = false;
            try {
                let focusElem = document.createElement('div');
                focusElem.focus({
                    get preventScroll () {
                        $7215afc6de606d6b$var$supportsPreventScrollCached = true;
                        return true;
                    }
                });
            } catch (e) {
            // Ignore
            }
        }
        return $7215afc6de606d6b$var$supportsPreventScrollCached;
    }
    function $7215afc6de606d6b$var$getScrollableElements(element) {
        let parent = element.parentNode;
        let scrollableElements = [];
        let rootScrollingElement = document.scrollingElement || document.documentElement;
        while(parent instanceof HTMLElement && parent !== rootScrollingElement){
            if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
                element: parent,
                scrollTop: parent.scrollTop,
                scrollLeft: parent.scrollLeft
            });
            parent = parent.parentNode;
        }
        if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
            element: rootScrollingElement,
            scrollTop: rootScrollingElement.scrollTop,
            scrollLeft: rootScrollingElement.scrollLeft
        });
        return scrollableElements;
    }
    function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
        for (let { element: element, scrollTop: scrollTop, scrollLeft: scrollLeft } of scrollableElements){
            element.scrollTop = scrollTop;
            element.scrollLeft = scrollLeft;
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ function $c87311424ea30a05$var$testUserAgent(re) {
        var _window_navigator_userAgentData;
        if (typeof window === 'undefined' || window.navigator == null) return false;
        return ((_window_navigator_userAgentData = window.navigator['userAgentData']) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand)=>re.test(brand.brand))) || re.test(window.navigator.userAgent);
    }
    function $c87311424ea30a05$var$testPlatform(re) {
        var _window_navigator_userAgentData;
        return typeof window !== 'undefined' && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator['userAgentData']) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
    }
    function $c87311424ea30a05$export$9ac100e40613ea10() {
        return $c87311424ea30a05$var$testPlatform(/^Mac/i);
    }
    function $c87311424ea30a05$export$186c6964ca17d99() {
        return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
    }
    function $c87311424ea30a05$export$7bef049ce92e4224() {
        return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
        $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
    }
    function $c87311424ea30a05$export$fedb369cb70207f1() {
        return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
    }
    function $c87311424ea30a05$export$e1865c3bedcd822b() {
        return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
    }
    function $c87311424ea30a05$export$78551043582a6a98() {
        return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
    }
    function $c87311424ea30a05$export$6446a186d09e379e() {
        return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
    }
    function $c87311424ea30a05$export$a11b0059900ceec8() {
        return $c87311424ea30a05$var$testUserAgent(/Android/i);
    }
    function $c87311424ea30a05$export$b7d78993b74f766d() {
        return $c87311424ea30a05$var$testUserAgent(/Firefox/i);
    }

    /*
     * Copyright 2023 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    const $ea8dcbcb9ea1b556$var$RouterContext = /*#__PURE__*/ (0, wp.element.createContext)({
        isNative: true,
        open: $ea8dcbcb9ea1b556$var$openSyntheticLink,
        useHref: (href)=>href
    });
    function $ea8dcbcb9ea1b556$export$9a302a45f65d0572() {
        return (0, wp.element.useContext)($ea8dcbcb9ea1b556$var$RouterContext);
    }
    function $ea8dcbcb9ea1b556$export$95185d699e05d4d7(target, modifiers, setOpening = true) {
        var _window_event_type, _window_event;
        let { metaKey: metaKey, ctrlKey: ctrlKey, altKey: altKey, shiftKey: shiftKey } = modifiers;
        // Firefox does not recognize keyboard events as a user action by default, and the popup blocker
        // will prevent links with target="_blank" from opening. However, it does allow the event if the
        // Command/Control key is held, which opens the link in a background tab. This seems like the best we can do.
        // See https://bugzilla.mozilla.org/show_bug.cgi?id=257870 and https://bugzilla.mozilla.org/show_bug.cgi?id=746640.
        if (($c87311424ea30a05$export$b7d78993b74f766d)() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith('key')) && target.target === '_blank') {
            if (($c87311424ea30a05$export$9ac100e40613ea10)()) metaKey = true;
            else ctrlKey = true;
        }
        // WebKit does not support firing click events with modifier keys, but does support keyboard events.
        // https://github.com/WebKit/WebKit/blob/c03d0ac6e6db178f90923a0a63080b5ca210d25f/Source/WebCore/html/HTMLAnchorElement.cpp#L184
        let event = ($c87311424ea30a05$export$78551043582a6a98)() && ($c87311424ea30a05$export$9ac100e40613ea10)() && !($c87311424ea30a05$export$7bef049ce92e4224)() && true ? new KeyboardEvent('keydown', {
            keyIdentifier: 'Enter',
            metaKey: metaKey,
            ctrlKey: ctrlKey,
            altKey: altKey,
            shiftKey: shiftKey
        }) : new MouseEvent('click', {
            metaKey: metaKey,
            ctrlKey: ctrlKey,
            altKey: altKey,
            shiftKey: shiftKey,
            bubbles: true,
            cancelable: true
        });
        $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = setOpening;
        ($7215afc6de606d6b$export$de79e2c695e052f3)(target);
        target.dispatchEvent(event);
        $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
    }
    // https://github.com/parcel-bundler/parcel/issues/8724
    $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
    function $ea8dcbcb9ea1b556$var$getSyntheticLink(target, open) {
        if (target instanceof HTMLAnchorElement) open(target);
        else if (target.hasAttribute('data-href')) {
            let link = document.createElement('a');
            link.href = target.getAttribute('data-href');
            if (target.hasAttribute('data-target')) link.target = target.getAttribute('data-target');
            if (target.hasAttribute('data-rel')) link.rel = target.getAttribute('data-rel');
            if (target.hasAttribute('data-download')) link.download = target.getAttribute('data-download');
            if (target.hasAttribute('data-ping')) link.ping = target.getAttribute('data-ping');
            if (target.hasAttribute('data-referrer-policy')) link.referrerPolicy = target.getAttribute('data-referrer-policy');
            target.appendChild(link);
            open(link);
            target.removeChild(link);
        }
    }
    function $ea8dcbcb9ea1b556$var$openSyntheticLink(target, modifiers) {
        $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link)=>$ea8dcbcb9ea1b556$export$95185d699e05d4d7(link, modifiers));
    }
    function $ea8dcbcb9ea1b556$export$7e924b3091a3bd18(props) {
        let router = $ea8dcbcb9ea1b556$export$9a302a45f65d0572();
        return {
            href: (props === null || props === void 0 ? void 0 : props.href) ? router.useHref(props === null || props === void 0 ? void 0 : props.href) : undefined,
            target: props === null || props === void 0 ? void 0 : props.target,
            rel: props === null || props === void 0 ? void 0 : props.rel,
            download: props === null || props === void 0 ? void 0 : props.download,
            ping: props === null || props === void 0 ? void 0 : props.ping,
            referrerPolicy: props === null || props === void 0 ? void 0 : props.referrerPolicy
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // We store a global list of elements that are currently transitioning,
    // mapped to a set of CSS properties that are transitioning for that element.
    // This is necessary rather than a simple count of transitions because of browser
    // bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
    // than one or the other. So we need to track what's actually transitioning so that
    // we can ignore these duplicate events.
    let $bbed8b41f857bcc0$var$transitionsByElement = new Map();
    // A list of callbacks to call once there are no transitioning elements.
    let $bbed8b41f857bcc0$var$transitionCallbacks = new Set();
    function $bbed8b41f857bcc0$var$setupGlobalEvents() {
        if (typeof window === 'undefined') return;
        function isTransitionEvent(event) {
            return 'propertyName' in event;
        }
        let onTransitionStart = (e)=>{
            if (!isTransitionEvent(e) || !e.target) return;
            // Add the transitioning property to the list for this element.
            let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
            if (!transitions) {
                transitions = new Set();
                $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
                // The transitioncancel event must be registered on the element itself, rather than as a global
                // event. This enables us to handle when the node is deleted from the document while it is transitioning.
                // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
                e.target.addEventListener('transitioncancel', onTransitionEnd, {
                    once: true
                });
            }
            transitions.add(e.propertyName);
        };
        let onTransitionEnd = (e)=>{
            if (!isTransitionEvent(e) || !e.target) return;
            // Remove property from list of transitioning properties.
            let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
            if (!properties) return;
            properties.delete(e.propertyName);
            // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
            if (properties.size === 0) {
                e.target.removeEventListener('transitioncancel', onTransitionEnd);
                $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
            }
            // If no transitioning elements, call all of the queued callbacks.
            if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
                for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)cb();
                $bbed8b41f857bcc0$var$transitionCallbacks.clear();
            }
        };
        document.body.addEventListener('transitionrun', onTransitionStart);
        document.body.addEventListener('transitionend', onTransitionEnd);
    }
    if (typeof document !== 'undefined') {
        if (document.readyState !== 'loading') $bbed8b41f857bcc0$var$setupGlobalEvents();
        else document.addEventListener('DOMContentLoaded', $bbed8b41f857bcc0$var$setupGlobalEvents);
    }
    function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
        // Wait one frame to see if an animation starts, e.g. a transition on mount.
        requestAnimationFrame(()=>{
            // If no transitions are running, call the function immediately.
            // Otherwise, add it to a list of callbacks to run at the end of the animation.
            if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();
            else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
        });
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
        let globalListeners = (0, wp.element.useRef)(new Map());
        let addGlobalListener = (0, wp.element.useCallback)((eventTarget, type, listener, options)=>{
            // Make sure we remove the listener after it is called with the `once` option.
            let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args)=>{
                globalListeners.current.delete(listener);
                listener(...args);
            } : listener;
            globalListeners.current.set(listener, {
                type: type,
                eventTarget: eventTarget,
                fn: fn,
                options: options
            });
            eventTarget.addEventListener(type, listener, options);
        }, []);
        let removeGlobalListener = (0, wp.element.useCallback)((eventTarget, type, listener, options)=>{
            var _globalListeners_current_get;
            let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
            eventTarget.removeEventListener(type, fn, options);
            globalListeners.current.delete(listener);
        }, []);
        let removeAllGlobalListeners = (0, wp.element.useCallback)(()=>{
            globalListeners.current.forEach((value, key)=>{
                removeGlobalListener(value.eventTarget, value.type, key, value.options);
            });
        }, [
            removeGlobalListener
        ]);
        // eslint-disable-next-line arrow-body-style
        (0, wp.element.useEffect)(()=>{
            return removeAllGlobalListeners;
        }, [
            removeAllGlobalListeners
        ]);
        return {
            addGlobalListener: addGlobalListener,
            removeGlobalListener: removeGlobalListener,
            removeAllGlobalListeners: removeAllGlobalListeners
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
        let { id: id, 'aria-label': label, 'aria-labelledby': labelledBy } = props;
        // If there is both an aria-label and aria-labelledby,
        // combine them by pointing to the element itself.
        id = ($bdb11010cef70236$export$f680877a34711e37)(id);
        if (labelledBy && label) {
            let ids = new Set([
                id,
                ...labelledBy.trim().split(/\s+/)
            ]);
            labelledBy = [
                ...ids
            ].join(' ');
        } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(' ');
        // If no labels are provided, use the default
        if (!label && !labelledBy && defaultLabel) label = defaultLabel;
        return {
            id: id,
            'aria-label': label,
            'aria-labelledby': labelledBy
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
        const isInitialMount = (0, wp.element.useRef)(true);
        const lastDeps = (0, wp.element.useRef)(null);
        (0, wp.element.useEffect)(()=>{
            isInitialMount.current = true;
            return ()=>{
                isInitialMount.current = false;
            };
        }, []);
        (0, wp.element.useEffect)(()=>{
            if (isInitialMount.current) isInitialMount.current = false;
            else if (!lastDeps.current || dependencies.some((dep, i)=>!Object.is(dep, lastDeps[i]))) effect();
            lastDeps.current = dependencies;
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, dependencies);
    }

    function $9daab02d461809db$var$hasResizeObserver() {
        return typeof window.ResizeObserver !== 'undefined';
    }
    function $9daab02d461809db$export$683480f191c0e3ea(options) {
        const { ref: ref, onResize: onResize } = options;
        (0, wp.element.useEffect)(()=>{
            let element = ref === null || ref === void 0 ? void 0 : ref.current;
            if (!element) return;
            if (!$9daab02d461809db$var$hasResizeObserver()) {
                window.addEventListener('resize', onResize, false);
                return ()=>{
                    window.removeEventListener('resize', onResize, false);
                };
            } else {
                const resizeObserverInstance = new window.ResizeObserver((entries)=>{
                    if (!entries.length) return;
                    onResize();
                });
                resizeObserverInstance.observe(element);
                return ()=>{
                    if (element) resizeObserverInstance.unobserve(element);
                };
            }
        }, [
            onResize,
            ref
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            if (context && context.ref && ref) {
                context.ref.current = ref.current;
                return ()=>{
                    if (context.ref) context.ref.current = null;
                };
            }
        });
    }

    /*
     * Copyright 2024 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ function $cc38e7bd3fc7b213$export$2bb74740c4e19def(node, checkForOverflow) {
        let style = window.getComputedStyle(node);
        let isScrollable = /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
        if (isScrollable && checkForOverflow) isScrollable = node.scrollHeight !== node.clientHeight || node.scrollWidth !== node.clientWidth;
        return isScrollable;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $62d8ded9296f3872$export$cfa2225e87938781(node, checkForOverflow) {
        let scrollableNode = node;
        if (($cc38e7bd3fc7b213$export$2bb74740c4e19def)(scrollableNode, checkForOverflow)) scrollableNode = scrollableNode.parentElement;
        while(scrollableNode && !($cc38e7bd3fc7b213$export$2bb74740c4e19def)(scrollableNode, checkForOverflow))scrollableNode = scrollableNode.parentElement;
        return scrollableNode || document.scrollingElement || document.documentElement;
    }

    /*
     * Copyright 2024 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $a40c673dc9f6d9c7$export$94ed1c92c7beeb22(node, checkForOverflow) {
        const scrollParents = [];
        while(node && node !== document.documentElement){
            if (($cc38e7bd3fc7b213$export$2bb74740c4e19def)(node, checkForOverflow)) scrollParents.push(node);
            node = node.parentElement;
        }
        return scrollParents;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    let $ef06256079686ba0$var$descriptionId = 0;
    const $ef06256079686ba0$var$descriptionNodes = new Map();
    function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
        let [id, setId] = (0, wp.element.useState)();
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            if (!description) return;
            let desc = $ef06256079686ba0$var$descriptionNodes.get(description);
            if (!desc) {
                let id = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
                setId(id);
                let node = document.createElement('div');
                node.id = id;
                node.style.display = 'none';
                node.textContent = description;
                document.body.appendChild(node);
                desc = {
                    refCount: 0,
                    element: node
                };
                $ef06256079686ba0$var$descriptionNodes.set(description, desc);
            } else setId(desc.element.id);
            desc.refCount++;
            return ()=>{
                if (desc && --desc.refCount === 0) {
                    desc.element.remove();
                    $ef06256079686ba0$var$descriptionNodes.delete(description);
                }
            };
        }, [
            description
        ]);
        return {
            'aria-describedby': description ? id : undefined
        };
    }

    /*
     * Copyright 2021 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
        let handleEvent = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(handler);
        let isDisabled = handler == null;
        (0, wp.element.useEffect)(()=>{
            if (isDisabled || !ref.current) return;
            let element = ref.current;
            element.addEventListener(event, handleEvent, options);
            return ()=>{
                element.removeEventListener(event, handleEvent, options);
            };
        }, [
            ref,
            event,
            options,
            isDisabled,
            handleEvent
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
        let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'left');
        let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'top');
        let width = element.offsetWidth;
        let height = element.offsetHeight;
        let x = scrollView.scrollLeft;
        let y = scrollView.scrollTop;
        // Account for top/left border offsetting the scroll top/Left
        let { borderTopWidth: borderTopWidth, borderLeftWidth: borderLeftWidth } = getComputedStyle(scrollView);
        let borderAdjustedX = scrollView.scrollLeft + parseInt(borderLeftWidth, 10);
        let borderAdjustedY = scrollView.scrollTop + parseInt(borderTopWidth, 10);
        // Ignore end/bottom border via clientHeight/Width instead of offsetHeight/Width
        let maxX = borderAdjustedX + scrollView.clientWidth;
        let maxY = borderAdjustedY + scrollView.clientHeight;
        if (offsetX <= x) x = offsetX - parseInt(borderLeftWidth, 10);
        else if (offsetX + width > maxX) x += offsetX + width - maxX;
        if (offsetY <= borderAdjustedY) y = offsetY - parseInt(borderTopWidth, 10);
        else if (offsetY + height > maxY) y += offsetY + height - maxY;
        scrollView.scrollLeft = x;
        scrollView.scrollTop = y;
    }
    /**
     * Computes the offset left or top from child to ancestor by accumulating
     * offsetLeft or offsetTop through intervening offsetParents.
     */ function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
        const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';
        let sum = 0;
        while(child.offsetParent){
            sum += child[prop];
            if (child.offsetParent === ancestor) break;
            else if (child.offsetParent.contains(ancestor)) {
                // If the ancestor is not `position:relative`, then we stop at
                // _its_ offset parent, and we subtract off _its_ offset, so that
                // we end up with the proper offset from child to ancestor.
                sum -= ancestor[prop];
                break;
            }
            child = child.offsetParent;
        }
        return sum;
    }
    function $2f04cbc44ee30ce0$export$c826860796309d1b(targetElement, opts) {
        if (document.contains(targetElement)) {
            let root = document.scrollingElement || document.documentElement;
            let isScrollPrevented = window.getComputedStyle(root).overflow === 'hidden';
            // If scrolling is not currently prevented then we aren’t in a overlay nor is a overlay open, just use element.scrollIntoView to bring the element into view
            if (!isScrollPrevented) {
                var // use scrollIntoView({block: 'nearest'}) instead of .focus to check if the element is fully in view or not since .focus()
                // won't cause a scroll if the element is already focused and doesn't behave consistently when an element is partially out of view horizontally vs vertically
                _targetElement_scrollIntoView;
                let { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();
                targetElement === null || targetElement === void 0 ? void 0 : (_targetElement_scrollIntoView = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView === void 0 ? void 0 : _targetElement_scrollIntoView.call(targetElement, {
                    block: 'nearest'
                });
                let { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();
                // Account for sub pixel differences from rounding
                if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {
                    var _opts_containingElement_scrollIntoView, _opts_containingElement, _targetElement_scrollIntoView1;
                    opts === null || opts === void 0 ? void 0 : (_opts_containingElement = opts.containingElement) === null || _opts_containingElement === void 0 ? void 0 : (_opts_containingElement_scrollIntoView = _opts_containingElement.scrollIntoView) === null || _opts_containingElement_scrollIntoView === void 0 ? void 0 : _opts_containingElement_scrollIntoView.call(_opts_containingElement, {
                        block: 'center',
                        inline: 'center'
                    });
                    (_targetElement_scrollIntoView1 = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView1 === void 0 ? void 0 : _targetElement_scrollIntoView1.call(targetElement, {
                        block: 'nearest'
                    });
                }
            } else {
                let scrollParents = ($a40c673dc9f6d9c7$export$94ed1c92c7beeb22)(targetElement);
                // If scrolling is prevented, we don't want to scroll the body since it might move the overlay partially offscreen and the user can't scroll it back into view.
                for (let scrollParent of scrollParents)$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollParent, targetElement);
            }
        }
    }

    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $6a7db85432448f7f$export$60278871457622de(event) {
        // JAWS/NVDA with Firefox.
        if (event.mozInputSource === 0 && event.isTrusted) return true;
        // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
        // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
        // to detect TalkBack virtual clicks.
        if (($c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === 'click' && event.buttons === 1;
        return event.detail === 0 && !event.pointerType;
    }
    function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
        // If the pointer size is zero, then we assume it's from a screen reader.
        // Android TalkBack double tap will sometimes return a event with width and height of 1
        // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
        // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
        // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
        // Talkback double tap from Windows Firefox touch screen press
        return !($c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';
    }

    /*
     * Copyright 2023 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ /* eslint-disable rulesdir/pure-render */ 
    function $5a387cc49350e6db$export$722debc0e56fea39(value, isEqual) {
        // Using a ref during render is ok here because it's only an optimization – both values are equivalent.
        // If a render is thrown away, it'll still work the same no matter if the next render is the same or not.
        let lastValue = (0, wp.element.useRef)(null);
        if (value && lastValue.current && isEqual(value, lastValue.current)) value = lastValue.current;
        lastValue.current = value;
        return value;
    }

    /*
     * Copyright 2023 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $99facab73266f662$export$5add1d006293d136(ref, initialValue, onReset) {
        let resetValue = (0, wp.element.useRef)(initialValue);
        let handleReset = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{
            if (onReset) onReset(resetValue.current);
        });
        (0, wp.element.useEffect)(()=>{
            var _ref_current;
            let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
            form === null || form === void 0 ? void 0 : form.addEventListener('reset', handleReset);
            return ()=>{
                form === null || form === void 0 ? void 0 : form.removeEventListener('reset', handleReset);
            };
        }, [
            ref,
            handleReset
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {
        let [stateValue, setStateValue] = (0, wp.element.useState)(value || defaultValue);
        let isControlledRef = (0, wp.element.useRef)(value !== undefined);
        let isControlled = value !== undefined;
        (0, wp.element.useEffect)(()=>{
            let wasControlled = isControlledRef.current;
            if (wasControlled !== isControlled) console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);
            isControlledRef.current = isControlled;
        }, [
            isControlled
        ]);
        let currentValue = isControlled ? value : stateValue;
        let setValue = (0, wp.element.useCallback)((value, ...args)=>{
            let onChangeCaller = (value, ...onChangeArgs)=>{
                if (onChange) {
                    if (!Object.is(currentValue, value)) onChange(value, ...onChangeArgs);
                }
                if (!isControlled) // If uncontrolled, mutate the currentValue local variable so that
                // calling setState multiple times with the same value only emits onChange once.
                // We do not use a ref for this because we specifically _do_ want the value to
                // reset every render, and assigning to a ref in render breaks aborted suspended renders.
                // eslint-disable-next-line react-hooks/exhaustive-deps
                currentValue = value;
            };
            if (typeof value === 'function') {
                console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');
                // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates
                // when someone using useControlledState calls setControlledState(myFunc)
                // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc
                // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning
                // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same
                let updateFunction = (oldValue, ...functionArgs)=>{
                    let interceptedValue = value(isControlled ? currentValue : oldValue, ...functionArgs);
                    onChangeCaller(interceptedValue, ...args);
                    if (!isControlled) return interceptedValue;
                    return oldValue;
                };
                setStateValue(updateFunction);
            } else {
                if (!isControlled) setStateValue(value);
                onChangeCaller(value, ...args);
            }
        }, [
            isControlled,
            currentValue,
            onChange
        ]);
        return [
            currentValue,
            setValue
        ];
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ /**
     * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.
     */ function $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
        let newValue = Math.min(Math.max(value, min), max);
        return newValue;
    }
    function $9446cca9a3875146$export$e1a7b8e69ef6c52f(value, step) {
        let roundedValue = value;
        let stepString = step.toString();
        let pointIndex = stepString.indexOf('.');
        let precision = pointIndex >= 0 ? stepString.length - pointIndex : 0;
        if (precision > 0) {
            let pow = Math.pow(10, precision);
            roundedValue = Math.round(roundedValue * pow) / pow;
        }
        return roundedValue;
    }
    function $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {
        min = Number(min);
        max = Number(max);
        let remainder = (value - (isNaN(min) ? 0 : min)) % step;
        let snappedValue = $9446cca9a3875146$export$e1a7b8e69ef6c52f(Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder, step);
        if (!isNaN(min)) {
            if (snappedValue < min) snappedValue = min;
            else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor($9446cca9a3875146$export$e1a7b8e69ef6c52f((max - min) / step, step)) * step;
        } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor($9446cca9a3875146$export$e1a7b8e69ef6c52f(max / step, step)) * step;
        // correct floating point behavior by rounding to step precision
        snappedValue = $9446cca9a3875146$export$e1a7b8e69ef6c52f(snappedValue, step);
        return snappedValue;
    }
    function $9446cca9a3875146$export$b6268554fba451f(value, digits, base = 10) {
        const pow = Math.pow(base, digits);
        return Math.round(value * pow) / pow;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
    // rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually
    let $14c0b72509d70225$var$state = 'default';
    let $14c0b72509d70225$var$savedUserSelect = '';
    let $14c0b72509d70225$var$modifiedElementMap = new WeakMap();
    function $14c0b72509d70225$export$16a4697467175487(target) {
        if (($c87311424ea30a05$export$fedb369cb70207f1)()) {
            if ($14c0b72509d70225$var$state === 'default') {
                // eslint-disable-next-line no-restricted-globals
                const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(target);
                $14c0b72509d70225$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;
                documentObject.documentElement.style.webkitUserSelect = 'none';
            }
            $14c0b72509d70225$var$state = 'disabled';
        } else if (target instanceof HTMLElement || target instanceof SVGElement) {
            // If not iOS, store the target's original user-select and change to user-select: none
            // Ignore state since it doesn't apply for non iOS
            $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
            target.style.userSelect = 'none';
        }
    }
    function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
        if (($c87311424ea30a05$export$fedb369cb70207f1)()) {
            // If the state is already default, there's nothing to do.
            // If it is restoring, then there's no need to queue a second restore.
            if ($14c0b72509d70225$var$state !== 'disabled') return;
            $14c0b72509d70225$var$state = 'restoring';
            // There appears to be a delay on iOS where selection still might occur
            // after pointer up, so wait a bit before removing user-select.
            setTimeout(()=>{
                // Wait for any CSS transitions to complete so we don't recompute style
                // for the whole page in the middle of the animation and cause jank.
                ($bbed8b41f857bcc0$export$24490316f764c430)(()=>{
                    // Avoid race conditions
                    if ($14c0b72509d70225$var$state === 'restoring') {
                        // eslint-disable-next-line no-restricted-globals
                        const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(target);
                        if (documentObject.documentElement.style.webkitUserSelect === 'none') documentObject.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';
                        $14c0b72509d70225$var$savedUserSelect = '';
                        $14c0b72509d70225$var$state = 'default';
                    }
                });
            }, 300);
        } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any
        // Ignore state since it doesn't apply for non iOS
        {
            if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
                let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
                if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;
                if (target.getAttribute('style') === '') target.removeAttribute('style');
                $14c0b72509d70225$var$modifiedElementMap.delete(target);
            }
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (wp.element).createContext({
        register: ()=>{}
    });
    $ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';

    function _class_apply_descriptor_get(receiver, descriptor) {
        if (descriptor.get) return descriptor.get.call(receiver);

        return descriptor.value;
    }

    function _class_extract_field_descriptor(receiver, privateMap, action) {
        if (!privateMap.has(receiver)) throw new TypeError("attempted to " + action + " private field on non-instance");

        return privateMap.get(receiver);
    }

    function _class_private_field_get(receiver, privateMap) {
        var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
        return _class_apply_descriptor_get(receiver, descriptor);
    }

    function _check_private_redeclaration(obj, privateCollection) {
        if (privateCollection.has(obj)) {
            throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
    }

    function _class_private_field_init(obj, privateMap, value) {
        _check_private_redeclaration(obj, privateMap);
        privateMap.set(obj, value);
    }

    function _class_apply_descriptor_set(receiver, descriptor, value) {
        if (descriptor.set) descriptor.set.call(receiver, value);
        else {
            if (!descriptor.writable) {
                // This should only throw in strict mode, but class bodies are
                // always strict and private fields can only be used inside
                // class bodies.
                throw new TypeError("attempted to set read only private field");
            }
            descriptor.value = value;
        }
    }

    function _class_private_field_set(receiver, privateMap, value) {
        var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
        _class_apply_descriptor_set(receiver, descriptor, value);
        return value;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from react.
    // Original licensing for the following can be found in the
    // NOTICE file in the root directory of this source tree.
    // See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions







    function $f6c31cce2adf654f$var$usePressResponderContext(props) {
        // Consume context from <PressResponder> and merge with props.
        let context = (0, wp.element.useContext)(($ae1eeba8b9eafd08$export$5165eccb35aaadb5));
        if (context) {
            let { register: register, ...contextProps } = context;
            props = ($3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
            register();
        }
        ($e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, props.ref);
        return props;
    }
    var $f6c31cce2adf654f$var$_shouldStopPropagation = /*#__PURE__*/ new WeakMap();
    class $f6c31cce2adf654f$var$PressEvent {
        continuePropagation() {
            (_class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);
        }
        get shouldStopPropagation() {
            return (_class_private_field_get)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);
        }
        constructor(type, pointerType, originalEvent){
            (_class_private_field_init)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {
                writable: true,
                value: void 0
            });
            (_class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);
            this.type = type;
            this.pointerType = pointerType;
            this.target = originalEvent.currentTarget;
            this.shiftKey = originalEvent.shiftKey;
            this.metaKey = originalEvent.metaKey;
            this.ctrlKey = originalEvent.ctrlKey;
            this.altKey = originalEvent.altKey;
        }
    }
    const $f6c31cce2adf654f$var$LINK_CLICKED = Symbol('linkClicked');
    function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
        let { onPress: onPress, onPressChange: onPressChange, onPressStart: onPressStart, onPressEnd: onPressEnd, onPressUp: onPressUp, isDisabled: isDisabled, isPressed: isPressedProp, preventFocusOnPress: preventFocusOnPress, shouldCancelOnPointerExit: shouldCancelOnPointerExit, allowTextSelectionOnPress: allowTextSelectionOnPress, // eslint-disable-next-line @typescript-eslint/no-unused-vars
        ref: _, ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);
        let [isPressed, setPressed] = (0, wp.element.useState)(false);
        let ref = (0, wp.element.useRef)({
            isPressed: false,
            ignoreEmulatedMouseEvents: false,
            ignoreClickAfterPress: false,
            didFirePressStart: false,
            isTriggeringEvent: false,
            activePointerId: null,
            target: null,
            isOverTarget: false,
            pointerType: null
        });
        let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
        let triggerPressStart = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType)=>{
            let state = ref.current;
            if (isDisabled || state.didFirePressStart) return false;
            let shouldStopPropagation = true;
            state.isTriggeringEvent = true;
            if (onPressStart) {
                let event = new $f6c31cce2adf654f$var$PressEvent('pressstart', pointerType, originalEvent);
                onPressStart(event);
                shouldStopPropagation = event.shouldStopPropagation;
            }
            if (onPressChange) onPressChange(true);
            state.isTriggeringEvent = false;
            state.didFirePressStart = true;
            setPressed(true);
            return shouldStopPropagation;
        });
        let triggerPressEnd = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, wasPressed = true)=>{
            let state = ref.current;
            if (!state.didFirePressStart) return false;
            state.ignoreClickAfterPress = true;
            state.didFirePressStart = false;
            state.isTriggeringEvent = true;
            let shouldStopPropagation = true;
            if (onPressEnd) {
                let event = new $f6c31cce2adf654f$var$PressEvent('pressend', pointerType, originalEvent);
                onPressEnd(event);
                shouldStopPropagation = event.shouldStopPropagation;
            }
            if (onPressChange) onPressChange(false);
            setPressed(false);
            if (onPress && wasPressed && !isDisabled) {
                let event = new $f6c31cce2adf654f$var$PressEvent('press', pointerType, originalEvent);
                onPress(event);
                shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);
            }
            state.isTriggeringEvent = false;
            return shouldStopPropagation;
        });
        let triggerPressUp = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType)=>{
            let state = ref.current;
            if (isDisabled) return false;
            if (onPressUp) {
                state.isTriggeringEvent = true;
                let event = new $f6c31cce2adf654f$var$PressEvent('pressup', pointerType, originalEvent);
                onPressUp(event);
                state.isTriggeringEvent = false;
                return event.shouldStopPropagation;
            }
            return true;
        });
        let cancel = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
            let state = ref.current;
            if (state.isPressed && state.target) {
                if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
                state.isPressed = false;
                state.isOverTarget = false;
                state.activePointerId = null;
                state.pointerType = null;
                removeAllGlobalListeners();
                if (!allowTextSelectionOnPress) ($14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
            }
        });
        let cancelOnPointerExit = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
            if (shouldCancelOnPointerExit) cancel(e);
        });
        let pressProps = (0, wp.element.useMemo)(()=>{
            let state = ref.current;
            let pressProps = {
                onKeyDown (e) {
                    if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
                        var _state_metaKeyEvents;
                        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
                        // If the event is repeating, it may have started on a different element
                        // after which focus moved to the current element. Ignore these events and
                        // only handle the first key down event.
                        let shouldStopPropagation = true;
                        if (!state.isPressed && !e.repeat) {
                            state.target = e.currentTarget;
                            state.isPressed = true;
                            shouldStopPropagation = triggerPressStart(e, 'keyboard');
                            // Focus may move before the key up event, so register the event on the document
                            // instead of the same element where the key down event occurred. Make it capturing so that it will trigger
                            // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.
                            let originalTarget = e.currentTarget;
                            let pressUp = (e)=>{
                                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');
                            };
                            addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'keyup', ($ff5963eb1fccf552$export$e08e3b67e392101e)(pressUp, onKeyUp), true);
                        }
                        if (shouldStopPropagation) e.stopPropagation();
                        // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.
                        // macOS has a bug where keyup events are not fired while the Meta key is down.
                        // When the Meta key itself is released we will get an event for that, and we'll act as if
                        // all of these other keys were released as well.
                        // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524
                        // https://bugs.webkit.org/show_bug.cgi?id=55291
                        // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553
                        if (e.metaKey && ($c87311424ea30a05$export$9ac100e40613ea10)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);
                    } else if (e.key === 'Meta') state.metaKeyEvents = new Map();
                },
                onClick (e) {
                    if (e && !e.currentTarget.contains(e.target)) return;
                    if (e && e.button === 0 && !state.isTriggeringEvent && !($ea8dcbcb9ea1b556$export$95185d699e05d4d7).isOpening) {
                        let shouldStopPropagation = true;
                        if (isDisabled) e.preventDefault();
                        // If triggered from a screen reader or by using element.click(),
                        // trigger as if it were a keyboard click.
                        if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || ($6a7db85432448f7f$export$60278871457622de)(e.nativeEvent))) {
                            // Ensure the element receives focus (VoiceOver on iOS does not do this)
                            if (!isDisabled && !preventFocusOnPress) ($7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
                            let stopPressStart = triggerPressStart(e, 'virtual');
                            let stopPressUp = triggerPressUp(e, 'virtual');
                            let stopPressEnd = triggerPressEnd(e, 'virtual');
                            shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;
                        }
                        state.ignoreEmulatedMouseEvents = false;
                        state.ignoreClickAfterPress = false;
                        if (shouldStopPropagation) e.stopPropagation();
                    }
                }
            };
            let onKeyUp = (e)=>{
                var _state_metaKeyEvents;
                if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
                    var _state_metaKeyEvents1;
                    if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
                    let target = e.target;
                    triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));
                    removeAllGlobalListeners();
                    // If a link was triggered with a key other than Enter, open the URL ourselves.
                    // This means the link has a role override, and the default browser behavior
                    // only applies when using the Enter key.
                    if (e.key !== 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {
                        // Store a hidden property on the event so we only trigger link click once,
                        // even if there are multiple usePress instances attached to the element.
                        e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;
                        ($ea8dcbcb9ea1b556$export$95185d699e05d4d7)(state.target, e, false);
                    }
                    state.isPressed = false;
                    (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);
                } else if (e.key === 'Meta' && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {
                    var _state_target;
                    // If we recorded keydown events that occurred while the Meta key was pressed,
                    // and those haven't received keyup events already, fire keyup events ourselves.
                    // See comment above for more info about the macOS bug causing this.
                    let events = state.metaKeyEvents;
                    state.metaKeyEvents = undefined;
                    for (let event of events.values())(_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent('keyup', event));
                }
            };
            if (typeof PointerEvent !== 'undefined') {
                pressProps.onPointerDown = (e)=>{
                    // Only handle left clicks, and ignore events that bubbled through portals.
                    if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
                    // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
                    // Ignore and let the onClick handler take care of it instead.
                    // https://bugs.webkit.org/show_bug.cgi?id=222627
                    // https://bugs.webkit.org/show_bug.cgi?id=223202
                    if (($6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent)) {
                        state.pointerType = 'virtual';
                        return;
                    }
                    // Due to browser inconsistencies, especially on mobile browsers, we prevent
                    // default on pointer down and handle focusing the pressable element ourselves.
                    if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
                    state.pointerType = e.pointerType;
                    let shouldStopPropagation = true;
                    if (!state.isPressed) {
                        state.isPressed = true;
                        state.isOverTarget = true;
                        state.activePointerId = e.pointerId;
                        state.target = e.currentTarget;
                        if (!isDisabled && !preventFocusOnPress) ($7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
                        if (!allowTextSelectionOnPress) ($14c0b72509d70225$export$16a4697467175487)(state.target);
                        shouldStopPropagation = triggerPressStart(e, state.pointerType);
                        addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'pointermove', onPointerMove, false);
                        addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'pointerup', onPointerUp, false);
                        addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'pointercancel', onPointerCancel, false);
                    }
                    if (shouldStopPropagation) e.stopPropagation();
                };
                pressProps.onMouseDown = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    if (e.button === 0) {
                        // Chrome and Firefox on touch Windows devices require mouse down events
                        // to be canceled in addition to pointer events, or an extra asynchronous
                        // focus event will be fired.
                        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
                        e.stopPropagation();
                    }
                };
                pressProps.onPointerUp = (e)=>{
                    // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
                    if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;
                    // Only handle left clicks
                    // Safari on iOS sometimes fires pointerup events, even
                    // when the touch isn't over the target, so double check.
                    if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
                };
                // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
                // Use pointer move events instead to implement our own hit testing.
                // See https://bugs.webkit.org/show_bug.cgi?id=199803
                let onPointerMove = (e)=>{
                    if (e.pointerId !== state.activePointerId) return;
                    if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
                        if (!state.isOverTarget && state.pointerType != null) {
                            state.isOverTarget = true;
                            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
                        }
                    } else if (state.target && state.isOverTarget && state.pointerType != null) {
                        state.isOverTarget = false;
                        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
                        cancelOnPointerExit(e);
                    }
                };
                let onPointerUp = (e)=>{
                    if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {
                        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
                        else if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
                        state.isPressed = false;
                        state.isOverTarget = false;
                        state.activePointerId = null;
                        state.pointerType = null;
                        removeAllGlobalListeners();
                        if (!allowTextSelectionOnPress) ($14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
                    }
                };
                let onPointerCancel = (e)=>{
                    cancel(e);
                };
                pressProps.onDragStart = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.
                    cancel(e);
                };
            } else {
                pressProps.onMouseDown = (e)=>{
                    // Only handle left clicks
                    if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
                    // Due to browser inconsistencies, especially on mobile browsers, we prevent
                    // default on mouse down and handle focusing the pressable element ourselves.
                    if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
                    if (state.ignoreEmulatedMouseEvents) {
                        e.stopPropagation();
                        return;
                    }
                    state.isPressed = true;
                    state.isOverTarget = true;
                    state.target = e.currentTarget;
                    state.pointerType = ($6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) ? 'virtual' : 'mouse';
                    if (!isDisabled && !preventFocusOnPress) ($7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
                    let shouldStopPropagation = triggerPressStart(e, state.pointerType);
                    if (shouldStopPropagation) e.stopPropagation();
                    addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'mouseup', onMouseUp, false);
                };
                pressProps.onMouseEnter = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    let shouldStopPropagation = true;
                    if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
                        state.isOverTarget = true;
                        shouldStopPropagation = triggerPressStart(e, state.pointerType);
                    }
                    if (shouldStopPropagation) e.stopPropagation();
                };
                pressProps.onMouseLeave = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    let shouldStopPropagation = true;
                    if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
                        state.isOverTarget = false;
                        shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
                        cancelOnPointerExit(e);
                    }
                    if (shouldStopPropagation) e.stopPropagation();
                };
                pressProps.onMouseUp = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || 'mouse');
                };
                let onMouseUp = (e)=>{
                    // Only handle left clicks
                    if (e.button !== 0) return;
                    state.isPressed = false;
                    removeAllGlobalListeners();
                    if (state.ignoreEmulatedMouseEvents) {
                        state.ignoreEmulatedMouseEvents = false;
                        return;
                    }
                    if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
                    else if (state.target && state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
                    state.isOverTarget = false;
                };
                pressProps.onTouchStart = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
                    if (!touch) return;
                    state.activePointerId = touch.identifier;
                    state.ignoreEmulatedMouseEvents = true;
                    state.isOverTarget = true;
                    state.isPressed = true;
                    state.target = e.currentTarget;
                    state.pointerType = 'touch';
                    // Due to browser inconsistencies, especially on mobile browsers, we prevent default
                    // on the emulated mouse event and handle focusing the pressable element ourselves.
                    if (!isDisabled && !preventFocusOnPress) ($7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
                    if (!allowTextSelectionOnPress) ($14c0b72509d70225$export$16a4697467175487)(state.target);
                    let shouldStopPropagation = triggerPressStart(e, state.pointerType);
                    if (shouldStopPropagation) e.stopPropagation();
                    addGlobalListener(($431fbd86ca7dc216$export$f21a1ffae260145a)(e.currentTarget), 'scroll', onScroll, true);
                };
                pressProps.onTouchMove = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    if (!state.isPressed) {
                        e.stopPropagation();
                        return;
                    }
                    let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
                    let shouldStopPropagation = true;
                    if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
                        if (!state.isOverTarget && state.pointerType != null) {
                            state.isOverTarget = true;
                            shouldStopPropagation = triggerPressStart(e, state.pointerType);
                        }
                    } else if (state.isOverTarget && state.pointerType != null) {
                        state.isOverTarget = false;
                        shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
                        cancelOnPointerExit(e);
                    }
                    if (shouldStopPropagation) e.stopPropagation();
                };
                pressProps.onTouchEnd = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    if (!state.isPressed) {
                        e.stopPropagation();
                        return;
                    }
                    let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
                    let shouldStopPropagation = true;
                    if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {
                        triggerPressUp(e, state.pointerType);
                        shouldStopPropagation = triggerPressEnd(e, state.pointerType);
                    } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
                    if (shouldStopPropagation) e.stopPropagation();
                    state.isPressed = false;
                    state.activePointerId = null;
                    state.isOverTarget = false;
                    state.ignoreEmulatedMouseEvents = true;
                    if (state.target && !allowTextSelectionOnPress) ($14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
                    removeAllGlobalListeners();
                };
                pressProps.onTouchCancel = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    e.stopPropagation();
                    if (state.isPressed) cancel(e);
                };
                let onScroll = (e)=>{
                    if (state.isPressed && e.target.contains(state.target)) cancel({
                        currentTarget: state.target,
                        shiftKey: false,
                        ctrlKey: false,
                        metaKey: false,
                        altKey: false
                    });
                };
                pressProps.onDragStart = (e)=>{
                    if (!e.currentTarget.contains(e.target)) return;
                    cancel(e);
                };
            }
            return pressProps;
        }, [
            addGlobalListener,
            isDisabled,
            preventFocusOnPress,
            removeAllGlobalListeners,
            allowTextSelectionOnPress,
            cancel,
            cancelOnPointerExit,
            triggerPressEnd,
            triggerPressStart,
            triggerPressUp
        ]);
        // Remove user-select: none in case component unmounts immediately after pressStart
        // eslint-disable-next-line arrow-body-style
        (0, wp.element.useEffect)(()=>{
            return ()=>{
                var _ref_current_target;
                if (!allowTextSelectionOnPress) // eslint-disable-next-line react-hooks/exhaustive-deps
                ($14c0b72509d70225$export$b0d6fa1ab32e3295)((_ref_current_target = ref.current.target) !== null && _ref_current_target !== void 0 ? _ref_current_target : undefined);
            };
        }, [
            allowTextSelectionOnPress
        ]);
        return {
            isPressed: isPressedProp || isPressed,
            pressProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, pressProps)
        };
    }
    function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
        return target.tagName === 'A' && target.hasAttribute('href');
    }
    function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
        const { key: key, code: code } = event;
        const element = currentTarget;
        const role = element.getAttribute('role');
        // Accessibility for keyboards. Space and Enter only.
        // "Spacebar" is for IE 11
        return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof ($431fbd86ca7dc216$export$f21a1ffae260145a)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof ($431fbd86ca7dc216$export$f21a1ffae260145a)(element).HTMLTextAreaElement || element.isContentEditable) && // Links should only trigger with Enter key
        !((role === 'link' || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== 'Enter');
    }
    function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
        const { targetTouches: targetTouches } = event;
        if (targetTouches.length > 0) return targetTouches[0];
        return null;
    }
    function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
        const changedTouches = event.changedTouches;
        for(let i = 0; i < changedTouches.length; i++){
            const touch = changedTouches[i];
            if (touch.identifier === pointerId) return touch;
        }
        return null;
    }
    function $f6c31cce2adf654f$var$createEvent(target, e) {
        return {
            currentTarget: target,
            shiftKey: e.shiftKey,
            ctrlKey: e.ctrlKey,
            metaKey: e.metaKey,
            altKey: e.altKey
        };
    }
    function $f6c31cce2adf654f$var$getPointClientRect(point) {
        let offsetX = 0;
        let offsetY = 0;
        if (point.width !== undefined) offsetX = point.width / 2;
        else if (point.radiusX !== undefined) offsetX = point.radiusX;
        if (point.height !== undefined) offsetY = point.height / 2;
        else if (point.radiusY !== undefined) offsetY = point.radiusY;
        return {
            top: point.clientY - offsetY,
            right: point.clientX + offsetX,
            bottom: point.clientY + offsetY,
            left: point.clientX - offsetX
        };
    }
    function $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
        // check if they cannot overlap on x axis
        if (a.left > b.right || b.left > a.right) return false;
        // check if they cannot overlap on y axis
        if (a.top > b.bottom || b.top > a.bottom) return false;
        return true;
    }
    function $f6c31cce2adf654f$var$isOverTarget(point, target) {
        let rect = target.getBoundingClientRect();
        let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
        return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
    }
    function $f6c31cce2adf654f$var$shouldPreventDefault(target) {
        // We cannot prevent default if the target is a draggable element.
        return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');
    }
    function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
        if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);
        if (target instanceof HTMLButtonElement) return target.type !== 'submit' && target.type !== 'reset';
        if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;
        return true;
    }
    const $f6c31cce2adf654f$var$nonTextInputTypes = new Set([
        'checkbox',
        'radio',
        'range',
        'color',
        'file',
        'image',
        'button',
        'submit',
        'reset'
    ]);
    function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
        // Only space should toggle checkboxes and radios, not enter.
        return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
    }

    function $f1ab8c75478c6f73$export$cf75428e0b9ed1ea({ children: children }) {
        let context = (0, wp.element.useMemo)(()=>({
                register: ()=>{}
            }), []);
        return /*#__PURE__*/ (wp.element).createElement(($ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
            value: context
        }, children);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    class $8a9cb279dc87e130$export$905e7fc544a71f36 {
        isDefaultPrevented() {
            return this.nativeEvent.defaultPrevented;
        }
        preventDefault() {
            this.defaultPrevented = true;
            this.nativeEvent.preventDefault();
        }
        stopPropagation() {
            this.nativeEvent.stopPropagation();
            this.isPropagationStopped = ()=>true;
        }
        isPropagationStopped() {
            return false;
        }
        persist() {}
        constructor(type, nativeEvent){
            this.nativeEvent = nativeEvent;
            this.target = nativeEvent.target;
            this.currentTarget = nativeEvent.currentTarget;
            this.relatedTarget = nativeEvent.relatedTarget;
            this.bubbles = nativeEvent.bubbles;
            this.cancelable = nativeEvent.cancelable;
            this.defaultPrevented = nativeEvent.defaultPrevented;
            this.eventPhase = nativeEvent.eventPhase;
            this.isTrusted = nativeEvent.isTrusted;
            this.timeStamp = nativeEvent.timeStamp;
            this.type = type;
        }
    }
    function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
        let stateRef = (0, wp.element.useRef)({
            isFocused: false,
            observer: null
        });
        // Clean up MutationObserver on unmount. See below.
        // eslint-disable-next-line arrow-body-style
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            const state = stateRef.current;
            return ()=>{
                if (state.observer) {
                    state.observer.disconnect();
                    state.observer = null;
                }
            };
        }, []);
        let dispatchBlur = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
            onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
        });
        // This function is called during a React onFocus event.
        return (0, wp.element.useCallback)((e)=>{
            // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
            // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
            // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
            // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
            if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
                stateRef.current.isFocused = true;
                let target = e.target;
                let onBlurHandler = (e)=>{
                    stateRef.current.isFocused = false;
                    if (target.disabled) // For backward compatibility, dispatch a (fake) React synthetic event.
                    dispatchBlur(new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));
                    // We no longer need the MutationObserver once the target is blurred.
                    if (stateRef.current.observer) {
                        stateRef.current.observer.disconnect();
                        stateRef.current.observer = null;
                    }
                };
                target.addEventListener('focusout', onBlurHandler, {
                    once: true
                });
                stateRef.current.observer = new MutationObserver(()=>{
                    if (stateRef.current.isFocused && target.disabled) {
                        var _stateRef_current_observer;
                        (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
                        let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
                        target.dispatchEvent(new FocusEvent('blur', {
                            relatedTarget: relatedTargetEl
                        }));
                        target.dispatchEvent(new FocusEvent('focusout', {
                            bubbles: true,
                            relatedTarget: relatedTargetEl
                        }));
                    }
                });
                stateRef.current.observer.observe(target, {
                    attributes: true,
                    attributeFilter: [
                        'disabled'
                    ]
                });
            }
        }, [
            dispatchBlur
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from react.
    // Original licensing for the following can be found in the
    // NOTICE file in the root directory of this source tree.
    // See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions



    function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
        let { isDisabled: isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange: onFocusChange } = props;
        const onBlur = (0, wp.element.useCallback)((e)=>{
            if (e.target === e.currentTarget) {
                if (onBlurProp) onBlurProp(e);
                if (onFocusChange) onFocusChange(false);
                return true;
            }
        }, [
            onBlurProp,
            onFocusChange
        ]);
        const onSyntheticFocus = ($8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
        const onFocus = (0, wp.element.useCallback)((e)=>{
            // Double check that document.activeElement actually matches e.target in case a previously chained
            // focus handler already moved focus somewhere else.
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(e.target);
            if (e.target === e.currentTarget && ownerDocument.activeElement === e.target) {
                if (onFocusProp) onFocusProp(e);
                if (onFocusChange) onFocusChange(true);
                onSyntheticFocus(e);
            }
        }, [
            onFocusChange,
            onFocusProp,
            onSyntheticFocus
        ]);
        return {
            focusProps: {
                onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,
                onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : undefined
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from react.
    // Original licensing for the following can be found in the
    // NOTICE file in the root directory of this source tree.
    // See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions



    let $507fabe10e71c6fb$var$currentModality = null;
    let $507fabe10e71c6fb$var$changeHandlers = new Set();
    let $507fabe10e71c6fb$export$d90243b58daecda7 = new Map(); // We use a map here to support setting event listeners across multiple document objects.
    let $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    let $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
    // Only Tab or Esc keys will make focus visible on text input elements
    const $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
        Tab: true,
        Escape: true
    };
    function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
        for (let handler of $507fabe10e71c6fb$var$changeHandlers)handler(modality, e);
    }
    /**
     * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
     */ function $507fabe10e71c6fb$var$isValidKey(e) {
        // Control and Shift keys trigger when navigating back to the tab with keyboard.
        return !(e.metaKey || !($c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');
    }
    function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
        if ($507fabe10e71c6fb$var$isValidKey(e)) {
            $507fabe10e71c6fb$var$currentModality = 'keyboard';
            $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);
        }
    }
    function $507fabe10e71c6fb$var$handlePointerEvent(e) {
        $507fabe10e71c6fb$var$currentModality = 'pointer';
        if (e.type === 'mousedown' || e.type === 'pointerdown') {
            $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
            $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);
        }
    }
    function $507fabe10e71c6fb$var$handleClickEvent(e) {
        if (($6a7db85432448f7f$export$60278871457622de)(e)) {
            $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
            $507fabe10e71c6fb$var$currentModality = 'virtual';
        }
    }
    function $507fabe10e71c6fb$var$handleFocusEvent(e) {
        // Firefox fires two extra focus events when the user first clicks into an iframe:
        // first on the window, then on the document. We ignore these events so they don't
        // cause keyboard focus rings to appear.
        if (e.target === window || e.target === document) return;
        // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
        // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
        if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
            $507fabe10e71c6fb$var$currentModality = 'virtual';
            $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);
        }
        $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
        $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
    }
    function $507fabe10e71c6fb$var$handleWindowBlur() {
        // When the window is blurred, reset state. This is necessary when tabbing out of the window,
        // for example, since a subsequent focus event won't be fired.
        $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
        $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
    }
    /**
     * Setup global event listeners to control when keyboard focus style should be visible.
     */ function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) {
        if (typeof window === 'undefined' || $507fabe10e71c6fb$export$d90243b58daecda7.get(($431fbd86ca7dc216$export$f21a1ffae260145a)(element))) return;
        const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
        const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        // Programmatic focus() calls shouldn't affect the current input modality.
        // However, we need to detect other cases when a focus event occurs without
        // a preceding user event (e.g. screen reader focus). Overriding the focus
        // method on HTMLElement.prototype is a bit hacky, but works.
        let focus = windowObject.HTMLElement.prototype.focus;
        windowObject.HTMLElement.prototype.focus = function() {
            $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
            focus.apply(this, arguments);
        };
        documentObject.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
        documentObject.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
        documentObject.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);
        // Register focus events on the window so they are sure to happen
        // before React's event listeners (registered on the document).
        windowObject.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);
        windowObject.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);
        if (typeof PointerEvent !== 'undefined') {
            documentObject.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);
        } else {
            documentObject.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);
        }
        // Add unmount handler
        windowObject.addEventListener('beforeunload', ()=>{
            $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element);
        }, {
            once: true
        });
        $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {
            focus: focus
        });
    }
    const $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element, loadListener)=>{
        const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
        const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        if (loadListener) documentObject.removeEventListener('DOMContentLoaded', loadListener);
        if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;
        windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;
        documentObject.removeEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
        documentObject.removeEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
        documentObject.removeEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);
        windowObject.removeEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);
        windowObject.removeEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);
        if (typeof PointerEvent !== 'undefined') {
            documentObject.removeEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.removeEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.removeEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);
        } else {
            documentObject.removeEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.removeEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);
            documentObject.removeEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);
        }
        $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);
    };
    function $507fabe10e71c6fb$export$2f1888112f558a7d(element) {
        const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        let loadListener;
        if (documentObject.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
        else {
            loadListener = ()=>{
                $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
            };
            documentObject.addEventListener('DOMContentLoaded', loadListener);
        }
        return ()=>$507fabe10e71c6fb$var$tearDownWindowFocusTracking(element, loadListener);
    }
    // Server-side rendering does not have the document object defined
    // eslint-disable-next-line no-restricted-globals
    if (typeof document !== 'undefined') $507fabe10e71c6fb$export$2f1888112f558a7d();
    function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
        return $507fabe10e71c6fb$var$currentModality !== 'pointer';
    }
    function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
        return $507fabe10e71c6fb$var$currentModality;
    }
    function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
        $507fabe10e71c6fb$var$currentModality = modality;
        $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
    }
    function $507fabe10e71c6fb$export$98e20ec92f614cfe() {
        $507fabe10e71c6fb$var$setupGlobalFocusEvents();
        let [modality, setModality] = (0, wp.element.useState)($507fabe10e71c6fb$var$currentModality);
        (0, wp.element.useEffect)(()=>{
            let handler = ()=>{
                setModality($507fabe10e71c6fb$var$currentModality);
            };
            $507fabe10e71c6fb$var$changeHandlers.add(handler);
            return ()=>{
                $507fabe10e71c6fb$var$changeHandlers.delete(handler);
            };
        }, []);
        return ($b5e257d569688ac6$export$535bd6ca7f90a273)() ? null : modality;
    }
    const $507fabe10e71c6fb$var$nonTextInputTypes = new Set([
        'checkbox',
        'radio',
        'range',
        'color',
        'file',
        'image',
        'button',
        'submit',
        'reset'
    ]);
    /**
     * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
     * focus visible style can be properly set.
     */ function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
        var _e_target;
        const IHTMLInputElement = typeof window !== 'undefined' ? ($431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLInputElement : HTMLInputElement;
        const IHTMLTextAreaElement = typeof window !== 'undefined' ? ($431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLTextAreaElement : HTMLTextAreaElement;
        const IHTMLElement = typeof window !== 'undefined' ? ($431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLElement : HTMLElement;
        const IKeyboardEvent = typeof window !== 'undefined' ? ($431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).KeyboardEvent : KeyboardEvent;
        isTextInput = isTextInput || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLInputElement && !$507fabe10e71c6fb$var$nonTextInputTypes.has(e === null || e === void 0 ? void 0 : (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.type) || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLTextAreaElement || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLElement && (e === null || e === void 0 ? void 0 : e.target.isContentEditable);
        return !(isTextInput && modality === 'keyboard' && e instanceof IKeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
    }
    function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
        $507fabe10e71c6fb$var$setupGlobalFocusEvents();
        (0, wp.element.useEffect)(()=>{
            let handler = (modality, e)=>{
                if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(!!(opts === null || opts === void 0 ? void 0 : opts.isTextInput), modality, e)) return;
                fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
            };
            $507fabe10e71c6fb$var$changeHandlers.add(handler);
            return ()=>{
                $507fabe10e71c6fb$var$changeHandlers.delete(handler);
            };
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, deps);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from react.
    // Original licensing for the following can be found in the
    // NOTICE file in the root directory of this source tree.
    // See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions


    function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
        let { isDisabled: isDisabled, onBlurWithin: onBlurWithin, onFocusWithin: onFocusWithin, onFocusWithinChange: onFocusWithinChange } = props;
        let state = (0, wp.element.useRef)({
            isFocusWithin: false
        });
        let onBlur = (0, wp.element.useCallback)((e)=>{
            // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
            // when moving focus inside the element. Only trigger if the currentTarget doesn't
            // include the relatedTarget (where focus is moving).
            if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
                state.current.isFocusWithin = false;
                if (onBlurWithin) onBlurWithin(e);
                if (onFocusWithinChange) onFocusWithinChange(false);
            }
        }, [
            onBlurWithin,
            onFocusWithinChange,
            state
        ]);
        let onSyntheticFocus = ($8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
        let onFocus = (0, wp.element.useCallback)((e)=>{
            // Double check that document.activeElement actually matches e.target in case a previously chained
            // focus handler already moved focus somewhere else.
            if (!state.current.isFocusWithin && document.activeElement === e.target) {
                if (onFocusWithin) onFocusWithin(e);
                if (onFocusWithinChange) onFocusWithinChange(true);
                state.current.isFocusWithin = true;
                onSyntheticFocus(e);
            }
        }, [
            onFocusWithin,
            onFocusWithinChange,
            onSyntheticFocus
        ]);
        if (isDisabled) return {
            focusWithinProps: {
                // These should not have been null, that would conflict in mergeProps
                onFocus: undefined,
                onBlur: undefined
            }
        };
        return {
            focusWithinProps: {
                onFocus: onFocus,
                onBlur: onBlur
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from react.
    // Original licensing for the following can be found in the
    // NOTICE file in the root directory of this source tree.
    // See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

    // iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
    // We want to ignore these emulated events so they do not trigger hover behavior.
    // See https://bugs.webkit.org/show_bug.cgi?id=214609.
    let $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
    let $6179b936705e76d3$var$hoverCount = 0;
    function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
        $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
        // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
        // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
        // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
        // the distant future because a user previously touched the element.
        setTimeout(()=>{
            $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
        }, 50);
    }
    function $6179b936705e76d3$var$handleGlobalPointerEvent(e) {
        if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
    }
    function $6179b936705e76d3$var$setupGlobalTouchEvents() {
        if (typeof document === 'undefined') return;
        if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);
        else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
        $6179b936705e76d3$var$hoverCount++;
        return ()=>{
            $6179b936705e76d3$var$hoverCount--;
            if ($6179b936705e76d3$var$hoverCount > 0) return;
            if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);
            else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
        };
    }
    function $6179b936705e76d3$export$ae780daf29e6d456(props) {
        let { onHoverStart: onHoverStart, onHoverChange: onHoverChange, onHoverEnd: onHoverEnd, isDisabled: isDisabled } = props;
        let [isHovered, setHovered] = (0, wp.element.useState)(false);
        let state = (0, wp.element.useRef)({
            isHovered: false,
            ignoreEmulatedMouseEvents: false,
            pointerType: '',
            target: null
        }).current;
        (0, wp.element.useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);
        let { hoverProps: hoverProps, triggerHoverEnd: triggerHoverEnd } = (0, wp.element.useMemo)(()=>{
            let triggerHoverStart = (event, pointerType)=>{
                state.pointerType = pointerType;
                if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;
                state.isHovered = true;
                let target = event.currentTarget;
                state.target = target;
                if (onHoverStart) onHoverStart({
                    type: 'hoverstart',
                    target: target,
                    pointerType: pointerType
                });
                if (onHoverChange) onHoverChange(true);
                setHovered(true);
            };
            let triggerHoverEnd = (event, pointerType)=>{
                state.pointerType = '';
                state.target = null;
                if (pointerType === 'touch' || !state.isHovered) return;
                state.isHovered = false;
                let target = event.currentTarget;
                if (onHoverEnd) onHoverEnd({
                    type: 'hoverend',
                    target: target,
                    pointerType: pointerType
                });
                if (onHoverChange) onHoverChange(false);
                setHovered(false);
            };
            let hoverProps = {};
            if (typeof PointerEvent !== 'undefined') {
                hoverProps.onPointerEnter = (e)=>{
                    if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;
                    triggerHoverStart(e, e.pointerType);
                };
                hoverProps.onPointerLeave = (e)=>{
                    if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
                };
            } else {
                hoverProps.onTouchStart = ()=>{
                    state.ignoreEmulatedMouseEvents = true;
                };
                hoverProps.onMouseEnter = (e)=>{
                    if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');
                    state.ignoreEmulatedMouseEvents = false;
                };
                hoverProps.onMouseLeave = (e)=>{
                    if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');
                };
            }
            return {
                hoverProps: hoverProps,
                triggerHoverEnd: triggerHoverEnd
            };
        }, [
            onHoverStart,
            onHoverChange,
            onHoverEnd,
            isDisabled,
            state
        ]);
        (0, wp.element.useEffect)(()=>{
            // Call the triggerHoverEnd as soon as isDisabled changes to true
            // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
            if (isDisabled) triggerHoverEnd({
                currentTarget: state.target
            }, state.pointerType);
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            isDisabled
        ]);
        return {
            hoverProps: hoverProps,
            isHovered: isHovered
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from react.
    // Original licensing for the following can be found in the
    // NOTICE file in the root directory of this source tree.
    // See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions


    function $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
        let { ref: ref, onInteractOutside: onInteractOutside, isDisabled: isDisabled, onInteractOutsideStart: onInteractOutsideStart } = props;
        let stateRef = (0, wp.element.useRef)({
            isPointerDown: false,
            ignoreEmulatedMouseEvents: false
        });
        let onPointerDown = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
            if (onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
                if (onInteractOutsideStart) onInteractOutsideStart(e);
                stateRef.current.isPointerDown = true;
            }
        });
        let triggerInteractOutside = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
            if (onInteractOutside) onInteractOutside(e);
        });
        (0, wp.element.useEffect)(()=>{
            let state = stateRef.current;
            if (isDisabled) return;
            const element = ref.current;
            const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
            // Use pointer events if available. Otherwise, fall back to mouse and touch events.
            if (typeof PointerEvent !== 'undefined') {
                let onPointerUp = (e)=>{
                    if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);
                    state.isPointerDown = false;
                };
                // changing these to capture phase fixed combobox
                documentObject.addEventListener('pointerdown', onPointerDown, true);
                documentObject.addEventListener('pointerup', onPointerUp, true);
                return ()=>{
                    documentObject.removeEventListener('pointerdown', onPointerDown, true);
                    documentObject.removeEventListener('pointerup', onPointerUp, true);
                };
            } else {
                let onMouseUp = (e)=>{
                    if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;
                    else if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);
                    state.isPointerDown = false;
                };
                let onTouchEnd = (e)=>{
                    state.ignoreEmulatedMouseEvents = true;
                    if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);
                    state.isPointerDown = false;
                };
                documentObject.addEventListener('mousedown', onPointerDown, true);
                documentObject.addEventListener('mouseup', onMouseUp, true);
                documentObject.addEventListener('touchstart', onPointerDown, true);
                documentObject.addEventListener('touchend', onTouchEnd, true);
                return ()=>{
                    documentObject.removeEventListener('mousedown', onPointerDown, true);
                    documentObject.removeEventListener('mouseup', onMouseUp, true);
                    documentObject.removeEventListener('touchstart', onPointerDown, true);
                    documentObject.removeEventListener('touchend', onTouchEnd, true);
                };
            }
        }, [
            ref,
            isDisabled,
            onPointerDown,
            triggerInteractOutside
        ]);
    }
    function $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
        if (event.button > 0) return false;
        if (event.target) {
            // if the event target is no longer in the document, ignore
            const ownerDocument = event.target.ownerDocument;
            if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
            // If the target is within a top layer element (e.g. toasts), ignore.
            if (event.target.closest('[data-react-aria-top-layer]')) return false;
        }
        return ref.current && !ref.current.contains(event.target);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ function $93925083ecbb358c$export$48d1ea6320830260(handler) {
        if (!handler) return undefined;
        let shouldStopPropagation = true;
        return (e)=>{
            let event = {
                ...e,
                preventDefault () {
                    e.preventDefault();
                },
                isDefaultPrevented () {
                    return e.isDefaultPrevented();
                },
                stopPropagation () {
                    console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');
                },
                continuePropagation () {
                    shouldStopPropagation = false;
                }
            };
            handler(event);
            if (shouldStopPropagation) e.stopPropagation();
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
        return {
            keyboardProps: props.isDisabled ? {} : {
                onKeyDown: ($93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
                onKeyUp: ($93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $e8a7022cf87cba2a$export$36da96379f79f245(props) {
        let { onMoveStart: onMoveStart, onMove: onMove, onMoveEnd: onMoveEnd } = props;
        let state = (0, wp.element.useRef)({
            didMove: false,
            lastPosition: null,
            id: null
        });
        let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
        let move = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, deltaX, deltaY)=>{
            if (deltaX === 0 && deltaY === 0) return;
            if (!state.current.didMove) {
                state.current.didMove = true;
                onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
                    type: 'movestart',
                    pointerType: pointerType,
                    shiftKey: originalEvent.shiftKey,
                    metaKey: originalEvent.metaKey,
                    ctrlKey: originalEvent.ctrlKey,
                    altKey: originalEvent.altKey
                });
            }
            onMove === null || onMove === void 0 ? void 0 : onMove({
                type: 'move',
                pointerType: pointerType,
                deltaX: deltaX,
                deltaY: deltaY,
                shiftKey: originalEvent.shiftKey,
                metaKey: originalEvent.metaKey,
                ctrlKey: originalEvent.ctrlKey,
                altKey: originalEvent.altKey
            });
        });
        let end = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType)=>{
            ($14c0b72509d70225$export$b0d6fa1ab32e3295)();
            if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
                type: 'moveend',
                pointerType: pointerType,
                shiftKey: originalEvent.shiftKey,
                metaKey: originalEvent.metaKey,
                ctrlKey: originalEvent.ctrlKey,
                altKey: originalEvent.altKey
            });
        });
        let moveProps = (0, wp.element.useMemo)(()=>{
            let moveProps = {};
            let start = ()=>{
                ($14c0b72509d70225$export$16a4697467175487)();
                state.current.didMove = false;
            };
            if (typeof PointerEvent === 'undefined') {
                let onMouseMove = (e)=>{
                    if (e.button === 0) {
                        var _state_current_lastPosition, _state_current_lastPosition1;
                        var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;
                        move(e, 'mouse', e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));
                        state.current.lastPosition = {
                            pageX: e.pageX,
                            pageY: e.pageY
                        };
                    }
                };
                let onMouseUp = (e)=>{
                    if (e.button === 0) {
                        end(e, 'mouse');
                        removeGlobalListener(window, 'mousemove', onMouseMove, false);
                        removeGlobalListener(window, 'mouseup', onMouseUp, false);
                    }
                };
                moveProps.onMouseDown = (e)=>{
                    if (e.button === 0) {
                        start();
                        e.stopPropagation();
                        e.preventDefault();
                        state.current.lastPosition = {
                            pageX: e.pageX,
                            pageY: e.pageY
                        };
                        addGlobalListener(window, 'mousemove', onMouseMove, false);
                        addGlobalListener(window, 'mouseup', onMouseUp, false);
                    }
                };
                let onTouchMove = (e)=>{
                    let touch = [
                        ...e.changedTouches
                    ].findIndex(({ identifier: identifier })=>identifier === state.current.id);
                    if (touch >= 0) {
                        var _state_current_lastPosition, _state_current_lastPosition1;
                        let { pageX: pageX, pageY: pageY } = e.changedTouches[touch];
                        var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;
                        move(e, 'touch', pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));
                        state.current.lastPosition = {
                            pageX: pageX,
                            pageY: pageY
                        };
                    }
                };
                let onTouchEnd = (e)=>{
                    let touch = [
                        ...e.changedTouches
                    ].findIndex(({ identifier: identifier })=>identifier === state.current.id);
                    if (touch >= 0) {
                        end(e, 'touch');
                        state.current.id = null;
                        removeGlobalListener(window, 'touchmove', onTouchMove);
                        removeGlobalListener(window, 'touchend', onTouchEnd);
                        removeGlobalListener(window, 'touchcancel', onTouchEnd);
                    }
                };
                moveProps.onTouchStart = (e)=>{
                    if (e.changedTouches.length === 0 || state.current.id != null) return;
                    let { pageX: pageX, pageY: pageY, identifier: identifier } = e.changedTouches[0];
                    start();
                    e.stopPropagation();
                    e.preventDefault();
                    state.current.lastPosition = {
                        pageX: pageX,
                        pageY: pageY
                    };
                    state.current.id = identifier;
                    addGlobalListener(window, 'touchmove', onTouchMove, false);
                    addGlobalListener(window, 'touchend', onTouchEnd, false);
                    addGlobalListener(window, 'touchcancel', onTouchEnd, false);
                };
            } else {
                let onPointerMove = (e)=>{
                    if (e.pointerId === state.current.id) {
                        var _state_current_lastPosition, _state_current_lastPosition1;
                        let pointerType = e.pointerType || 'mouse';
                        var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;
                        // Problems with PointerEvent#movementX/movementY:
                        // 1. it is always 0 on macOS Safari.
                        // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
                        move(e, pointerType, e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));
                        state.current.lastPosition = {
                            pageX: e.pageX,
                            pageY: e.pageY
                        };
                    }
                };
                let onPointerUp = (e)=>{
                    if (e.pointerId === state.current.id) {
                        let pointerType = e.pointerType || 'mouse';
                        end(e, pointerType);
                        state.current.id = null;
                        removeGlobalListener(window, 'pointermove', onPointerMove, false);
                        removeGlobalListener(window, 'pointerup', onPointerUp, false);
                        removeGlobalListener(window, 'pointercancel', onPointerUp, false);
                    }
                };
                moveProps.onPointerDown = (e)=>{
                    if (e.button === 0 && state.current.id == null) {
                        start();
                        e.stopPropagation();
                        e.preventDefault();
                        state.current.lastPosition = {
                            pageX: e.pageX,
                            pageY: e.pageY
                        };
                        state.current.id = e.pointerId;
                        addGlobalListener(window, 'pointermove', onPointerMove, false);
                        addGlobalListener(window, 'pointerup', onPointerUp, false);
                        addGlobalListener(window, 'pointercancel', onPointerUp, false);
                    }
                };
            }
            let triggerKeyboardMove = (e, deltaX, deltaY)=>{
                start();
                move(e, 'keyboard', deltaX, deltaY);
                end(e, 'keyboard');
            };
            moveProps.onKeyDown = (e)=>{
                switch(e.key){
                    case 'Left':
                    case 'ArrowLeft':
                        e.preventDefault();
                        e.stopPropagation();
                        triggerKeyboardMove(e, -1, 0);
                        break;
                    case 'Right':
                    case 'ArrowRight':
                        e.preventDefault();
                        e.stopPropagation();
                        triggerKeyboardMove(e, 1, 0);
                        break;
                    case 'Up':
                    case 'ArrowUp':
                        e.preventDefault();
                        e.stopPropagation();
                        triggerKeyboardMove(e, 0, -1);
                        break;
                    case 'Down':
                    case 'ArrowDown':
                        e.preventDefault();
                        e.stopPropagation();
                        triggerKeyboardMove(e, 0, 1);
                        break;
                }
            };
            return moveProps;
        }, [
            state,
            addGlobalListener,
            removeGlobalListener,
            move,
            end
        ]);
        return {
            moveProps: moveProps
        };
    }

    /*
     * Copyright 2021 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
        let { onScroll: onScroll, isDisabled: isDisabled } = props;
        let onScrollHandler = (0, wp.element.useCallback)((e)=>{
            // If the ctrlKey is pressed, this is a zoom event, do nothing.
            if (e.ctrlKey) return;
            // stop scrolling the page
            e.preventDefault();
            e.stopPropagation();
            if (onScroll) onScroll({
                deltaX: e.deltaX,
                deltaY: e.deltaY
            });
        }, [
            onScroll
        ]);
        ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'wheel', isDisabled ? undefined : onScrollHandler);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    const $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
    function $8a26561d2877236e$export$c24ed0104d07eab9(props) {
        let { isDisabled: isDisabled, onLongPressStart: onLongPressStart, onLongPressEnd: onLongPressEnd, onLongPress: onLongPress, threshold: threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD, accessibilityDescription: accessibilityDescription } = props;
        const timeRef = (0, wp.element.useRef)();
        let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
        let { pressProps: pressProps } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
            isDisabled: isDisabled,
            onPressStart (e) {
                e.continuePropagation();
                if (e.pointerType === 'mouse' || e.pointerType === 'touch') {
                    if (onLongPressStart) onLongPressStart({
                        ...e,
                        type: 'longpressstart'
                    });
                    timeRef.current = setTimeout(()=>{
                        // Prevent other usePress handlers from also handling this event.
                        e.target.dispatchEvent(new PointerEvent('pointercancel', {
                            bubbles: true
                        }));
                        if (onLongPress) onLongPress({
                            ...e,
                            type: 'longpress'
                        });
                        timeRef.current = undefined;
                    }, threshold);
                    // Prevent context menu, which may be opened on long press on touch devices
                    if (e.pointerType === 'touch') {
                        let onContextMenu = (e)=>{
                            e.preventDefault();
                        };
                        addGlobalListener(e.target, 'contextmenu', onContextMenu, {
                            once: true
                        });
                        addGlobalListener(window, 'pointerup', ()=>{
                            // If no contextmenu event is fired quickly after pointerup, remove the handler
                            // so future context menu events outside a long press are not prevented.
                            setTimeout(()=>{
                                removeGlobalListener(e.target, 'contextmenu', onContextMenu);
                            }, 30);
                        }, {
                            once: true
                        });
                    }
                }
            },
            onPressEnd (e) {
                if (timeRef.current) clearTimeout(timeRef.current);
                if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({
                    ...e,
                    type: 'longpressend'
                });
            }
        });
        let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(onLongPress && !isDisabled ? accessibilityDescription : undefined);
        return {
            longPressProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, descriptionProps)
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the 'License');
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $6a99195332edec8b$export$80f3e147d781571c(element) {
        // If the user is interacting with a virtual cursor, e.g. screen reader, then
        // wait until after any animated transitions that are currently occurring on
        // the page before shifting focus. This avoids issues with VoiceOver on iOS
        // causing the page to scroll when moving focus if the element is transitioning
        // from off the screen.
        const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        if (($507fabe10e71c6fb$export$630ff653c5ada6a9)() === 'virtual') {
            let lastFocusedElement = ownerDocument.activeElement;
            ($bbed8b41f857bcc0$export$24490316f764c430)(()=>{
                // If focus did not move and the element is still in the document, focus it.
                if (ownerDocument.activeElement === lastFocusedElement && element.isConnected) ($7215afc6de606d6b$export$de79e2c695e052f3)(element);
            });
        } else ($7215afc6de606d6b$export$de79e2c695e052f3)(element);
    }

    /*
     * Copyright 2021 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $645f2e67b85a24c9$var$isStyleVisible(element) {
        const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
        if (!(element instanceof windowObject.HTMLElement) && !(element instanceof windowObject.SVGElement)) return false;
        let { display: display, visibility: visibility } = element.style;
        let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';
        if (isVisible) {
            const { getComputedStyle: getComputedStyle } = element.ownerDocument.defaultView;
            let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle(element);
            isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';
        }
        return isVisible;
    }
    function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
        return !element.hasAttribute('hidden') && // Ignore HiddenSelect when tree walking.
        !element.hasAttribute('data-react-aria-prevent-focus') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);
    }
    function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
        return element.nodeName !== '#comment' && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    const $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/ (wp.element).createContext(null);
    let $9bf71ea28793e738$var$activeScope = null;
    function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
        let { children: children, contain: contain, restoreFocus: restoreFocus, autoFocus: autoFocus } = props;
        let startRef = (0, wp.element.useRef)(null);
        let endRef = (0, wp.element.useRef)(null);
        let scopeRef = (0, wp.element.useRef)([]);
        let { parentNode: parentNode } = (0, wp.element.useContext)($9bf71ea28793e738$var$FocusContext) || {};
        // Create a tree node here so we can add children to it even before it is added to the tree.
        let node = (0, wp.element.useMemo)(()=>new $9bf71ea28793e738$var$TreeNode({
                scopeRef: scopeRef
            }), [
            scopeRef
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),
            // use the active scope as the parent instead of the parent from context. Layout effects run bottom
            // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope
            // that is being added should get the activeScope as its parent.
            let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
            if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
                let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
                if (activeNode) parent = activeNode;
            }
            // Add the node to the parent, and to the tree.
            parent.addChild(node);
            $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);
        }, [
            node,
            parentNode
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
            if (node) node.contain = !!contain;
        }, [
            contain
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            var _startRef_current;
            // Find all rendered nodes between the sentinels and add them to the scope.
            let node = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;
            let nodes = [];
            while(node && node !== endRef.current){
                nodes.push(node);
                node = node.nextSibling;
            }
            scopeRef.current = nodes;
        }, [
            children
        ]);
        $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
        $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
        $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
        $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
        // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.
        // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.
        (0, wp.element.useEffect)(()=>{
            const activeElement = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;
            let scope = null;
            if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
                // We need to traverse the focusScope tree and find the bottom most scope that
                // contains the active element and set that as the activeScope.
                for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse())if (node.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;
                if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;
            }
        }, [
            scopeRef
        ]);
        // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF
        // in useRestoreFocus cleanup runs.
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            return ()=>{
                var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;
                var _focusScopeTree_getTreeNode_parent_scopeRef;
                // Scope may have been re-parented.
                let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;
                if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
                $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
            };
        }, [
            scopeRef
        ]);
        let focusManager = (0, wp.element.useMemo)(()=>$9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
        let value = (0, wp.element.useMemo)(()=>({
                focusManager: focusManager,
                parentNode: node
            }), [
            node,
            focusManager
        ]);
        return /*#__PURE__*/ (wp.element).createElement($9bf71ea28793e738$var$FocusContext.Provider, {
            value: value
        }, /*#__PURE__*/ (wp.element).createElement("span", {
            "data-focus-scope-start": true,
            hidden: true,
            ref: startRef
        }), children, /*#__PURE__*/ (wp.element).createElement("span", {
            "data-focus-scope-end": true,
            hidden: true,
            ref: endRef
        }));
    }
    function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
        return {
            focusNext (opts = {}) {
                let scope = scopeRef.current;
                let { from: from, tabbable: tabbable, wrap: wrap, accept: accept } = opts;
                let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(scope[0]).activeElement;
                let sentinel = scope[0].previousElementSibling;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: tabbable,
                    accept: accept
                }, scope);
                walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
                let nextNode = walker.nextNode();
                if (!nextNode && wrap) {
                    walker.currentNode = sentinel;
                    nextNode = walker.nextNode();
                }
                if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
                return nextNode;
            },
            focusPrevious (opts = {}) {
                let scope = scopeRef.current;
                let { from: from, tabbable: tabbable, wrap: wrap, accept: accept } = opts;
                let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(scope[0]).activeElement;
                let sentinel = scope[scope.length - 1].nextElementSibling;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: tabbable,
                    accept: accept
                }, scope);
                walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
                let previousNode = walker.previousNode();
                if (!previousNode && wrap) {
                    walker.currentNode = sentinel;
                    previousNode = walker.previousNode();
                }
                if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
                return previousNode;
            },
            focusFirst (opts = {}) {
                let scope = scopeRef.current;
                let { tabbable: tabbable, accept: accept } = opts;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: tabbable,
                    accept: accept
                }, scope);
                walker.currentNode = scope[0].previousElementSibling;
                let nextNode = walker.nextNode();
                if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
                return nextNode;
            },
            focusLast (opts = {}) {
                let scope = scopeRef.current;
                let { tabbable: tabbable, accept: accept } = opts;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: tabbable,
                    accept: accept
                }, scope);
                walker.currentNode = scope[scope.length - 1].nextElementSibling;
                let previousNode = walker.previousNode();
                if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
                return previousNode;
            }
        };
    }
    const $9bf71ea28793e738$var$focusableElements = [
        'input:not([disabled]):not([type=hidden])',
        'select:not([disabled])',
        'textarea:not([disabled])',
        'button:not([disabled])',
        'a[href]',
        'area[href]',
        'summary',
        'iframe',
        'object',
        'embed',
        'audio[controls]',
        'video[controls]',
        '[contenteditable]'
    ];
    const $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';
    $9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
    const $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
    function $9bf71ea28793e738$var$getScopeRoot(scope) {
        return scope[0].parentElement;
    }
    function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
        let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
        while(scope && scope.scopeRef !== scopeRef){
            if (scope.contain) return false;
            scope = scope.parent;
        }
        return true;
    }
    function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
        let focusedNode = (0, wp.element.useRef)();
        let raf = (0, wp.element.useRef)();
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let scope = scopeRef.current;
            if (!contain) {
                // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment
                if (raf.current) {
                    cancelAnimationFrame(raf.current);
                    raf.current = undefined;
                }
                return;
            }
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
            // Handle the Tab key to contain focus within the scope
            let onKeyDown = (e)=>{
                if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
                let focusedElement = ownerDocument.activeElement;
                let scope = scopeRef.current;
                if (!scope || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;
                let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                    tabbable: true
                }, scope);
                if (!focusedElement) return;
                walker.currentNode = focusedElement;
                let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                if (!nextElement) {
                    walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
                    nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                }
                e.preventDefault();
                if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
            };
            let onFocus = (e)=>{
                // If focusing an element in a child scope of the currently active scope, the child becomes active.
                // Moving out of the active scope to an ancestor is not allowed.
                if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {
                    $9bf71ea28793e738$var$activeScope = scopeRef;
                    focusedNode.current = e.target;
                } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
                    // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
                    // restore focus to the previously focused node or the first tabbable element in the active scope.
                    if (focusedNode.current) focusedNode.current.focus();
                    else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
                } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;
            };
            let onBlur = (e)=>{
                // Firefox doesn't shift focus back to the Dialog properly without this
                if (raf.current) cancelAnimationFrame(raf.current);
                raf.current = requestAnimationFrame(()=>{
                    // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
                    if (ownerDocument.activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(ownerDocument.activeElement, scopeRef)) {
                        $9bf71ea28793e738$var$activeScope = scopeRef;
                        if (ownerDocument.body.contains(e.target)) {
                            var _focusedNode_current;
                            focusedNode.current = e.target;
                            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();
                        } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
                    }
                });
            };
            ownerDocument.addEventListener('keydown', onKeyDown, false);
            ownerDocument.addEventListener('focusin', onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener('focusin', onFocus, false));
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener('focusout', onBlur, false));
            return ()=>{
                ownerDocument.removeEventListener('keydown', onKeyDown, false);
                ownerDocument.removeEventListener('focusin', onFocus, false);
                scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener('focusin', onFocus, false));
                scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener('focusout', onBlur, false));
            };
        }, [
            scopeRef,
            contain
        ]);
        // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur
        // eslint-disable-next-line arrow-body-style
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            return ()=>{
                if (raf.current) cancelAnimationFrame(raf.current);
            };
        }, [
            raf
        ]);
    }
    function $9bf71ea28793e738$var$isElementInAnyScope(element) {
        return $9bf71ea28793e738$var$isElementInChildScope(element);
    }
    function $9bf71ea28793e738$var$isElementInScope(element, scope) {
        if (!element) return false;
        if (!scope) return false;
        return scope.some((node)=>node.contains(element));
    }
    function $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {
        // If the element is within a top layer element (e.g. toasts), always allow moving focus there.
        if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) return true;
        // node.contains in isElementInScope covers child scopes that are also DOM children,
        // but does not cover child scopes in portals.
        for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))){
            if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;
        }
        return false;
    }
    function $9bf71ea28793e738$export$1258395f99bf9cbf(element) {
        return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);
    }
    function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
        var _focusScopeTree_getTreeNode;
        let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
        while(parent){
            if (parent.scopeRef === ancestor) return true;
            parent = parent.parent;
        }
        return false;
    }
    function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
        if (element != null && !scroll) try {
            (0, $6a99195332edec8b$export$80f3e147d781571c)(element);
        } catch (err) {
        // ignore
        }
        else if (element != null) try {
            element.focus();
        } catch (err) {
        // ignore
        }
    }
    function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
        let sentinel = scope[0].previousElementSibling;
        let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
        let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
            tabbable: tabbable
        }, scope);
        walker.currentNode = sentinel;
        let nextNode = walker.nextNode();
        // If the scope does not contain a tabbable element, use the first focusable element.
        if (tabbable && !nextNode) {
            scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
            walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                tabbable: false
            }, scope);
            walker.currentNode = sentinel;
            nextNode = walker.nextNode();
        }
        $9bf71ea28793e738$var$focusElement(nextNode);
    }
    function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
        const autoFocusRef = (wp.element).useRef(autoFocus);
        (0, wp.element.useEffect)(()=>{
            if (autoFocusRef.current) {
                $9bf71ea28793e738$var$activeScope = scopeRef;
                const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
                if (!$9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
            }
            autoFocusRef.current = false;
        }, [
            scopeRef
        ]);
    }
    function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
        // tracks the active scope, in case restore and contain are both false.
        // if either are true, this is tracked in useRestoreFocus or useFocusContainment.
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            if (restore || contain) return;
            let scope = scopeRef.current;
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
            let onFocus = (e)=>{
                let target = e.target;
                if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
                else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;
            };
            ownerDocument.addEventListener('focusin', onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener('focusin', onFocus, false));
            return ()=>{
                ownerDocument.removeEventListener('focusin', onFocus, false);
                scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener('focusin', onFocus, false));
            };
        }, [
            scopeRef,
            restore,
            contain
        ]);
    }
    function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
        let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
        while(scope && scope.scopeRef !== scopeRef){
            if (scope.nodeToRestore) return false;
            scope = scope.parent;
        }
        return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
    }
    function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
        // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.
        // eslint-disable-next-line no-restricted-globals
        const nodeToRestoreRef = (0, wp.element.useRef)(typeof document !== 'undefined' ? ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement : null);
        // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus
        // restoring-non-containing scopes should only care if they become active so they can perform the restore
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let scope = scopeRef.current;
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
            if (!restoreFocus || contain) return;
            let onFocus = ()=>{
                // If focusing an element in a child scope of the currently active scope, the child becomes active.
                // Moving out of the active scope to an ancestor is not allowed.
                if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
            };
            ownerDocument.addEventListener('focusin', onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener('focusin', onFocus, false));
            return ()=>{
                ownerDocument.removeEventListener('focusin', onFocus, false);
                scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener('focusin', onFocus, false));
            };
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            scopeRef,
            contain
        ]);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
            if (!restoreFocus) return;
            // Handle the Tab key so that tabbing out of the scope goes to the next element
            // after the node that had focus when the scope mounted. This is important when
            // using portals for overlays, so that focus goes to the expected element when
            // tabbing out of the overlay.
            let onKeyDown = (e)=>{
                if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
                let focusedElement = ownerDocument.activeElement;
                if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;
                let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
                if (!treeNode) return;
                let nodeToRestore = treeNode.nodeToRestore;
                // Create a DOM tree walker that matches all tabbable elements
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {
                    tabbable: true
                });
                // Find the next tabbable element after the currently focused element
                walker.currentNode = focusedElement;
                let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {
                    nodeToRestore = undefined;
                    treeNode.nodeToRestore = undefined;
                }
                // If there is no next element, or it is outside the current scope, move focus to the
                // next element after the node to restore to instead.
                if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
                    walker.currentNode = nodeToRestore;
                    // Skip over elements within the scope, in case the scope immediately follows the node to restore.
                    do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                    while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
                    e.preventDefault();
                    e.stopPropagation();
                    if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
                    else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)
                    // then move focus to the body.
                    // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)
                    if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();
                    else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
                }
            };
            if (!contain) ownerDocument.addEventListener('keydown', onKeyDown, true);
            return ()=>{
                if (!contain) ownerDocument.removeEventListener('keydown', onKeyDown, true);
            };
        }, [
            scopeRef,
            restoreFocus,
            contain
        ]);
        // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
            if (!restoreFocus) return;
            let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
            if (!treeNode) return;
            var _nodeToRestoreRef_current;
            treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : undefined;
            return ()=>{
                let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
                if (!treeNode) return;
                let nodeToRestore = treeNode.nodeToRestore;
                // if we already lost focus to the body and this was the active scope, then we should attempt to restore
                if (restoreFocus && nodeToRestore && // eslint-disable-next-line react-hooks/exhaustive-deps
                ($9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current) || ownerDocument.activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
                    // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it
                    let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
                    requestAnimationFrame(()=>{
                        // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere
                        if (ownerDocument.activeElement === ownerDocument.body) {
                            // look up the tree starting with our scope to find a nodeToRestore still in the DOM
                            let treeNode = clonedTree.getTreeNode(scopeRef);
                            while(treeNode){
                                if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {
                                    $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);
                                    return;
                                }
                                treeNode = treeNode.parent;
                            }
                            // If no nodeToRestore was found, focus the first element in the nearest
                            // ancestor scope that is still in the tree.
                            treeNode = clonedTree.getTreeNode(scopeRef);
                            while(treeNode){
                                if (treeNode.scopeRef && treeNode.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {
                                    $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);
                                    return;
                                }
                                treeNode = treeNode.parent;
                            }
                        }
                    });
                }
            };
        }, [
            scopeRef,
            restoreFocus
        ]);
    }
    function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
        let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
        let walker = ($431fbd86ca7dc216$export$b204af158042fbac)(root).createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
            acceptNode (node) {
                var _opts_from;
                // Skip nodes inside the starting node.
                if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;
                if (node.matches(selector) && ($645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;
                return NodeFilter.FILTER_SKIP;
            }
        });
        if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
        return walker;
    }
    function $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {
        return {
            focusNext (opts = {}) {
                let root = ref.current;
                if (!root) return null;
                let { from: from, tabbable: tabbable = defaultOptions.tabbable, wrap: wrap = defaultOptions.wrap, accept: accept = defaultOptions.accept } = opts;
                let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(root).activeElement;
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
                    tabbable: tabbable,
                    accept: accept
                });
                if (root.contains(node)) walker.currentNode = node;
                let nextNode = walker.nextNode();
                if (!nextNode && wrap) {
                    walker.currentNode = root;
                    nextNode = walker.nextNode();
                }
                if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
                return nextNode;
            },
            focusPrevious (opts = defaultOptions) {
                let root = ref.current;
                if (!root) return null;
                let { from: from, tabbable: tabbable = defaultOptions.tabbable, wrap: wrap = defaultOptions.wrap, accept: accept = defaultOptions.accept } = opts;
                let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(root).activeElement;
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
                    tabbable: tabbable,
                    accept: accept
                });
                if (root.contains(node)) walker.currentNode = node;
                else {
                    let next = $9bf71ea28793e738$var$last(walker);
                    if (next) $9bf71ea28793e738$var$focusElement(next, true);
                    return next !== null && next !== void 0 ? next : null;
                }
                let previousNode = walker.previousNode();
                if (!previousNode && wrap) {
                    walker.currentNode = root;
                    let lastNode = $9bf71ea28793e738$var$last(walker);
                    if (!lastNode) // couldn't wrap
                    return null;
                    previousNode = lastNode;
                }
                if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
                return previousNode !== null && previousNode !== void 0 ? previousNode : null;
            },
            focusFirst (opts = defaultOptions) {
                let root = ref.current;
                if (!root) return null;
                let { tabbable: tabbable = defaultOptions.tabbable, accept: accept = defaultOptions.accept } = opts;
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
                    tabbable: tabbable,
                    accept: accept
                });
                let nextNode = walker.nextNode();
                if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
                return nextNode;
            },
            focusLast (opts = defaultOptions) {
                let root = ref.current;
                if (!root) return null;
                let { tabbable: tabbable = defaultOptions.tabbable, accept: accept = defaultOptions.accept } = opts;
                let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
                    tabbable: tabbable,
                    accept: accept
                });
                let next = $9bf71ea28793e738$var$last(walker);
                if (next) $9bf71ea28793e738$var$focusElement(next, true);
                return next !== null && next !== void 0 ? next : null;
            }
        };
    }
    function $9bf71ea28793e738$var$last(walker) {
        let next = undefined;
        let last;
        do {
            last = walker.lastChild();
            if (last) next = last;
        }while (last);
        return next;
    }
    class $9bf71ea28793e738$var$Tree {
        get size() {
            return this.fastMap.size;
        }
        getTreeNode(data) {
            return this.fastMap.get(data);
        }
        addTreeNode(scopeRef, parent, nodeToRestore) {
            let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
            if (!parentNode) return;
            let node = new $9bf71ea28793e738$var$TreeNode({
                scopeRef: scopeRef
            });
            parentNode.addChild(node);
            node.parent = parentNode;
            this.fastMap.set(scopeRef, node);
            if (nodeToRestore) node.nodeToRestore = nodeToRestore;
        }
        addNode(node) {
            this.fastMap.set(node.scopeRef, node);
        }
        removeTreeNode(scopeRef) {
            // never remove the root
            if (scopeRef === null) return;
            let node = this.fastMap.get(scopeRef);
            if (!node) return;
            let parentNode = node.parent;
            // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing
            // if we are, then replace the siblings restore with the restore from the scope we're removing
            for (let current of this.traverse())if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;
            let children = node.children;
            if (parentNode) {
                parentNode.removeChild(node);
                if (children.size > 0) children.forEach((child)=>parentNode && parentNode.addChild(child));
            }
            this.fastMap.delete(node.scopeRef);
        }
        // Pre Order Depth First
        *traverse(node = this.root) {
            if (node.scopeRef != null) yield node;
            if (node.children.size > 0) for (let child of node.children)yield* this.traverse(child);
        }
        clone() {
            var _node_parent;
            let newTree = new $9bf71ea28793e738$var$Tree();
            var _node_parent_scopeRef;
            for (let node of this.traverse())newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);
            return newTree;
        }
        constructor(){
            this.fastMap = new Map();
            this.root = new $9bf71ea28793e738$var$TreeNode({
                scopeRef: null
            });
            this.fastMap.set(null, this.root);
        }
    }
    class $9bf71ea28793e738$var$TreeNode {
        addChild(node) {
            this.children.add(node);
            node.parent = this;
        }
        removeChild(node) {
            this.children.delete(node);
            node.parent = undefined;
        }
        constructor(props){
            this.children = new Set();
            this.contain = false;
            this.scopeRef = props.scopeRef;
        }
    }
    let $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();

    function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
        let { autoFocus: autoFocus = false, isTextInput: isTextInput, within: within } = props;
        let state = (0, wp.element.useRef)({
            isFocused: false,
            isFocusVisible: autoFocus || ($507fabe10e71c6fb$export$b9b3dfddab17db27)()
        });
        let [isFocused, setFocused] = (0, wp.element.useState)(false);
        let [isFocusVisibleState, setFocusVisible] = (0, wp.element.useState)(()=>state.current.isFocused && state.current.isFocusVisible);
        let updateState = (0, wp.element.useCallback)(()=>setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
        let onFocusChange = (0, wp.element.useCallback)((isFocused)=>{
            state.current.isFocused = isFocused;
            setFocused(isFocused);
            updateState();
        }, [
            updateState
        ]);
        ($507fabe10e71c6fb$export$ec71b4b83ac08ec3)((isFocusVisible)=>{
            state.current.isFocusVisible = isFocusVisible;
            updateState();
        }, [], {
            isTextInput: isTextInput
        });
        let { focusProps: focusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
            isDisabled: within,
            onFocusChange: onFocusChange
        });
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            isDisabled: !within,
            onFocusWithinChange: onFocusChange
        });
        return {
            isFocused: isFocused,
            isFocusVisible: isFocusVisibleState,
            focusProps: within ? focusWithinProps : focusProps
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    let $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/ (wp.element).createContext(null);
    function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
        let context = (0, wp.element.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
        ($e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, ref);
        // eslint-disable-next-line
        let { ref: _, ...otherProps } = context;
        return otherProps;
    }
    function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
        let { focusProps: focusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)(props);
        let { keyboardProps: keyboardProps } = ($46d819fcbaf35654$export$8f71654801c2f7cd)(props);
        let interactions = ($3ef42575df84b30b$export$9d1611c77c2fe928)(focusProps, keyboardProps);
        let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
        let interactionProps = props.isDisabled ? {} : domProps;
        let autoFocusRef = (0, wp.element.useRef)(props.autoFocus);
        (0, wp.element.useEffect)(()=>{
            if (autoFocusRef.current && domRef.current) ($6a99195332edec8b$export$80f3e147d781571c)(domRef.current);
            autoFocusRef.current = false;
        }, [
            domRef
        ]);
        return {
            focusableProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)({
                ...interactions,
                tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined
            }, interactionProps)
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // https://en.wikipedia.org/wiki/Right-to-left
    const $148a7a147e38ea7f$var$RTL_SCRIPTS = new Set([
        'Arab',
        'Syrc',
        'Samr',
        'Mand',
        'Thaa',
        'Mend',
        'Nkoo',
        'Adlm',
        'Rohg',
        'Hebr'
    ]);
    const $148a7a147e38ea7f$var$RTL_LANGS = new Set([
        'ae',
        'ar',
        'arc',
        'bcc',
        'bqi',
        'ckb',
        'dv',
        'fa',
        'glk',
        'he',
        'ku',
        'mzn',
        'nqo',
        'pnb',
        'ps',
        'sd',
        'ug',
        'ur',
        'yi'
    ]);
    function $148a7a147e38ea7f$export$702d680b21cbd764(localeString) {
        // If the Intl.Locale API is available, use it to get the locale's text direction.
        // @ts-ignore
        if (Intl.Locale) {
            let locale = new Intl.Locale(localeString).maximize();
            // Use the text info object to get the direction if possible.
            // @ts-ignore - this was implemented as a property by some browsers before it was standardized as a function.
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo
            let textInfo = typeof locale.getTextInfo === 'function' ? locale.getTextInfo() : locale.textInfo;
            if (textInfo) return textInfo.direction === 'rtl';
            // Fallback: guess using the script.
            // This is more accurate than guessing by language, since languages can be written in multiple scripts.
            if (locale.script) return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(locale.script);
        }
        // If not, just guess by the language (first part of the locale)
        let lang = localeString.split('-')[0];
        return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    // Locale passed from server by PackageLocalizationProvider.
    const $1e5a04cdaf7d1af8$var$localeSymbol = Symbol.for('react-aria.i18n.locale');
    function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
        let locale = typeof window !== 'undefined' && window[$1e5a04cdaf7d1af8$var$localeSymbol] || typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
        try {
            // @ts-ignore
            Intl.DateTimeFormat.supportedLocalesOf([
                locale
            ]);
        } catch (_err) {
            locale = 'en-US';
        }
        return {
            locale: locale,
            direction: ($148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? 'rtl' : 'ltr'
        };
    }
    let $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
    let $1e5a04cdaf7d1af8$var$listeners = new Set();
    function $1e5a04cdaf7d1af8$var$updateLocale() {
        $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
        for (let listener of $1e5a04cdaf7d1af8$var$listeners)listener($1e5a04cdaf7d1af8$var$currentLocale);
    }
    function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
        let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
        let [defaultLocale, setDefaultLocale] = (0, wp.element.useState)($1e5a04cdaf7d1af8$var$currentLocale);
        (0, wp.element.useEffect)(()=>{
            if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);
            $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
            return ()=>{
                $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
                if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);
            };
        }, []);
        // We cannot determine the browser's language on the server, so default to
        // en-US. This will be updated after hydration on the client to the correct value.
        if (isSSR) return {
            locale: 'en-US',
            direction: 'ltr'
        };
        return defaultLocale;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    const $18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/ (wp.element).createContext(null);
    function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
        let defaultLocale = ($1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
        let context = (0, wp.element.useContext)($18f2051aff69b9bf$var$I18nContext);
        return context || defaultLocale;
    }

    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ const $5b160d28a433310d$var$localeSymbol = Symbol.for('react-aria.i18n.locale');
    const $5b160d28a433310d$var$stringsSymbol = Symbol.for('react-aria.i18n.strings');
    let $5b160d28a433310d$var$cachedGlobalStrings = undefined;
    class $5b160d28a433310d$export$c17fa47878dc55b6 {
        /** Returns a localized string for the given key and locale. */ getStringForLocale(key, locale) {
            let strings = this.getStringsForLocale(locale);
            let string = strings[key];
            if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);
            return string;
        }
        /** Returns all localized strings for the given locale. */ getStringsForLocale(locale) {
            let strings = this.strings[locale];
            if (!strings) {
                strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
                this.strings[locale] = strings;
            }
            return strings;
        }
        static getGlobalDictionaryForPackage(packageName) {
            if (typeof window === 'undefined') return null;
            let locale = window[$5b160d28a433310d$var$localeSymbol];
            if ($5b160d28a433310d$var$cachedGlobalStrings === undefined) {
                let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];
                if (!globalStrings) return null;
                $5b160d28a433310d$var$cachedGlobalStrings = {};
                for(let pkg in globalStrings)$5b160d28a433310d$var$cachedGlobalStrings[pkg] = new $5b160d28a433310d$export$c17fa47878dc55b6({
                    [locale]: globalStrings[pkg]
                }, locale);
            }
            let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];
            if (!dictionary) throw new Error(`Strings for package "${packageName}" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);
            return dictionary;
        }
        constructor(messages, defaultLocale = 'en-US'){
            // Clone messages so we don't modify the original object.
            // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.
            this.strings = Object.fromEntries(Object.entries(messages).filter(([, v])=>v));
            this.defaultLocale = defaultLocale;
        }
    }
    function $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = 'en-US') {
        // If there is an exact match, use it.
        if (strings[locale]) return strings[locale];
        // Attempt to find the closest match by language.
        // For example, if the locale is fr-CA (French Canadian), but there is only
        // an fr-FR (France) set of strings, use that.
        // This could be replaced with Intl.LocaleMatcher once it is supported.
        // https://github.com/tc39/proposal-intl-localematcher
        let language = $5b160d28a433310d$var$getLanguage(locale);
        if (strings[language]) return strings[language];
        for(let key in strings){
            if (key.startsWith(language + '-')) return strings[key];
        }
        // Nothing close, use english.
        return strings[defaultLocale];
    }
    function $5b160d28a433310d$var$getLanguage(locale) {
        // @ts-ignore
        if (Intl.Locale) // @ts-ignore
        return new Intl.Locale(locale).language;
        return locale.split('-')[0];
    }

    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ const $6db58dc88e78b024$var$pluralRulesCache = new Map();
    const $6db58dc88e78b024$var$numberFormatCache = new Map();
    class $6db58dc88e78b024$export$2f817fcdc4b89ae0 {
        /** Formats a localized string for the given key with the provided variables. */ format(key, variables) {
            let message = this.strings.getStringForLocale(key, this.locale);
            return typeof message === 'function' ? message(variables, this) : message;
        }
        plural(count, options, type = 'cardinal') {
            let opt = options['=' + count];
            if (opt) return typeof opt === 'function' ? opt() : opt;
            let key = this.locale + ':' + type;
            let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);
            if (!pluralRules) {
                pluralRules = new Intl.PluralRules(this.locale, {
                    type: type
                });
                $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);
            }
            let selected = pluralRules.select(count);
            opt = options[selected] || options.other;
            return typeof opt === 'function' ? opt() : opt;
        }
        number(value) {
            let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);
            if (!numberFormat) {
                numberFormat = new Intl.NumberFormat(this.locale);
                $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);
            }
            return numberFormat.format(value);
        }
        select(options, value) {
            let opt = options[value] || options.other;
            return typeof opt === 'function' ? opt() : opt;
        }
        constructor(locale, strings){
            this.locale = locale;
            this.strings = strings;
        }
    }

    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    const $fca6afa0e843324b$var$cache = new WeakMap();
    function $fca6afa0e843324b$var$getCachedDictionary(strings) {
        let dictionary = $fca6afa0e843324b$var$cache.get(strings);
        if (!dictionary) {
            dictionary = new ($5b160d28a433310d$export$c17fa47878dc55b6)(strings);
            $fca6afa0e843324b$var$cache.set(strings, dictionary);
        }
        return dictionary;
    }
    function $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName) {
        return packageName && ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage(packageName) || $fca6afa0e843324b$var$getCachedDictionary(strings);
    }
    function $fca6afa0e843324b$export$f12b703ca79dfbb1(strings, packageName) {
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let dictionary = $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName);
        return (0, wp.element.useMemo)(()=>new ($6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, dictionary), [
            locale,
            dictionary
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {
        return amount - numerator * Math.floor(amount / numerator);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from ICU.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.


    const $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.
    function $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {
        year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);
        let y1 = year - 1;
        let monthOffset = -2;
        if (month <= 2) monthOffset = 0;
        else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;
        return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
    }
    function $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {
        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    }
    function $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {
        return era === 'BC' ? 1 - year : year;
    }
    function $3b62074eb05584b2$export$4475b7e617eb123c(year) {
        let era = 'AD';
        if (year <= 0) {
            era = 'BC';
            year = 1 - year;
        }
        return [
            era,
            year
        ];
    }
    const $3b62074eb05584b2$var$daysInMonth = {
        standard: [
            31,
            28,
            31,
            30,
            31,
            30,
            31,
            31,
            30,
            31,
            30,
            31
        ],
        leapyear: [
            31,
            29,
            31,
            30,
            31,
            30,
            31,
            31,
            30,
            31,
            30,
            31
        ]
    };
    class $3b62074eb05584b2$export$80ee6245ec4f29ec {
        fromJulianDay(jd) {
            let jd0 = jd;
            let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;
            let quadricent = Math.floor(depoch / 146097);
            let dqc = ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);
            let cent = Math.floor(dqc / 36524);
            let dcent = ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);
            let quad = Math.floor(dcent / 1461);
            let dquad = ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);
            let yindex = Math.floor(dquad / 365);
            let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
            let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);
            let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);
            let leapAdj = 2;
            if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;
            else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;
            let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
            let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);
        }
        toJulianDay(date) {
            return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);
        }
        getDaysInMonth(date) {
            return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 'leapyear' : 'standard'][date.month - 1];
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        getMonthsInYear(date) {
            return 12;
        }
        getDaysInYear(date) {
            return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        getYearsInEra(date) {
            return 9999;
        }
        getEras() {
            return [
                'BC',
                'AD'
            ];
        }
        isInverseEra(date) {
            return date.era === 'BC';
        }
        balanceDate(date) {
            if (date.year <= 0) {
                date.era = date.era === 'BC' ? 'AD' : 'BC';
                date.year = 1 - date.year;
            }
        }
        constructor(){
            this.identifier = 'gregory';
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json
    // Locales starting on Sunday have been removed for compression.
    const $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {
        '001': 1,
        AD: 1,
        AE: 6,
        AF: 6,
        AI: 1,
        AL: 1,
        AM: 1,
        AN: 1,
        AR: 1,
        AT: 1,
        AU: 1,
        AX: 1,
        AZ: 1,
        BA: 1,
        BE: 1,
        BG: 1,
        BH: 6,
        BM: 1,
        BN: 1,
        BY: 1,
        CH: 1,
        CL: 1,
        CM: 1,
        CN: 1,
        CR: 1,
        CY: 1,
        CZ: 1,
        DE: 1,
        DJ: 6,
        DK: 1,
        DZ: 6,
        EC: 1,
        EE: 1,
        EG: 6,
        ES: 1,
        FI: 1,
        FJ: 1,
        FO: 1,
        FR: 1,
        GB: 1,
        GE: 1,
        GF: 1,
        GP: 1,
        GR: 1,
        HR: 1,
        HU: 1,
        IE: 1,
        IQ: 6,
        IR: 6,
        IS: 1,
        IT: 1,
        JO: 6,
        KG: 1,
        KW: 6,
        KZ: 1,
        LB: 1,
        LI: 1,
        LK: 1,
        LT: 1,
        LU: 1,
        LV: 1,
        LY: 6,
        MC: 1,
        MD: 1,
        ME: 1,
        MK: 1,
        MN: 1,
        MQ: 1,
        MV: 5,
        MY: 1,
        NL: 1,
        NO: 1,
        NZ: 1,
        OM: 6,
        PL: 1,
        QA: 6,
        RE: 1,
        RO: 1,
        RS: 1,
        RU: 1,
        SD: 6,
        SE: 1,
        SI: 1,
        SK: 1,
        SM: 1,
        SY: 6,
        TJ: 1,
        TM: 1,
        TR: 1,
        UA: 1,
        UY: 1,
        UZ: 1,
        VA: 1,
        VN: 1,
        XK: 1
    };

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {
        b = ($11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);
        return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
    }
    function $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {
        return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
    }
    function $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {
        return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));
    }
    function $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {
        let julian = date.calendar.toJulianDay(date);
        // If julian is negative, then julian % 7 will be negative, so we adjust
        // accordingly.  Julian day 0 is Monday.
        let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;
        if (dayOfWeek < 0) dayOfWeek += 7;
        return dayOfWeek;
    }
    function $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {
        return ($11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);
    }
    function $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {
        return ($11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));
    }
    function $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {
        return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);
    }
    function $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {
        return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);
    }
    function $14e0f24ef4ac5c92$var$timeToMs(a) {
        return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;
    }
    let $14e0f24ef4ac5c92$var$localTimeZone = null;
    function $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {
        // TODO: invalidate this somehow?
        if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
        return $14e0f24ef4ac5c92$var$localTimeZone;
    }
    function $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {
        // Use `subtract` instead of `set` so we don't get constrained in an era.
        return date.subtract({
            days: date.day - 1
        });
    }
    function $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {
        return date.add({
            days: date.calendar.getDaysInMonth(date) - date.day
        });
    }
    function $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {
        return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({
            months: date.month - 1
        }));
    }
    function $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {
        if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);
        return 1;
    }
    function $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {
        if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);
        return 1;
    }
    function $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {
        let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
        return date.subtract({
            days: dayOfWeek
        });
    }
    function $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {
        return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({
            days: 6
        });
    }
    const $14e0f24ef4ac5c92$var$cachedRegions = new Map();
    function $14e0f24ef4ac5c92$var$getRegion(locale) {
        // If the Intl.Locale API is available, use it to get the region for the locale.
        // @ts-ignore
        if (Intl.Locale) {
            // Constructing an Intl.Locale is expensive, so cache the result.
            let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);
            if (!region) {
                // @ts-ignore
                region = new Intl.Locale(locale).maximize().region;
                if (region) $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);
            }
            return region;
        }
        // If not, just try splitting the string.
        // If the second part of the locale string is 'u',
        // then this is a unicode extension, so ignore it.
        // Otherwise, it should be the region.
        let part = locale.split('-')[1];
        return part === 'u' ? undefined : part;
    }
    function $14e0f24ef4ac5c92$var$getWeekStart(locale) {
        // TODO: use Intl.Locale for this once browsers support the weekInfo property
        // https://github.com/tc39/proposal-intl-locale-info
        let region = $14e0f24ef4ac5c92$var$getRegion(locale);
        return region ? ($2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0 : 0;
    }
    function $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {
        let days = date.calendar.getDaysInMonth(date);
        return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);
    }
    function $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {
        if (a && b) return a.compare(b) <= 0 ? a : b;
        return a || b;
    }
    function $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {
        if (a && b) return a.compare(b) >= 0 ? a : b;
        return a || b;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.




    function $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {
        date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
        let year = ($3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);
        return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
    }
    function $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
        // Note: Date.UTC() interprets one and two-digit years as being in the
        // 20th century, so don't use it
        let date = new Date();
        date.setUTCHours(hour, minute, second, millisecond);
        date.setUTCFullYear(year, month - 1, day);
        return date.getTime();
    }
    function $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {
        // Fast path for UTC.
        if (timeZone === 'UTC') return 0;
        // Fast path: for local timezone after 1970, use native Date.
        if (ms > 0 && timeZone === ($14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;
        let { year: year, month: month, day: day, hour: hour, minute: minute, second: second } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);
        let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);
        return utc - Math.floor(ms / 1000) * 1000;
    }
    const $11d87f3f76e88657$var$formattersByTimeZone = new Map();
    function $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {
        let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);
        if (!formatter) {
            formatter = new Intl.DateTimeFormat('en-US', {
                timeZone: timeZone,
                hour12: false,
                era: 'short',
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric'
            });
            $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);
        }
        let parts = formatter.formatToParts(new Date(ms));
        let namedParts = {};
        for (let part of parts)if (part.type !== 'literal') namedParts[part.type] = part.value;
        return {
            // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253
            year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,
            month: +namedParts.month,
            day: +namedParts.day,
            hour: namedParts.hour === '24' ? 0 : +namedParts.hour,
            minute: +namedParts.minute,
            second: +namedParts.second
        };
    }
    const $11d87f3f76e88657$var$DAYMILLIS = 86400000;
    function $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {
        let found = earlier === later ? [
            earlier
        ] : [
            earlier,
            later
        ];
        return found.filter((absolute)=>$11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));
    }
    function $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {
        let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);
        return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
    }
    function $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = 'compatible') {
        let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);
        // Fast path: if the time zone is UTC, use native Date.
        if (timeZone === 'UTC') return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
        // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.
        if (timeZone === ($14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === 'compatible') {
            dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
            // Don't use Date constructor here because two-digit years are interpreted in the 20th century.
            let date = new Date();
            let year = ($3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);
            date.setFullYear(year, dateTime.month - 1, dateTime.day);
            date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
            return date.getTime();
        }
        let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
        let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
        let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
        let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
        if (valid.length === 1) return valid[0];
        if (valid.length > 1) switch(disambiguation){
            // 'compatible' means 'earlier' for "fall back" transitions
            case 'compatible':
            case 'earlier':
                return valid[0];
            case 'later':
                return valid[valid.length - 1];
            case 'reject':
                throw new RangeError('Multiple possible absolute times found');
        }
        switch(disambiguation){
            case 'earlier':
                return Math.min(ms - offsetBefore, ms - offsetAfter);
            // 'compatible' means 'later' for "spring forward" transitions
            case 'compatible':
            case 'later':
                return Math.max(ms - offsetBefore, ms - offsetAfter);
            case 'reject':
                throw new RangeError('No such absolute time found');
        }
    }
    function $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = 'compatible') {
        return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
    }
    function $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {
        let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);
        let date = new Date(ms + offset);
        let year = date.getUTCFullYear();
        let month = date.getUTCMonth() + 1;
        let day = date.getUTCDate();
        let hour = date.getUTCHours();
        let minute = date.getUTCMinutes();
        let second = date.getUTCSeconds();
        let millisecond = date.getUTCMilliseconds();
        return new ($35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);
    }
    function $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
    }
    function $11d87f3f76e88657$export$b21e0b124e224484(date, time) {
        let hour = 0, minute = 0, second = 0, millisecond = 0;
        if ('timeZone' in date) ({ hour: hour, minute: minute, second: second, millisecond: millisecond } = date);
        else if ('hour' in date && !time) return date;
        if (time) ({ hour: hour, minute: minute, second: second, millisecond: millisecond } = time);
        return new ($35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
    }
    function $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {
        if (date.calendar.identifier === calendar.identifier) return date;
        let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
        let copy = date.copy();
        copy.calendar = calendar;
        copy.era = calendarDate.era;
        copy.year = calendarDate.year;
        copy.month = calendarDate.month;
        copy.day = calendarDate.day;
        ($735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);
        return copy;
    }
    function $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {
        if (date instanceof ($35ea8db9cb2ccb90$export$d3b7288e7994edea)) {
            if (date.timeZone === timeZone) return date;
            return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);
        }
        let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);
        return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);
    }
    function $11d87f3f76e88657$export$83aac07b4c37b25(date) {
        let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
        return new Date(ms);
    }
    function $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {
        let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    const $735220c2d4774dd3$var$ONE_HOUR = 3600000;
    function $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {
        let mutableDate = date.copy();
        let days = 'hour' in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;
        $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);
        if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);
        mutableDate.month += duration.months || 0;
        $735220c2d4774dd3$var$balanceYearMonth(mutableDate);
        $735220c2d4774dd3$var$constrainMonthDay(mutableDate);
        mutableDate.day += (duration.weeks || 0) * 7;
        mutableDate.day += duration.days || 0;
        mutableDate.day += days;
        $735220c2d4774dd3$var$balanceDay(mutableDate);
        if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);
        // Constrain in case adding ended up with a date outside the valid range for the calendar system.
        // The behavior here is slightly different than when constraining in the `set` function in that
        // we adjust smaller fields to their minimum/maximum values rather than constraining each field
        // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.
        if (mutableDate.year < 1) {
            mutableDate.year = 1;
            mutableDate.month = 1;
            mutableDate.day = 1;
        }
        let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);
        if (mutableDate.year > maxYear) {
            var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;
            let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);
            mutableDate.year = maxYear;
            mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);
            mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);
        }
        if (mutableDate.month < 1) {
            mutableDate.month = 1;
            mutableDate.day = 1;
        }
        let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);
        if (mutableDate.month > maxMonth) {
            mutableDate.month = maxMonth;
            mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);
        }
        mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));
        return mutableDate;
    }
    function $735220c2d4774dd3$var$addYears(date, years) {
        var _date_calendar_isInverseEra, _date_calendar;
        if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;
        date.year += years;
    }
    function $735220c2d4774dd3$var$balanceYearMonth(date) {
        while(date.month < 1){
            $735220c2d4774dd3$var$addYears(date, -1);
            date.month += date.calendar.getMonthsInYear(date);
        }
        let monthsInYear = 0;
        while(date.month > (monthsInYear = date.calendar.getMonthsInYear(date))){
            date.month -= monthsInYear;
            $735220c2d4774dd3$var$addYears(date, 1);
        }
    }
    function $735220c2d4774dd3$var$balanceDay(date) {
        while(date.day < 1){
            date.month--;
            $735220c2d4774dd3$var$balanceYearMonth(date);
            date.day += date.calendar.getDaysInMonth(date);
        }
        while(date.day > date.calendar.getDaysInMonth(date)){
            date.day -= date.calendar.getDaysInMonth(date);
            date.month++;
            $735220c2d4774dd3$var$balanceYearMonth(date);
        }
    }
    function $735220c2d4774dd3$var$constrainMonthDay(date) {
        date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
        date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
    }
    function $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {
        if (date.calendar.constrainDate) date.calendar.constrainDate(date);
        date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
        $735220c2d4774dd3$var$constrainMonthDay(date);
    }
    function $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {
        let inverseDuration = {};
        for(let key in duration)if (typeof duration[key] === 'number') inverseDuration[key] = -duration[key];
        return inverseDuration;
    }
    function $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {
        return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
    }
    function $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {
        let mutableDate = date.copy();
        if (fields.era != null) mutableDate.era = fields.era;
        if (fields.year != null) mutableDate.year = fields.year;
        if (fields.month != null) mutableDate.month = fields.month;
        if (fields.day != null) mutableDate.day = fields.day;
        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);
        return mutableDate;
    }
    function $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {
        let mutableValue = value.copy();
        if (fields.hour != null) mutableValue.hour = fields.hour;
        if (fields.minute != null) mutableValue.minute = fields.minute;
        if (fields.second != null) mutableValue.second = fields.second;
        if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;
        $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);
        return mutableValue;
    }
    function $735220c2d4774dd3$var$balanceTime(time) {
        time.second += Math.floor(time.millisecond / 1000);
        time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);
        time.minute += Math.floor(time.second / 60);
        time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);
        time.hour += Math.floor(time.minute / 60);
        time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);
        let days = Math.floor(time.hour / 24);
        time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);
        return days;
    }
    function $735220c2d4774dd3$export$7555de1e070510cb(time) {
        time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));
        time.second = Math.max(0, Math.min(time.second, 59));
        time.minute = Math.max(0, Math.min(time.minute, 59));
        time.hour = Math.max(0, Math.min(time.hour, 23));
    }
    function $735220c2d4774dd3$var$nonNegativeMod(a, b) {
        let result = a % b;
        if (result < 0) result += b;
        return result;
    }
    function $735220c2d4774dd3$var$addTimeFields(time, duration) {
        time.hour += duration.hours || 0;
        time.minute += duration.minutes || 0;
        time.second += duration.seconds || 0;
        time.millisecond += duration.milliseconds || 0;
        return $735220c2d4774dd3$var$balanceTime(time);
    }
    function $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {
        let res = time.copy();
        $735220c2d4774dd3$var$addTimeFields(res, duration);
        return res;
    }
    function $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {
        return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
    }
    function $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {
        let mutable = value.copy();
        switch(field){
            case 'era':
                {
                    let eras = value.calendar.getEras();
                    let eraIndex = eras.indexOf(value.era);
                    if (eraIndex < 0) throw new Error('Invalid era: ' + value.era);
                    eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);
                    mutable.era = eras[eraIndex];
                    // Constrain the year and other fields within the era, so the era doesn't change when we balance below.
                    $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
                    break;
                }
            case 'year':
                var _mutable_calendar_isInverseEra, _mutable_calendar;
                if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;
                // The year field should not cycle within the era as that can cause weird behavior affecting other fields.
                // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back
                // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.
                mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);
                if (mutable.year === -Infinity) mutable.year = 1;
                if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);
                break;
            case 'month':
                mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);
                break;
            case 'day':
                mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);
                break;
            default:
                throw new Error('Unsupported field ' + field);
        }
        if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);
        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
        return mutable;
    }
    function $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {
        let mutable = value.copy();
        switch(field){
            case 'hour':
                {
                    let hours = value.hour;
                    let min = 0;
                    let max = 23;
                    if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
                        let isPM = hours >= 12;
                        min = isPM ? 12 : 0;
                        max = isPM ? 23 : 11;
                    }
                    mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);
                    break;
                }
            case 'minute':
                mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
                break;
            case 'second':
                mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
                break;
            case 'millisecond':
                mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);
                break;
            default:
                throw new Error('Unsupported field ' + field);
        }
        return mutable;
    }
    function $735220c2d4774dd3$var$cycleValue(value, amount, min, max, round = false) {
        if (round) {
            value += Math.sign(amount);
            if (value < min) value = max;
            let div = Math.abs(amount);
            if (amount > 0) value = Math.ceil(value / div) * div;
            else value = Math.floor(value / div) * div;
            if (value > max) value = min;
        } else {
            value += amount;
            if (value < min) value = max - (min - value - 1);
            else if (value > max) value = min + (value - max - 1);
        }
        return value;
    }
    function $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {
        let ms;
        if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {
            let res = $735220c2d4774dd3$export$e16d8520af44a096(($11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {
                years: duration.years,
                months: duration.months,
                weeks: duration.weeks,
                days: duration.days
            });
            // Changing the date may change the timezone offset, so we need to recompute
            // using the 'compatible' disambiguation.
            ms = ($11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);
        } else // Otherwise, preserve the offset of the original date.
        ms = ($11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
        // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.
        // For example, adding one hour during a DST transition may result in the hour field staying the same or
        // skipping an hour. This results in the offset field changing value instead of the specified field.
        ms += duration.milliseconds || 0;
        ms += (duration.seconds || 0) * 1000;
        ms += (duration.minutes || 0) * 60000;
        ms += (duration.hours || 0) * 3600000;
        let res = ($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);
        return ($11d87f3f76e88657$export$b4a036af3fc0b032)(res, dateTime.calendar);
    }
    function $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {
        return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
    }
    function $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {
        // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.
        // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC
        // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.
        switch(field){
            case 'hour':
                {
                    let min = 0;
                    let max = 23;
                    if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
                        let isPM = dateTime.hour >= 12;
                        min = isPM ? 12 : 0;
                        max = isPM ? 23 : 11;
                    }
                    // The minimum and maximum hour may be affected by daylight saving time.
                    // For example, it might jump forward at midnight, and skip 1am.
                    // Or it might end at midnight and repeat the 11pm hour. To handle this, we get
                    // the possible absolute times for the min and max, and find the maximum range
                    // that is within the current day.
                    let plainDateTime = ($11d87f3f76e88657$export$b21e0b124e224484)(dateTime);
                    let minDate = ($11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
                        hour: min
                    }), new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
                    let minAbsolute = [
                        ($11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, 'earlier'),
                        ($11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, 'later')
                    ].filter((ms)=>($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day)[0];
                    let maxDate = ($11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
                        hour: max
                    }), new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
                    let maxAbsolute = [
                        ($11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, 'earlier'),
                        ($11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, 'later')
                    ].filter((ms)=>($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day).pop();
                    // Since hours may repeat, we need to operate on the absolute time in milliseconds.
                    // This is done in hours from the Unix epoch so that cycleValue works correctly,
                    // and then converted back to milliseconds.
                    let ms = ($11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
                    let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);
                    let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;
                    ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;
                    // Now compute the new timezone offset, and convert the absolute time back to local time.
                    return ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
                }
            case 'minute':
            case 'second':
            case 'millisecond':
                // @ts-ignore
                return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);
            case 'era':
            case 'year':
            case 'month':
            case 'day':
                {
                    let res = $735220c2d4774dd3$export$d52ced6badfb9a4c(($11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options);
                    let ms = ($11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);
                    return ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
                }
            default:
                throw new Error('Unsupported field ' + field);
        }
    }
    function $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
        // Set the date/time fields, and recompute the UTC offset to account for DST changes.
        // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.
        let plainDateTime = ($11d87f3f76e88657$export$b21e0b124e224484)(dateTime);
        let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);
        // If the resulting plain date time values are equal, return the original time.
        // We don't want to change the offset when setting the time to the same value.
        if (res.compare(plainDateTime) === 0) return dateTime;
        let ms = ($11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);
        return ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
    }

    function $fae977aafc393c5c$export$f59dee82248f5ad4(time) {
        return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;
    }
    function $fae977aafc393c5c$export$60dfd74aa96791bd(date) {
        let gregorianDate = ($11d87f3f76e88657$export$b4a036af3fc0b032)(date, new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
        return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;
    }
    function $fae977aafc393c5c$export$4223de14708adc63(date) {
        // @ts-ignore
        return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;
    }
    function $fae977aafc393c5c$var$offsetToString(offset) {
        let sign = Math.sign(offset) < 0 ? '-' : '+';
        offset = Math.abs(offset);
        let offsetHours = Math.floor(offset / 3600000);
        let offsetMinutes = offset % 3600000 / 60000;
        return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;
    }
    function $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {
        return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $35ea8db9cb2ccb90$var$shiftArgs(args) {
        let calendar = typeof args[0] === 'object' ? args.shift() : new ($3b62074eb05584b2$export$80ee6245ec4f29ec)();
        let era;
        if (typeof args[0] === 'string') era = args.shift();
        else {
            let eras = calendar.getEras();
            era = eras[eras.length - 1];
        }
        let year = args.shift();
        let month = args.shift();
        let day = args.shift();
        return [
            calendar,
            era,
            year,
            month,
            day
        ];
    }
    var // This prevents TypeScript from allowing other types with the same fields to match.
    // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.
    // If that behavior is desired, use the AnyCalendarDate interface instead.
    // @ts-ignore
    $35ea8db9cb2ccb90$var$_type = /*#__PURE__*/ new WeakMap();
    class $35ea8db9cb2ccb90$export$99faa760c7908e4f {
        /** Returns a copy of this date. */ copy() {
            if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);
            else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
        }
        /** Returns a new `CalendarDate` with the given duration added to it. */ add(duration) {
            return ($735220c2d4774dd3$export$e16d8520af44a096)(this, duration);
        }
        /** Returns a new `CalendarDate` with the given duration subtracted from it. */ subtract(duration) {
            return ($735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);
        }
        /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {
            return ($735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);
        }
        /**
       * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
       * When the resulting value reaches the limits of the field, it wraps around.
       */ cycle(field, amount, options) {
            return ($735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);
        }
        /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */ toDate(timeZone) {
            return ($11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);
        }
        /** Converts the date to an ISO 8601 formatted string. */ toString() {
            return ($fae977aafc393c5c$export$60dfd74aa96791bd)(this);
        }
        /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {
            return ($14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);
        }
        constructor(...args){
            (_class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type, {
                writable: true,
                value: void 0
            });
            let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
            this.calendar = calendar;
            this.era = era;
            this.year = year;
            this.month = month;
            this.day = day;
            ($735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
        }
    }
    var // This prevents TypeScript from allowing other types with the same fields to match.
    // @ts-ignore
    $35ea8db9cb2ccb90$var$_type1 = /*#__PURE__*/ new WeakMap();
    class $35ea8db9cb2ccb90$export$680ea196effce5f {
        /** Returns a copy of this time. */ copy() {
            return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
        }
        /** Returns a new `Time` with the given duration added to it. */ add(duration) {
            return ($735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);
        }
        /** Returns a new `Time` with the given duration subtracted from it. */ subtract(duration) {
            return ($735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);
        }
        /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {
            return ($735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);
        }
        /**
       * Returns a new `Time` with the given field adjusted by a specified amount.
       * When the resulting value reaches the limits of the field, it wraps around.
       */ cycle(field, amount, options) {
            return ($735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);
        }
        /** Converts the time to an ISO 8601 formatted string. */ toString() {
            return ($fae977aafc393c5c$export$f59dee82248f5ad4)(this);
        }
        /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */ compare(b) {
            return ($14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b);
        }
        constructor(hour = 0, minute = 0, second = 0, millisecond = 0){
            (_class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type1, {
                writable: true,
                value: void 0
            });
            this.hour = hour;
            this.minute = minute;
            this.second = second;
            this.millisecond = millisecond;
            ($735220c2d4774dd3$export$7555de1e070510cb)(this);
        }
    }
    var // This prevents TypeScript from allowing other types with the same fields to match.
    // @ts-ignore
    $35ea8db9cb2ccb90$var$_type2 = /*#__PURE__*/ new WeakMap();
    class $35ea8db9cb2ccb90$export$ca871e8dbb80966f {
        /** Returns a copy of this date. */ copy() {
            if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
            else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
        }
        /** Returns a new `CalendarDateTime` with the given duration added to it. */ add(duration) {
            return ($735220c2d4774dd3$export$e16d8520af44a096)(this, duration);
        }
        /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */ subtract(duration) {
            return ($735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);
        }
        /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {
            return ($735220c2d4774dd3$export$adaa4cf7ef1b65be)(($735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);
        }
        /**
       * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
       * When the resulting value reaches the limits of the field, it wraps around.
       */ cycle(field, amount, options) {
            switch(field){
                case 'era':
                case 'year':
                case 'month':
                case 'day':
                    return ($735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);
                default:
                    return ($735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);
            }
        }
        /** Converts the date to a native JavaScript Date object in the given time zone. */ toDate(timeZone, disambiguation) {
            return ($11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);
        }
        /** Converts the date to an ISO 8601 formatted string. */ toString() {
            return ($fae977aafc393c5c$export$4223de14708adc63)(this);
        }
        /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {
            let res = ($14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);
            if (res === 0) return ($14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, ($11d87f3f76e88657$export$b21e0b124e224484)(b));
            return res;
        }
        constructor(...args){
            (_class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type2, {
                writable: true,
                value: void 0
            });
            let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
            this.calendar = calendar;
            this.era = era;
            this.year = year;
            this.month = month;
            this.day = day;
            this.hour = args.shift() || 0;
            this.minute = args.shift() || 0;
            this.second = args.shift() || 0;
            this.millisecond = args.shift() || 0;
            ($735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
        }
    }
    var // This prevents TypeScript from allowing other types with the same fields to match.
    // @ts-ignore
    $35ea8db9cb2ccb90$var$_type3 = /*#__PURE__*/ new WeakMap();
    class $35ea8db9cb2ccb90$export$d3b7288e7994edea {
        /** Returns a copy of this date. */ copy() {
            if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
            else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
        }
        /** Returns a new `ZonedDateTime` with the given duration added to it. */ add(duration) {
            return ($735220c2d4774dd3$export$96b1d28349274637)(this, duration);
        }
        /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */ subtract(duration) {
            return ($735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);
        }
        /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields, disambiguation) {
            return ($735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);
        }
        /**
       * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
       * When the resulting value reaches the limits of the field, it wraps around.
       */ cycle(field, amount, options) {
            return ($735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options);
        }
        /** Converts the date to a native JavaScript Date object. */ toDate() {
            return ($11d87f3f76e88657$export$83aac07b4c37b25)(this);
        }
        /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */ toString() {
            return ($fae977aafc393c5c$export$bf79f1ebf4b18792)(this);
        }
        /** Converts the date to an ISO 8601 formatted string in UTC. */ toAbsoluteString() {
            return this.toDate().toISOString();
        }
        /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {
            // TODO: Is this a bad idea??
            return this.toDate().getTime() - ($11d87f3f76e88657$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();
        }
        constructor(...args){
            (_class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type3, {
                writable: true,
                value: void 0
            });
            let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
            let timeZone = args.shift();
            let offset = args.shift();
            this.calendar = calendar;
            this.era = era;
            this.year = year;
            this.month = month;
            this.day = day;
            this.timeZone = timeZone;
            this.offset = offset;
            this.hour = args.shift() || 0;
            this.minute = args.shift() || 0;
            this.second = args.shift() || 0;
            this.millisecond = args.shift() || 0;
            ($735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.


    const $62225008020f0a13$var$ERA_START_DATES = [
        [
            1868,
            9,
            8
        ],
        [
            1912,
            7,
            30
        ],
        [
            1926,
            12,
            25
        ],
        [
            1989,
            1,
            8
        ],
        [
            2019,
            5,
            1
        ]
    ];
    const $62225008020f0a13$var$ERA_END_DATES = [
        [
            1912,
            7,
            29
        ],
        [
            1926,
            12,
            24
        ],
        [
            1989,
            1,
            7
        ],
        [
            2019,
            4,
            30
        ]
    ];
    const $62225008020f0a13$var$ERA_ADDENDS = [
        1867,
        1911,
        1925,
        1988,
        2018
    ];
    const $62225008020f0a13$var$ERA_NAMES = [
        'meiji',
        'taisho',
        'showa',
        'heisei',
        'reiwa'
    ];
    function $62225008020f0a13$var$findEraFromGregorianDate(date) {
        const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(([year, month, day])=>{
            if (date.year < year) return true;
            if (date.year === year && date.month < month) return true;
            if (date.year === year && date.month === month && date.day < day) return true;
            return false;
        });
        if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;
        if (idx === 0) return 0;
        return idx - 1;
    }
    function $62225008020f0a13$var$toGregorian(date) {
        let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];
        if (!eraAddend) throw new Error('Unknown era: ' + date.era);
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);
    }
    class $62225008020f0a13$export$b746ab2b60cdffbf extends ($3b62074eb05584b2$export$80ee6245ec4f29ec) {
        fromJulianDay(jd) {
            let date = super.fromJulianDay(jd);
            let era = $62225008020f0a13$var$findEraFromGregorianDate(date);
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);
        }
        toJulianDay(date) {
            return super.toJulianDay($62225008020f0a13$var$toGregorian(date));
        }
        balanceDate(date) {
            let gregorianDate = $62225008020f0a13$var$toGregorian(date);
            let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);
            if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {
                date.era = $62225008020f0a13$var$ERA_NAMES[era];
                date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];
            }
            // Constrain in case we went before the first supported era.
            this.constrainDate(date);
        }
        constrainDate(date) {
            let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
            let end = $62225008020f0a13$var$ERA_END_DATES[idx];
            if (end != null) {
                let [endYear, endMonth, endDay] = end;
                // Constrain the year to the maximum possible value in the era.
                // Then constrain the month and day fields within that.
                let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];
                date.year = Math.max(1, Math.min(maxYear, date.year));
                if (date.year === maxYear) {
                    date.month = Math.min(endMonth, date.month);
                    if (date.month === endMonth) date.day = Math.min(endDay, date.day);
                }
            }
            if (date.year === 1 && idx >= 0) {
                let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];
                date.month = Math.max(startMonth, date.month);
                if (date.month === startMonth) date.day = Math.max(startDay, date.day);
            }
        }
        getEras() {
            return $62225008020f0a13$var$ERA_NAMES;
        }
        getYearsInEra(date) {
            // Get the number of years in the era, taking into account the date's month and day fields.
            let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
            let cur = $62225008020f0a13$var$ERA_START_DATES[era];
            let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];
            if (next == null) // 9999 gregorian is the maximum year allowed.
            return 9999 - cur[0] + 1;
            let years = next[0] - cur[0];
            if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;
            return years;
        }
        getDaysInMonth(date) {
            return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));
        }
        getMinimumMonthInYear(date) {
            let start = $62225008020f0a13$var$getMinimums(date);
            return start ? start[1] : 1;
        }
        getMinimumDayInMonth(date) {
            let start = $62225008020f0a13$var$getMinimums(date);
            return start && date.month === start[1] ? start[2] : 1;
        }
        constructor(...args){
            super(...args);
            this.identifier = 'japanese';
        }
    }
    function $62225008020f0a13$var$getMinimums(date) {
        if (date.year === 1) {
            let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
            return $62225008020f0a13$var$ERA_START_DATES[idx];
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from ICU.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.


    const $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;
    class $8d73d47422ca7302$export$42d20a78301dee44 extends ($3b62074eb05584b2$export$80ee6245ec4f29ec) {
        fromJulianDay(jd) {
            let gregorianDate = super.fromJulianDay(jd);
            let year = ($3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);
        }
        toJulianDay(date) {
            return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));
        }
        getEras() {
            return [
                'BE'
            ];
        }
        getDaysInMonth(date) {
            return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));
        }
        balanceDate() {}
        constructor(...args){
            super(...args);
            this.identifier = 'buddhist';
        }
    }
    function $8d73d47422ca7302$var$toGregorian(date) {
        let [era, year] = ($3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from ICU.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.


    const $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;
    function $5f31bd6f0c8940b2$var$gregorianYear(date) {
        return date.era === 'minguo' ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
    }
    function $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {
        let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
        if (y > 0) return [
            'minguo',
            y
        ];
        else return [
            'before_minguo',
            1 - y
        ];
    }
    class $5f31bd6f0c8940b2$export$65e01080afcb0799 extends ($3b62074eb05584b2$export$80ee6245ec4f29ec) {
        fromJulianDay(jd) {
            let date = super.fromJulianDay(jd);
            let extendedYear = ($3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);
            let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);
        }
        toJulianDay(date) {
            return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));
        }
        getEras() {
            return [
                'before_minguo',
                'minguo'
            ];
        }
        balanceDate(date) {
            let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));
            date.era = era;
            date.year = year;
        }
        isInverseEra(date) {
            return date.era === 'before_minguo';
        }
        getDaysInMonth(date) {
            return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));
        }
        getYearsInEra(date) {
            return date.era === 'before_minguo' ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
        }
        constructor(...args){
            super(...args);
            this.identifier = 'roc' // Republic of China
            ;
        }
    }
    function $5f31bd6f0c8940b2$var$toGregorian(date) {
        let [era, year] = ($3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date));
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from ICU.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.


    const $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948320;
    // Number of days from the start of the year to the start of each month.
    const $f3ed2e4472ae7e25$var$MONTH_START = [
        0,
        31,
        62,
        93,
        124,
        155,
        186,
        216,
        246,
        276,
        306,
        336 // Esfand
    ];
    class $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {
        fromJulianDay(jd) {
            let daysSinceEpoch = jd - $f3ed2e4472ae7e25$var$PERSIAN_EPOCH;
            let year = 1 + Math.floor((33 * daysSinceEpoch + 3) / 12053);
            let farvardin1 = 365 * (year - 1) + Math.floor((8 * year + 21) / 33);
            let dayOfYear = daysSinceEpoch - farvardin1;
            let month = dayOfYear < 216 ? Math.floor(dayOfYear / 31) : Math.floor((dayOfYear - 6) / 30);
            let day = dayOfYear - $f3ed2e4472ae7e25$var$MONTH_START[month] + 1;
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month + 1, day);
        }
        toJulianDay(date) {
            let jd = $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 365 * (date.year - 1) + Math.floor((8 * date.year + 21) / 33);
            jd += $f3ed2e4472ae7e25$var$MONTH_START[date.month - 1];
            jd += date.day;
            return jd;
        }
        getMonthsInYear() {
            return 12;
        }
        getDaysInMonth(date) {
            if (date.month <= 6) return 31;
            if (date.month <= 11) return 30;
            let isLeapYear = ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(25 * date.year + 11, 33) < 8;
            return isLeapYear ? 30 : 29;
        }
        getEras() {
            return [
                'AP'
            ];
        }
        getYearsInEra() {
            // 9378-10-10 persian is 9999-12-31 gregorian.
            // Round down to 9377 to set the maximum full year.
            return 9377;
        }
        constructor(){
            this.identifier = 'persian';
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from ICU.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.


    // Starts in 78 AD,
    const $82c358003bdda0a8$var$INDIAN_ERA_START = 78;
    // The Indian year starts 80 days later than the Gregorian year.
    const $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;
    class $82c358003bdda0a8$export$39f31c639fa15726 extends ($3b62074eb05584b2$export$80ee6245ec4f29ec) {
        fromJulianDay(jd) {
            // Gregorian date for Julian day
            let date = super.fromJulianDay(jd);
            // Year in Saka era
            let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;
            // Day number in Gregorian year (starting from 0)
            let yDay = jd - ($3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);
            let leapMonth;
            if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {
                //  Day is at the end of the preceding Saka year
                indianYear--;
                // Days in leapMonth this year, previous Gregorian year
                leapMonth = ($3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;
                yDay += leapMonth + 155 + 90 + 10;
            } else {
                // Days in leapMonth this year
                leapMonth = ($3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;
                yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;
            }
            let indianMonth;
            let indianDay;
            if (yDay < leapMonth) {
                indianMonth = 1;
                indianDay = yDay + 1;
            } else {
                let mDay = yDay - leapMonth;
                if (mDay < 155) {
                    indianMonth = Math.floor(mDay / 31) + 2;
                    indianDay = mDay % 31 + 1;
                } else {
                    mDay -= 155;
                    indianMonth = Math.floor(mDay / 30) + 7;
                    indianDay = mDay % 30 + 1;
                }
            }
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);
        }
        toJulianDay(date) {
            let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;
            let [era, year] = ($3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear);
            let leapMonth;
            let jd;
            if (($3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {
                leapMonth = 31;
                jd = ($3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);
            } else {
                leapMonth = 30;
                jd = ($3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);
            }
            if (date.month === 1) return jd + date.day - 1;
            jd += leapMonth + Math.min(date.month - 2, 5) * 31;
            if (date.month >= 8) jd += (date.month - 7) * 30;
            jd += date.day - 1;
            return jd;
        }
        getDaysInMonth(date) {
            if (date.month === 1 && ($3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;
            if (date.month >= 2 && date.month <= 6) return 31;
            return 30;
        }
        getYearsInEra() {
            // 9999-12-31 gregorian is 9920-10-10 indian.
            // Round down to 9919 for the last full year.
            return 9919;
        }
        getEras() {
            return [
                'saka'
            ];
        }
        balanceDate() {}
        constructor(...args){
            super(...args);
            this.identifier = 'indian';
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from ICU.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.

    const $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)
    const $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)
    const $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;
    const $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;
    const $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;
    function $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {
        return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;
    }
    function $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {
        let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);
        let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);
        let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);
    }
    function $f2f3e0e3a817edbd$var$isLeapYear(year) {
        return (14 + 11 * year) % 30 < 11;
    }
    class $f2f3e0e3a817edbd$export$2066795aadd37bfc {
        fromJulianDay(jd) {
            return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);
        }
        toJulianDay(date) {
            return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);
        }
        getDaysInMonth(date) {
            let length = 29 + date.month % 2;
            if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;
            return length;
        }
        getMonthsInYear() {
            return 12;
        }
        getDaysInYear(date) {
            return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;
        }
        getYearsInEra() {
            // 9999 gregorian
            return 9665;
        }
        getEras() {
            return [
                'AH'
            ];
        }
        constructor(){
            this.identifier = 'islamic-civil';
        }
    }
    class $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {
        fromJulianDay(jd) {
            return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);
        }
        toJulianDay(date) {
            return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);
        }
        constructor(...args){
            super(...args);
            this.identifier = 'islamic-tbla';
        }
    }
    // Generated by scripts/generate-umalqura.js
    const $f2f3e0e3a817edbd$var$UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';
    let $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;
    let $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;
    function $f2f3e0e3a817edbd$var$umalquraYearStart(year) {
        return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
    }
    function $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {
        let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;
        let mask = 0x01 << 11 - (month - 1);
        if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;
        else return 30;
    }
    function $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {
        let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);
        for(let i = 1; i < month; i++)day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);
        return day;
    }
    function $f2f3e0e3a817edbd$var$umalquraYearLength(year) {
        return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
    }
    class $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {
        fromJulianDay(jd) {
            let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;
            let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);
            let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);
            if (days < startDays || days > endDays) return super.fromJulianDay(jd);
            else {
                let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;
                let m = 1;
                let d = 1;
                while(d > 0){
                    y++;
                    d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;
                    let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);
                    if (d === yearLength) {
                        m = 12;
                        break;
                    } else if (d < yearLength) {
                        let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);
                        m = 1;
                        while(d > monthLength){
                            d -= monthLength;
                            m++;
                            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);
                        }
                        break;
                    }
                }
                return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);
            }
        }
        toJulianDay(date) {
            if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);
            return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);
        }
        getDaysInMonth(date) {
            if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);
            return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);
        }
        getDaysInYear(date) {
            if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);
            return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);
        }
        constructor(){
            super();
            this.identifier = 'islamic-umalqura';
            if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), (c)=>c.charCodeAt(0)).buffer);
            if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {
                $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);
                let yearStart = 0;
                for(let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++){
                    $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;
                    for(let i = 1; i <= 12; i++)yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);
                }
            }
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from ICU.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.


    const $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;
    // Hebrew date calculations are performed in terms of days, hours, and
    // "parts" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.
    const $7c5f6fbf42389787$var$HOUR_PARTS = 1080;
    const $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;
    // An approximate value for the length of a lunar month.
    // It is used to calculate the approximate year and month of a given
    // absolute date.
    const $7c5f6fbf42389787$var$MONTH_DAYS = 29;
    const $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;
    const $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;
    function $7c5f6fbf42389787$var$isLeapYear(year) {
        return ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;
    }
    // Test for delay of start of new year and to avoid
    // Sunday, Wednesday, and Friday as start of the new year.
    function $7c5f6fbf42389787$var$hebrewDelay1(year) {
        let months = Math.floor((235 * year - 234) / 19);
        let parts = 12084 + 13753 * months;
        let day = months * 29 + Math.floor(parts / 25920);
        if (($2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;
        return day;
    }
    // Check for delay in start of new year due to length of adjacent years
    function $7c5f6fbf42389787$var$hebrewDelay2(year) {
        let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);
        let present = $7c5f6fbf42389787$var$hebrewDelay1(year);
        let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);
        if (next - present === 356) return 2;
        if (present - last === 382) return 1;
        return 0;
    }
    function $7c5f6fbf42389787$var$startOfYear(year) {
        return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);
    }
    function $7c5f6fbf42389787$var$getDaysInYear(year) {
        return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);
    }
    function $7c5f6fbf42389787$var$getYearType(year) {
        let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);
        if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.
        switch(yearLength){
            case 353:
                return 0; // deficient
            case 354:
                return 1; // normal
            case 355:
                return 2; // complete
        }
    }
    function $7c5f6fbf42389787$var$getDaysInMonth(year, month) {
        // Normalize month numbers from 1 - 13, even on non-leap years
        if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;
        // First of all, dispose of fixed-length 29 day months
        if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;
        let yearType = $7c5f6fbf42389787$var$getYearType(year);
        // If it's Heshvan, days depend on length of year
        if (month === 2) return yearType === 2 ? 30 : 29;
        // Similarly, Kislev varies with the length of year
        if (month === 3) return yearType === 0 ? 29 : 30;
        // Adar I only exists in leap years
        if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;
        return 30;
    }
    class $7c5f6fbf42389787$export$ca405048b8fb5af {
        fromJulianDay(jd) {
            let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;
            let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)
            let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)
            let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year
            let dayOfYear = Math.floor(d - ys);
            // Because of the postponement rules, it's possible to guess wrong.  Fix it.
            while(dayOfYear < 1){
                year--;
                ys = $7c5f6fbf42389787$var$startOfYear(year);
                dayOfYear = Math.floor(d - ys);
            }
            // Now figure out which month we're in, and the date within that month
            let month = 1;
            let monthStart = 0;
            while(monthStart < dayOfYear){
                monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);
                month++;
            }
            month--;
            monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);
            let day = dayOfYear - monthStart;
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);
        }
        toJulianDay(date) {
            let jd = $7c5f6fbf42389787$var$startOfYear(date.year);
            for(let month = 1; month < date.month; month++)jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);
            return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;
        }
        getDaysInMonth(date) {
            return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);
        }
        getMonthsInYear(date) {
            return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;
        }
        getDaysInYear(date) {
            return $7c5f6fbf42389787$var$getDaysInYear(date.year);
        }
        getYearsInEra() {
            // 6239 gregorian
            return 9999;
        }
        getEras() {
            return [
                'AM'
            ];
        }
        balanceYearMonth(date, previousDate) {
            // Keep date in the same month when switching between leap years and non leap years
            if (previousDate.year !== date.year) {
                if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;
                else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;
            }
        }
        constructor(){
            this.identifier = 'hebrew';
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Portions of the code in this file are based on code from ICU.
    // Original licensing can be found in the NOTICE file in the root directory of this source tree.

    const $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;
    const $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;
    // The delta between Amete Alem 1 and Amete Mihret 1
    // AA 5501 = AM 1
    const $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;
    function $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {
        return epoch // difference from Julian epoch to 1,1,1
         + 365 * year // number of days from years
         + Math.floor(year / 4) // extra day of leap year
         + 30 * (month - 1 // number of days from months (1 based)
        ) + day - 1 // number of days for present month (1 based)
        ;
    }
    function $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {
        let year = Math.floor(4 * (jd - epoch) / 1461);
        let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);
        let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);
        return [
            year,
            month,
            day
        ];
    }
    function $b956b2d7a6cf451f$var$getLeapDay(year) {
        return Math.floor(year % 4 / 3);
    }
    function $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {
        // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and
        // an intercalary month at the end of the year of 5 or 6 days, depending whether
        // the year is a leap year or not. The Leap Year follows the same rules as the
        // Julian Calendar so that the extra month always has six days in the year before
        // a Julian Leap Year.
        if (month % 13 !== 0) // not intercalary month
        return 30;
        else // intercalary month 5 days + possible leap day
        return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;
    }
    class $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
        fromJulianDay(jd) {
            let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
            let era = 'AM';
            if (year <= 0) {
                era = 'AA';
                year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
            }
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);
        }
        toJulianDay(date) {
            let year = date.year;
            if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
            return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);
        }
        getDaysInMonth(date) {
            return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);
        }
        getMonthsInYear() {
            return 13;
        }
        getDaysInYear(date) {
            return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);
        }
        getYearsInEra(date) {
            // 9999-12-31 gregorian is 9992-20-02 ethiopic.
            // Round down to 9991 for the last full year.
            // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.
            return date.era === 'AA' ? 9999 : 9991;
        }
        getEras() {
            return [
                'AA',
                'AM'
            ];
        }
        constructor(){
            this.identifier = 'ethiopic';
        }
    }
    class $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
        fromJulianDay(jd) {
            let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
            year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, 'AA', year, month, day);
        }
        getEras() {
            return [
                'AA'
            ];
        }
        getYearsInEra() {
            // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.
            return 9999;
        }
        constructor(...args){
            super(...args);
            this.identifier = 'ethioaa' // also known as 'ethiopic-amete-alem' in ICU
            ;
        }
    }
    class $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
        fromJulianDay(jd) {
            let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);
            let era = 'CE';
            if (year <= 0) {
                era = 'BCE';
                year = 1 - year;
            }
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);
        }
        toJulianDay(date) {
            let year = date.year;
            if (date.era === 'BCE') year = 1 - year;
            return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);
        }
        getDaysInMonth(date) {
            let year = date.year;
            if (date.era === 'BCE') year = 1 - year;
            return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);
        }
        isInverseEra(date) {
            return date.era === 'BCE';
        }
        balanceDate(date) {
            if (date.year <= 0) {
                date.era = date.era === 'BCE' ? 'CE' : 'BCE';
                date.year = 1 - date.year;
            }
        }
        getEras() {
            return [
                'BCE',
                'CE'
            ];
        }
        getYearsInEra(date) {
            // 9999-12-30 gregorian is 9716-02-20 coptic.
            // Round down to 9715 for the last full year.
            // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.
            return date.era === 'BCE' ? 9999 : 9715;
        }
        constructor(...args){
            super(...args);
            this.identifier = 'coptic';
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 








    function $64244302c3013299$export$dd0bbc9b26defe37(name) {
        switch(name){
            case 'buddhist':
                return new ($8d73d47422ca7302$export$42d20a78301dee44)();
            case 'ethiopic':
                return new ($b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();
            case 'ethioaa':
                return new ($b956b2d7a6cf451f$export$d72e0c37005a4914)();
            case 'coptic':
                return new ($b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();
            case 'hebrew':
                return new ($7c5f6fbf42389787$export$ca405048b8fb5af)();
            case 'indian':
                return new ($82c358003bdda0a8$export$39f31c639fa15726)();
            case 'islamic-civil':
                return new ($f2f3e0e3a817edbd$export$2066795aadd37bfc)();
            case 'islamic-tbla':
                return new ($f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();
            case 'islamic-umalqura':
                return new ($f2f3e0e3a817edbd$export$5baab4758c231076)();
            case 'japanese':
                return new ($62225008020f0a13$export$b746ab2b60cdffbf)();
            case 'persian':
                return new ($f3ed2e4472ae7e25$export$37fccdbfd14c5939)();
            case 'roc':
                return new ($5f31bd6f0c8940b2$export$65e01080afcb0799)();
            case 'gregory':
            default:
                return new ($3b62074eb05584b2$export$80ee6245ec4f29ec)();
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ let $fb18d541ea1ad717$var$formatterCache = new Map();
    class $fb18d541ea1ad717$export$ad991b66133851cf {
        /** Formats a date as a string according to the locale and format options passed to the constructor. */ format(value) {
            return this.formatter.format(value);
        }
        /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */ formatToParts(value) {
            return this.formatter.formatToParts(value);
        }
        /** Formats a date range as a string. */ formatRange(start, end) {
            // @ts-ignore
            if (typeof this.formatter.formatRange === 'function') // @ts-ignore
            return this.formatter.formatRange(start, end);
            if (end < start) throw new RangeError('End date must be >= start date');
            // Very basic fallback for old browsers.
            return `${this.formatter.format(start)} \u{2013} ${this.formatter.format(end)}`;
        }
        /** Formats a date range as an array of parts. */ formatRangeToParts(start, end) {
            // @ts-ignore
            if (typeof this.formatter.formatRangeToParts === 'function') // @ts-ignore
            return this.formatter.formatRangeToParts(start, end);
            if (end < start) throw new RangeError('End date must be >= start date');
            let startParts = this.formatter.formatToParts(start);
            let endParts = this.formatter.formatToParts(end);
            return [
                ...startParts.map((p)=>({
                        ...p,
                        source: 'startRange'
                    })),
                {
                    type: 'literal',
                    value: " \u2013 ",
                    source: 'shared'
                },
                ...endParts.map((p)=>({
                        ...p,
                        source: 'endRange'
                    }))
            ];
        }
        /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {
            let resolvedOptions = this.formatter.resolvedOptions();
            if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
                if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
                resolvedOptions.hourCycle = this.resolvedHourCycle;
                resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';
            }
            // Safari uses a different name for the Ethiopic (Amete Alem) calendar.
            // https://bugs.webkit.org/show_bug.cgi?id=241564
            if (resolvedOptions.calendar === 'ethiopic-amete-alem') resolvedOptions.calendar = 'ethioaa';
            return resolvedOptions;
        }
        constructor(locale, options = {}){
            this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);
            this.options = options;
        }
    }
    // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.
    //   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)
    //     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)
    //     rather than h12 (12:00 - 11:59).
    //   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal
    //     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]
    // [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791
    // [2] https://github.com/tc39/ecma402/issues/402
    // [3] https://bugs.webkit.org/show_bug.cgi?id=229313
    // https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802
    const $fb18d541ea1ad717$var$hour12Preferences = {
        true: {
            // Only Japanese uses the h11 style for 12 hour time. All others use h12.
            ja: 'h11'
        },
        false: {
        }
    };
    function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {
        // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.
        // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.
        if (typeof options.hour12 === 'boolean' && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
            options = {
                ...options
            };
            let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split('-')[0]];
            let defaultHourCycle = options.hour12 ? 'h12' : 'h23';
            options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
            delete options.hour12;
        }
        let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
        if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
        let numberFormatter = new Intl.DateTimeFormat(locale, options);
        $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
        return numberFormatter;
    }
    let $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;
    function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
        if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {
            hour: 'numeric',
            hour12: false
        }).format(new Date(2020, 2, 3, 0)) === '24';
        return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
    }
    let $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;
    function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
        if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {
            hour: 'numeric',
            hour12: false
        }).resolvedOptions().hourCycle === 'h12';
        return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
    }
    function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {
        if (!options.timeStyle && !options.hour) return undefined;
        // Work around buggy results in resolved hourCycle and hour12 options in WebKit.
        // Format the minimum possible hour and maximum possible hour in a day and parse the results.
        locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');
        locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';
        let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {
            ...options,
            timeZone: undefined // use local timezone
        });
        let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p)=>p.type === 'hour').value, 10);
        let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p)=>p.type === 'hour').value, 10);
        if (min === 0 && max === 23) return 'h23';
        if (min === 24 && max === 23) return 'h24';
        if (min === 0 && max === 11) return 'h11';
        if (min === 12 && max === 11) return 'h12';
        throw new Error('Unexpected hour cycle result');
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {
        // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.
        options = ($5a387cc49350e6db$export$722debc0e56fea39)(options !== null && options !== void 0 ? options : {}, $896ba0a80a8f4d36$var$isEqual);
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        return (0, wp.element.useMemo)(()=>new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, options), [
            locale,
            options
        ]);
    }
    function $896ba0a80a8f4d36$var$isEqual(a, b) {
        if (a === b) return true;
        let aKeys = Object.keys(a);
        let bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) return false;
        for (let key of aKeys){
            if (b[key] !== a[key]) return false;
        }
        return true;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ let $488c6ddbf4ef74c2$var$formatterCache = new Map();
    let $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
    try {
        // @ts-ignore
        $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat('de-DE', {
            signDisplay: 'exceptZero'
        }).resolvedOptions().signDisplay === 'exceptZero';
    // eslint-disable-next-line no-empty
    } catch (e) {}
    let $488c6ddbf4ef74c2$var$supportsUnit = false;
    try {
        // @ts-ignore
        $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat('de-DE', {
            style: 'unit',
            unit: 'degree'
        }).resolvedOptions().style === 'unit';
    // eslint-disable-next-line no-empty
    } catch (e) {}
    // Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.
    // Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.
    // Values were determined by switching to each locale manually in Chrome.
    const $488c6ddbf4ef74c2$var$UNITS = {
        degree: {
            narrow: {
                default: "\xb0",
                'ja-JP': " \u5EA6",
                'zh-TW': "\u5EA6",
                'sl-SI': " \xb0"
            }
        }
    };
    class $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {
        /** Formats a number value as a string, according to the locale and options provided to the constructor. */ format(value) {
            let res = '';
            if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
            else res = this.numberFormatter.format(value);
            if (this.options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {
                var _UNITS_unit;
                let { unit: unit, unitDisplay: unitDisplay = 'short', locale: locale } = this.resolvedOptions();
                if (!unit) return res;
                let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];
                res += values[locale] || values.default;
            }
            return res;
        }
        /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */ formatToParts(value) {
            // TODO: implement signDisplay for formatToParts
            // @ts-ignore
            return this.numberFormatter.formatToParts(value);
        }
        /** Formats a number range as a string. */ formatRange(start, end) {
            // @ts-ignore
            if (typeof this.numberFormatter.formatRange === 'function') // @ts-ignore
            return this.numberFormatter.formatRange(start, end);
            if (end < start) throw new RangeError('End date must be >= start date');
            // Very basic fallback for old browsers.
            return `${this.format(start)} \u{2013} ${this.format(end)}`;
        }
        /** Formats a number range as an array of parts. */ formatRangeToParts(start, end) {
            // @ts-ignore
            if (typeof this.numberFormatter.formatRangeToParts === 'function') // @ts-ignore
            return this.numberFormatter.formatRangeToParts(start, end);
            if (end < start) throw new RangeError('End date must be >= start date');
            let startParts = this.numberFormatter.formatToParts(start);
            let endParts = this.numberFormatter.formatToParts(end);
            return [
                ...startParts.map((p)=>({
                        ...p,
                        source: 'startRange'
                    })),
                {
                    type: 'literal',
                    value: " \u2013 ",
                    source: 'shared'
                },
                ...endParts.map((p)=>({
                        ...p,
                        source: 'endRange'
                    }))
            ];
        }
        /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {
            let options = this.numberFormatter.resolvedOptions();
            if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = {
                ...options,
                signDisplay: this.options.signDisplay
            };
            if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === 'unit') options = {
                ...options,
                style: 'unit',
                unit: this.options.unit,
                unitDisplay: this.options.unitDisplay
            };
            return options;
        }
        constructor(locale, options = {}){
            this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);
            this.options = options;
        }
    }
    function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {}) {
        let { numberingSystem: numberingSystem } = options;
        if (numberingSystem && locale.includes('-nu-')) {
            if (!locale.includes('-u-')) locale += '-u-';
            locale += `-nu-${numberingSystem}`;
        }
        if (options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {
            var _UNITS_unit;
            let { unit: unit, unitDisplay: unitDisplay = 'short' } = options;
            if (!unit) throw new Error('unit option must be provided with style: "unit"');
            if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
            options = {
                ...options,
                style: 'decimal'
            };
        }
        let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
        if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
        let numberFormatter = new Intl.NumberFormat(locale, options);
        $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
        return numberFormatter;
    }
    function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
        if (signDisplay === 'auto') return numberFormat.format(num);
        else if (signDisplay === 'never') return numberFormat.format(Math.abs(num));
        else {
            let needsPositiveSign = false;
            if (signDisplay === 'always') needsPositiveSign = num > 0 || Object.is(num, 0);
            else if (signDisplay === 'exceptZero') {
                if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);
                else needsPositiveSign = num > 0;
            }
            if (needsPositiveSign) {
                let negative = numberFormat.format(-num);
                let noSign = numberFormat.format(num);
                // ignore RTL/LTR marker character
                let minus = negative.replace(noSign, '').replace(/\u200e|\u061C/, '');
                if ([
                    ...minus
                ].length !== 1) console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');
                let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);
                return positive;
            } else return numberFormat.format(num);
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp('^.*\\(.*\\).*$');
    const $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [
        'latn',
        'arab',
        'hanidec'
    ];
    class $6c7bd7858deea686$export$cd11ab140839f11d {
        /**
       * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
       */ parse(value) {
            return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
        }
        /**
       * Returns whether the given string could potentially be a valid number. This should be used to
       * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
       * of the minus/plus sign characters can be checked.
       */ isValidPartialNumber(value, minValue, maxValue) {
            return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
        }
        /**
       * Returns a numbering system for which the given string is valid in the current locale.
       * If no numbering system could be detected, the default numbering system for the current
       * locale is returned.
       */ getNumberingSystem(value) {
            return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
        }
        constructor(locale, options = {}){
            this.locale = locale;
            this.options = options;
        }
    }
    const $6c7bd7858deea686$var$numberParserCache = new Map();
    function $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {
        // First try the default numbering system for the provided locale
        let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);
        // If that doesn't match, and the locale doesn't include a hard coded numbering system,
        // try each of the other supported numbering systems until we find one that matches.
        if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {
            for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS)if (numberingSystem !== defaultParser.options.numberingSystem) {
                let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);
                if (parser.isValidPartialNumber(value)) return parser;
            }
        }
        return defaultParser;
    }
    function $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {
        let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
        let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);
        if (!parser) {
            parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);
            $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);
        }
        return parser;
    }
    // The actual number parser implementation. Instances of this class are cached
    // based on the locale, options, and detected numbering system.
    class $6c7bd7858deea686$var$NumberParserImpl {
        parse(value) {
            // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'
            let fullySanitizedValue = this.sanitize(value);
            if (this.symbols.group) // Remove group characters, and replace decimal points and numerals with ASCII values.
            fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, '');
            if (this.symbols.decimal) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.decimal, '.');
            if (this.symbols.minusSign) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.minusSign, '-');
            fullySanitizedValue = fullySanitizedValue.replace(this.symbols.numeral, this.symbols.index);
            if (this.options.style === 'percent') {
                // javascript is bad at dividing by 100 and maintaining the same significant figures, so perform it on the string before parsing
                let isNegative = fullySanitizedValue.indexOf('-');
                fullySanitizedValue = fullySanitizedValue.replace('-', '');
                let index = fullySanitizedValue.indexOf('.');
                if (index === -1) index = fullySanitizedValue.length;
                fullySanitizedValue = fullySanitizedValue.replace('.', '');
                if (index - 2 === 0) fullySanitizedValue = `0.${fullySanitizedValue}`;
                else if (index - 2 === -1) fullySanitizedValue = `0.0${fullySanitizedValue}`;
                else if (index - 2 === -2) fullySanitizedValue = '0.00';
                else fullySanitizedValue = `${fullySanitizedValue.slice(0, index - 2)}.${fullySanitizedValue.slice(index - 2)}`;
                if (isNegative > -1) fullySanitizedValue = `-${fullySanitizedValue}`;
            }
            let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
            if (isNaN(newValue)) return NaN;
            if (this.options.style === 'percent') {
                var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
                // extra step for rounding percents to what our formatter would output
                let options = {
                    ...this.options,
                    style: 'decimal',
                    minimumFractionDigits: Math.min(((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) + 2, 20),
                    maximumFractionDigits: Math.min(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2, 20)
                };
                return new $6c7bd7858deea686$export$cd11ab140839f11d(this.locale, options).parse(new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(this.locale, options).format(newValue));
            }
            // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again
            if (this.options.currencySign === 'accounting' && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;
            return newValue;
        }
        sanitize(value) {
            // Remove literals and whitespace, which are allowed anywhere in the string
            value = value.replace(this.symbols.literals, '');
            // Replace the ASCII minus sign with the minus sign used in the current locale
            // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.
            if (this.symbols.minusSign) value = value.replace('-', this.symbols.minusSign);
            // In arab numeral system, their decimal character is 1643, but most keyboards don't type that
            // instead they use the , (44) character or apparently the (1548) character.
            if (this.options.numberingSystem === 'arab') {
                if (this.symbols.decimal) {
                    value = value.replace(',', this.symbols.decimal);
                    value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
                }
                if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, '.', this.symbols.group);
            }
            // fr-FR group character is char code 8239, but that's not a key on the french keyboard,
            // so allow 'period' as a group char and replace it with a space
            if (this.options.locale === 'fr-FR') value = $6c7bd7858deea686$var$replaceAll(value, '.', String.fromCharCode(8239));
            return value;
        }
        isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {
            value = this.sanitize(value);
            // Remove minus or plus sign, which must be at the start of the string.
            if (this.symbols.minusSign && value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);
            else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);
            // Numbers cannot start with a group separator
            if (this.symbols.group && value.startsWith(this.symbols.group)) return false;
            // Numbers that can't have any decimal values fail if a decimal character is typed
            if (this.symbols.decimal && value.indexOf(this.symbols.decimal) > -1 && this.options.maximumFractionDigits === 0) return false;
            // Remove numerals, groups, and decimals
            if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, '');
            value = value.replace(this.symbols.numeral, '');
            if (this.symbols.decimal) value = value.replace(this.symbols.decimal, '');
            // The number is valid if there are no remaining characters
            return value.length === 0;
        }
        constructor(locale, options = {}){
            this.locale = locale;
            this.formatter = new Intl.NumberFormat(locale, options);
            this.options = this.formatter.resolvedOptions();
            this.symbols = $6c7bd7858deea686$var$getSymbols(locale, this.formatter, this.options, options);
            var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
            if (this.options.style === 'percent' && (((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) > 18 || ((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) > 18)) console.warn('NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.');
        }
    }
    const $6c7bd7858deea686$var$nonLiteralParts = new Set([
        'decimal',
        'fraction',
        'integer',
        'minusSign',
        'plusSign',
        'group'
    ]);
    // This list is derived from https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html#comparison and includes
    // all unique numbers which we need to check in order to determine all the plural forms for a given locale.
    // See: https://github.com/adobe/react-spectrum/pull/5134/files#r1337037855 for used script
    const $6c7bd7858deea686$var$pluralNumbers = [
        0,
        4,
        2,
        1,
        11,
        20,
        3,
        7,
        100,
        21,
        0.1,
        1.1
    ];
    function $6c7bd7858deea686$var$getSymbols(locale, formatter, intlOptions, originalOptions) {
        var _allParts_find, _posAllParts_find, _decimalParts_find, _allParts_find1;
        // formatter needs access to all decimal places in order to generate the correct literal strings for the plural set
        let symbolFormatter = new Intl.NumberFormat(locale, {
            ...intlOptions,
            minimumSignificantDigits: 1,
            maximumSignificantDigits: 21
        });
        // Note: some locale's don't add a group symbol until there is a ten thousands place
        let allParts = symbolFormatter.formatToParts(-10000.111);
        let posAllParts = symbolFormatter.formatToParts(10000.111);
        let pluralParts = $6c7bd7858deea686$var$pluralNumbers.map((n)=>symbolFormatter.formatToParts(n));
        var _allParts_find_value;
        let minusSign = (_allParts_find_value = (_allParts_find = allParts.find((p)=>p.type === 'minusSign')) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : '-';
        let plusSign = (_posAllParts_find = posAllParts.find((p)=>p.type === 'plusSign')) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;
        // Safari does not support the signDisplay option, but our number parser polyfills it.
        // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.
        // @ts-ignore
        if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'exceptZero' || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'always')) plusSign = '+';
        // If maximumSignificantDigits is 1 (the minimum) then we won't get decimal characters out of the above formatters
        // Percent also defaults to 0 fractionDigits, so we need to make a new one that isn't percent to get an accurate decimal
        let decimalParts = new Intl.NumberFormat(locale, {
            ...intlOptions,
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).formatToParts(0.001);
        let decimal = (_decimalParts_find = decimalParts.find((p)=>p.type === 'decimal')) === null || _decimalParts_find === void 0 ? void 0 : _decimalParts_find.value;
        let group = (_allParts_find1 = allParts.find((p)=>p.type === 'group')) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;
        // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that
        // don't contribute to the numerical value
        let allPartsLiterals = allParts.filter((p)=>!$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map((p)=>$6c7bd7858deea686$var$escapeRegex(p.value));
        let pluralPartsLiterals = pluralParts.flatMap((p)=>p.filter((p)=>!$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map((p)=>$6c7bd7858deea686$var$escapeRegex(p.value)));
        let sortedLiterals = [
            ...new Set([
                ...allPartsLiterals,
                ...pluralPartsLiterals
            ])
        ].sort((a, b)=>b.length - a.length);
        let literals = sortedLiterals.length === 0 ? new RegExp('[\\p{White_Space}]', 'gu') : new RegExp(`${sortedLiterals.join('|')}|[\\p{White_Space}]`, 'gu');
        // These are for replacing non-latn characters with the latn equivalent
        let numerals = [
            ...new Intl.NumberFormat(intlOptions.locale, {
                useGrouping: false
            }).format(9876543210)
        ].reverse();
        let indexes = new Map(numerals.map((d, i)=>[
                d,
                i
            ]));
        let numeral = new RegExp(`[${numerals.join('')}]`, 'g');
        let index = (d)=>String(indexes.get(d));
        return {
            minusSign: minusSign,
            plusSign: plusSign,
            decimal: decimal,
            group: group,
            literals: literals,
            numeral: numeral,
            index: index
        };
    }
    function $6c7bd7858deea686$var$replaceAll(str, find, replace) {
        // @ts-ignore
        if (str.replaceAll) // @ts-ignore
        return str.replaceAll(find, replace);
        return str.split(find).join(replace);
    }
    function $6c7bd7858deea686$var$escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        return (0, wp.element.useMemo)(()=>new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options), [
            locale,
            options
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    let $325a3faab7a68acd$var$cache = new Map();
    function $325a3faab7a68acd$export$a16aca283550c30d(options) {
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
        if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);
        let formatter = new Intl.Collator(locale, options);
        $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
        return formatter;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $bb77f239b46e8c72$export$3274cf84b703fff(options) {
        let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
            usage: 'search',
            ...options
        });
        // TODO(later): these methods don't currently support the ignorePunctuation option.
        let startsWith = (0, wp.element.useCallback)((string, substring)=>{
            if (substring.length === 0) return true;
            // Normalize both strings so we can slice safely
            // TODO: take into account the ignorePunctuation option as well...
            string = string.normalize('NFC');
            substring = substring.normalize('NFC');
            return collator.compare(string.slice(0, substring.length), substring) === 0;
        }, [
            collator
        ]);
        let endsWith = (0, wp.element.useCallback)((string, substring)=>{
            if (substring.length === 0) return true;
            string = string.normalize('NFC');
            substring = substring.normalize('NFC');
            return collator.compare(string.slice(-substring.length), substring) === 0;
        }, [
            collator
        ]);
        let contains = (0, wp.element.useCallback)((string, substring)=>{
            if (substring.length === 0) return true;
            string = string.normalize('NFC');
            substring = substring.normalize('NFC');
            let scan = 0;
            let sliceLen = substring.length;
            for(; scan + sliceLen <= string.length; scan++){
                let slice = string.slice(scan, scan + sliceLen);
                if (collator.compare(substring, slice) === 0) return true;
            }
            return false;
        }, [
            collator
        ]);
        return (0, wp.element.useMemo)(()=>({
                startsWith: startsWith,
                endsWith: endsWith,
                contains: contains
            }), [
            startsWith,
            endsWith,
            contains
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {
        let { elementType: elementType = 'button', isDisabled: isDisabled, onPress: onPress, onPressStart: onPressStart, onPressEnd: onPressEnd, onPressUp: onPressUp, onPressChange: onPressChange, preventFocusOnPress: // @ts-ignore - undocumented
        preventFocusOnPress, allowFocusWhenDisabled: // @ts-ignore - undocumented
        allowFocusWhenDisabled, // @ts-ignore
        onClick: deprecatedOnClick, href: href, target: target, rel: rel, type: type = 'button' } = props;
        let additionalProps;
        if (elementType === 'button') additionalProps = {
            type: type,
            disabled: isDisabled
        };
        else additionalProps = {
            role: 'button',
            tabIndex: isDisabled ? undefined : 0,
            href: elementType === 'a' && isDisabled ? undefined : href,
            target: elementType === 'a' ? target : undefined,
            type: elementType === 'input' ? type : undefined,
            disabled: elementType === 'input' ? isDisabled : undefined,
            'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,
            rel: elementType === 'a' ? rel : undefined
        };
        let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
            onPressStart: onPressStart,
            onPressEnd: onPressEnd,
            onPressChange: onPressChange,
            onPress: onPress,
            onPressUp: onPressUp,
            isDisabled: isDisabled,
            preventFocusOnPress: preventFocusOnPress,
            ref: ref
        });
        let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
        if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
        let buttonProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, pressProps, ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            labelable: true
        }));
        return {
            isPressed: isPressed,
            buttonProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(additionalProps, buttonProps, {
                'aria-haspopup': props['aria-haspopup'],
                'aria-expanded': props['aria-expanded'],
                'aria-controls': props['aria-controls'],
                'aria-pressed': props['aria-pressed'],
                onClick: (e)=>{
                    if (deprecatedOnClick) {
                        deprecatedOnClick(e);
                        console.warn('onClick is deprecated, please use onPress');
                    }
                }
            })
        };
    }

    var $39324ace0d945f59$exports = {};
    $39324ace0d945f59$exports = {
        "dateRange": (args)=>`${args.startDate} \u{625}\u{644}\u{649} ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}`,
        "finishRangeSelectionPrompt": `\u{627}\u{646}\u{642}\u{631} \u{644}\u{625}\u{646}\u{647}\u{627}\u{621} \u{639}\u{645}\u{644}\u{64A}\u{629} \u{62A}\u{62D}\u{62F}\u{64A}\u{62F} \u{646}\u{637}\u{627}\u{642} \u{627}\u{644}\u{62A}\u{627}\u{631}\u{64A}\u{62E}`,
        "maximumDate": `\u{622}\u{62E}\u{631} \u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{645}\u{62A}\u{627}\u{62D}`,
        "minimumDate": `\u{623}\u{648}\u{644} \u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{645}\u{62A}\u{627}\u{62D}`,
        "next": `\u{627}\u{644}\u{62A}\u{627}\u{644}\u{64A}`,
        "previous": `\u{627}\u{644}\u{633}\u{627}\u{628}\u{642}`,
        "selectedDateDescription": (args)=>`\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{645}\u{62D}\u{62F}\u{62F}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{627}\u{644}\u{645}\u{62F}\u{649} \u{627}\u{644}\u{632}\u{645}\u{646}\u{64A} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}: ${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{627}\u{646}\u{642}\u{631} \u{644}\u{628}\u{62F}\u{621} \u{639}\u{645}\u{644}\u{64A}\u{629} \u{62A}\u{62D}\u{62F}\u{64A}\u{62F} \u{646}\u{637}\u{627}\u{642} \u{627}\u{644}\u{62A}\u{627}\u{631}\u{64A}\u{62E}`,
        "todayDate": (args)=>`\u{627}\u{644}\u{64A}\u{648}\u{645}\u{60C} ${args.date}`,
        "todayDateSelected": (args)=>`\u{627}\u{644}\u{64A}\u{648}\u{645}\u{60C} ${args.date} \u{645}\u{62D}\u{62F}\u{62F}`
    };

    var $1830a539e98c7baf$exports = {};
    $1830a539e98c7baf$exports = {
        "dateRange": (args)=>`${args.startDate} \u{434}\u{43E} ${args.endDate}`,
        "dateSelected": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{43E} \u{435} ${args.date}`,
        "finishRangeSelectionPrompt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435}, \u{437}\u{430} \u{434}\u{430} \u{434}\u{43E}\u{432}\u{44A}\u{440}\u{448}\u{438}\u{442}\u{435} \u{438}\u{437}\u{431}\u{43E}\u{440}\u{430} \u{43D}\u{430} \u{432}\u{440}\u{435}\u{43C}\u{435}\u{432}\u{438} \u{438}\u{43D}\u{442}\u{435}\u{440}\u{432}\u{430}\u{43B}`,
        "maximumDate": `\u{41F}\u{43E}\u{441}\u{43B}\u{435}\u{434}\u{43D}\u{430} \u{43D}\u{430}\u{43B}\u{438}\u{447}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
        "minimumDate": `\u{41F}\u{44A}\u{440}\u{432}\u{430} \u{43D}\u{430}\u{43B}\u{438}\u{447}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
        "next": `\u{41D}\u{430}\u{43F}\u{440}\u{435}\u{434}`,
        "previous": `\u{41D}\u{430}\u{437}\u{430}\u{434}`,
        "selectedDateDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435}, \u{437}\u{430} \u{434}\u{430} \u{43F}\u{440}\u{438}\u{441}\u{442}\u{44A}\u{43F}\u{438}\u{442}\u{435} \u{43A}\u{44A}\u{43C} \u{438}\u{437}\u{431}\u{43E}\u{440}\u{430} \u{43D}\u{430} \u{432}\u{440}\u{435}\u{43C}\u{435}\u{432}\u{438} \u{438}\u{43D}\u{442}\u{435}\u{440}\u{432}\u{430}\u{43B}`,
        "todayDate": (args)=>`\u{414}\u{43D}\u{435}\u{441}, ${args.date}`,
        "todayDateSelected": (args)=>`\u{414}\u{43D}\u{435}\u{441}, ${args.date} \u{441}\u{430} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438}`
    };

    var $f4b92528965aab97$exports = {};
    $f4b92528965aab97$exports = {
        "dateRange": (args)=>`${args.startDate} a\u{17E} ${args.endDate}`,
        "dateSelected": (args)=>`Vybr\xe1no ${args.date}`,
        "finishRangeSelectionPrompt": `Kliknut\xedm dokon\u{10D}\xedte v\xfdb\u{11B}r rozsahu dat`,
        "maximumDate": `Posledn\xed dostupn\xe9 datum`,
        "minimumDate": `Prvn\xed dostupn\xe9 datum`,
        "next": `Dal\u{161}\xed`,
        "previous": `P\u{159}edchoz\xed`,
        "selectedDateDescription": (args)=>`Vybran\xe9 datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Vybran\xe9 obdob\xed: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Kliknut\xedm zah\xe1j\xedte v\xfdb\u{11B}r rozsahu dat`,
        "todayDate": (args)=>`Dnes, ${args.date}`,
        "todayDateSelected": (args)=>`Dnes, vybr\xe1no ${args.date}`
    };

    var $1cd578ef0547c8f1$exports = {};
    $1cd578ef0547c8f1$exports = {
        "dateRange": (args)=>`${args.startDate} til ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} valgt`,
        "finishRangeSelectionPrompt": `Klik for at fuldf\xf8re valg af datoomr\xe5de`,
        "maximumDate": `Sidste ledige dato`,
        "minimumDate": `F\xf8rste ledige dato`,
        "next": `N\xe6ste`,
        "previous": `Forrige`,
        "selectedDateDescription": (args)=>`Valgt dato: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valgt interval: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Klik for at starte valg af datoomr\xe5de`,
        "todayDate": (args)=>`I dag, ${args.date}`,
        "todayDateSelected": (args)=>`I dag, ${args.date} valgt`
    };

    var $db55a8973925d619$exports = {};
    $db55a8973925d619$exports = {
        "dateRange": (args)=>`${args.startDate} bis ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} ausgew\xe4hlt`,
        "finishRangeSelectionPrompt": `Klicken, um die Auswahl des Datumsbereichs zu beenden`,
        "maximumDate": `Letztes verf\xfcgbares Datum`,
        "minimumDate": `Erstes verf\xfcgbares Datum`,
        "next": `Weiter`,
        "previous": `Zur\xfcck`,
        "selectedDateDescription": (args)=>`Ausgew\xe4hltes Datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Ausgew\xe4hlter Bereich: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Klicken, um die Auswahl des Datumsbereichs zu beginnen`,
        "todayDate": (args)=>`Heute, ${args.date}`,
        "todayDateSelected": (args)=>`Heute, ${args.date} ausgew\xe4hlt`
    };

    var $ec6937d58566d443$exports = {};
    $ec6937d58566d443$exports = {
        "dateRange": (args)=>`${args.startDate} \u{3AD}\u{3C9}\u{3C2} ${args.endDate}`,
        "dateSelected": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B5} ${args.date}`,
        "finishRangeSelectionPrompt": `\u{39A}\u{3AC}\u{3BD}\u{3C4}\u{3B5} \u{3BA}\u{3BB}\u{3B9}\u{3BA} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BF}\u{3BB}\u{3BF}\u{3BA}\u{3BB}\u{3B7}\u{3C1}\u{3CE}\u{3C3}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3B7}\u{3BD} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE} \u{3B5}\u{3CD}\u{3C1}\u{3BF}\u{3C5}\u{3C2} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3B9}\u{3CE}\u{3BD}`,
        "maximumDate": `\u{3A4}\u{3B5}\u{3BB}\u{3B5}\u{3C5}\u{3C4}\u{3B1}\u{3AF}\u{3B1} \u{3B4}\u{3B9}\u{3B1}\u{3B8}\u{3AD}\u{3C3}\u{3B9}\u{3BC}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1}`,
        "minimumDate": `\u{3A0}\u{3C1}\u{3CE}\u{3C4}\u{3B7} \u{3B4}\u{3B9}\u{3B1}\u{3B8}\u{3AD}\u{3C3}\u{3B9}\u{3BC}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1}`,
        "next": `\u{395}\u{3C0}\u{3CC}\u{3BC}\u{3B5}\u{3BD}\u{3BF}`,
        "previous": `\u{3A0}\u{3C1}\u{3BF}\u{3B7}\u{3B3}\u{3BF}\u{3CD}\u{3BC}\u{3B5}\u{3BD}\u{3BF}`,
        "selectedDateDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF} \u{3B5}\u{3CD}\u{3C1}\u{3BF}\u{3C2}: ${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{39A}\u{3AC}\u{3BD}\u{3C4}\u{3B5} \u{3BA}\u{3BB}\u{3B9}\u{3BA} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BE}\u{3B5}\u{3BA}\u{3B9}\u{3BD}\u{3AE}\u{3C3}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3B7}\u{3BD} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE} \u{3B5}\u{3CD}\u{3C1}\u{3BF}\u{3C5}\u{3C2} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3B9}\u{3CE}\u{3BD}`,
        "todayDate": (args)=>`\u{3A3}\u{3AE}\u{3BC}\u{3B5}\u{3C1}\u{3B1}, ${args.date}`,
        "todayDateSelected": (args)=>`\u{3A3}\u{3AE}\u{3BC}\u{3B5}\u{3C1}\u{3B1}, \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3C4}\u{3B7}\u{3BA}\u{3B5} ${args.date}`
    };

    var $1f5cea0742dc284a$exports = {};
    $1f5cea0742dc284a$exports = {
        "previous": `Previous`,
        "next": `Next`,
        "selectedDateDescription": (args)=>`Selected Date: ${args.date}`,
        "selectedRangeDescription": (args)=>`Selected Range: ${args.dateRange}`,
        "todayDate": (args)=>`Today, ${args.date}`,
        "todayDateSelected": (args)=>`Today, ${args.date} selected`,
        "dateSelected": (args)=>`${args.date} selected`,
        "startRangeSelectionPrompt": `Click to start selecting date range`,
        "finishRangeSelectionPrompt": `Click to finish selecting date range`,
        "minimumDate": `First available date`,
        "maximumDate": `Last available date`,
        "dateRange": (args)=>`${args.startDate} to ${args.endDate}`
    };

    var $2ca7ea366384817b$exports = {};
    $2ca7ea366384817b$exports = {
        "dateRange": (args)=>`${args.startDate} a ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} seleccionado`,
        "finishRangeSelectionPrompt": `Haga clic para terminar de seleccionar rango de fechas`,
        "maximumDate": `\xdaltima fecha disponible`,
        "minimumDate": `Primera fecha disponible`,
        "next": `Siguiente`,
        "previous": `Anterior`,
        "selectedDateDescription": (args)=>`Fecha seleccionada: ${args.date}`,
        "selectedRangeDescription": (args)=>`Intervalo seleccionado: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Haga clic para comenzar a seleccionar un rango de fechas`,
        "todayDate": (args)=>`Hoy, ${args.date}`,
        "todayDateSelected": (args)=>`Hoy, ${args.date} seleccionado`
    };

    var $97874a7fe9cd091f$exports = {};
    $97874a7fe9cd091f$exports = {
        "dateRange": (args)=>`${args.startDate} kuni ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} valitud`,
        "finishRangeSelectionPrompt": `Kl\xf5psake kuup\xe4evavahemiku valimise l\xf5petamiseks`,
        "maximumDate": `Viimane saadaolev kuup\xe4ev`,
        "minimumDate": `Esimene saadaolev kuup\xe4ev`,
        "next": `J\xe4rgmine`,
        "previous": `Eelmine`,
        "selectedDateDescription": (args)=>`Valitud kuup\xe4ev: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valitud vahemik: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Kl\xf5psake kuup\xe4evavahemiku valimiseks`,
        "todayDate": (args)=>`T\xe4na, ${args.date}`,
        "todayDateSelected": (args)=>`T\xe4na, ${args.date} valitud`
    };

    var $5d376b7fce1a45b2$exports = {};
    $5d376b7fce1a45b2$exports = {
        "dateRange": (args)=>`${args.startDate} \u{2013} ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} valittu`,
        "finishRangeSelectionPrompt": `Lopeta p\xe4iv\xe4m\xe4\xe4r\xe4alueen valinta napsauttamalla t\xe4t\xe4.`,
        "maximumDate": `Viimeinen varattavissa oleva p\xe4iv\xe4m\xe4\xe4r\xe4`,
        "minimumDate": `Ensimm\xe4inen varattavissa oleva p\xe4iv\xe4m\xe4\xe4r\xe4`,
        "next": `Seuraava`,
        "previous": `Edellinen`,
        "selectedDateDescription": (args)=>`Valittu p\xe4iv\xe4m\xe4\xe4r\xe4: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valittu aikav\xe4li: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Aloita p\xe4iv\xe4m\xe4\xe4r\xe4alueen valinta napsauttamalla t\xe4t\xe4.`,
        "todayDate": (args)=>`T\xe4n\xe4\xe4n, ${args.date}`,
        "todayDateSelected": (args)=>`T\xe4n\xe4\xe4n, ${args.date} valittu`
    };

    var $3bf722b362aaf54d$exports = {};
    $3bf722b362aaf54d$exports = {
        "dateRange": (args)=>`${args.startDate} \xe0 ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} s\xe9lectionn\xe9`,
        "finishRangeSelectionPrompt": `Cliquer pour finir de s\xe9lectionner la plage de dates`,
        "maximumDate": `Derni\xe8re date disponible`,
        "minimumDate": `Premi\xe8re date disponible`,
        "next": `Suivant`,
        "previous": `Pr\xe9c\xe9dent`,
        "selectedDateDescription": (args)=>`Date s\xe9lectionn\xe9e\xa0: ${args.date}`,
        "selectedRangeDescription": (args)=>`Plage s\xe9lectionn\xe9e\xa0: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Cliquer pour commencer \xe0 s\xe9lectionner la plage de dates`,
        "todayDate": (args)=>`Aujourd'hui, ${args.date}`,
        "todayDateSelected": (args)=>`Aujourd\u{2019}hui, ${args.date} s\xe9lectionn\xe9`
    };

    var $38c43f8322316031$exports = {};
    $38c43f8322316031$exports = {
        "dateRange": (args)=>`${args.startDate} \u{5E2}\u{5D3} ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} \u{5E0}\u{5D1}\u{5D7}\u{5E8}`,
        "finishRangeSelectionPrompt": `\u{5D7}\u{5E5} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E1}\u{5D9}\u{5D9}\u{5DD} \u{5D0}\u{5EA} \u{5D1}\u{5D7}\u{5D9}\u{5E8}\u{5EA} \u{5D8}\u{5D5}\u{5D5}\u{5D7} \u{5D4}\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DB}\u{5D9}\u{5DD}`,
        "maximumDate": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E4}\u{5E0}\u{5D5}\u{5D9} \u{5D0}\u{5D7}\u{5E8}\u{5D5}\u{5DF}`,
        "minimumDate": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E4}\u{5E0}\u{5D5}\u{5D9} \u{5E8}\u{5D0}\u{5E9}\u{5D5}\u{5DF}`,
        "next": `\u{5D4}\u{5D1}\u{5D0}`,
        "previous": `\u{5D4}\u{5E7}\u{5D5}\u{5D3}\u{5DD}`,
        "selectedDateDescription": (args)=>`\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{5D8}\u{5D5}\u{5D5}\u{5D7} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{5DC}\u{5D7}\u{5E5} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D4}\u{5EA}\u{5D7}\u{5D9}\u{5DC} \u{5D1}\u{5D1}\u{5D7}\u{5D9}\u{5E8}\u{5EA} \u{5D8}\u{5D5}\u{5D5}\u{5D7} \u{5D4}\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DB}\u{5D9}\u{5DD}`,
        "todayDate": (args)=>`\u{5D4}\u{5D9}\u{5D5}\u{5DD}, ${args.date}`,
        "todayDateSelected": (args)=>`\u{5D4}\u{5D9}\u{5D5}\u{5DD}, ${args.date} \u{5E0}\u{5D1}\u{5D7}\u{5E8}`
    };

    var $c90e0f32b44630bf$exports = {};
    $c90e0f32b44630bf$exports = {
        "dateRange": (args)=>`${args.startDate} do ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} odabran`,
        "finishRangeSelectionPrompt": `Kliknite da dovr\u{161}ite raspon odabranih datuma`,
        "maximumDate": `Posljednji raspolo\u{17E}ivi datum`,
        "minimumDate": `Prvi raspolo\u{17E}ivi datum`,
        "next": `Sljede\u{107}i`,
        "previous": `Prethodni`,
        "selectedDateDescription": (args)=>`Odabrani datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Odabrani raspon: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Kliknite da zapo\u{10D}nete raspon odabranih datuma`,
        "todayDate": (args)=>`Danas, ${args.date}`,
        "todayDateSelected": (args)=>`Danas, odabran ${args.date}`
    };

    var $715875e6e7a338f4$exports = {};
    $715875e6e7a338f4$exports = {
        "dateRange": (args)=>`${args.startDate}\u{2013}${args.endDate}`,
        "dateSelected": (args)=>`${args.date} kiv\xe1lasztva`,
        "finishRangeSelectionPrompt": `Kattintson a d\xe1tumtartom\xe1ny kijel\xf6l\xe9s\xe9nek befejez\xe9s\xe9hez`,
        "maximumDate": `Utols\xf3 el\xe9rhet\u{151} d\xe1tum`,
        "minimumDate": `Az els\u{151} el\xe9rhet\u{151} d\xe1tum`,
        "next": `K\xf6vetkez\u{151}`,
        "previous": `El\u{151}z\u{151}`,
        "selectedDateDescription": (args)=>`Kijel\xf6lt d\xe1tum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Kijel\xf6lt tartom\xe1ny: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Kattintson a d\xe1tumtartom\xe1ny kijel\xf6l\xe9s\xe9nek ind\xedt\xe1s\xe1hoz`,
        "todayDate": (args)=>`Ma, ${args.date}`,
        "todayDateSelected": (args)=>`Ma, ${args.date} kijel\xf6lve`
    };

    var $37d77c66e34daccf$exports = {};
    $37d77c66e34daccf$exports = {
        "dateRange": (args)=>`Da ${args.startDate} a ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} selezionata`,
        "finishRangeSelectionPrompt": `Fai clic per completare la selezione dell\u{2019}intervallo di date`,
        "maximumDate": `Ultima data disponibile`,
        "minimumDate": `Prima data disponibile`,
        "next": `Successivo`,
        "previous": `Precedente`,
        "selectedDateDescription": (args)=>`Data selezionata: ${args.date}`,
        "selectedRangeDescription": (args)=>`Intervallo selezionato: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Fai clic per selezionare l\u{2019}intervallo di date`,
        "todayDate": (args)=>`Oggi, ${args.date}`,
        "todayDateSelected": (args)=>`Oggi, ${args.date} selezionata`
    };

    var $542f39aee29303c3$exports = {};
    $542f39aee29303c3$exports = {
        "dateRange": (args)=>`${args.startDate} \u{304B}\u{3089} ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} \u{3092}\u{9078}\u{629E}`,
        "finishRangeSelectionPrompt": `\u{30AF}\u{30EA}\u{30C3}\u{30AF}\u{3057}\u{3066}\u{65E5}\u{4ED8}\u{7BC4}\u{56F2}\u{306E}\u{9078}\u{629E}\u{3092}\u{7D42}\u{4E86}`,
        "maximumDate": `\u{6700}\u{7D42}\u{5229}\u{7528}\u{53EF}\u{80FD}\u{65E5}`,
        "minimumDate": `\u{6700}\u{521D}\u{306E}\u{5229}\u{7528}\u{53EF}\u{80FD}\u{65E5}`,
        "next": `\u{6B21}\u{3078}`,
        "previous": `\u{524D}\u{3078}`,
        "selectedDateDescription": (args)=>`\u{9078}\u{629E}\u{3057}\u{305F}\u{65E5}\u{4ED8} : ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{9078}\u{629E}\u{7BC4}\u{56F2} : ${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{30AF}\u{30EA}\u{30C3}\u{30AF}\u{3057}\u{3066}\u{65E5}\u{4ED8}\u{7BC4}\u{56F2}\u{306E}\u{9078}\u{629E}\u{3092}\u{958B}\u{59CB}`,
        "todayDate": (args)=>`\u{672C}\u{65E5}\u{3001}${args.date}`,
        "todayDateSelected": (args)=>`\u{672C}\u{65E5}\u{3001}${args.date} \u{3092}\u{9078}\u{629E}`
    };

    var $22a5f0623ea73e4f$exports = {};
    $22a5f0623ea73e4f$exports = {
        "dateRange": (args)=>`${args.startDate} ~ ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} \u{C120}\u{D0DD}\u{B428}`,
        "finishRangeSelectionPrompt": `\u{B0A0}\u{C9DC} \u{BC94}\u{C704} \u{C120}\u{D0DD}\u{C744} \u{C644}\u{B8CC}\u{D558}\u{B824}\u{BA74} \u{D074}\u{B9AD}\u{D558}\u{C2ED}\u{C2DC}\u{C624}.`,
        "maximumDate": `\u{B9C8}\u{C9C0}\u{B9C9}\u{C73C}\u{B85C} \u{C0AC}\u{C6A9} \u{AC00}\u{B2A5}\u{D55C} \u{C77C}\u{C790}`,
        "minimumDate": `\u{CC98}\u{C74C}\u{C73C}\u{B85C} \u{C0AC}\u{C6A9} \u{AC00}\u{B2A5}\u{D55C} \u{C77C}\u{C790}`,
        "next": `\u{B2E4}\u{C74C}`,
        "previous": `\u{C774}\u{C804}`,
        "selectedDateDescription": (args)=>`\u{C120}\u{D0DD} \u{C77C}\u{C790}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{C120}\u{D0DD} \u{BC94}\u{C704}: ${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{B0A0}\u{C9DC} \u{BC94}\u{C704} \u{C120}\u{D0DD}\u{C744} \u{C2DC}\u{C791}\u{D558}\u{B824}\u{BA74} \u{D074}\u{B9AD}\u{D558}\u{C2ED}\u{C2DC}\u{C624}.`,
        "todayDate": (args)=>`\u{C624}\u{B298}, ${args.date}`,
        "todayDateSelected": (args)=>`\u{C624}\u{B298}, ${args.date} \u{C120}\u{D0DD}\u{B428}`
    };

    var $522380d13d62cba0$exports = {};
    $522380d13d62cba0$exports = {
        "dateRange": (args)=>`Nuo ${args.startDate} iki ${args.endDate}`,
        "dateSelected": (args)=>`Pasirinkta ${args.date}`,
        "finishRangeSelectionPrompt": `Spustel\u{117}kite, kad baigtum\u{117}te pasirinkti dat\u{173} interval\u{105}`,
        "maximumDate": `Paskutin\u{117} galima data`,
        "minimumDate": `Pirmoji galima data`,
        "next": `Paskesnis`,
        "previous": `Ankstesnis`,
        "selectedDateDescription": (args)=>`Pasirinkta data: ${args.date}`,
        "selectedRangeDescription": (args)=>`Pasirinktas intervalas: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Spustel\u{117}kite, kad prad\u{117}tum\u{117}te pasirinkti dat\u{173} interval\u{105}`,
        "todayDate": (args)=>`\u{160}iandien, ${args.date}`,
        "todayDateSelected": (args)=>`\u{160}iandien, pasirinkta ${args.date}`
    };

    var $8a7bc830b2fe6485$exports = {};
    $8a7bc830b2fe6485$exports = {
        "dateRange": (args)=>`No ${args.startDate} l\u{12B}dz ${args.endDate}`,
        "dateSelected": (args)=>`Atlas\u{12B}ts: ${args.date}`,
        "finishRangeSelectionPrompt": `Noklik\u{161}\u{137}iniet, lai pabeigtu datumu diapazona atlasi`,
        "maximumDate": `P\u{113}d\u{113}jais pieejamais datums`,
        "minimumDate": `Pirmais pieejamais datums`,
        "next": `T\u{101}l\u{101}k`,
        "previous": `Atpaka\u{13C}`,
        "selectedDateDescription": (args)=>`Atlas\u{12B}tais datums: ${args.date}`,
        "selectedRangeDescription": (args)=>`Atlas\u{12B}tais diapazons: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Noklik\u{161}\u{137}iniet, lai s\u{101}ktu datumu diapazona atlasi`,
        "todayDate": (args)=>`\u{160}odien, ${args.date}`,
        "todayDateSelected": (args)=>`Atlas\u{12B}ta \u{161}odiena, ${args.date}`
    };

    var $9fac9c044470683b$exports = {};
    $9fac9c044470683b$exports = {
        "dateRange": (args)=>`${args.startDate} til ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} valgt`,
        "finishRangeSelectionPrompt": `Klikk for \xe5 fullf\xf8re valg av datoomr\xe5de`,
        "maximumDate": `Siste tilgjengelige dato`,
        "minimumDate": `F\xf8rste tilgjengelige dato`,
        "next": `Neste`,
        "previous": `Forrige`,
        "selectedDateDescription": (args)=>`Valgt dato: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valgt omr\xe5de: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Klikk for \xe5 starte valg av datoomr\xe5de`,
        "todayDate": (args)=>`I dag, ${args.date}`,
        "todayDateSelected": (args)=>`I dag, ${args.date} valgt`
    };

    var $b127d3569efb1449$exports = {};
    $b127d3569efb1449$exports = {
        "dateRange": (args)=>`${args.startDate} tot ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} geselecteerd`,
        "finishRangeSelectionPrompt": `Klik om de selectie van het datumbereik te voltooien`,
        "maximumDate": `Laatste beschikbare datum`,
        "minimumDate": `Eerste beschikbare datum`,
        "next": `Volgende`,
        "previous": `Vorige`,
        "selectedDateDescription": (args)=>`Geselecteerde datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Geselecteerd bereik: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Klik om het datumbereik te selecteren`,
        "todayDate": (args)=>`Vandaag, ${args.date}`,
        "todayDateSelected": (args)=>`Vandaag, ${args.date} geselecteerd`
    };

    var $51404a4090633490$exports = {};
    $51404a4090633490$exports = {
        "dateRange": (args)=>`${args.startDate} do ${args.endDate}`,
        "dateSelected": (args)=>`Wybrano ${args.date}`,
        "finishRangeSelectionPrompt": `Kliknij, aby zako\u{144}czy\u{107} wyb\xf3r zakresu dat`,
        "maximumDate": `Ostatnia dost\u{119}pna data`,
        "minimumDate": `Pierwsza dost\u{119}pna data`,
        "next": `Dalej`,
        "previous": `Wstecz`,
        "selectedDateDescription": (args)=>`Wybrana data: ${args.date}`,
        "selectedRangeDescription": (args)=>`Wybrany zakres: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Kliknij, aby rozpocz\u{105}\u{107} wyb\xf3r zakresu dat`,
        "todayDate": (args)=>`Dzisiaj, ${args.date}`,
        "todayDateSelected": (args)=>`Dzisiaj wybrano ${args.date}`
    };

    var $e5e6a3fe3b4527df$exports = {};
    $e5e6a3fe3b4527df$exports = {
        "dateRange": (args)=>`${args.startDate} a ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} selecionado`,
        "finishRangeSelectionPrompt": `Clique para concluir a sele\xe7\xe3o do intervalo de datas`,
        "maximumDate": `\xdaltima data dispon\xedvel`,
        "minimumDate": `Primeira data dispon\xedvel`,
        "next": `Pr\xf3ximo`,
        "previous": `Anterior`,
        "selectedDateDescription": (args)=>`Data selecionada: ${args.date}`,
        "selectedRangeDescription": (args)=>`Intervalo selecionado: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Clique para iniciar a sele\xe7\xe3o do intervalo de datas`,
        "todayDate": (args)=>`Hoje, ${args.date}`,
        "todayDateSelected": (args)=>`Hoje, ${args.date} selecionado`
    };

    var $c519dcadcbb1ee47$exports = {};
    $c519dcadcbb1ee47$exports = {
        "dateRange": (args)=>`${args.startDate} a ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} selecionado`,
        "finishRangeSelectionPrompt": `Clique para terminar de selecionar o intervalo de datas`,
        "maximumDate": `\xdaltima data dispon\xedvel`,
        "minimumDate": `Primeira data dispon\xedvel`,
        "next": `Pr\xf3ximo`,
        "previous": `Anterior`,
        "selectedDateDescription": (args)=>`Data selecionada: ${args.date}`,
        "selectedRangeDescription": (args)=>`Intervalo selecionado: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Clique para come\xe7ar a selecionar o intervalo de datas`,
        "todayDate": (args)=>`Hoje, ${args.date}`,
        "todayDateSelected": (args)=>`Hoje, ${args.date} selecionado`
    };

    var $e5aa0186ca7889c6$exports = {};
    $e5aa0186ca7889c6$exports = {
        "dateRange": (args)=>`De la ${args.startDate} p\xe2n\u{103} la ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} selectat\u{103}`,
        "finishRangeSelectionPrompt": `Ap\u{103}sa\u{163}i pentru a finaliza selec\u{163}ia razei pentru dat\u{103}`,
        "maximumDate": `Ultima dat\u{103} disponibil\u{103}`,
        "minimumDate": `Prima dat\u{103} disponibil\u{103}`,
        "next": `Urm\u{103}torul`,
        "previous": `\xcenainte`,
        "selectedDateDescription": (args)=>`Dat\u{103} selectat\u{103}: ${args.date}`,
        "selectedRangeDescription": (args)=>`Interval selectat: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Ap\u{103}sa\u{163}i pentru a \xeencepe selec\u{163}ia razei pentru dat\u{103}`,
        "todayDate": (args)=>`Ast\u{103}zi, ${args.date}`,
        "todayDateSelected": (args)=>`Azi, ${args.date} selectat\u{103}`
    };

    var $5b907f5fa3eee652$exports = {};
    $5b907f5fa3eee652$exports = {
        "dateRange": (args)=>`\u{421} ${args.startDate} \u{43F}\u{43E} ${args.endDate}`,
        "dateSelected": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E} ${args.date}`,
        "finishRangeSelectionPrompt": `\u{429}\u{435}\u{43B}\u{43A}\u{43D}\u{438}\u{442}\u{435}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{438}\u{442}\u{44C} \u{432}\u{44B}\u{431}\u{43E}\u{440} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}\u{430} \u{434}\u{430}\u{442}`,
        "maximumDate": `\u{41F}\u{43E}\u{441}\u{43B}\u{435}\u{434}\u{43D}\u{44F}\u{44F} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430}`,
        "minimumDate": `\u{41F}\u{435}\u{440}\u{432}\u{430}\u{44F} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430}`,
        "next": `\u{414}\u{430}\u{43B}\u{435}\u{435}`,
        "previous": `\u{41D}\u{430}\u{437}\u{430}\u{434}`,
        "selectedDateDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{439} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{429}\u{435}\u{43B}\u{43A}\u{43D}\u{438}\u{442}\u{435}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43D}\u{430}\u{447}\u{430}\u{442}\u{44C} \u{432}\u{44B}\u{431}\u{43E}\u{440} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}\u{430} \u{434}\u{430}\u{442}`,
        "todayDate": (args)=>`\u{421}\u{435}\u{433}\u{43E}\u{434}\u{43D}\u{44F}, ${args.date}`,
        "todayDateSelected": (args)=>`\u{421}\u{435}\u{433}\u{43E}\u{434}\u{43D}\u{44F}, \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E} ${args.date}`
    };

    var $1b4c51359c99cf79$exports = {};
    $1b4c51359c99cf79$exports = {
        "dateRange": (args)=>`Od ${args.startDate} do ${args.endDate}`,
        "dateSelected": (args)=>`Vybrat\xfd d\xe1tum ${args.date}`,
        "finishRangeSelectionPrompt": `Kliknut\xedm dokon\u{10D}\xedte v\xfdber rozsahu d\xe1tumov`,
        "maximumDate": `Posledn\xfd dostupn\xfd d\xe1tum`,
        "minimumDate": `Prv\xfd dostupn\xfd d\xe1tum`,
        "next": `Nasleduj\xface`,
        "previous": `Predch\xe1dzaj\xface`,
        "selectedDateDescription": (args)=>`Vybrat\xfd d\xe1tum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Vybrat\xfd rozsah: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Kliknut\xedm spust\xedte v\xfdber rozsahu d\xe1tumov`,
        "todayDate": (args)=>`Dnes ${args.date}`,
        "todayDateSelected": (args)=>`Vybrat\xfd dne\u{161}n\xfd d\xe1tum ${args.date}`
    };

    var $02e4e6a4608cc6f3$exports = {};
    $02e4e6a4608cc6f3$exports = {
        "dateRange": (args)=>`${args.startDate} do ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} izbrano`,
        "finishRangeSelectionPrompt": `Kliknite za dokon\u{10D}anje izbire datumskega obsega`,
        "maximumDate": `Zadnji razpolo\u{17E}ljivi datum`,
        "minimumDate": `Prvi razpolo\u{17E}ljivi datum`,
        "next": `Naprej`,
        "previous": `Nazaj`,
        "selectedDateDescription": (args)=>`Izbrani datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Izbrano obmo\u{10D}je: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Kliknite za za\u{10D}etek izbire datumskega obsega`,
        "todayDate": (args)=>`Danes, ${args.date}`,
        "todayDateSelected": (args)=>`Danes, ${args.date} izbrano`
    };

    var $6dd2fbaad93b6878$exports = {};
    $6dd2fbaad93b6878$exports = {
        "dateRange": (args)=>`${args.startDate} do ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} izabran`,
        "finishRangeSelectionPrompt": `Kliknite da dovr\u{161}ite opseg izabranih datuma`,
        "maximumDate": `Zadnji raspolo\u{17E}ivi datum`,
        "minimumDate": `Prvi raspolo\u{17E}ivi datum`,
        "next": `Slede\u{107}i`,
        "previous": `Prethodni`,
        "selectedDateDescription": (args)=>`Izabrani datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Izabrani period: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Kliknite da zapo\u{10D}nete opseg izabranih datuma`,
        "todayDate": (args)=>`Danas, ${args.date}`,
        "todayDateSelected": (args)=>`Danas, izabran ${args.date}`
    };

    var $33ea59bfe6e804e0$exports = {};
    $33ea59bfe6e804e0$exports = {
        "dateRange": (args)=>`${args.startDate} till ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} har valts`,
        "finishRangeSelectionPrompt": `Klicka f\xf6r att avsluta val av datumintervall`,
        "maximumDate": `Sista tillg\xe4ngliga datum`,
        "minimumDate": `F\xf6rsta tillg\xe4ngliga datum`,
        "next": `N\xe4sta`,
        "previous": `F\xf6reg\xe5ende`,
        "selectedDateDescription": (args)=>`Valt datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valt intervall: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Klicka f\xf6r att v\xe4lja datumintervall`,
        "todayDate": (args)=>`Idag, ${args.date}`,
        "todayDateSelected": (args)=>`Idag, ${args.date} har valts`
    };

    var $4603b0d0246969b2$exports = {};
    $4603b0d0246969b2$exports = {
        "dateRange": (args)=>`${args.startDate} - ${args.endDate}`,
        "dateSelected": (args)=>`${args.date} se\xe7ildi`,
        "finishRangeSelectionPrompt": `Tarih aral\u{131}\u{11F}\u{131} se\xe7imini tamamlamak i\xe7in t\u{131}klay\u{131}n`,
        "maximumDate": `Son m\xfcsait tarih`,
        "minimumDate": `\u{130}lk m\xfcsait tarih`,
        "next": `Sonraki`,
        "previous": `\xd6nceki`,
        "selectedDateDescription": (args)=>`Se\xe7ilen Tarih: ${args.date}`,
        "selectedRangeDescription": (args)=>`Se\xe7ilen Aral\u{131}k: ${args.dateRange}`,
        "startRangeSelectionPrompt": `Tarih aral\u{131}\u{11F}\u{131} se\xe7imini ba\u{15F}latmak i\xe7in t\u{131}klay\u{131}n`,
        "todayDate": (args)=>`Bug\xfcn, ${args.date}`,
        "todayDateSelected": (args)=>`Bug\xfcn, ${args.date} se\xe7ildi`
    };

    var $82649816f530bb1b$exports = {};
    $82649816f530bb1b$exports = {
        "dateRange": (args)=>`${args.startDate} \u{2014} ${args.endDate}`,
        "dateSelected": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E} ${args.date}`,
        "finishRangeSelectionPrompt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C}, \u{449}\u{43E}\u{431} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{438}\u{442}\u{438} \u{432}\u{438}\u{431}\u{456}\u{440} \u{434}\u{456}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}\u{443} \u{434}\u{430}\u{442}`,
        "maximumDate": `\u{41E}\u{441}\u{442}\u{430}\u{43D}\u{43D}\u{44F} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
        "minimumDate": `\u{41F}\u{435}\u{440}\u{448}\u{430} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
        "next": `\u{41D}\u{430}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{438}\u{439}`,
        "previous": `\u{41F}\u{43E}\u{43F}\u{435}\u{440}\u{435}\u{434}\u{43D}\u{456}\u{439}`,
        "selectedDateDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{434}\u{456}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C}, \u{449}\u{43E}\u{431} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{438} \u{432}\u{438}\u{431}\u{456}\u{440} \u{434}\u{456}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}\u{443} \u{434}\u{430}\u{442}`,
        "todayDate": (args)=>`\u{421}\u{44C}\u{43E}\u{433}\u{43E}\u{434}\u{43D}\u{456}, ${args.date}`,
        "todayDateSelected": (args)=>`\u{421}\u{44C}\u{43E}\u{433}\u{43E}\u{434}\u{43D}\u{456}, \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E} ${args.date}`
    };

    var $628e140a43dfb330$exports = {};
    $628e140a43dfb330$exports = {
        "dateRange": (args)=>`${args.startDate} \u{81F3} ${args.endDate}`,
        "dateSelected": (args)=>`\u{5DF2}\u{9009}\u{62E9} ${args.date}`,
        "finishRangeSelectionPrompt": `\u{5355}\u{51FB}\u{4EE5}\u{5B8C}\u{6210}\u{9009}\u{62E9}\u{65E5}\u{671F}\u{8303}\u{56F4}`,
        "maximumDate": `\u{6700}\u{540E}\u{4E00}\u{4E2A}\u{53EF}\u{7528}\u{65E5}\u{671F}`,
        "minimumDate": `\u{7B2C}\u{4E00}\u{4E2A}\u{53EF}\u{7528}\u{65E5}\u{671F}`,
        "next": `\u{4E0B}\u{4E00}\u{9875}`,
        "previous": `\u{4E0A}\u{4E00}\u{9875}`,
        "selectedDateDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{65E5}\u{671F}\u{FF1A}${args.date}`,
        "selectedRangeDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{8303}\u{56F4}\u{FF1A}${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{5355}\u{51FB}\u{4EE5}\u{5F00}\u{59CB}\u{9009}\u{62E9}\u{65E5}\u{671F}\u{8303}\u{56F4}`,
        "todayDate": (args)=>`\u{4ECA}\u{5929}\u{FF0C}\u{5373} ${args.date}`,
        "todayDateSelected": (args)=>`\u{5DF2}\u{9009}\u{62E9}\u{4ECA}\u{5929}\u{FF0C}\u{5373} ${args.date}`
    };

    var $745937250cd4679c$exports = {};
    $745937250cd4679c$exports = {
        "dateRange": (args)=>`${args.startDate} \u{81F3} ${args.endDate}`,
        "dateSelected": (args)=>`\u{5DF2}\u{9078}\u{53D6} ${args.date}`,
        "finishRangeSelectionPrompt": `\u{6309}\u{4E00}\u{4E0B}\u{4EE5}\u{5B8C}\u{6210}\u{9078}\u{53D6}\u{65E5}\u{671F}\u{7BC4}\u{570D}`,
        "maximumDate": `\u{6700}\u{5F8C}\u{4E00}\u{500B}\u{53EF}\u{7528}\u{65E5}\u{671F}`,
        "minimumDate": `\u{7B2C}\u{4E00}\u{500B}\u{53EF}\u{7528}\u{65E5}\u{671F}`,
        "next": `\u{4E0B}\u{4E00}\u{9801}`,
        "previous": `\u{4E0A}\u{4E00}\u{9801}`,
        "selectedDateDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{65E5}\u{671F}\u{FF1A}${args.date}`,
        "selectedRangeDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{7BC4}\u{570D}\u{FF1A}${args.dateRange}`,
        "startRangeSelectionPrompt": `\u{6309}\u{4E00}\u{4E0B}\u{4EE5}\u{958B}\u{59CB}\u{9078}\u{53D6}\u{65E5}\u{671F}\u{7BC4}\u{570D}`,
        "todayDate": (args)=>`\u{4ECA}\u{5929}\u{FF0C}${args.date}`,
        "todayDateSelected": (args)=>`\u{5DF2}\u{9078}\u{53D6}\u{4ECA}\u{5929}\u{FF0C}${args.date}`
    };

    var $3904726b442bd9b2$exports = {};


































    $3904726b442bd9b2$exports = {
        "ar-AE": $39324ace0d945f59$exports,
        "bg-BG": $1830a539e98c7baf$exports,
        "cs-CZ": $f4b92528965aab97$exports,
        "da-DK": $1cd578ef0547c8f1$exports,
        "de-DE": $db55a8973925d619$exports,
        "el-GR": $ec6937d58566d443$exports,
        "en-US": $1f5cea0742dc284a$exports,
        "es-ES": $2ca7ea366384817b$exports,
        "et-EE": $97874a7fe9cd091f$exports,
        "fi-FI": $5d376b7fce1a45b2$exports,
        "fr-FR": $3bf722b362aaf54d$exports,
        "he-IL": $38c43f8322316031$exports,
        "hr-HR": $c90e0f32b44630bf$exports,
        "hu-HU": $715875e6e7a338f4$exports,
        "it-IT": $37d77c66e34daccf$exports,
        "ja-JP": $542f39aee29303c3$exports,
        "ko-KR": $22a5f0623ea73e4f$exports,
        "lt-LT": $522380d13d62cba0$exports,
        "lv-LV": $8a7bc830b2fe6485$exports,
        "nb-NO": $9fac9c044470683b$exports,
        "nl-NL": $b127d3569efb1449$exports,
        "pl-PL": $51404a4090633490$exports,
        "pt-BR": $e5e6a3fe3b4527df$exports,
        "pt-PT": $c519dcadcbb1ee47$exports,
        "ro-RO": $e5aa0186ca7889c6$exports,
        "ru-RU": $5b907f5fa3eee652$exports,
        "sk-SK": $1b4c51359c99cf79$exports,
        "sl-SI": $02e4e6a4608cc6f3$exports,
        "sr-SP": $6dd2fbaad93b6878$exports,
        "sv-SE": $33ea59bfe6e804e0$exports,
        "tr-TR": $4603b0d0246969b2$exports,
        "uk-UA": $82649816f530bb1b$exports,
        "zh-CN": $628e140a43dfb330$exports,
        "zh-TW": $745937250cd4679c$exports
    };

    function $parcel$interopDefault$e(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    const $a074e1e2d0f0a665$export$653eddfc964b0f8a = new WeakMap();
    function $a074e1e2d0f0a665$export$134cbb7fb09a9522(date) {
        return (date === null || date === void 0 ? void 0 : date.calendar.identifier) === 'gregory' && date.era === 'BC' ? 'short' : undefined;
    }
    function $a074e1e2d0f0a665$export$b6df97c887c38e1a(state) {
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$e($3904726b442bd9b2$exports))), '@react-aria/calendar');
        let start, end;
        if ('highlightedRange' in state) ({ start: start, end: end } = state.highlightedRange || {});
        else start = end = state.value;
        let dateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            weekday: 'long',
            month: 'long',
            year: 'numeric',
            day: 'numeric',
            era: $a074e1e2d0f0a665$export$134cbb7fb09a9522(start) || $a074e1e2d0f0a665$export$134cbb7fb09a9522(end),
            timeZone: state.timeZone
        });
        let anchorDate = 'anchorDate' in state ? state.anchorDate : null;
        return (0, wp.element.useMemo)(()=>{
            // No message if currently selecting a range, or there is nothing highlighted.
            if (!anchorDate && start && end) {
                // Use a single date message if the start and end dates are the same day,
                // otherwise include both dates.
                if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(start, end)) {
                    let date = dateFormatter.format(start.toDate(state.timeZone));
                    return stringFormatter.format('selectedDateDescription', {
                        date: date
                    });
                } else {
                    let dateRange = $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, start, end, state.timeZone);
                    return stringFormatter.format('selectedRangeDescription', {
                        dateRange: dateRange
                    });
                }
            }
            return '';
        }, [
            start,
            end,
            anchorDate,
            state.timeZone,
            stringFormatter,
            dateFormatter
        ]);
    }
    function $a074e1e2d0f0a665$export$31afe65d91ef6e8(startDate, endDate, timeZone, isAria) {
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$e($3904726b442bd9b2$exports))), '@react-aria/calendar');
        let era = $a074e1e2d0f0a665$export$134cbb7fb09a9522(startDate) || $a074e1e2d0f0a665$export$134cbb7fb09a9522(endDate);
        let monthFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            month: 'long',
            year: 'numeric',
            era: era,
            calendar: startDate.calendar.identifier,
            timeZone: timeZone
        });
        let dateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            month: 'long',
            year: 'numeric',
            day: 'numeric',
            era: era,
            calendar: startDate.calendar.identifier,
            timeZone: timeZone
        });
        return (0, wp.element.useMemo)(()=>{
            // Special case for month granularity. Format as a single month if only a
            // single month is visible, otherwise format as a range of months.
            if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(startDate, ($14e0f24ef4ac5c92$export$a5a3b454ada2268e)(startDate))) {
                if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(endDate, ($14e0f24ef4ac5c92$export$a2258d9c4118825c)(startDate))) return monthFormatter.format(startDate.toDate(timeZone));
                else if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(endDate, ($14e0f24ef4ac5c92$export$a2258d9c4118825c)(endDate))) return isAria ? $a074e1e2d0f0a665$var$formatRange(monthFormatter, stringFormatter, startDate, endDate, timeZone) : monthFormatter.formatRange(startDate.toDate(timeZone), endDate.toDate(timeZone));
            }
            return isAria ? $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, startDate, endDate, timeZone) : dateFormatter.formatRange(startDate.toDate(timeZone), endDate.toDate(timeZone));
        }, [
            startDate,
            endDate,
            monthFormatter,
            dateFormatter,
            stringFormatter,
            timeZone,
            isAria
        ]);
    }
    function $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, start, end, timeZone) {
        let parts = dateFormatter.formatRangeToParts(start.toDate(timeZone), end.toDate(timeZone));
        // Find the separator between the start and end date. This is determined
        // by finding the last shared literal before the end range.
        let separatorIndex = -1;
        for(let i = 0; i < parts.length; i++){
            let part = parts[i];
            if (part.source === 'shared' && part.type === 'literal') separatorIndex = i;
            else if (part.source === 'endRange') break;
        }
        // Now we can combine the parts into start and end strings.
        let startValue = '';
        let endValue = '';
        for(let i = 0; i < parts.length; i++){
            if (i < separatorIndex) startValue += parts[i].value;
            else if (i > separatorIndex) endValue += parts[i].value;
        }
        return stringFormatter.format('dateRange', {
            startDate: startValue,
            endDate: endValue
        });
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ /* Inspired by https://github.com/AlmeroSteyn/react-aria-live */ const $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7000;
    let $319e236875307eab$var$liveAnnouncer = null;
    function $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = 'assertive', timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
        if (!$319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer = new $319e236875307eab$var$LiveAnnouncer();
        $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);
    }
    function $319e236875307eab$export$d10ae4f68404609a(assertiveness) {
        if ($319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer.clear(assertiveness);
    }
    // LiveAnnouncer is implemented using vanilla DOM, not React. That's because as of React 18
    // ReactDOM.render is deprecated, and the replacement, ReactDOM.createRoot is moved into a
    // subpath import `react-dom/client`. That makes it hard for us to support multiple React versions.
    // As a global API, we can't use portals without introducing a breaking API change. LiveAnnouncer
    // is simple enough to implement without React, so that's what we do here.
    // See this discussion for more details: https://github.com/reactwg/react-18/discussions/125#discussioncomment-2382638
    class $319e236875307eab$var$LiveAnnouncer {
        createLog(ariaLive) {
            let node = document.createElement('div');
            node.setAttribute('role', 'log');
            node.setAttribute('aria-live', ariaLive);
            node.setAttribute('aria-relevant', 'additions');
            return node;
        }
        destroy() {
            if (!this.node) return;
            document.body.removeChild(this.node);
            this.node = null;
        }
        announce(message, assertiveness = 'assertive', timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
            if (!this.node) return;
            let node = document.createElement('div');
            node.textContent = message;
            if (assertiveness === 'assertive') this.assertiveLog.appendChild(node);
            else this.politeLog.appendChild(node);
            if (message !== '') setTimeout(()=>{
                node.remove();
            }, timeout);
        }
        clear(assertiveness) {
            if (!this.node) return;
            if (!assertiveness || assertiveness === 'assertive') this.assertiveLog.innerHTML = '';
            if (!assertiveness || assertiveness === 'polite') this.politeLog.innerHTML = '';
        }
        constructor(){
            this.node = document.createElement('div');
            this.node.dataset.liveAnnouncer = 'true';
            // copied from VisuallyHidden
            Object.assign(this.node.style, {
                border: 0,
                clip: 'rect(0 0 0 0)',
                clipPath: 'inset(50%)',
                height: '1px',
                margin: '-1px',
                overflow: 'hidden',
                padding: 0,
                position: 'absolute',
                width: '1px',
                whiteSpace: 'nowrap'
            });
            this.assertiveLog = this.createLog('assertive');
            this.node.appendChild(this.assertiveLog);
            this.politeLog = this.createLog('polite');
            this.node.appendChild(this.politeLog);
            document.body.prepend(this.node);
        }
    }

    function $parcel$interopDefault$d(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $c4acc1de3ab169cf$export$d652b3ea2d672d5b(props, state) {
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$d($3904726b442bd9b2$exports))), '@react-aria/calendar');
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
        let title = ($a074e1e2d0f0a665$export$31afe65d91ef6e8)(state.visibleRange.start, state.visibleRange.end, state.timeZone, false);
        let visibleRangeDescription = ($a074e1e2d0f0a665$export$31afe65d91ef6e8)(state.visibleRange.start, state.visibleRange.end, state.timeZone, true);
        // Announce when the visible date range changes
        ($4f58c5f72bcf79f7$export$496315a1608d9602)(()=>{
            // only when pressing the Previous or Next button
            if (!state.isFocused) ($319e236875307eab$export$a9b970dcc4ae71a9)(visibleRangeDescription);
        }, [
            visibleRangeDescription
        ]);
        // Announce when the selected value changes
        let selectedDateDescription = ($a074e1e2d0f0a665$export$b6df97c887c38e1a)(state);
        ($4f58c5f72bcf79f7$export$496315a1608d9602)(()=>{
            if (selectedDateDescription) ($319e236875307eab$export$a9b970dcc4ae71a9)(selectedDateDescription, 'polite', 4000);
        // handle an update to the caption that describes the currently selected range, to announce the new value
        }, [
            selectedDateDescription
        ]);
        let errorMessageId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)([
            Boolean(props.errorMessage),
            props.isInvalid,
            props.validationState
        ]);
        // Pass the label to the child grid elements.
        ($a074e1e2d0f0a665$export$653eddfc964b0f8a).set(state, {
            ariaLabel: props['aria-label'],
            ariaLabelledBy: props['aria-labelledby'],
            errorMessageId: errorMessageId,
            selectedDateDescription: selectedDateDescription
        });
        // If the next or previous buttons become disabled while they are focused, move focus to the calendar body.
        let [nextFocused, setNextFocused] = (0, wp.element.useState)(false);
        let nextDisabled = props.isDisabled || state.isNextVisibleRangeInvalid();
        if (nextDisabled && nextFocused) {
            setNextFocused(false);
            state.setFocused(true);
        }
        let [previousFocused, setPreviousFocused] = (0, wp.element.useState)(false);
        let previousDisabled = props.isDisabled || state.isPreviousVisibleRangeInvalid();
        if (previousDisabled && previousFocused) {
            setPreviousFocused(false);
            state.setFocused(true);
        }
        let labelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            id: props['id'],
            'aria-label': [
                props['aria-label'],
                visibleRangeDescription
            ].filter(Boolean).join(', '),
            'aria-labelledby': props['aria-labelledby']
        });
        return {
            calendarProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, labelProps, {
                role: 'application',
                'aria-describedby': props['aria-describedby'] || undefined
            }),
            nextButtonProps: {
                onPress: ()=>state.focusNextPage(),
                'aria-label': stringFormatter.format('next'),
                isDisabled: nextDisabled,
                onFocusChange: setNextFocused
            },
            prevButtonProps: {
                onPress: ()=>state.focusPreviousPage(),
                'aria-label': stringFormatter.format('previous'),
                isDisabled: previousDisabled,
                onFocusChange: setPreviousFocused
            },
            errorMessageProps: {
                id: errorMessageId
            },
            title: title
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $9942cad8a072a530$export$3ee915f8151bd4f1(props, state) {
        return ($c4acc1de3ab169cf$export$d652b3ea2d672d5b)(props, state);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $46a4342aab3d8076$export$87e0539f600c24e5(props, state, ref) {
        let res = ($c4acc1de3ab169cf$export$d652b3ea2d672d5b)(props, state);
        // We need to ignore virtual pointer events from VoiceOver due to these bugs.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202
        // usePress also does this and waits for the following click event before firing.
        // We need to match that here otherwise this will fire before the press event in
        // useCalendarCell, causing range selection to not work properly.
        let isVirtualClick = (0, wp.element.useRef)(false);
        let windowRef = (0, wp.element.useRef)(typeof window !== 'undefined' ? window : null);
        ($e9faafb641e167db$export$90fc3a17d93f704c)(windowRef, 'pointerdown', (e)=>{
            isVirtualClick.current = e.width === 0 && e.height === 0;
        });
        // Stop range selection when pressing or releasing a pointer outside the calendar body,
        // except when pressing the next or previous buttons to switch months.
        let endDragging = (e)=>{
            if (isVirtualClick.current) {
                isVirtualClick.current = false;
                return;
            }
            state.setDragging(false);
            if (!state.anchorDate) return;
            let target = e.target;
            if (ref.current && ref.current.contains(document.activeElement) && (!ref.current.contains(target) || !target.closest('button, [role="button"]'))) state.selectFocusedDate();
        };
        ($e9faafb641e167db$export$90fc3a17d93f704c)(windowRef, 'pointerup', endDragging);
        // Also stop range selection on blur, e.g. tabbing away from the calendar.
        res.calendarProps.onBlur = (e)=>{
            if (!ref.current) return;
            if ((!e.relatedTarget || !ref.current.contains(e.relatedTarget)) && state.anchorDate) state.selectFocusedDate();
        };
        // Prevent touch scrolling while dragging
        ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'touchmove', (e)=>{
            if (state.isDragging) e.preventDefault();
        }, {
            passive: false,
            capture: true
        });
        return res;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $e3031d1f8c9d64eb$export$cb95147730a423f5(props, state) {
        let { startDate: startDate = state.visibleRange.start, endDate: endDate = state.visibleRange.end } = props;
        let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let onKeyDown = (e)=>{
            switch(e.key){
                case 'Enter':
                case ' ':
                    e.preventDefault();
                    state.selectFocusedDate();
                    break;
                case 'PageUp':
                    e.preventDefault();
                    e.stopPropagation();
                    state.focusPreviousSection(e.shiftKey);
                    break;
                case 'PageDown':
                    e.preventDefault();
                    e.stopPropagation();
                    state.focusNextSection(e.shiftKey);
                    break;
                case 'End':
                    e.preventDefault();
                    e.stopPropagation();
                    state.focusSectionEnd();
                    break;
                case 'Home':
                    e.preventDefault();
                    e.stopPropagation();
                    state.focusSectionStart();
                    break;
                case 'ArrowLeft':
                    e.preventDefault();
                    e.stopPropagation();
                    if (direction === 'rtl') state.focusNextDay();
                    else state.focusPreviousDay();
                    break;
                case 'ArrowUp':
                    e.preventDefault();
                    e.stopPropagation();
                    state.focusPreviousRow();
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    e.stopPropagation();
                    if (direction === 'rtl') state.focusPreviousDay();
                    else state.focusNextDay();
                    break;
                case 'ArrowDown':
                    e.preventDefault();
                    e.stopPropagation();
                    state.focusNextRow();
                    break;
                case 'Escape':
                    // Cancel the selection.
                    if ('setAnchorDate' in state) {
                        e.preventDefault();
                        state.setAnchorDate(null);
                    }
                    break;
            }
        };
        let visibleRangeDescription = ($a074e1e2d0f0a665$export$31afe65d91ef6e8)(startDate, endDate, state.timeZone, true);
        let { ariaLabel: ariaLabel, ariaLabelledBy: ariaLabelledBy } = ($a074e1e2d0f0a665$export$653eddfc964b0f8a).get(state);
        let labelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            'aria-label': [
                ariaLabel,
                visibleRangeDescription
            ].filter(Boolean).join(', '),
            'aria-labelledby': ariaLabelledBy
        });
        let dayFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            weekday: props.weekdayStyle || 'narrow',
            timeZone: state.timeZone
        });
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let weekDays = (0, wp.element.useMemo)(()=>{
            let weekStart = ($14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)(state.timeZone), locale);
            return [
                ...new Array(7).keys()
            ].map((index)=>{
                let date = weekStart.add({
                    days: index
                });
                let dateDay = date.toDate(state.timeZone);
                return dayFormatter.format(dateDay);
            });
        }, [
            locale,
            state.timeZone,
            dayFormatter
        ]);
        return {
            gridProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
                role: 'grid',
                'aria-readonly': state.isReadOnly || null,
                'aria-disabled': state.isDisabled || null,
                'aria-multiselectable': 'highlightedRange' in state || undefined,
                onKeyDown: onKeyDown,
                onFocus: ()=>state.setFocused(true),
                onBlur: ()=>state.setFocused(false)
            }),
            headerProps: {
                // Column headers are hidden to screen readers to make navigating with a touch screen reader easier.
                // The day names are already included in the label of each cell, so there's no need to announce them twice.
                'aria-hidden': true
            },
            weekDays: weekDays
        };
    }

    function $parcel$interopDefault$c(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 






    function $36a0ac60f04457c5$export$136073280381448e(props, state, ref) {
        let { date: date, isDisabled: isDisabled } = props;
        let { errorMessageId: errorMessageId, selectedDateDescription: selectedDateDescription } = ($a074e1e2d0f0a665$export$653eddfc964b0f8a).get(state);
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$c($3904726b442bd9b2$exports))), '@react-aria/calendar');
        let dateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            weekday: 'long',
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            era: ($a074e1e2d0f0a665$export$134cbb7fb09a9522)(date),
            timeZone: state.timeZone
        });
        let isSelected = state.isSelected(date);
        let isFocused = state.isCellFocused(date);
        isDisabled = isDisabled || state.isCellDisabled(date);
        let isUnavailable = state.isCellUnavailable(date);
        let isSelectable = !isDisabled && !isUnavailable;
        let isInvalid = state.isValueInvalid && ('highlightedRange' in state ? !state.anchorDate && state.highlightedRange && date.compare(state.highlightedRange.start) >= 0 && date.compare(state.highlightedRange.end) <= 0 : state.value && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(state.value, date));
        if (isInvalid) isSelected = true;
        // For performance, reuse the same date object as before if the new date prop is the same.
        // This allows subsequent useMemo results to be reused.
        date = ($5a387cc49350e6db$export$722debc0e56fea39)(date, ($14e0f24ef4ac5c92$export$91b62ebf2ba703ee));
        let nativeDate = (0, wp.element.useMemo)(()=>date.toDate(state.timeZone), [
            date,
            state.timeZone
        ]);
        // aria-label should be localize Day of week, Month, Day and Year without Time.
        let isDateToday = ($14e0f24ef4ac5c92$export$629b0a497aa65267)(date, state.timeZone);
        let label = (0, wp.element.useMemo)(()=>{
            let label = '';
            // If this is a range calendar, add a description of the full selected range
            // to the first and last selected date.
            if ('highlightedRange' in state && state.value && !state.anchorDate && (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.value.start) || ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.value.end))) label = selectedDateDescription + ', ';
            label += dateFormatter.format(nativeDate);
            if (isDateToday) // If date is today, set appropriate string depending on selected state:
            label = stringFormatter.format(isSelected ? 'todayDateSelected' : 'todayDate', {
                date: label
            });
            else if (isSelected) // If date is selected but not today:
            label = stringFormatter.format('dateSelected', {
                date: label
            });
            if (state.minValue && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.minValue)) label += ', ' + stringFormatter.format('minimumDate');
            else if (state.maxValue && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.maxValue)) label += ', ' + stringFormatter.format('maximumDate');
            return label;
        }, [
            dateFormatter,
            nativeDate,
            stringFormatter,
            isSelected,
            isDateToday,
            date,
            state,
            selectedDateDescription
        ]);
        // When a cell is focused and this is a range calendar, add a prompt to help
        // screenreader users know that they are in a range selection mode.
        let rangeSelectionPrompt = '';
        if ('anchorDate' in state && isFocused && !state.isReadOnly && isSelectable) {
            // If selection has started add "click to finish selecting range"
            if (state.anchorDate) rangeSelectionPrompt = stringFormatter.format('finishRangeSelectionPrompt');
            else rangeSelectionPrompt = stringFormatter.format('startRangeSelectionPrompt');
        }
        let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(rangeSelectionPrompt);
        let isAnchorPressed = (0, wp.element.useRef)(false);
        let isRangeBoundaryPressed = (0, wp.element.useRef)(false);
        let touchDragTimerRef = (0, wp.element.useRef)(null);
        let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
            // When dragging to select a range, we don't want dragging over the original anchor
            // again to trigger onPressStart. Cancel presses immediately when the pointer exits.
            shouldCancelOnPointerExit: 'anchorDate' in state && !!state.anchorDate,
            preventFocusOnPress: true,
            isDisabled: !isSelectable || state.isReadOnly,
            onPressStart (e) {
                if (state.isReadOnly) {
                    state.setFocusedDate(date);
                    return;
                }
                if ('highlightedRange' in state && !state.anchorDate && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {
                    // Allow dragging the start or end date of a range to modify it
                    // rather than starting a new selection.
                    // Don't allow dragging when invalid, or weird jumping behavior may occur as date ranges
                    // are constrained to available dates. The user will need to select a new range in this case.
                    if (state.highlightedRange && !isInvalid) {
                        if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.highlightedRange.start)) {
                            state.setAnchorDate(state.highlightedRange.end);
                            state.setFocusedDate(date);
                            state.setDragging(true);
                            isRangeBoundaryPressed.current = true;
                            return;
                        } else if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.highlightedRange.end)) {
                            state.setAnchorDate(state.highlightedRange.start);
                            state.setFocusedDate(date);
                            state.setDragging(true);
                            isRangeBoundaryPressed.current = true;
                            return;
                        }
                    }
                    let startDragging = ()=>{
                        state.setDragging(true);
                        touchDragTimerRef.current = null;
                        state.selectDate(date);
                        state.setFocusedDate(date);
                        isAnchorPressed.current = true;
                    };
                    // Start selection on mouse/touch down so users can drag to select a range.
                    // On touch, delay dragging to determine if the user really meant to scroll.
                    if (e.pointerType === 'touch') touchDragTimerRef.current = setTimeout(startDragging, 200);
                    else startDragging();
                }
            },
            onPressEnd () {
                isRangeBoundaryPressed.current = false;
                isAnchorPressed.current = false;
                clearTimeout(touchDragTimerRef.current);
                touchDragTimerRef.current = null;
            },
            onPress () {
                // For non-range selection, always select on press up.
                if (!('anchorDate' in state) && !state.isReadOnly) {
                    state.selectDate(date);
                    state.setFocusedDate(date);
                }
            },
            onPressUp (e) {
                if (state.isReadOnly) return;
                // If the user tapped quickly, the date won't be selected yet and the
                // timer will still be in progress. In this case, select the date on touch up.
                // Timer is cleared in onPressEnd.
                if ('anchorDate' in state && touchDragTimerRef.current) {
                    state.selectDate(date);
                    state.setFocusedDate(date);
                }
                if ('anchorDate' in state) {
                    if (isRangeBoundaryPressed.current) // When clicking on the start or end date of an already selected range,
                    // start a new selection on press up to also allow dragging the date to
                    // change the existing range.
                    state.setAnchorDate(date);
                    else if (state.anchorDate && !isAnchorPressed.current) {
                        // When releasing a drag or pressing the end date of a range, select it.
                        state.selectDate(date);
                        state.setFocusedDate(date);
                    } else if (e.pointerType === 'keyboard' && !state.anchorDate) {
                        // For range selection, auto-advance the focused date by one if using keyboard.
                        // This gives an indication that you're selecting a range rather than a single date.
                        // For mouse, this is unnecessary because users will see the indication on hover. For screen readers,
                        // there will be an announcement to "click to finish selecting range" (above).
                        state.selectDate(date);
                        let nextDay = date.add({
                            days: 1
                        });
                        if (state.isInvalid(nextDay)) nextDay = date.subtract({
                            days: 1
                        });
                        if (!state.isInvalid(nextDay)) state.setFocusedDate(nextDay);
                    } else if (e.pointerType === 'virtual') {
                        // For screen readers, just select the date on click.
                        state.selectDate(date);
                        state.setFocusedDate(date);
                    }
                }
            }
        });
        let tabIndex = null;
        if (!isDisabled) tabIndex = ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.focusedDate) ? 0 : -1;
        // Focus the button in the DOM when the state updates.
        (0, wp.element.useEffect)(()=>{
            if (isFocused && ref.current) {
                ($7215afc6de606d6b$export$de79e2c695e052f3)(ref.current);
                // Scroll into view if navigating with a keyboard, otherwise
                // try not to shift the view under the user's mouse/finger.
                // If in a overlay, scrollIntoViewport will only cause scrolling
                // up to the overlay scroll body to prevent overlay shifting.
                // Also only scroll into view if the cell actually got focused.
                // There are some cases where the cell might be disabled or inside,
                // an inert container and we don't want to scroll then.
                if (($507fabe10e71c6fb$export$630ff653c5ada6a9)() !== 'pointer' && document.activeElement === ref.current) ($2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
                    containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                });
            }
        }, [
            isFocused,
            ref
        ]);
        let cellDateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            day: 'numeric',
            timeZone: state.timeZone,
            calendar: date.calendar.identifier
        });
        let formattedDate = (0, wp.element.useMemo)(()=>cellDateFormatter.formatToParts(nativeDate).find((part)=>part.type === 'day').value, [
            cellDateFormatter,
            nativeDate
        ]);
        return {
            cellProps: {
                role: 'gridcell',
                'aria-disabled': !isSelectable || null,
                'aria-selected': isSelected || null,
                'aria-invalid': isInvalid || null
            },
            buttonProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, {
                onFocus () {
                    if (!isDisabled) state.setFocusedDate(date);
                },
                tabIndex: tabIndex,
                role: 'button',
                'aria-disabled': !isSelectable || null,
                'aria-label': label,
                'aria-invalid': isInvalid || null,
                'aria-describedby': [
                    isInvalid ? errorMessageId : null,
                    descriptionProps['aria-describedby']
                ].filter(Boolean).join(' ') || undefined,
                onPointerEnter (e) {
                    // Highlight the date on hover or drag over a date when selecting a range.
                    if ('highlightDate' in state && (e.pointerType !== 'touch' || state.isDragging) && isSelectable) state.highlightDate(date);
                },
                onPointerDown (e) {
                    // This is necessary on touch devices to allow dragging
                    // outside the original pressed element.
                    // (JSDOM does not support this)
                    if ('releasePointerCapture' in e.target) e.target.releasePointerCapture(e.pointerId);
                },
                onContextMenu (e) {
                    // Prevent context menu on long press.
                    e.preventDefault();
                }
            }),
            isPressed: isPressed,
            isFocused: isFocused,
            isSelected: isSelected,
            isDisabled: isDisabled,
            isUnavailable: isUnavailable,
            isOutsideVisibleRange: date.compare(state.visibleRange.start) < 0 || date.compare(state.visibleRange.end) > 0,
            isInvalid: isInvalid,
            formattedDate: formattedDate
        };
    }

    /*
     * Copyright 2023 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $e93e671b31057976$export$b8473d3665f3a75a(props, state, ref) {
        let { validationBehavior: validationBehavior, focus: focus } = props;
        // This is a useLayoutEffect so that it runs before the useEffect in useFormValidationState, which commits the validation change.
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            if (validationBehavior === 'native' && (ref === null || ref === void 0 ? void 0 : ref.current)) {
                let errorMessage = state.realtimeValidation.isInvalid ? state.realtimeValidation.validationErrors.join(' ') || 'Invalid value.' : '';
                ref.current.setCustomValidity(errorMessage);
                // Prevent default tooltip for validation message.
                // https://bugzilla.mozilla.org/show_bug.cgi?id=605277
                if (!ref.current.hasAttribute('title')) ref.current.title = '';
                if (!state.realtimeValidation.isInvalid) state.updateValidation($e93e671b31057976$var$getNativeValidity(ref.current));
            }
        });
        let onReset = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{
            state.resetValidation();
        });
        let onInvalid = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
            var _ref_current;
            // Only commit validation if we are not already displaying one.
            // This avoids clearing server errors that the user didn't actually fix.
            if (!state.displayValidation.isInvalid) state.commitValidation();
            // Auto focus the first invalid input in a form, unless the error already had its default prevented.
            let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
            if (!e.defaultPrevented && ref && form && $e93e671b31057976$var$getFirstInvalidInput(form) === ref.current) {
                var _ref_current1;
                if (focus) focus();
                else (_ref_current1 = ref.current) === null || _ref_current1 === void 0 ? void 0 : _ref_current1.focus();
                // Always show focus ring.
                ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
            }
            // Prevent default browser error UI from appearing.
            e.preventDefault();
        });
        let onChange = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{
            state.commitValidation();
        });
        (0, wp.element.useEffect)(()=>{
            let input = ref === null || ref === void 0 ? void 0 : ref.current;
            if (!input) return;
            let form = input.form;
            input.addEventListener('invalid', onInvalid);
            input.addEventListener('change', onChange);
            form === null || form === void 0 ? void 0 : form.addEventListener('reset', onReset);
            return ()=>{
                input.removeEventListener('invalid', onInvalid);
                input.removeEventListener('change', onChange);
                form === null || form === void 0 ? void 0 : form.removeEventListener('reset', onReset);
            };
        }, [
            ref,
            onInvalid,
            onChange,
            onReset,
            validationBehavior
        ]);
    }
    function $e93e671b31057976$var$getValidity(input) {
        // The native ValidityState object is live, meaning each property is a getter that returns the current state.
        // We need to create a snapshot of the validity state at the time this function is called to avoid unpredictable React renders.
        let validity = input.validity;
        return {
            badInput: validity.badInput,
            customError: validity.customError,
            patternMismatch: validity.patternMismatch,
            rangeOverflow: validity.rangeOverflow,
            rangeUnderflow: validity.rangeUnderflow,
            stepMismatch: validity.stepMismatch,
            tooLong: validity.tooLong,
            tooShort: validity.tooShort,
            typeMismatch: validity.typeMismatch,
            valueMissing: validity.valueMissing,
            valid: validity.valid
        };
    }
    function $e93e671b31057976$var$getNativeValidity(input) {
        return {
            isInvalid: !input.validity.valid,
            validationDetails: $e93e671b31057976$var$getValidity(input),
            validationErrors: input.validationMessage ? [
                input.validationMessage
            ] : []
        };
    }
    function $e93e671b31057976$var$getFirstInvalidInput(form) {
        for(let i = 0; i < form.elements.length; i++){
            let element = form.elements[i];
            if (!element.validity.valid) return element;
        }
        return null;
    }

    /*
     * Copyright 2023 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $e5be200c675c3b3a$export$aca958c65c314e6c = {
        badInput: false,
        customError: false,
        patternMismatch: false,
        rangeOverflow: false,
        rangeUnderflow: false,
        stepMismatch: false,
        tooLong: false,
        tooShort: false,
        typeMismatch: false,
        valueMissing: false,
        valid: true
    };
    const $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE = {
        ...$e5be200c675c3b3a$export$aca958c65c314e6c,
        customError: true,
        valid: false
    };
    const $e5be200c675c3b3a$export$dad6ae84456c676a = {
        isInvalid: false,
        validationDetails: $e5be200c675c3b3a$export$aca958c65c314e6c,
        validationErrors: []
    };
    const $e5be200c675c3b3a$export$571b5131b7e65c11 = (0, wp.element.createContext)({});
    const $e5be200c675c3b3a$export$a763b9476acd3eb = '__formValidationState' + Date.now();
    function $e5be200c675c3b3a$export$fc1a364ae1f3ff10(props) {
        // Private prop for parent components to pass state to children.
        if (props[$e5be200c675c3b3a$export$a763b9476acd3eb]) {
            let { realtimeValidation: realtimeValidation, displayValidation: displayValidation, updateValidation: updateValidation, resetValidation: resetValidation, commitValidation: commitValidation } = props[$e5be200c675c3b3a$export$a763b9476acd3eb];
            return {
                realtimeValidation: realtimeValidation,
                displayValidation: displayValidation,
                updateValidation: updateValidation,
                resetValidation: resetValidation,
                commitValidation: commitValidation
            };
        }
        // eslint-disable-next-line react-hooks/rules-of-hooks
        return $e5be200c675c3b3a$var$useFormValidationStateImpl(props);
    }
    function $e5be200c675c3b3a$var$useFormValidationStateImpl(props) {
        let { isInvalid: isInvalid, validationState: validationState, name: name, value: value, builtinValidation: builtinValidation, validate: validate, validationBehavior: validationBehavior = 'aria' } = props;
        // backward compatibility.
        if (validationState) isInvalid || (isInvalid = validationState === 'invalid');
        // If the isInvalid prop is controlled, update validation result in realtime.
        let controlledError = isInvalid !== undefined ? {
            isInvalid: isInvalid,
            validationErrors: [],
            validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
        } : null;
        // Perform custom client side validation.
        let clientError = (0, wp.element.useMemo)(()=>$e5be200c675c3b3a$var$getValidationResult($e5be200c675c3b3a$var$runValidate(validate, value)), [
            validate,
            value
        ]);
        if (builtinValidation === null || builtinValidation === void 0 ? void 0 : builtinValidation.validationDetails.valid) builtinValidation = null;
        // Get relevant server errors from the form.
        let serverErrors = (0, wp.element.useContext)($e5be200c675c3b3a$export$571b5131b7e65c11);
        let serverErrorMessages = (0, wp.element.useMemo)(()=>{
            if (name) return Array.isArray(name) ? name.flatMap((name)=>$e5be200c675c3b3a$var$asArray(serverErrors[name])) : $e5be200c675c3b3a$var$asArray(serverErrors[name]);
            return [];
        }, [
            serverErrors,
            name
        ]);
        // Show server errors when the form gets a new value, and clear when the user changes the value.
        let [lastServerErrors, setLastServerErrors] = (0, wp.element.useState)(serverErrors);
        let [isServerErrorCleared, setServerErrorCleared] = (0, wp.element.useState)(false);
        if (serverErrors !== lastServerErrors) {
            setLastServerErrors(serverErrors);
            setServerErrorCleared(false);
        }
        let serverError = (0, wp.element.useMemo)(()=>$e5be200c675c3b3a$var$getValidationResult(isServerErrorCleared ? [] : serverErrorMessages), [
            isServerErrorCleared,
            serverErrorMessages
        ]);
        // Track the next validation state in a ref until commitValidation is called.
        let nextValidation = (0, wp.element.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
        let [currentValidity, setCurrentValidity] = (0, wp.element.useState)($e5be200c675c3b3a$export$dad6ae84456c676a);
        let lastError = (0, wp.element.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
        let commitValidation = ()=>{
            if (!commitQueued) return;
            setCommitQueued(false);
            let error = clientError || builtinValidation || nextValidation.current;
            if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
                lastError.current = error;
                setCurrentValidity(error);
            }
        };
        let [commitQueued, setCommitQueued] = (0, wp.element.useState)(false);
        (0, wp.element.useEffect)(commitValidation);
        // realtimeValidation is used to update the native input element's state based on custom validation logic.
        // displayValidation is the currently displayed validation state that the user sees (e.g. on input change/form submit).
        // With validationBehavior="aria", all errors are displayed in realtime rather than on submit.
        let realtimeValidation = controlledError || serverError || clientError || builtinValidation || $e5be200c675c3b3a$export$dad6ae84456c676a;
        let displayValidation = validationBehavior === 'native' ? controlledError || serverError || currentValidity : controlledError || serverError || clientError || builtinValidation || currentValidity;
        return {
            realtimeValidation: realtimeValidation,
            displayValidation: displayValidation,
            updateValidation (value) {
                // If validationBehavior is 'aria', update in realtime. Otherwise, store in a ref until commit.
                if (validationBehavior === 'aria' && !$e5be200c675c3b3a$var$isEqualValidation(currentValidity, value)) setCurrentValidity(value);
                else nextValidation.current = value;
            },
            resetValidation () {
                // Update the currently displayed validation state to valid on form reset,
                // even if the native validity says it isn't. It'll show again on the next form submit.
                let error = $e5be200c675c3b3a$export$dad6ae84456c676a;
                if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
                    lastError.current = error;
                    setCurrentValidity(error);
                }
                // Do not commit validation after the next render. This avoids a condition where
                // useSelect calls commitValidation inside an onReset handler.
                if (validationBehavior === 'native') setCommitQueued(false);
                setServerErrorCleared(true);
            },
            commitValidation () {
                // Commit validation state so the user sees it on blur/change/submit. Also clear any server errors.
                // Wait until after the next render to commit so that the latest value has been validated.
                if (validationBehavior === 'native') setCommitQueued(true);
                setServerErrorCleared(true);
            }
        };
    }
    function $e5be200c675c3b3a$var$asArray(v) {
        if (!v) return [];
        return Array.isArray(v) ? v : [
            v
        ];
    }
    function $e5be200c675c3b3a$var$runValidate(validate, value) {
        if (typeof validate === 'function') {
            let e = validate(value);
            if (e && typeof e !== 'boolean') return $e5be200c675c3b3a$var$asArray(e);
        }
        return [];
    }
    function $e5be200c675c3b3a$var$getValidationResult(errors) {
        return errors.length ? {
            isInvalid: true,
            validationErrors: errors,
            validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
        } : null;
    }
    function $e5be200c675c3b3a$var$isEqualValidation(a, b) {
        if (a === b) return true;
        return a && b && a.isInvalid === b.isInvalid && a.validationErrors.length === b.validationErrors.length && a.validationErrors.every((a, i)=>a === b.validationErrors[i]) && Object.entries(a.validationDetails).every(([k, v])=>b.validationDetails[k] === v);
    }
    function $e5be200c675c3b3a$export$75ee7c75d68f5b0e(...results) {
        let errors = new Set();
        let isInvalid = false;
        let validationDetails = {
            ...$e5be200c675c3b3a$export$aca958c65c314e6c
        };
        for (let v of results){
            var _validationDetails, _key;
            for (let e of v.validationErrors)errors.add(e);
            // Only these properties apply for checkboxes.
            isInvalid || (isInvalid = v.isInvalid);
            for(let key in validationDetails)(_validationDetails = validationDetails)[_key = key] || (_validationDetails[_key] = v.validationDetails[key]);
        }
        validationDetails.valid = !isInvalid;
        return {
            isInvalid: isInvalid,
            validationErrors: [
                ...errors
            ],
            validationDetails: validationDetails
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {
        let { isDisabled: isDisabled = false, isReadOnly: isReadOnly = false, value: value, name: name, children: children, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby, validationState: validationState = 'valid', isInvalid: isInvalid } = props;
        let onChange = (e)=>{
            // since we spread props on label, onChange will end up there as well as in here.
            // so we have to stop propagation at the lowest level that we care about
            e.stopPropagation();
            state.setSelected(e.target.checked);
        };
        let hasChildren = children != null;
        let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
        if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');
        // This handles focusing the input on pointer down, which Safari does not do by default.
        let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
            isDisabled: isDisabled
        });
        // iOS does not toggle checkboxes if you drag off and back onto the label, so handle it ourselves.
        let { pressProps: labelProps, isPressed: isLabelPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
            isDisabled: isDisabled || isReadOnly,
            onPress () {
                state.toggle();
            }
        });
        let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
        let interactions = ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps);
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            labelable: true
        });
        ($99facab73266f662$export$5add1d006293d136)(ref, state.isSelected, state.setSelected);
        return {
            labelProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
                onClick: (e)=>e.preventDefault()
            }),
            inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
                'aria-invalid': isInvalid || validationState === 'invalid' || undefined,
                'aria-errormessage': props['aria-errormessage'],
                'aria-controls': props['aria-controls'],
                'aria-readonly': isReadOnly || undefined,
                onChange: onChange,
                disabled: isDisabled,
                ...value == null ? {} : {
                    value: value
                },
                name: name,
                type: 'checkbox',
                ...interactions
            }),
            isSelected: state.isSelected,
            isPressed: isPressed || isLabelPressed,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isInvalid: isInvalid || validationState === 'invalid'
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {
        // Create validation state here because it doesn't make sense to add to general useToggleState.
        let validationState = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: state.isSelected
        });
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = validationState.displayValidation;
        let { labelProps: labelProps, inputProps: inputProps, isSelected: isSelected, isPressed: isPressed, isDisabled: isDisabled, isReadOnly: isReadOnly } = ($d2c8e2b0480f3f34$export$cbe85ee05b554577)({
            ...props,
            isInvalid: isInvalid
        }, state, inputRef);
        ($e93e671b31057976$export$b8473d3665f3a75a)(props, validationState, inputRef);
        let { isIndeterminate: isIndeterminate, isRequired: isRequired, validationBehavior: validationBehavior = 'aria' } = props;
        (0, wp.element.useEffect)(()=>{
            // indeterminate is a property, but it can only be set via javascript
            // https://css-tricks.com/indeterminate-checkboxes/
            if (inputRef.current) inputRef.current.indeterminate = !!isIndeterminate;
        });
        return {
            labelProps: labelProps,
            inputProps: {
                ...inputProps,
                checked: isSelected,
                'aria-required': isRequired && validationBehavior === 'aria' || undefined,
                required: isRequired && validationBehavior === 'native'
            },
            isSelected: isSelected,
            isPressed: isPressed,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $d191a55c9702f145$export$8467354a121f1b9f(props) {
        let { id: id, label: label, 'aria-labelledby': ariaLabelledby, 'aria-label': ariaLabel, labelElementType: labelElementType = 'label' } = props;
        id = ($bdb11010cef70236$export$f680877a34711e37)(id);
        let labelId = ($bdb11010cef70236$export$f680877a34711e37)();
        let labelProps = {};
        if (label) {
            ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;
            labelProps = {
                id: labelId,
                htmlFor: labelElementType === 'label' ? id : undefined
            };
        } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');
        let fieldProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            id: id,
            'aria-label': ariaLabel,
            'aria-labelledby': ariaLabelledby
        });
        return {
            labelProps: labelProps,
            fieldProps: fieldProps
        };
    }

    /*
     * Copyright 2021 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
        let { description: description, errorMessage: errorMessage, isInvalid: isInvalid, validationState: validationState } = props;
        let { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)(props);
        let descriptionId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)([
            Boolean(description),
            Boolean(errorMessage),
            isInvalid,
            validationState
        ]);
        let errorMessageId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)([
            Boolean(description),
            Boolean(errorMessage),
            isInvalid,
            validationState
        ]);
        fieldProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, {
            'aria-describedby': [
                descriptionId,
                // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
                errorMessageId,
                props['aria-describedby']
            ].filter(Boolean).join(' ') || undefined
        });
        return {
            labelProps: labelProps,
            fieldProps: fieldProps,
            descriptionProps: {
                id: descriptionId
            },
            errorMessageProps: {
                id: errorMessageId
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $3017fa7ffdddec74$export$8042c6c013fd5226(props = {}) {
        let { isReadOnly: isReadOnly } = props;
        // have to provide an empty function so useControlledState doesn't throw a fit
        // can't use useControlledState's prop calling because we need the event object from the change
        let [isSelected, setSelected] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isSelected, props.defaultSelected || false, props.onChange);
        function updateSelected(value) {
            if (!isReadOnly) setSelected(value);
        }
        function toggleState() {
            if (!isReadOnly) setSelected(!isSelected);
        }
        return {
            isSelected: isSelected,
            setSelected: updateSelected,
            toggle: toggleState
        };
    }

    var $02cb4c75c506befe$exports = {};
    $02cb4c75c506befe$exports = {
        "buttonLabel": `\u{639}\u{631}\u{636} \u{627}\u{644}\u{645}\u{642}\u{62A}\u{631}\u{62D}\u{627}\u{62A}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{62E}\u{64A}\u{627}\u{631}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{62E}\u{64A}\u{627}\u{631}\u{627}\u{62A}`
        })} \u{645}\u{62A}\u{627}\u{62D}\u{629}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{627}\u{644}\u{645}\u{62C}\u{645}\u{648}\u{639}\u{629} \u{627}\u{644}\u{645}\u{62F}\u{62E}\u{644}\u{629} ${args.groupTitle}, \u{645}\u{639} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{62E}\u{64A}\u{627}\u{631}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{62E}\u{64A}\u{627}\u{631}\u{627}\u{62A}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{645}\u{62D}\u{62F}\u{62F}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{645}\u{642}\u{62A}\u{631}\u{62D}\u{627}\u{62A}`,
        "selectedAnnouncement": (args)=>`${args.optionText}\u{60C} \u{645}\u{62D}\u{62F}\u{62F}`
    };

    var $568b8163f1e56faf$exports = {};
    $568b8163f1e56faf$exports = {
        "buttonLabel": `\u{41F}\u{43E}\u{43A}\u{430}\u{436}\u{438} \u{43F}\u{440}\u{435}\u{434}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{44F}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{43E}\u{43F}\u{446}\u{438}\u{44F}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{43E}\u{43F}\u{446}\u{438}\u{438}`
        })} \u{43D}\u{430} \u{440}\u{430}\u{437}\u{43F}\u{43E}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{435}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{412}\u{44A}\u{432}\u{435}\u{434}\u{435}\u{43D}\u{430} \u{433}\u{440}\u{443}\u{43F}\u{430} ${args.groupTitle}, \u{441} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{43E}\u{43F}\u{446}\u{438}\u{44F}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{43E}\u{43F}\u{446}\u{438}\u{438}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{41F}\u{440}\u{435}\u{434}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{44F}`,
        "selectedAnnouncement": (args)=>`${args.optionText}, \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438}`
    };

    var $87581c0202d106b8$exports = {};
    $87581c0202d106b8$exports = {
        "buttonLabel": `Zobrazit doporu\u{10D}en\xed`,
        "countAnnouncement": (args, formatter)=>`K dispozici ${formatter.plural(args.optionCount, {
            one: ()=>`je ${formatter.number(args.optionCount)} mo\u{17E}nost`,
            other: ()=>`jsou/je ${formatter.number(args.optionCount)} mo\u{17E}nosti/-\xed`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Zadan\xe1 skupina \u{201E}${args.groupTitle}\u{201C} ${formatter.plural(args.groupCount, {
                    one: ()=>`s ${formatter.number(args.groupCount)} mo\u{17E}nost\xed`,
                    other: ()=>`se ${formatter.number(args.groupCount)} mo\u{17E}nostmi`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: ` (vybr\xe1no)`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `N\xe1vrhy`,
        "selectedAnnouncement": (args)=>`${args.optionText}, vybr\xe1no`
    };

    var $a10a0369f5433ed1$exports = {};
    $a10a0369f5433ed1$exports = {
        "buttonLabel": `Vis forslag`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} mulighed tilg\xe6ngelig`,
            other: ()=>`${formatter.number(args.optionCount)} muligheder tilg\xe6ngelige`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Angivet gruppe ${args.groupTitle}, med ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} mulighed`,
                    other: ()=>`${formatter.number(args.groupCount)} muligheder`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valgt`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Forslag`,
        "selectedAnnouncement": (args)=>`${args.optionText}, valgt`
    };

    var $bfd288727d5cb166$exports = {};
    $bfd288727d5cb166$exports = {
        "buttonLabel": `Empfehlungen anzeigen`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} Option`,
            other: ()=>`${formatter.number(args.optionCount)} Optionen`
        })} verf\xfcgbar.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Eingetretene Gruppe ${args.groupTitle}, mit ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} Option`,
                    other: ()=>`${formatter.number(args.groupCount)} Optionen`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, ausgew\xe4hlt`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Empfehlungen`,
        "selectedAnnouncement": (args)=>`${args.optionText}, ausgew\xe4hlt`
    };

    var $ca177778f9a74e3c$exports = {};
    $ca177778f9a74e3c$exports = {
        "buttonLabel": `\u{3A0}\u{3C1}\u{3BF}\u{3B2}\u{3BF}\u{3BB}\u{3AE} \u{3C0}\u{3C1}\u{3BF}\u{3C4}\u{3AC}\u{3C3}\u{3B5}\u{3C9}\u{3BD}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AD}\u{3C2} `
        })} \u{3B4}\u{3B9}\u{3B1}\u{3B8}\u{3AD}\u{3C3}\u{3B9}\u{3BC}\u{3B5}\u{3C2}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{395}\u{3B9}\u{3C3}\u{3B1}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3BF}\u{3BC}\u{3AC}\u{3B4}\u{3B1} ${args.groupTitle}, \u{3BC}\u{3B5} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AD}\u{3C2}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{3A0}\u{3C1}\u{3BF}\u{3C4}\u{3AC}\u{3C3}\u{3B5}\u{3B9}\u{3C2}`,
        "selectedAnnouncement": (args)=>`${args.optionText}, \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B5}`
    };

    var $9b5aa79ef84beb6c$exports = {};
    $9b5aa79ef84beb6c$exports = {
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Entered group ${args.groupTitle}, with ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} option`,
                    other: ()=>`${formatter.number(args.groupCount)} options`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selected`,
            other: ``
        }, args.isSelected)}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} option`,
            other: ()=>`${formatter.number(args.optionCount)} options`
        })} available.`,
        "selectedAnnouncement": (args)=>`${args.optionText}, selected`,
        "buttonLabel": `Show suggestions`,
        "listboxLabel": `Suggestions`
    };

    var $57968e8209de2557$exports = {};
    $57968e8209de2557$exports = {
        "buttonLabel": `Mostrar sugerencias`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opci\xf3n`,
            other: ()=>`${formatter.number(args.optionCount)} opciones`
        })} disponible(s).`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Se ha unido al grupo ${args.groupTitle}, con ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opci\xf3n`,
                    other: ()=>`${formatter.number(args.groupCount)} opciones`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, seleccionado`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Sugerencias`,
        "selectedAnnouncement": (args)=>`${args.optionText}, seleccionado`
    };

    var $60690790bf4c1c6a$exports = {};
    $60690790bf4c1c6a$exports = {
        "buttonLabel": `Kuva soovitused`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} valik`,
            other: ()=>`${formatter.number(args.optionCount)} valikud`
        })} saadaval.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Sisestatud r\xfchm ${args.groupTitle}, valikuga ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} valik`,
                    other: ()=>`${formatter.number(args.groupCount)} valikud`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valitud`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Soovitused`,
        "selectedAnnouncement": (args)=>`${args.optionText}, valitud`
    };

    var $1101246e8c7d9357$exports = {};
    $1101246e8c7d9357$exports = {
        "buttonLabel": `N\xe4yt\xe4 ehdotukset`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} vaihtoehto`,
            other: ()=>`${formatter.number(args.optionCount)} vaihtoehdot`
        })} saatavilla.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Mentiin ryhm\xe4\xe4n ${args.groupTitle}, ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} vaihtoehdon`,
                    other: ()=>`${formatter.number(args.groupCount)} vaihtoehdon`
                })} kanssa.`,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valittu`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Ehdotukset`,
        "selectedAnnouncement": (args)=>`${args.optionText}, valittu`
    };

    var $6404b5cb5b241730$exports = {};
    $6404b5cb5b241730$exports = {
        "buttonLabel": `Afficher les suggestions`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} option`,
            other: ()=>`${formatter.number(args.optionCount)} options`
        })} disponible(s).`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Groupe ${args.groupTitle} rejoint, avec ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} option`,
                    other: ()=>`${formatter.number(args.groupCount)} options`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, s\xe9lectionn\xe9(s)`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Suggestions`,
        "selectedAnnouncement": (args)=>`${args.optionText}, s\xe9lectionn\xe9`
    };

    var $dfeafa702e92e31f$exports = {};
    $dfeafa702e92e31f$exports = {
        "buttonLabel": `\u{5D4}\u{5E6}\u{5D2} \u{5D4}\u{5E6}\u{5E2}\u{5D5}\u{5EA}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`\u{5D0}\u{5E4}\u{5E9}\u{5E8}\u{5D5}\u{5EA} ${formatter.number(args.optionCount)}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{5D0}\u{5E4}\u{5E9}\u{5E8}\u{5D5}\u{5D9}\u{5D5}\u{5EA}`
        })} \u{5D1}\u{5DE}\u{5E6}\u{5D1} \u{5D6}\u{5DE}\u{5D9}\u{5DF}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{5E0}\u{5DB}\u{5E0}\u{5E1} \u{5DC}\u{5E7}\u{5D1}\u{5D5}\u{5E6}\u{5D4} ${args.groupTitle}, \u{5E2}\u{5DD} ${formatter.plural(args.groupCount, {
                    one: ()=>`\u{5D0}\u{5E4}\u{5E9}\u{5E8}\u{5D5}\u{5EA} ${formatter.number(args.groupCount)}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{5D0}\u{5E4}\u{5E9}\u{5E8}\u{5D5}\u{5D9}\u{5D5}\u{5EA}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{5E0}\u{5D1}\u{5D7}\u{5E8}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{5D4}\u{5E6}\u{5E2}\u{5D5}\u{5EA}`,
        "selectedAnnouncement": (args)=>`${args.optionText}, \u{5E0}\u{5D1}\u{5D7}\u{5E8}`
    };

    var $2d125e0b34676352$exports = {};
    $2d125e0b34676352$exports = {
        "buttonLabel": `Prika\u{17E}i prijedloge`,
        "countAnnouncement": (args, formatter)=>`Dostupno jo\u{161}: ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcija`,
            other: ()=>`${formatter.number(args.optionCount)} opcije/a`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Unesena skupina ${args.groupTitle}, s ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opcijom`,
                    other: ()=>`${formatter.number(args.groupCount)} opcije/a`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, odabranih`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Prijedlozi`,
        "selectedAnnouncement": (args)=>`${args.optionText}, odabrano`
    };

    var $ea029611d7634059$exports = {};
    $ea029611d7634059$exports = {
        "buttonLabel": `Javaslatok megjelen\xedt\xe9se`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} lehet\u{151}s\xe9g`,
            other: ()=>`${formatter.number(args.optionCount)} lehet\u{151}s\xe9g`
        })} \xe1ll rendelkez\xe9sre.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Bel\xe9pett a(z) ${args.groupTitle} csoportba, amely ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} lehet\u{151}s\xe9get`,
                    other: ()=>`${formatter.number(args.groupCount)} lehet\u{151}s\xe9get`
                })} tartalmaz. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, kijel\xf6lve`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Javaslatok`,
        "selectedAnnouncement": (args)=>`${args.optionText}, kijel\xf6lve`
    };

    var $77f075bb86ad7091$exports = {};
    $77f075bb86ad7091$exports = {
        "buttonLabel": `Mostra suggerimenti`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opzione disponibile`,
            other: ()=>`${formatter.number(args.optionCount)} opzioni disponibili`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Ingresso nel gruppo ${args.groupTitle}, con ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opzione`,
                    other: ()=>`${formatter.number(args.groupCount)} opzioni`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selezionato`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Suggerimenti`,
        "selectedAnnouncement": (args)=>`${args.optionText}, selezionato`
    };

    var $6e87462e84907983$exports = {};
    $6e87462e84907983$exports = {
        "buttonLabel": `\u{5019}\u{88DC}\u{3092}\u{8868}\u{793A}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{500B}\u{306E}\u{30AA}\u{30D7}\u{30B7}\u{30E7}\u{30F3}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{500B}\u{306E}\u{30AA}\u{30D7}\u{30B7}\u{30E7}\u{30F3}`
        })}\u{3092}\u{5229}\u{7528}\u{3067}\u{304D}\u{307E}\u{3059}\u{3002}`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{5165}\u{529B}\u{3055}\u{308C}\u{305F}\u{30B0}\u{30EB}\u{30FC}\u{30D7} ${args.groupTitle}\u{3001}${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{500B}\u{306E}\u{30AA}\u{30D7}\u{30B7}\u{30E7}\u{30F3}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{500B}\u{306E}\u{30AA}\u{30D7}\u{30B7}\u{30E7}\u{30F3}`
                })}\u{3092}\u{542B}\u{3080}\u{3002}`,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `\u{3001}\u{9078}\u{629E}\u{6E08}\u{307F}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{5019}\u{88DC}`,
        "selectedAnnouncement": (args)=>`${args.optionText}\u{3001}\u{9078}\u{629E}\u{6E08}\u{307F}`
    };

    var $9246f2c6edc6b232$exports = {};
    $9246f2c6edc6b232$exports = {
        "buttonLabel": `\u{C81C}\u{C548} \u{C0AC}\u{D56D} \u{D45C}\u{C2DC}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)}\u{AC1C} \u{C635}\u{C158}`,
            other: ()=>`${formatter.number(args.optionCount)}\u{AC1C} \u{C635}\u{C158}`
        })}\u{C744} \u{C0AC}\u{C6A9}\u{D560} \u{C218} \u{C788}\u{C2B5}\u{B2C8}\u{B2E4}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{C785}\u{B825}\u{D55C} \u{ADF8}\u{B8F9} ${args.groupTitle}, ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)}\u{AC1C} \u{C635}\u{C158}`,
                    other: ()=>`${formatter.number(args.groupCount)}\u{AC1C} \u{C635}\u{C158}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{C120}\u{D0DD}\u{B428}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{C81C}\u{C548}`,
        "selectedAnnouncement": (args)=>`${args.optionText}, \u{C120}\u{D0DD}\u{B428}`
    };

    var $e587accc6c0a434c$exports = {};
    $e587accc6c0a434c$exports = {
        "buttonLabel": `Rodyti pasi\u{16B}lymus`,
        "countAnnouncement": (args, formatter)=>`Yra ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} parinktis`,
            other: ()=>`${formatter.number(args.optionCount)} parinktys (-i\u{173})`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{12E}vesta grup\u{117} ${args.groupTitle}, su ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} parinktimi`,
                    other: ()=>`${formatter.number(args.groupCount)} parinktimis (-i\u{173})`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, pasirinkta`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Pasi\u{16B}lymai`,
        "selectedAnnouncement": (args)=>`${args.optionText}, pasirinkta`
    };

    var $03a1900e7400b5ab$exports = {};
    $03a1900e7400b5ab$exports = {
        "buttonLabel": `R\u{101}d\u{12B}t ieteikumus`,
        "countAnnouncement": (args, formatter)=>`Pieejamo opciju skaits: ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcija`,
            other: ()=>`${formatter.number(args.optionCount)} opcijas`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Ievad\u{12B}ta grupa ${args.groupTitle}, ar ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opciju`,
                    other: ()=>`${formatter.number(args.groupCount)} opcij\u{101}m`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, atlas\u{12B}ta`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Ieteikumi`,
        "selectedAnnouncement": (args)=>`${args.optionText}, atlas\u{12B}ta`
    };

    var $1387676441be6cf6$exports = {};
    $1387676441be6cf6$exports = {
        "buttonLabel": `Vis forslag`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} alternativ`,
            other: ()=>`${formatter.number(args.optionCount)} alternativer`
        })} finnes.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Angitt gruppe ${args.groupTitle}, med ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} alternativ`,
                    other: ()=>`${formatter.number(args.groupCount)} alternativer`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valgt`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Forslag`,
        "selectedAnnouncement": (args)=>`${args.optionText}, valgt`
    };

    var $17e82ebf0f8ab91f$exports = {};
    $17e82ebf0f8ab91f$exports = {
        "buttonLabel": `Suggesties weergeven`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} optie`,
            other: ()=>`${formatter.number(args.optionCount)} opties`
        })} beschikbaar.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Groep ${args.groupTitle} ingevoerd met ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} optie`,
                    other: ()=>`${formatter.number(args.groupCount)} opties`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, geselecteerd`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Suggesties`,
        "selectedAnnouncement": (args)=>`${args.optionText}, geselecteerd`
    };

    var $2f5377d3471630e5$exports = {};
    $2f5377d3471630e5$exports = {
        "buttonLabel": `Wy\u{15B}wietlaj sugestie`,
        "countAnnouncement": (args, formatter)=>`dost\u{119}pna/dost\u{119}pne(-nych) ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcja`,
            other: ()=>`${formatter.number(args.optionCount)} opcje(-i)`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Do\u{142}\u{105}czono do grupy ${args.groupTitle}, z ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opcj\u{105}`,
                    other: ()=>`${formatter.number(args.groupCount)} opcjami`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, wybrano`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Sugestie`,
        "selectedAnnouncement": (args)=>`${args.optionText}, wybrano`
    };

    var $dee9868b6fa95ffe$exports = {};
    $dee9868b6fa95ffe$exports = {
        "buttonLabel": `Mostrar sugest\xf5es`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} op\xe7\xe3o`,
            other: ()=>`${formatter.number(args.optionCount)} op\xe7\xf5es`
        })} dispon\xedvel.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Grupo inserido ${args.groupTitle}, com ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} op\xe7\xe3o`,
                    other: ()=>`${formatter.number(args.groupCount)} op\xe7\xf5es`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selecionado`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Sugest\xf5es`,
        "selectedAnnouncement": (args)=>`${args.optionText}, selecionado`
    };

    var $f8b2e63637cbb5a6$exports = {};
    $f8b2e63637cbb5a6$exports = {
        "buttonLabel": `Apresentar sugest\xf5es`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} op\xe7\xe3o`,
            other: ()=>`${formatter.number(args.optionCount)} op\xe7\xf5es`
        })} dispon\xedvel.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Grupo introduzido ${args.groupTitle}, com ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} op\xe7\xe3o`,
                    other: ()=>`${formatter.number(args.groupCount)} op\xe7\xf5es`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selecionado`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Sugest\xf5es`,
        "selectedAnnouncement": (args)=>`${args.optionText}, selecionado`
    };

    var $46a885db3b44ea95$exports = {};
    $46a885db3b44ea95$exports = {
        "buttonLabel": `Afi\u{219}are sugestii`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} op\u{21B}iune`,
            other: ()=>`${formatter.number(args.optionCount)} op\u{21B}iuni`
        })} disponibile.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Grup ${args.groupTitle} introdus, cu ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} op\u{21B}iune`,
                    other: ()=>`${formatter.number(args.groupCount)} op\u{21B}iuni`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selectat`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Sugestii`,
        "selectedAnnouncement": (args)=>`${args.optionText}, selectat`
    };

    var $50d8a8f0afa9dee5$exports = {};
    $50d8a8f0afa9dee5$exports = {
        "buttonLabel": `\u{41F}\u{43E}\u{43A}\u{430}\u{437}\u{430}\u{442}\u{44C} \u{43F}\u{440}\u{435}\u{434}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{44F}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{43E}\u{432}`
        })} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{43E}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{412}\u{432}\u{435}\u{434}\u{435}\u{43D}\u{43D}\u{430}\u{44F} \u{433}\u{440}\u{443}\u{43F}\u{43F}\u{430} ${args.groupTitle}, \u{441} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{43E}\u{43C}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{430}\u{43C}\u{438}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{43C}\u{438}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{41F}\u{440}\u{435}\u{434}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{44F}`,
        "selectedAnnouncement": (args)=>`${args.optionText}, \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E}`
    };

    var $2867ee6173245507$exports = {};
    $2867ee6173245507$exports = {
        "buttonLabel": `Zobrazi\u{165} n\xe1vrhy`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} mo\u{17E}nos\u{165}`,
            other: ()=>`${formatter.number(args.optionCount)} mo\u{17E}nosti/-\xed`
        })} k dispoz\xedcii.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Zadan\xe1 skupina ${args.groupTitle}, s ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} mo\u{17E}nos\u{165}ou`,
                    other: ()=>`${formatter.number(args.groupCount)} mo\u{17E}nos\u{165}ami`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, vybrat\xe9`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `N\xe1vrhy`,
        "selectedAnnouncement": (args)=>`${args.optionText}, vybrat\xe9`
    };

    var $0631b65beeb09b50$exports = {};
    $0631b65beeb09b50$exports = {
        "buttonLabel": `Prika\u{17E}i predloge`,
        "countAnnouncement": (args, formatter)=>`Na voljo je ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcija`,
            other: ()=>`${formatter.number(args.optionCount)} opcije`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Vnesena skupina ${args.groupTitle}, z ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opcija`,
                    other: ()=>`${formatter.number(args.groupCount)} opcije`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, izbrano`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Predlogi`,
        "selectedAnnouncement": (args)=>`${args.optionText}, izbrano`
    };

    var $65fc749265dcd686$exports = {};
    $65fc749265dcd686$exports = {
        "buttonLabel": `Prika\u{17E}i predloge`,
        "countAnnouncement": (args, formatter)=>`Dostupno jo\u{161}: ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcija`,
            other: ()=>`${formatter.number(args.optionCount)} opcije/a`
        })}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Unesena grupa ${args.groupTitle}, s ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opcijom`,
                    other: ()=>`${formatter.number(args.groupCount)} optione/a`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, izabranih`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `Predlozi`,
        "selectedAnnouncement": (args)=>`${args.optionText}, izabrano`
    };

    var $69ba655c7853c08e$exports = {};
    $69ba655c7853c08e$exports = {
        "buttonLabel": `Visa f\xf6rslag`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} alternativ`,
            other: ()=>`${formatter.number(args.optionCount)} alternativ`
        })} tillg\xe4ngliga.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Ingick i gruppen ${args.groupTitle} med ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} alternativ`,
                    other: ()=>`${formatter.number(args.groupCount)} alternativ`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valda`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `F\xf6rslag`,
        "selectedAnnouncement": (args)=>`${args.optionText}, valda`
    };

    var $a79794784d61577c$exports = {};
    $a79794784d61577c$exports = {
        "buttonLabel": `\xd6nerileri g\xf6ster`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} se\xe7enek`,
            other: ()=>`${formatter.number(args.optionCount)} se\xe7enekler`
        })} kullan\u{131}labilir.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Girilen grup ${args.groupTitle}, ile ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} se\xe7enek`,
                    other: ()=>`${formatter.number(args.groupCount)} se\xe7enekler`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, se\xe7ildi`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\xd6neriler`,
        "selectedAnnouncement": (args)=>`${args.optionText}, se\xe7ildi`
    };

    var $c2845791417ebaf4$exports = {};
    $c2845791417ebaf4$exports = {
        "buttonLabel": `\u{41F}\u{43E}\u{43A}\u{430}\u{437}\u{430}\u{442}\u{438} \u{43F}\u{440}\u{43E}\u{43F}\u{43E}\u{437}\u{438}\u{446}\u{456}\u{457}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{438}(-\u{456}\u{432})`
        })} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{43E}.`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{412}\u{432}\u{435}\u{434}\u{435}\u{43D}\u{430} \u{433}\u{440}\u{443}\u{43F}\u{430} ${args.groupTitle}, \u{437} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{438}(-\u{456}\u{432})`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{41F}\u{440}\u{43E}\u{43F}\u{43E}\u{437}\u{438}\u{446}\u{456}\u{457}`,
        "selectedAnnouncement": (args)=>`${args.optionText}, \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}`
    };

    var $29b642d0025cc7a4$exports = {};
    $29b642d0025cc7a4$exports = {
        "buttonLabel": `\u{663E}\u{793A}\u{5EFA}\u{8BAE}`,
        "countAnnouncement": (args, formatter)=>`\u{6709} ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{4E2A}\u{9009}\u{9879}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{4E2A}\u{9009}\u{9879}`
        })}\u{53EF}\u{7528}\u{3002}`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{8FDB}\u{5165}\u{4E86} ${args.groupTitle} \u{7EC4}\u{FF0C}\u{5176}\u{4E2D}\u{6709} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{4E2A}\u{9009}\u{9879}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{4E2A}\u{9009}\u{9879}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{5DF2}\u{9009}\u{62E9}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{5EFA}\u{8BAE}`,
        "selectedAnnouncement": (args)=>`${args.optionText}, \u{5DF2}\u{9009}\u{62E9}`
    };

    var $cd36dd33f9d46936$exports = {};
    $cd36dd33f9d46936$exports = {
        "buttonLabel": `\u{986F}\u{793A}\u{5EFA}\u{8B70}`,
        "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{9078}\u{9805}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{9078}\u{9805}`
        })} \u{53EF}\u{7528}\u{3002}`,
        "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{8F38}\u{5165}\u{7684}\u{7FA4}\u{7D44} ${args.groupTitle}, \u{6709} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{9078}\u{9805}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{9078}\u{9805}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{5DF2}\u{9078}\u{53D6}`,
            other: ``
        }, args.isSelected)}`,
        "listboxLabel": `\u{5EFA}\u{8B70}`,
        "selectedAnnouncement": (args)=>`${args.optionText}, \u{5DF2}\u{9078}\u{53D6}`
    };

    var $de5926a92e8ebc5b$exports = {};


































    $de5926a92e8ebc5b$exports = {
        "ar-AE": $02cb4c75c506befe$exports,
        "bg-BG": $568b8163f1e56faf$exports,
        "cs-CZ": $87581c0202d106b8$exports,
        "da-DK": $a10a0369f5433ed1$exports,
        "de-DE": $bfd288727d5cb166$exports,
        "el-GR": $ca177778f9a74e3c$exports,
        "en-US": $9b5aa79ef84beb6c$exports,
        "es-ES": $57968e8209de2557$exports,
        "et-EE": $60690790bf4c1c6a$exports,
        "fi-FI": $1101246e8c7d9357$exports,
        "fr-FR": $6404b5cb5b241730$exports,
        "he-IL": $dfeafa702e92e31f$exports,
        "hr-HR": $2d125e0b34676352$exports,
        "hu-HU": $ea029611d7634059$exports,
        "it-IT": $77f075bb86ad7091$exports,
        "ja-JP": $6e87462e84907983$exports,
        "ko-KR": $9246f2c6edc6b232$exports,
        "lt-LT": $e587accc6c0a434c$exports,
        "lv-LV": $03a1900e7400b5ab$exports,
        "nb-NO": $1387676441be6cf6$exports,
        "nl-NL": $17e82ebf0f8ab91f$exports,
        "pl-PL": $2f5377d3471630e5$exports,
        "pt-BR": $dee9868b6fa95ffe$exports,
        "pt-PT": $f8b2e63637cbb5a6$exports,
        "ro-RO": $46a885db3b44ea95$exports,
        "ru-RU": $50d8a8f0afa9dee5$exports,
        "sk-SK": $2867ee6173245507$exports,
        "sl-SI": $0631b65beeb09b50$exports,
        "sr-SP": $65fc749265dcd686$exports,
        "sv-SE": $69ba655c7853c08e$exports,
        "tr-TR": $a79794784d61577c$exports,
        "uk-UA": $c2845791417ebaf4$exports,
        "zh-CN": $29b642d0025cc7a4$exports,
        "zh-TW": $cd36dd33f9d46936$exports
    };

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $edcf132a9284368a$var$AXIS = {
        top: 'top',
        bottom: 'top',
        left: 'left',
        right: 'left'
    };
    const $edcf132a9284368a$var$FLIPPED_DIRECTION = {
        top: 'bottom',
        bottom: 'top',
        left: 'right',
        right: 'left'
    };
    const $edcf132a9284368a$var$CROSS_AXIS = {
        top: 'left',
        left: 'top'
    };
    const $edcf132a9284368a$var$AXIS_SIZE = {
        top: 'height',
        left: 'width'
    };
    const $edcf132a9284368a$var$TOTAL_SIZE = {
        width: 'totalWidth',
        height: 'totalHeight'
    };
    const $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE = {};
    // @ts-ignore
    let $edcf132a9284368a$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;
    function $edcf132a9284368a$var$getContainerDimensions(containerNode) {
        let width = 0, height = 0, totalWidth = 0, totalHeight = 0, top = 0, left = 0;
        let scroll = {};
        let isPinchZoomedIn = ($edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.scale) > 1;
        if (containerNode.tagName === 'BODY') {
            let documentElement = document.documentElement;
            totalWidth = documentElement.clientWidth;
            totalHeight = documentElement.clientHeight;
            var _visualViewport_width;
            width = (_visualViewport_width = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.width) !== null && _visualViewport_width !== void 0 ? _visualViewport_width : totalWidth;
            var _visualViewport_height;
            height = (_visualViewport_height = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.height) !== null && _visualViewport_height !== void 0 ? _visualViewport_height : totalHeight;
            scroll.top = documentElement.scrollTop || containerNode.scrollTop;
            scroll.left = documentElement.scrollLeft || containerNode.scrollLeft;
            // The goal of the below is to get a top/left value that represents the top/left of the visual viewport with
            // respect to the layout viewport origin. This combined with the scrollTop/scrollLeft will allow us to calculate
            // coordinates/values with respect to the visual viewport or with respect to the layout viewport.
            if ($edcf132a9284368a$var$visualViewport) {
                top = $edcf132a9284368a$var$visualViewport.offsetTop;
                left = $edcf132a9284368a$var$visualViewport.offsetLeft;
            }
        } else {
            ({ width: width, height: height, top: top, left: left } = $edcf132a9284368a$var$getOffset(containerNode));
            scroll.top = containerNode.scrollTop;
            scroll.left = containerNode.scrollLeft;
            totalWidth = width;
            totalHeight = height;
        }
        if (($c87311424ea30a05$export$78551043582a6a98)() && (containerNode.tagName === 'BODY' || containerNode.tagName === 'HTML') && isPinchZoomedIn) {
            // Safari will report a non-zero scrollTop/Left for the non-scrolling body/HTML element when pinch zoomed in unlike other browsers.
            // Set to zero for parity calculations so we get consistent positioning of overlays across all browsers.
            // Also switch to visualViewport.pageTop/pageLeft so that we still accomodate for scroll positioning for body/HTML elements that are actually scrollable
            // before pinch zoom happens
            scroll.top = 0;
            scroll.left = 0;
            top = $edcf132a9284368a$var$visualViewport.pageTop;
            left = $edcf132a9284368a$var$visualViewport.pageLeft;
        }
        return {
            width: width,
            height: height,
            totalWidth: totalWidth,
            totalHeight: totalHeight,
            scroll: scroll,
            top: top,
            left: left
        };
    }
    function $edcf132a9284368a$var$getScroll(node) {
        return {
            top: node.scrollTop,
            left: node.scrollLeft,
            width: node.scrollWidth,
            height: node.scrollHeight
        };
    }
    // Determines the amount of space required when moving the overlay to ensure it remains in the boundary
    function $edcf132a9284368a$var$getDelta(axis, offset, size, // The dimensions of the boundary element that the popover is
    // positioned within (most of the time this is the <body>).
    boundaryDimensions, // The dimensions of the containing block element that the popover is
    // positioned relative to (e.g. parent with position: relative).
    // Usually this is the same as the boundary element, but if the popover
    // is portaled somewhere other than the body and has an ancestor with
    // position: relative/absolute, it will be different.
    containerDimensions, padding, containerOffsetWithBoundary) {
        let containerScroll = containerDimensions.scroll[axis];
        // The height/width of the boundary. Matches the axis along which we are adjusting the overlay position
        let boundarySize = boundaryDimensions[$edcf132a9284368a$var$AXIS_SIZE[axis]];
        // Calculate the edges of the boundary (accomodating for the boundary padding) and the edges of the overlay.
        // Note that these values are with respect to the visual viewport (aka 0,0 is the top left of the viewport)
        let boundaryStartEdge = boundaryDimensions.scroll[$edcf132a9284368a$var$AXIS[axis]] + padding;
        let boundaryEndEdge = boundarySize + boundaryDimensions.scroll[$edcf132a9284368a$var$AXIS[axis]] - padding;
        let startEdgeOffset = offset - containerScroll + containerOffsetWithBoundary[axis] - boundaryDimensions[$edcf132a9284368a$var$AXIS[axis]];
        let endEdgeOffset = offset - containerScroll + size + containerOffsetWithBoundary[axis] - boundaryDimensions[$edcf132a9284368a$var$AXIS[axis]];
        // If any of the overlay edges falls outside of the boundary, shift the overlay the required amount to align one of the overlay's
        // edges with the closest boundary edge.
        if (startEdgeOffset < boundaryStartEdge) return boundaryStartEdge - startEdgeOffset;
        else if (endEdgeOffset > boundaryEndEdge) return Math.max(boundaryEndEdge - endEdgeOffset, boundaryStartEdge - startEdgeOffset);
        else return 0;
    }
    function $edcf132a9284368a$var$getMargins(node) {
        let style = window.getComputedStyle(node);
        return {
            top: parseInt(style.marginTop, 10) || 0,
            bottom: parseInt(style.marginBottom, 10) || 0,
            left: parseInt(style.marginLeft, 10) || 0,
            right: parseInt(style.marginRight, 10) || 0
        };
    }
    function $edcf132a9284368a$var$parsePlacement(input) {
        if ($edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input]) return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
        let [placement, crossPlacement] = input.split(' ');
        let axis = $edcf132a9284368a$var$AXIS[placement] || 'right';
        let crossAxis = $edcf132a9284368a$var$CROSS_AXIS[axis];
        if (!$edcf132a9284368a$var$AXIS[crossPlacement]) crossPlacement = 'center';
        let size = $edcf132a9284368a$var$AXIS_SIZE[axis];
        let crossSize = $edcf132a9284368a$var$AXIS_SIZE[crossAxis];
        $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input] = {
            placement: placement,
            crossPlacement: crossPlacement,
            axis: axis,
            crossAxis: crossAxis,
            size: size,
            crossSize: crossSize
        };
        return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
    }
    function $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset) {
        let { placement: placement, crossPlacement: crossPlacement, axis: axis, crossAxis: crossAxis, size: size, crossSize: crossSize } = placementInfo;
        let position = {};
        // button position
        position[crossAxis] = childOffset[crossAxis];
        if (crossPlacement === 'center') //  + (button size / 2) - (overlay size / 2)
        // at this point the overlay center should match the button center
        position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;
        else if (crossPlacement !== crossAxis) //  + (button size) - (overlay size)
        // at this point the overlay bottom should match the button bottom
        position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
         /* else {
        the overlay top should match the button top
      } */ 
        position[crossAxis] += crossOffset;
        // overlay top overlapping arrow with button bottom
        const minPosition = childOffset[crossAxis] - overlaySize[crossSize] + arrowSize + arrowBoundaryOffset;
        // overlay bottom overlapping arrow with button top
        const maxPosition = childOffset[crossAxis] + childOffset[crossSize] - arrowSize - arrowBoundaryOffset;
        position[crossAxis] = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(position[crossAxis], minPosition, maxPosition);
        // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.
        if (placement === axis) {
            // If the container is positioned (non-static), then we use the container's actual
            // height, as `bottom` will be relative to this height.  But if the container is static,
            // then it can only be the `document.body`, and `bottom` will be relative to _its_
            // container, which should be as large as boundaryDimensions.
            const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[$edcf132a9284368a$var$TOTAL_SIZE[size]];
            position[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
        } else position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
        return position;
    }
    function $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, isContainerPositioned, margins, padding, overlayHeight, heightGrowthDirection) {
        const containerHeight = isContainerPositioned ? containerOffsetWithBoundary.height : boundaryDimensions[$edcf132a9284368a$var$TOTAL_SIZE.height];
        // For cases where position is set via "bottom" instead of "top", we need to calculate the true overlay top with respect to the boundary. Reverse calculate this with the same method
        // used in computePosition.
        let overlayTop = position.top != null ? containerOffsetWithBoundary.top + position.top : containerOffsetWithBoundary.top + (containerHeight - position.bottom - overlayHeight);
        let maxHeight = heightGrowthDirection !== 'top' ? // We want the distance between the top of the overlay to the bottom of the boundary
        Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top // this is the bottom of the boundary
         - overlayTop // this is the top of the overlay
         - (margins.top + margins.bottom + padding // save additional space for margin and padding
        )) : Math.max(0, overlayTop + overlayHeight // this is the bottom of the overlay
         - (boundaryDimensions.top + boundaryDimensions.scroll.top // this is the top of the boundary
        ) - (margins.top + margins.bottom + padding // save additional space for margin and padding
        ));
        return Math.min(boundaryDimensions.height - padding * 2, maxHeight);
    }
    function $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
        let { placement: placement, axis: axis, size: size } = placementInfo;
        if (placement === axis) return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
        return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
    }
    function $edcf132a9284368a$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, userSetMaxHeight, arrowSize, arrowBoundaryOffset) {
        let placementInfo = $edcf132a9284368a$var$parsePlacement(placementInput);
        let { size: size, crossAxis: crossAxis, crossSize: crossSize, placement: placement, crossPlacement: crossPlacement } = placementInfo;
        let position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
        let normalizedOffset = offset;
        let space = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);
        // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip
        if (flip && scrollSize[size] > space) {
            let flippedPlacementInfo = $edcf132a9284368a$var$parsePlacement(`${$edcf132a9284368a$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
            let flippedPosition = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
            let flippedSpace = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);
            // If the available space for the flipped position is greater than the original available space, flip.
            if (flippedSpace > space) {
                placementInfo = flippedPlacementInfo;
                position = flippedPosition;
                normalizedOffset = offset;
            }
        }
        // Determine the direction the height of the overlay can grow so that we can choose how to calculate the max height
        let heightGrowthDirection = 'bottom';
        if (placementInfo.axis === 'top') {
            if (placementInfo.placement === 'top') heightGrowthDirection = 'top';
            else if (placementInfo.placement === 'bottom') heightGrowthDirection = 'bottom';
        } else if (placementInfo.crossAxis === 'top') {
            if (placementInfo.crossPlacement === 'top') heightGrowthDirection = 'bottom';
            else if (placementInfo.crossPlacement === 'bottom') heightGrowthDirection = 'top';
        }
        let delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, containerDimensions, padding, containerOffsetWithBoundary);
        position[crossAxis] += delta;
        let maxHeight = $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, isContainerPositioned, margins, padding, overlaySize.height, heightGrowthDirection);
        if (userSetMaxHeight && userSetMaxHeight < maxHeight) maxHeight = userSetMaxHeight;
        overlaySize.height = Math.min(overlaySize.height, maxHeight);
        position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
        delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, containerDimensions, padding, containerOffsetWithBoundary);
        position[crossAxis] += delta;
        let arrowPosition = {};
        // All values are transformed so that 0 is at the top/left of the overlay depending on the orientation
        // Prefer the arrow being in the center of the trigger/overlay anchor element
        let preferredArrowPosition = childOffset[crossAxis] + .5 * childOffset[crossSize] - position[crossAxis];
        // Min/Max position limits for the arrow with respect to the overlay
        const arrowMinPosition = arrowSize / 2 + arrowBoundaryOffset;
        const arrowMaxPosition = overlaySize[crossSize] - arrowSize / 2 - arrowBoundaryOffset;
        // Min/Max position limits for the arrow with respect to the trigger/overlay anchor element
        const arrowOverlappingChildMinEdge = childOffset[crossAxis] - position[crossAxis] + arrowSize / 2;
        const arrowOverlappingChildMaxEdge = childOffset[crossAxis] + childOffset[crossSize] - position[crossAxis] - arrowSize / 2;
        // Clamp the arrow positioning so that it always is within the bounds of the anchor and the overlay
        const arrowPositionOverlappingChild = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(preferredArrowPosition, arrowOverlappingChildMinEdge, arrowOverlappingChildMaxEdge);
        arrowPosition[crossAxis] = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(arrowPositionOverlappingChild, arrowMinPosition, arrowMaxPosition);
        return {
            position: position,
            maxHeight: maxHeight,
            arrowOffsetLeft: arrowPosition.left,
            arrowOffsetTop: arrowPosition.top,
            placement: placementInfo.placement
        };
    }
    function $edcf132a9284368a$export$b3ceb0cbf1056d98(opts) {
        let { placement: placement, targetNode: targetNode, overlayNode: overlayNode, scrollNode: scrollNode, padding: padding, shouldFlip: shouldFlip, boundaryElement: boundaryElement, offset: offset, crossOffset: crossOffset, maxHeight: maxHeight, arrowSize: arrowSize = 0, arrowBoundaryOffset: arrowBoundaryOffset = 0 } = opts;
        let container = overlayNode instanceof HTMLElement ? $edcf132a9284368a$var$getContainingBlock(overlayNode) : document.documentElement;
        let isViewportContainer = container === document.documentElement;
        const containerPositionStyle = window.getComputedStyle(container).position;
        let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== 'static';
        let childOffset = isViewportContainer ? $edcf132a9284368a$var$getOffset(targetNode) : $edcf132a9284368a$var$getPosition(targetNode, container);
        if (!isViewportContainer) {
            let { marginTop: marginTop, marginLeft: marginLeft } = window.getComputedStyle(targetNode);
            childOffset.top += parseInt(marginTop, 10) || 0;
            childOffset.left += parseInt(marginLeft, 10) || 0;
        }
        let overlaySize = $edcf132a9284368a$var$getOffset(overlayNode);
        let margins = $edcf132a9284368a$var$getMargins(overlayNode);
        overlaySize.width += margins.left + margins.right;
        overlaySize.height += margins.top + margins.bottom;
        let scrollSize = $edcf132a9284368a$var$getScroll(scrollNode);
        let boundaryDimensions = $edcf132a9284368a$var$getContainerDimensions(boundaryElement);
        let containerDimensions = $edcf132a9284368a$var$getContainerDimensions(container);
        // If the container is the HTML element wrapping the body element, the retrieved scrollTop/scrollLeft will be equal to the
        // body element's scroll. Set the container's scroll values to 0 since the overlay's edge position value in getDelta don't then need to be further offset
        // by the container scroll since they are essentially the same containing element and thus in the same coordinate system
        let containerOffsetWithBoundary = boundaryElement.tagName === 'BODY' ? $edcf132a9284368a$var$getOffset(container) : $edcf132a9284368a$var$getPosition(container, boundaryElement);
        if (container.tagName === 'HTML' && boundaryElement.tagName === 'BODY') {
            containerDimensions.scroll.top = 0;
            containerDimensions.scroll.left = 0;
        }
        return $edcf132a9284368a$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, maxHeight, arrowSize, arrowBoundaryOffset);
    }
    function $edcf132a9284368a$var$getOffset(node) {
        let { top: top, left: left, width: width, height: height } = node.getBoundingClientRect();
        let { scrollTop: scrollTop, scrollLeft: scrollLeft, clientTop: clientTop, clientLeft: clientLeft } = document.documentElement;
        return {
            top: top + scrollTop - clientTop,
            left: left + scrollLeft - clientLeft,
            width: width,
            height: height
        };
    }
    function $edcf132a9284368a$var$getPosition(node, parent) {
        let style = window.getComputedStyle(node);
        let offset;
        if (style.position === 'fixed') {
            let { top: top, left: left, width: width, height: height } = node.getBoundingClientRect();
            offset = {
                top: top,
                left: left,
                width: width,
                height: height
            };
        } else {
            offset = $edcf132a9284368a$var$getOffset(node);
            let parentOffset = $edcf132a9284368a$var$getOffset(parent);
            let parentStyle = window.getComputedStyle(parent);
            parentOffset.top += (parseInt(parentStyle.borderTopWidth, 10) || 0) - parent.scrollTop;
            parentOffset.left += (parseInt(parentStyle.borderLeftWidth, 10) || 0) - parent.scrollLeft;
            offset.top -= parentOffset.top;
            offset.left -= parentOffset.left;
        }
        offset.top -= parseInt(style.marginTop, 10) || 0;
        offset.left -= parseInt(style.marginLeft, 10) || 0;
        return offset;
    }
    // Returns the containing block of an element, which is the element that
    // this element will be positioned relative to.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block
    function $edcf132a9284368a$var$getContainingBlock(node) {
        // The offsetParent of an element in most cases equals the containing block.
        // https://w3c.github.io/csswg-drafts/cssom-view/#dom-htmlelement-offsetparent
        let offsetParent = node.offsetParent;
        // The offsetParent algorithm terminates at the document body,
        // even if the body is not a containing block. Double check that
        // and use the documentElement if so.
        if (offsetParent && offsetParent === document.body && window.getComputedStyle(offsetParent).position === 'static' && !$edcf132a9284368a$var$isContainingBlock(offsetParent)) offsetParent = document.documentElement;
        // TODO(later): handle table elements?
        // The offsetParent can be null if the element has position: fixed, or a few other cases.
        // We have to walk up the tree manually in this case because fixed positioned elements
        // are still positioned relative to their containing block, which is not always the viewport.
        if (offsetParent == null) {
            offsetParent = node.parentElement;
            while(offsetParent && !$edcf132a9284368a$var$isContainingBlock(offsetParent))offsetParent = offsetParent.parentElement;
        }
        // Fall back to the viewport.
        return offsetParent || document.documentElement;
    }
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
    function $edcf132a9284368a$var$isContainingBlock(node) {
        let style = window.getComputedStyle(node);
        return style.transform !== 'none' || /transform|perspective/.test(style.willChange) || style.filter !== 'none' || style.contain === 'paint' || // @ts-ignore
        'backdropFilter' in style && style.backdropFilter !== 'none' || // @ts-ignore
        'WebkitBackdropFilter' in style && style.WebkitBackdropFilter !== 'none';
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $dd149f63282afbbf$export$f6211563215e3b37 = new WeakMap();
    function $dd149f63282afbbf$export$18fc8428861184da(opts) {
        let { triggerRef: triggerRef, isOpen: isOpen, onClose: onClose } = opts;
        (0, wp.element.useEffect)(()=>{
            if (!isOpen || onClose === null) return;
            let onScroll = (e)=>{
                // Ignore if scrolling an scrollable region outside the trigger's tree.
                let target = e.target;
                // window is not a Node and doesn't have contain, but window contains everything
                if (!triggerRef.current || target instanceof Node && !target.contains(triggerRef.current)) return;
                let onCloseHandler = onClose || $dd149f63282afbbf$export$f6211563215e3b37.get(triggerRef.current);
                if (onCloseHandler) onCloseHandler();
            };
            window.addEventListener('scroll', onScroll, true);
            return ()=>{
                window.removeEventListener('scroll', onScroll, true);
            };
        }, [
            isOpen,
            onClose,
            triggerRef
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    // @ts-ignore
    let $2a41e45df1593e64$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;
    function $2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {
        let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let { arrowSize: arrowSize = 0, targetRef: targetRef, overlayRef: overlayRef, scrollRef: scrollRef = overlayRef, placement: placement = 'bottom', containerPadding: containerPadding = 12, shouldFlip: shouldFlip = true, boundaryElement: boundaryElement = typeof document !== 'undefined' ? document.body : null, offset: offset = 0, crossOffset: crossOffset = 0, shouldUpdatePosition: shouldUpdatePosition = true, isOpen: isOpen = true, onClose: onClose, maxHeight: maxHeight, arrowBoundaryOffset: arrowBoundaryOffset = 0 } = props;
        let [position, setPosition] = (0, wp.element.useState)({
            position: {},
            arrowOffsetLeft: undefined,
            arrowOffsetTop: undefined,
            maxHeight: undefined,
            placement: undefined
        });
        let deps = [
            shouldUpdatePosition,
            placement,
            overlayRef.current,
            targetRef.current,
            scrollRef.current,
            containerPadding,
            shouldFlip,
            boundaryElement,
            offset,
            crossOffset,
            isOpen,
            direction,
            maxHeight,
            arrowBoundaryOffset,
            arrowSize
        ];
        // Note, the position freezing breaks if body sizes itself dynamicly with the visual viewport but that might
        // just be a non-realistic use case
        // Upon opening a overlay, record the current visual viewport scale so we can freeze the overlay styles
        let lastScale = (0, wp.element.useRef)($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale);
        (0, wp.element.useEffect)(()=>{
            if (isOpen) lastScale.current = $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale;
        }, [
            isOpen
        ]);
        let updatePosition = (0, wp.element.useCallback)(()=>{
            if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) return;
            if (($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale) !== lastScale.current) return;
            // Always reset the overlay's previous max height if not defined by the user so that we can compensate for
            // RAC collections populating after a second render and properly set a correct max height + positioning when it populates.
            let overlay = overlayRef.current;
            if (!maxHeight && overlayRef.current) {
                var _window_visualViewport;
                overlay.style.top = '0px';
                overlay.style.bottom = '';
                var _window_visualViewport_height;
                overlay.style.maxHeight = ((_window_visualViewport_height = (_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.height) !== null && _window_visualViewport_height !== void 0 ? _window_visualViewport_height : window.innerHeight) + 'px';
            }
            let position = ($edcf132a9284368a$export$b3ceb0cbf1056d98)({
                placement: $2a41e45df1593e64$var$translateRTL(placement, direction),
                overlayNode: overlayRef.current,
                targetNode: targetRef.current,
                scrollNode: scrollRef.current,
                padding: containerPadding,
                shouldFlip: shouldFlip,
                boundaryElement: boundaryElement,
                offset: offset,
                crossOffset: crossOffset,
                maxHeight: maxHeight,
                arrowSize: arrowSize,
                arrowBoundaryOffset: arrowBoundaryOffset
            });
            // Modify overlay styles directly so positioning happens immediately without the need of a second render
            // This is so we don't have to delay autoFocus scrolling or delay applying preventScroll for popovers
            overlay.style.top = '';
            overlay.style.bottom = '';
            Object.keys(position.position).forEach((key)=>overlay.style[key] = position.position[key] + 'px');
            overlay.style.maxHeight = position.maxHeight != null ? position.maxHeight + 'px' : undefined;
            // Trigger a set state for a second render anyway for arrow positioning
            setPosition(position);
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, deps);
        // Update position when anything changes
        // eslint-disable-next-line react-hooks/exhaustive-deps
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updatePosition, deps);
        // Update position on window resize
        $2a41e45df1593e64$var$useResize(updatePosition);
        // Update position when the overlay changes size (might need to flip).
        ($9daab02d461809db$export$683480f191c0e3ea)({
            ref: overlayRef,
            onResize: updatePosition
        });
        // Reposition the overlay and do not close on scroll while the visual viewport is resizing.
        // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.
        let isResizing = (0, wp.element.useRef)(false);
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let timeout;
            let onResize = ()=>{
                isResizing.current = true;
                clearTimeout(timeout);
                timeout = setTimeout(()=>{
                    isResizing.current = false;
                }, 500);
                updatePosition();
            };
            // Only reposition the overlay if a scroll event happens immediately as a result of resize (aka the virtual keyboard has appears)
            // We don't want to reposition the overlay if the user has pinch zoomed in and is scrolling the viewport around.
            let onScroll = ()=>{
                if (isResizing.current) onResize();
            };
            $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('resize', onResize);
            $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('scroll', onScroll);
            return ()=>{
                $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('resize', onResize);
                $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('scroll', onScroll);
            };
        }, [
            updatePosition
        ]);
        let close = (0, wp.element.useCallback)(()=>{
            if (!isResizing.current) onClose();
        }, [
            onClose,
            isResizing
        ]);
        // When scrolling a parent scrollable region of the trigger (other than the body),
        // we hide the popover. Otherwise, its position would be incorrect.
        ($dd149f63282afbbf$export$18fc8428861184da)({
            triggerRef: targetRef,
            isOpen: isOpen,
            onClose: onClose && close
        });
        return {
            overlayProps: {
                style: {
                    position: 'absolute',
                    zIndex: 100000,
                    ...position.position,
                    maxHeight: position.maxHeight
                }
            },
            placement: position.placement,
            arrowProps: {
                'aria-hidden': 'true',
                role: 'presentation',
                style: {
                    left: position.arrowOffsetLeft,
                    top: position.arrowOffsetTop
                }
            },
            updatePosition: updatePosition
        };
    }
    function $2a41e45df1593e64$var$useResize(onResize) {
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            window.addEventListener('resize', onResize, false);
            return ()=>{
                window.removeEventListener('resize', onResize, false);
            };
        }, [
            onResize
        ]);
    }
    function $2a41e45df1593e64$var$translateRTL(position, direction) {
        if (direction === 'rtl') return position.replace('start', 'right').replace('end', 'left');
        return position.replace('start', 'left').replace('end', 'right');
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    const $a11501f3d1d39e6c$var$visibleOverlays = [];
    function $a11501f3d1d39e6c$export$ea8f71083e90600f(props, ref) {
        let { onClose: onClose, shouldCloseOnBlur: shouldCloseOnBlur, isOpen: isOpen, isDismissable: isDismissable = false, isKeyboardDismissDisabled: isKeyboardDismissDisabled = false, shouldCloseOnInteractOutside: shouldCloseOnInteractOutside } = props;
        // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.
        (0, wp.element.useEffect)(()=>{
            if (isOpen) $a11501f3d1d39e6c$var$visibleOverlays.push(ref);
            return ()=>{
                let index = $a11501f3d1d39e6c$var$visibleOverlays.indexOf(ref);
                if (index >= 0) $a11501f3d1d39e6c$var$visibleOverlays.splice(index, 1);
            };
        }, [
            isOpen,
            ref
        ]);
        // Only hide the overlay when it is the topmost visible overlay in the stack
        let onHide = ()=>{
            if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref && onClose) onClose();
        };
        let onInteractOutsideStart = (e)=>{
            if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
                if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
                    e.stopPropagation();
                    e.preventDefault();
                }
            }
        };
        let onInteractOutside = (e)=>{
            if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
                if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
                    e.stopPropagation();
                    e.preventDefault();
                }
                onHide();
            }
        };
        // Handle the escape key
        let onKeyDown = (e)=>{
            if (e.key === 'Escape' && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {
                e.stopPropagation();
                e.preventDefault();
                onHide();
            }
        };
        // Handle clicking outside the overlay to close it
        ($e0b6e0b68ec7f50f$export$872b660ac5a1ff98)({
            ref: ref,
            onInteractOutside: isDismissable && isOpen ? onInteractOutside : null,
            onInteractOutsideStart: onInteractOutsideStart
        });
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            isDisabled: !shouldCloseOnBlur,
            onBlurWithin: (e)=>{
                // Do not close if relatedTarget is null, which means focus is lost to the body.
                // That can happen when switching tabs, or due to a VoiceOver/Chrome bug with Control+Option+Arrow navigation.
                // Clicking on the body to close the overlay should already be handled by useInteractOutside.
                // https://github.com/adobe/react-spectrum/issues/4130
                // https://github.com/adobe/react-spectrum/issues/4922
                //
                // If focus is moving into a child focus scope (e.g. menu inside a dialog),
                // do not close the outer overlay. At this point, the active scope should
                // still be the outer overlay, since blur events run before focus.
                if (!e.relatedTarget || ($9bf71ea28793e738$export$1258395f99bf9cbf)(e.relatedTarget)) return;
                if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) onClose();
            }
        });
        let onPointerDownUnderlay = (e)=>{
            // fixes a firefox issue that starts text selection https://bugzilla.mozilla.org/show_bug.cgi?id=1675846
            if (e.target === e.currentTarget) e.preventDefault();
        };
        return {
            overlayProps: {
                onKeyDown: onKeyDown,
                ...focusWithinProps
            },
            underlayProps: {
                onPointerDown: onPointerDownUnderlay
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $628037886ba31236$export$f9d5c8beee7d008d(props, state, ref) {
        let { type: type } = props;
        let { isOpen: isOpen } = state;
        // Backward compatibility. Share state close function with useOverlayPosition so it can close on scroll
        // without forcing users to pass onClose.
        (0, wp.element.useEffect)(()=>{
            if (ref && ref.current) ($dd149f63282afbbf$export$f6211563215e3b37).set(ref.current, state.close);
        });
        // Aria 1.1 supports multiple values for aria-haspopup other than just menus.
        // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup
        // However, we only add it for menus for now because screen readers often
        // announce it as a menu even for other values.
        let ariaHasPopup = undefined;
        if (type === 'menu') ariaHasPopup = true;
        else if (type === 'listbox') ariaHasPopup = 'listbox';
        let overlayId = ($bdb11010cef70236$export$f680877a34711e37)();
        return {
            triggerProps: {
                'aria-haspopup': ariaHasPopup,
                'aria-expanded': isOpen,
                'aria-controls': isOpen ? overlayId : null,
                onPress: state.toggle
            },
            overlayProps: {
                id: overlayId
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    // @ts-ignore
    const $49c51c25361d4cd2$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;
    // HTML input types that do not cause the software keyboard to appear.
    const $49c51c25361d4cd2$var$nonTextInputTypes = new Set([
        'checkbox',
        'radio',
        'range',
        'color',
        'file',
        'image',
        'button',
        'submit',
        'reset'
    ]);
    // The number of active usePreventScroll calls. Used to determine whether to revert back to the original page style/scroll position
    let $49c51c25361d4cd2$var$preventScrollCount = 0;
    let $49c51c25361d4cd2$var$restore;
    function $49c51c25361d4cd2$export$ee0f7cc6afcd1c18(options = {}) {
        let { isDisabled: isDisabled } = options;
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            if (isDisabled) return;
            $49c51c25361d4cd2$var$preventScrollCount++;
            if ($49c51c25361d4cd2$var$preventScrollCount === 1) {
                if (($c87311424ea30a05$export$fedb369cb70207f1)()) $49c51c25361d4cd2$var$restore = $49c51c25361d4cd2$var$preventScrollMobileSafari();
                else $49c51c25361d4cd2$var$restore = $49c51c25361d4cd2$var$preventScrollStandard();
            }
            return ()=>{
                $49c51c25361d4cd2$var$preventScrollCount--;
                if ($49c51c25361d4cd2$var$preventScrollCount === 0) $49c51c25361d4cd2$var$restore();
            };
        }, [
            isDisabled
        ]);
    }
    // For most browsers, all we need to do is set `overflow: hidden` on the root element, and
    // add some padding to prevent the page from shifting when the scrollbar is hidden.
    function $49c51c25361d4cd2$var$preventScrollStandard() {
        return ($ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, 'overflow', 'hidden'));
    }
    // Mobile Safari is a whole different beast. Even with overflow: hidden,
    // it still scrolls the page in many situations:
    //
    // 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.
    // 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of
    //    it, so it becomes scrollable.
    // 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.
    //    This may cause even fixed position elements to scroll off the screen.
    // 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always
    //    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.
    //
    // In order to work around these cases, and prevent scrolling without jankiness, we do a few things:
    //
    // 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling
    //    on the window.
    // 2. Set `overscroll-behavior: contain` on nested scrollable regions so they do not scroll the page when at
    //    the top or bottom. Work around a bug where this does not work when the element does not actually overflow
    //    by preventing default in a `touchmove` event.
    // 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.
    // 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top
    //    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element
    //    into view ourselves, without scrolling the whole page.
    // 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the
    //    same visually, but makes the actual scroll position always zero. This is required to make all of the
    //    above work or Safari will still try to scroll the page when focusing an input.
    // 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting
    //    to navigate to an input with the next/previous buttons that's outside a modal.
    function $49c51c25361d4cd2$var$preventScrollMobileSafari() {
        let scrollable;
        let restoreScrollableStyles;
        let onTouchStart = (e)=>{
            // Store the nearest scrollable parent element from the element that the user touched.
            scrollable = ($62d8ded9296f3872$export$cfa2225e87938781)(e.target, true);
            if (scrollable === document.documentElement && scrollable === document.body) return;
            // Prevent scrolling up when at the top and scrolling down when at the bottom
            // of a nested scrollable area, otherwise mobile Safari will start scrolling
            // the window instead.
            if (scrollable instanceof HTMLElement && window.getComputedStyle(scrollable).overscrollBehavior === 'auto') restoreScrollableStyles = $49c51c25361d4cd2$var$setStyle(scrollable, 'overscrollBehavior', 'contain');
        };
        let onTouchMove = (e)=>{
            // Prevent scrolling the window.
            if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {
                e.preventDefault();
                return;
            }
            // overscroll-behavior should prevent scroll chaining, but currently does not
            // if the element doesn't actually overflow. https://bugs.webkit.org/show_bug.cgi?id=243452
            // This checks that both the width and height do not overflow, otherwise we might
            // block horizontal scrolling too. In that case, adding `touch-action: pan-x` to
            // the element will prevent vertical page scrolling. We can't add that automatically
            // because it must be set before the touchstart event.
            if (scrollable.scrollHeight === scrollable.clientHeight && scrollable.scrollWidth === scrollable.clientWidth) e.preventDefault();
        };
        let onTouchEnd = (e)=>{
            let target = e.target;
            // Apply this change if we're not already focused on the target element
            if ($49c51c25361d4cd2$var$willOpenKeyboard(target) && target !== document.activeElement) {
                e.preventDefault();
                setupStyles();
                // Apply a transform to trick Safari into thinking the input is at the top of the page
                // so it doesn't try to scroll it into view. When tapping on an input, this needs to
                // be done before the "focus" event, so we have to focus the element ourselves.
                target.style.transform = 'translateY(-2000px)';
                target.focus();
                requestAnimationFrame(()=>{
                    target.style.transform = '';
                });
            }
            if (restoreScrollableStyles) restoreScrollableStyles();
        };
        let onFocus = (e)=>{
            let target = e.target;
            if ($49c51c25361d4cd2$var$willOpenKeyboard(target)) {
                setupStyles();
                // Transform also needs to be applied in the focus event in cases where focus moves
                // other than tapping on an input directly, e.g. the next/previous buttons in the
                // software keyboard. In these cases, it seems applying the transform in the focus event
                // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️
                target.style.transform = 'translateY(-2000px)';
                requestAnimationFrame(()=>{
                    target.style.transform = '';
                    // This will have prevented the browser from scrolling the focused element into view,
                    // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.
                    if ($49c51c25361d4cd2$var$visualViewport) {
                        if ($49c51c25361d4cd2$var$visualViewport.height < window.innerHeight) // If the keyboard is already visible, do this after one additional frame
                        // to wait for the transform to be removed.
                        requestAnimationFrame(()=>{
                            $49c51c25361d4cd2$var$scrollIntoView(target);
                        });
                        else // Otherwise, wait for the visual viewport to resize before scrolling so we can
                        // measure the correct position to scroll to.
                        $49c51c25361d4cd2$var$visualViewport.addEventListener('resize', ()=>$49c51c25361d4cd2$var$scrollIntoView(target), {
                            once: true
                        });
                    }
                });
            }
        };
        let restoreStyles = null;
        let setupStyles = ()=>{
            if (restoreStyles) return;
            let onWindowScroll = ()=>{
                // Last resort. If the window scrolled, scroll it back to the top.
                // It should always be at the top because the body will have a negative margin (see below).
                window.scrollTo(0, 0);
            };
            // Record the original scroll position so we can restore it.
            // Then apply a negative margin to the body to offset it by the scroll position. This will
            // enable us to scroll the window to the top, which is required for the rest of this to work.
            let scrollX = window.pageXOffset;
            let scrollY = window.pageYOffset;
            restoreStyles = ($ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$addEvent(window, 'scroll', onWindowScroll), $49c51c25361d4cd2$var$setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, 'overflow', 'hidden'), $49c51c25361d4cd2$var$setStyle(document.body, 'marginTop', `-${scrollY}px`), ()=>{
                window.scrollTo(scrollX, scrollY);
            });
            // Scroll to the top. The negative margin on the body will make this appear the same.
            window.scrollTo(0, 0);
        };
        let removeEvents = ($ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$addEvent(document, 'touchstart', onTouchStart, {
            passive: false,
            capture: true
        }), $49c51c25361d4cd2$var$addEvent(document, 'touchmove', onTouchMove, {
            passive: false,
            capture: true
        }), $49c51c25361d4cd2$var$addEvent(document, 'touchend', onTouchEnd, {
            passive: false,
            capture: true
        }), $49c51c25361d4cd2$var$addEvent(document, 'focus', onFocus, true));
        return ()=>{
            // Restore styles and scroll the page back to where it was.
            restoreScrollableStyles === null || restoreScrollableStyles === void 0 ? void 0 : restoreScrollableStyles();
            restoreStyles === null || restoreStyles === void 0 ? void 0 : restoreStyles();
            removeEvents();
        };
    }
    // Sets a CSS property on an element, and returns a function to revert it to the previous value.
    function $49c51c25361d4cd2$var$setStyle(element, style, value) {
        let cur = element.style[style];
        element.style[style] = value;
        return ()=>{
            element.style[style] = cur;
        };
    }
    // Adds an event listener to an element, and returns a function to remove it.
    function $49c51c25361d4cd2$var$addEvent(target, event, handler, options) {
        target.addEventListener(event, handler, options);
        return ()=>{
            target.removeEventListener(event, handler, options);
        };
    }
    function $49c51c25361d4cd2$var$scrollIntoView(target) {
        let root = document.scrollingElement || document.documentElement;
        while(target && target !== root){
            // Find the parent scrollable element and adjust the scroll position if the target is not already in view.
            let scrollable = ($62d8ded9296f3872$export$cfa2225e87938781)(target);
            if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {
                let scrollableTop = scrollable.getBoundingClientRect().top;
                let targetTop = target.getBoundingClientRect().top;
                if (targetTop > scrollableTop + target.clientHeight) scrollable.scrollTop += targetTop - scrollableTop;
            }
            target = scrollable.parentElement;
        }
    }
    function $49c51c25361d4cd2$var$willOpenKeyboard(target) {
        return target instanceof HTMLInputElement && !$49c51c25361d4cd2$var$nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    const $f57aed4a881a3485$var$Context = /*#__PURE__*/ (wp.element).createContext(null);
    function $f57aed4a881a3485$export$178405afcd8c5eb(props) {
        let { children: children } = props;
        let parent = (0, wp.element.useContext)($f57aed4a881a3485$var$Context);
        let [modalCount, setModalCount] = (0, wp.element.useState)(0);
        let context = (0, wp.element.useMemo)(()=>({
                parent: parent,
                modalCount: modalCount,
                addModal () {
                    setModalCount((count)=>count + 1);
                    if (parent) parent.addModal();
                },
                removeModal () {
                    setModalCount((count)=>count - 1);
                    if (parent) parent.removeModal();
                }
            }), [
            parent,
            modalCount
        ]);
        return /*#__PURE__*/ (wp.element).createElement($f57aed4a881a3485$var$Context.Provider, {
            value: context
        }, children);
    }
    function $f57aed4a881a3485$export$d9aaed4c3ece1bc0() {
        let context = (0, wp.element.useContext)($f57aed4a881a3485$var$Context);
        return {
            modalProviderProps: {
                'aria-hidden': context && context.modalCount > 0 ? true : null
            }
        };
    }
    /**
     * Creates a root node that will be aria-hidden if there are other modals open.
     */ function $f57aed4a881a3485$var$OverlayContainerDOM(props) {
        let { modalProviderProps: modalProviderProps } = $f57aed4a881a3485$export$d9aaed4c3ece1bc0();
        return /*#__PURE__*/ (wp.element).createElement("div", {
            "data-overlay-container": true,
            ...props,
            ...modalProviderProps
        });
    }
    function $f57aed4a881a3485$export$bf688221f59024e5(props) {
        return /*#__PURE__*/ (wp.element).createElement($f57aed4a881a3485$export$178405afcd8c5eb, null, /*#__PURE__*/ (wp.element).createElement($f57aed4a881a3485$var$OverlayContainerDOM, props));
    }

    var $773d5888b972f1cf$exports = {};
    $773d5888b972f1cf$exports = {
        "dismiss": `\u{62A}\u{62C}\u{627}\u{647}\u{644}`
    };

    var $d11f19852b941573$exports = {};
    $d11f19852b941573$exports = {
        "dismiss": `\u{41E}\u{442}\u{445}\u{432}\u{44A}\u{440}\u{43B}\u{44F}\u{43D}\u{435}`
    };

    var $b983974c2ee1efb3$exports = {};
    $b983974c2ee1efb3$exports = {
        "dismiss": `Odstranit`
    };

    var $5809cc9d4e92de73$exports = {};
    $5809cc9d4e92de73$exports = {
        "dismiss": `Luk`
    };

    var $c68c2e4fc74398d1$exports = {};
    $c68c2e4fc74398d1$exports = {
        "dismiss": `Schlie\xdfen`
    };

    var $0898b4c153db2b77$exports = {};
    $0898b4c153db2b77$exports = {
        "dismiss": `\u{391}\u{3C0}\u{3CC}\u{3C1}\u{3C1}\u{3B9}\u{3C8}\u{3B7}`
    };

    var $6d74810286a15183$exports = {};
    $6d74810286a15183$exports = {
        "dismiss": `Dismiss`
    };

    var $309d73dc65f78055$exports = {};
    $309d73dc65f78055$exports = {
        "dismiss": `Descartar`
    };

    var $44ad94f7205cf593$exports = {};
    $44ad94f7205cf593$exports = {
        "dismiss": `L\xf5peta`
    };

    var $7c28f5687f0779a9$exports = {};
    $7c28f5687f0779a9$exports = {
        "dismiss": `Hylk\xe4\xe4`
    };

    var $e6d75df4b68bd73a$exports = {};
    $e6d75df4b68bd73a$exports = {
        "dismiss": `Rejeter`
    };

    var $87505c9dab186d0f$exports = {};
    $87505c9dab186d0f$exports = {
        "dismiss": `\u{5D4}\u{5EA}\u{5E2}\u{5DC}\u{5DD}`
    };

    var $553439c3ffb3e492$exports = {};
    $553439c3ffb3e492$exports = {
        "dismiss": `Odbaci`
    };

    var $74cf411061b983a2$exports = {};
    $74cf411061b983a2$exports = {
        "dismiss": `Elutas\xedt\xe1s`
    };

    var $e933f298574dc435$exports = {};
    $e933f298574dc435$exports = {
        "dismiss": `Ignora`
    };

    var $ac91fc9fe02f71f6$exports = {};
    $ac91fc9fe02f71f6$exports = {
        "dismiss": `\u{9589}\u{3058}\u{308B}`
    };

    var $52b96f86422025af$exports = {};
    $52b96f86422025af$exports = {
        "dismiss": `\u{BB34}\u{C2DC}`
    };

    var $c0d724c3e51dafa6$exports = {};
    $c0d724c3e51dafa6$exports = {
        "dismiss": `Atmesti`
    };

    var $c92899672a3fe72e$exports = {};
    $c92899672a3fe72e$exports = {
        "dismiss": `Ner\u{101}d\u{12B}t`
    };

    var $9f576b39d8e7a9d6$exports = {};
    $9f576b39d8e7a9d6$exports = {
        "dismiss": `Lukk`
    };

    var $9d025808aeec81a7$exports = {};
    $9d025808aeec81a7$exports = {
        "dismiss": `Negeren`
    };

    var $fce709921e2c0fa6$exports = {};
    $fce709921e2c0fa6$exports = {
        "dismiss": `Zignoruj`
    };

    var $2599cf0c4ab37f59$exports = {};
    $2599cf0c4ab37f59$exports = {
        "dismiss": `Descartar`
    };

    var $3c220ae7ef8a35fd$exports = {};
    $3c220ae7ef8a35fd$exports = {
        "dismiss": `Dispensar`
    };

    var $93562b5094072f54$exports = {};
    $93562b5094072f54$exports = {
        "dismiss": `Revocare`
    };

    var $cd9e2abd0d06c7b4$exports = {};
    $cd9e2abd0d06c7b4$exports = {
        "dismiss": `\u{41F}\u{440}\u{43E}\u{43F}\u{443}\u{441}\u{442}\u{438}\u{442}\u{44C}`
    };

    var $45375701f409adf1$exports = {};
    $45375701f409adf1$exports = {
        "dismiss": `Zru\u{161}i\u{165}`
    };

    var $27fab53a576de9dd$exports = {};
    $27fab53a576de9dd$exports = {
        "dismiss": `Opusti`
    };

    var $4438748d9952e7c7$exports = {};
    $4438748d9952e7c7$exports = {
        "dismiss": `Odbaci`
    };

    var $0936d7347ef4da4c$exports = {};
    $0936d7347ef4da4c$exports = {
        "dismiss": `Avvisa`
    };

    var $29700c92185d38f8$exports = {};
    $29700c92185d38f8$exports = {
        "dismiss": `Kapat`
    };

    var $662ccaf2be4c25b3$exports = {};
    $662ccaf2be4c25b3$exports = {
        "dismiss": `\u{421}\u{43A}\u{430}\u{441}\u{443}\u{432}\u{430}\u{442}\u{438}`
    };

    var $d80a27deda7cdb3c$exports = {};
    $d80a27deda7cdb3c$exports = {
        "dismiss": `\u{53D6}\u{6D88}`
    };

    var $2b2734393847c884$exports = {};
    $2b2734393847c884$exports = {
        "dismiss": `\u{95DC}\u{9589}`
    };

    var $a2f21f5f14f60553$exports = {};


































    $a2f21f5f14f60553$exports = {
        "ar-AE": $773d5888b972f1cf$exports,
        "bg-BG": $d11f19852b941573$exports,
        "cs-CZ": $b983974c2ee1efb3$exports,
        "da-DK": $5809cc9d4e92de73$exports,
        "de-DE": $c68c2e4fc74398d1$exports,
        "el-GR": $0898b4c153db2b77$exports,
        "en-US": $6d74810286a15183$exports,
        "es-ES": $309d73dc65f78055$exports,
        "et-EE": $44ad94f7205cf593$exports,
        "fi-FI": $7c28f5687f0779a9$exports,
        "fr-FR": $e6d75df4b68bd73a$exports,
        "he-IL": $87505c9dab186d0f$exports,
        "hr-HR": $553439c3ffb3e492$exports,
        "hu-HU": $74cf411061b983a2$exports,
        "it-IT": $e933f298574dc435$exports,
        "ja-JP": $ac91fc9fe02f71f6$exports,
        "ko-KR": $52b96f86422025af$exports,
        "lt-LT": $c0d724c3e51dafa6$exports,
        "lv-LV": $c92899672a3fe72e$exports,
        "nb-NO": $9f576b39d8e7a9d6$exports,
        "nl-NL": $9d025808aeec81a7$exports,
        "pl-PL": $fce709921e2c0fa6$exports,
        "pt-BR": $2599cf0c4ab37f59$exports,
        "pt-PT": $3c220ae7ef8a35fd$exports,
        "ro-RO": $93562b5094072f54$exports,
        "ru-RU": $cd9e2abd0d06c7b4$exports,
        "sk-SK": $45375701f409adf1$exports,
        "sl-SI": $27fab53a576de9dd$exports,
        "sr-SP": $4438748d9952e7c7$exports,
        "sv-SE": $0936d7347ef4da4c$exports,
        "tr-TR": $29700c92185d38f8$exports,
        "uk-UA": $662ccaf2be4c25b3$exports,
        "zh-CN": $d80a27deda7cdb3c$exports,
        "zh-TW": $2b2734393847c884$exports
    };

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    const $5c3e21d68f1c4674$var$styles = {
        border: 0,
        clip: 'rect(0 0 0 0)',
        clipPath: 'inset(50%)',
        height: '1px',
        margin: '-1px',
        overflow: 'hidden',
        padding: 0,
        position: 'absolute',
        width: '1px',
        whiteSpace: 'nowrap'
    };
    function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
        let { style: style, isFocusable: isFocusable } = props;
        let [isFocused, setFocused] = (0, wp.element.useState)(false);
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            isDisabled: !isFocusable,
            onFocusWithinChange: (val)=>setFocused(val)
        });
        // If focused, don't hide the element.
        let combinedStyles = (0, wp.element.useMemo)(()=>{
            if (isFocused) return style;
            else if (style) return {
                ...$5c3e21d68f1c4674$var$styles,
                ...style
            };
            else return $5c3e21d68f1c4674$var$styles;
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            isFocused
        ]);
        return {
            visuallyHiddenProps: {
                ...focusWithinProps,
                style: combinedStyles
            }
        };
    }
    function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        let { children: children, elementType: Element = 'div', isFocusable: isFocusable, style: style, ...otherProps } = props;
        let { visuallyHiddenProps: visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
        return /*#__PURE__*/ (wp.element).createElement(Element, ($3ef42575df84b30b$export$9d1611c77c2fe928)(otherProps, visuallyHiddenProps), children);
    }

    function $parcel$interopDefault$b(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $86ea4cb521eb2e37$export$2317d149ed6f78c4(props) {
        let { onDismiss: onDismiss, ...otherProps } = props;
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$b($a2f21f5f14f60553$exports))), '@react-aria/overlays');
        let labels = ($313b98861ee5dd6c$export$d6875122194c7b44)(otherProps, stringFormatter.format('dismiss'));
        let onClick = ()=>{
            if (onDismiss) onDismiss();
        };
        return /*#__PURE__*/ (wp.element).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), null, /*#__PURE__*/ (wp.element).createElement("button", {
            ...labels,
            tabIndex: -1,
            onClick: onClick,
            style: {
                width: 1,
                height: 1
            }
        }));
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // Keeps a ref count of all hidden elements. Added to when hiding an element, and
    // subtracted from when showing it again. When it reaches zero, aria-hidden is removed.
    let $5e3802645cc19319$var$refCountMap = new WeakMap();
    let $5e3802645cc19319$var$observerStack = [];
    function $5e3802645cc19319$export$1c3ebcada18427bf(targets, root = document.body) {
        let visibleNodes = new Set(targets);
        let hiddenNodes = new Set();
        let walk = (root)=>{
            // Keep live announcer and top layer elements (e.g. toasts) visible.
            for (let element of root.querySelectorAll('[data-live-announcer], [data-react-aria-top-layer]'))visibleNodes.add(element);
            let acceptNode = (node)=>{
                // Skip this node and its children if it is one of the target nodes, or a live announcer.
                // Also skip children of already hidden nodes, as aria-hidden is recursive. An exception is
                // made for elements with role="row" since VoiceOver on iOS has issues hiding elements with role="row".
                // For that case we want to hide the cells inside as well (https://bugs.webkit.org/show_bug.cgi?id=222623).
                if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute('role') !== 'row') return NodeFilter.FILTER_REJECT;
                // Skip this node but continue to children if one of the targets is inside the node.
                for (let target of visibleNodes){
                    if (node.contains(target)) return NodeFilter.FILTER_SKIP;
                }
                return NodeFilter.FILTER_ACCEPT;
            };
            let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
                acceptNode: acceptNode
            });
            // TreeWalker does not include the root.
            let acceptRoot = acceptNode(root);
            if (acceptRoot === NodeFilter.FILTER_ACCEPT) hide(root);
            if (acceptRoot !== NodeFilter.FILTER_REJECT) {
                let node = walker.nextNode();
                while(node != null){
                    hide(node);
                    node = walker.nextNode();
                }
            }
        };
        let hide = (node)=>{
            var _refCountMap_get;
            let refCount = (_refCountMap_get = $5e3802645cc19319$var$refCountMap.get(node)) !== null && _refCountMap_get !== void 0 ? _refCountMap_get : 0;
            // If already aria-hidden, and the ref count is zero, then this element
            // was already hidden and there's nothing for us to do.
            if (node.getAttribute('aria-hidden') === 'true' && refCount === 0) return;
            if (refCount === 0) node.setAttribute('aria-hidden', 'true');
            hiddenNodes.add(node);
            $5e3802645cc19319$var$refCountMap.set(node, refCount + 1);
        };
        // If there is already a MutationObserver listening from a previous call,
        // disconnect it so the new on takes over.
        if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].disconnect();
        walk(root);
        let observer = new MutationObserver((changes)=>{
            for (let change of changes){
                if (change.type !== 'childList' || change.addedNodes.length === 0) continue;
                // If the parent element of the added nodes is not within one of the targets,
                // and not already inside a hidden node, hide all of the new children.
                if (![
                    ...visibleNodes,
                    ...hiddenNodes
                ].some((node)=>node.contains(change.target))) {
                    for (let node of change.removedNodes)if (node instanceof Element) {
                        visibleNodes.delete(node);
                        hiddenNodes.delete(node);
                    }
                    for (let node of change.addedNodes){
                        if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === 'true' || node.dataset.reactAriaTopLayer === 'true')) visibleNodes.add(node);
                        else if (node instanceof Element) walk(node);
                    }
                }
            }
        });
        observer.observe(root, {
            childList: true,
            subtree: true
        });
        let observerWrapper = {
            observe () {
                observer.observe(root, {
                    childList: true,
                    subtree: true
                });
            },
            disconnect () {
                observer.disconnect();
            }
        };
        $5e3802645cc19319$var$observerStack.push(observerWrapper);
        return ()=>{
            observer.disconnect();
            for (let node of hiddenNodes){
                let count = $5e3802645cc19319$var$refCountMap.get(node);
                if (count === 1) {
                    node.removeAttribute('aria-hidden');
                    $5e3802645cc19319$var$refCountMap.delete(node);
                } else $5e3802645cc19319$var$refCountMap.set(node, count - 1);
            }
            // Remove this observer from the stack, and start the previous one.
            if (observerWrapper === $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1]) {
                $5e3802645cc19319$var$observerStack.pop();
                if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].observe();
            } else $5e3802645cc19319$var$observerStack.splice($5e3802645cc19319$var$observerStack.indexOf(observerWrapper), 1);
        };
    }

    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $f2f8a6077418541e$export$542a6fd13ac93354(props, state) {
        let { triggerRef: triggerRef, popoverRef: popoverRef, isNonModal: isNonModal, isKeyboardDismissDisabled: isKeyboardDismissDisabled, shouldCloseOnInteractOutside: shouldCloseOnInteractOutside, ...otherProps } = props;
        let { overlayProps: overlayProps, underlayProps: underlayProps } = ($a11501f3d1d39e6c$export$ea8f71083e90600f)({
            isOpen: state.isOpen,
            onClose: state.close,
            shouldCloseOnBlur: true,
            isDismissable: !isNonModal,
            isKeyboardDismissDisabled: isKeyboardDismissDisabled,
            shouldCloseOnInteractOutside: shouldCloseOnInteractOutside
        }, popoverRef);
        let { overlayProps: positionProps, arrowProps: arrowProps, placement: placement } = ($2a41e45df1593e64$export$d39e1813b3bdd0e1)({
            ...otherProps,
            targetRef: triggerRef,
            overlayRef: popoverRef,
            isOpen: state.isOpen,
            onClose: isNonModal ? state.close : null
        });
        ($49c51c25361d4cd2$export$ee0f7cc6afcd1c18)({
            isDisabled: isNonModal || !state.isOpen
        });
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            if (state.isOpen && !isNonModal && popoverRef.current) return ($5e3802645cc19319$export$1c3ebcada18427bf)([
                popoverRef.current
            ]);
        }, [
            isNonModal,
            state.isOpen,
            popoverRef
        ]);
        return {
            popoverProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(overlayProps, positionProps),
            arrowProps: arrowProps,
            underlayProps: underlayProps,
            placement: placement
        };
    }

    /*
     * Copyright 2024 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $96b38030c423d352$export$60d741e20e0aa309 = /*#__PURE__*/ (0, wp.element.createContext)({});
    function $96b38030c423d352$export$574e9b0fb070c3b0() {
        var _useContext;
        return (_useContext = (0, wp.element.useContext)($96b38030c423d352$export$60d741e20e0aa309)) !== null && _useContext !== void 0 ? _useContext : {};
    }

    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 






    const $337b884510726a0d$export$a2200b96afd16271 = /*#__PURE__*/ (wp.element).createContext(null);
    function $337b884510726a0d$export$c6fdb837b070b4ff(props) {
        let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
        let { portalContainer: portalContainer = isSSR ? null : document.body, isExiting: isExiting } = props;
        let [contain, setContain] = (0, wp.element.useState)(false);
        let contextValue = (0, wp.element.useMemo)(()=>({
                contain: contain,
                setContain: setContain
            }), [
            contain,
            setContain
        ]);
        let { getContainer: getContainer } = ($96b38030c423d352$export$574e9b0fb070c3b0)();
        if (!props.portalContainer && getContainer) portalContainer = getContainer();
        if (!portalContainer) return null;
        let contents = props.children;
        if (!props.disableFocusManagement) contents = /*#__PURE__*/ (wp.element).createElement(($9bf71ea28793e738$export$20e40289641fbbb6), {
            restoreFocus: true,
            contain: contain && !isExiting
        }, contents);
        contents = /*#__PURE__*/ (wp.element).createElement($337b884510726a0d$export$a2200b96afd16271.Provider, {
            value: contextValue
        }, /*#__PURE__*/ (wp.element).createElement(($f1ab8c75478c6f73$export$cf75428e0b9ed1ea), null, contents));
        return /*#__PURE__*/ (wp.element).createPortal(contents, portalContainer);
    }
    function $337b884510726a0d$export$14c98a7594375490() {
        let ctx = (0, wp.element.useContext)($337b884510726a0d$export$a2200b96afd16271);
        let setContain = ctx === null || ctx === void 0 ? void 0 : ctx.setContain;
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            setContain === null || setContain === void 0 ? void 0 : setContain(true);
        }, [
            setContain
        ]);
    }

    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $8ac8429251c45e4b$export$dbc0f175b25fb0fb(props, state, ref) {
        let { overlayProps: overlayProps, underlayProps: underlayProps } = ($a11501f3d1d39e6c$export$ea8f71083e90600f)({
            ...props,
            isOpen: state.isOpen,
            onClose: state.close
        }, ref);
        ($49c51c25361d4cd2$export$ee0f7cc6afcd1c18)({
            isDisabled: !state.isOpen
        });
        ($337b884510726a0d$export$14c98a7594375490)();
        (0, wp.element.useEffect)(()=>{
            if (state.isOpen) return ($5e3802645cc19319$export$1c3ebcada18427bf)([
                ref.current
            ]);
        }, [
            state.isOpen,
            ref
        ]);
        return {
            modalProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(overlayProps),
            underlayProps: underlayProps
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ const $b1f0cad8af73213b$export$3585ede4d035bf14 = new WeakMap();
    function $b1f0cad8af73213b$var$normalizeKey(key) {
        if (typeof key === 'string') return key.replace(/\s*/g, '');
        return '' + key;
    }
    function $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {
        let data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);
        if (!data) throw new Error('Unknown list');
        return `${data.id}-option-${$b1f0cad8af73213b$var$normalizeKey(itemKey)}`;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $feb5ffebff200149$export$d3e3bd3e26688c04(e) {
        // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.
        // On Windows and Ubuntu, Alt + Space has a system wide meaning.
        return ($c87311424ea30a05$export$e1865c3bedcd822b)() ? e.altKey : e.ctrlKey;
    }
    function $feb5ffebff200149$export$16792effe837dba3(e) {
        if (($c87311424ea30a05$export$9ac100e40613ea10)()) return e.metaKey;
        return e.ctrlKey;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    /**
     * Controls how long to wait before clearing the typeahead buffer.
     */ const $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second
    function $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {
        let { keyboardDelegate: keyboardDelegate, selectionManager: selectionManager, onTypeSelect: onTypeSelect } = options;
        let state = (0, wp.element.useRef)({
            search: '',
            timeout: null
        }).current;
        let onKeyDown = (e)=>{
            let character = $fb3050f43d946246$var$getStringForKey(e.key);
            if (!character || e.ctrlKey || e.metaKey || !e.currentTarget.contains(e.target)) return;
            // Do not propagate the Spacebar event if it's meant to be part of the search.
            // When we time out, the search term becomes empty, hence the check on length.
            // Trimming is to account for the case of pressing the Spacebar more than once,
            // which should cycle through the selection/deselection of the focused item.
            if (character === ' ' && state.search.trim().length > 0) {
                e.preventDefault();
                if (!('continuePropagation' in e)) e.stopPropagation();
            }
            state.search += character;
            // Use the delegate to find a key to focus.
            // Prioritize items after the currently focused item, falling back to searching the whole list.
            let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);
            // If no key found, search from the top.
            if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);
            if (key != null) {
                selectionManager.setFocusedKey(key);
                if (onTypeSelect) onTypeSelect(key);
            }
            clearTimeout(state.timeout);
            state.timeout = setTimeout(()=>{
                state.search = '';
            }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);
        };
        return {
            typeSelectProps: {
                // Using a capturing listener to catch the keydown event before
                // other hooks in order to handle the Spacebar event.
                onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null
            }
        };
    }
    function $fb3050f43d946246$var$getStringForKey(key) {
        // If the key is of length 1, it is an ASCII value.
        // Otherwise, if there are no ASCII characters in the key name,
        // it is a Unicode character.
        // See https://www.w3.org/TR/uievents-key/
        if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;
        return '';
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 







    function $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {
        let { selectionManager: manager, keyboardDelegate: delegate, ref: ref, autoFocus: autoFocus = false, shouldFocusWrap: shouldFocusWrap = false, disallowEmptySelection: disallowEmptySelection = false, disallowSelectAll: disallowSelectAll = false, selectOnFocus: selectOnFocus = manager.selectionBehavior === 'replace', disallowTypeAhead: disallowTypeAhead = false, shouldUseVirtualFocus: shouldUseVirtualFocus, allowsTabNavigation: allowsTabNavigation = false, isVirtualized: isVirtualized, scrollRef: // If no scrollRef is provided, assume the collection ref is the scrollable region
        scrollRef = ref, linkBehavior: linkBehavior = 'action' } = options;
        let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let router = ($ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
        let onKeyDown = (e)=>{
            // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes
            if (e.altKey && e.key === 'Tab') e.preventDefault();
            // Keyboard events bubble through portals. Don't handle keyboard events
            // for elements outside the collection (e.g. menus).
            if (!ref.current.contains(e.target)) return;
            const navigateToKey = (key, childFocus)=>{
                if (key != null) {
                    if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !($feb5ffebff200149$export$d3e3bd3e26688c04)(e)) {
                        // Set focused key and re-render synchronously to bring item into view if needed.
                        (0, wp.element.flushSync)(()=>{
                            manager.setFocusedKey(key, childFocus);
                        });
                        let item = scrollRef.current.querySelector(`[data-key="${CSS.escape(key.toString())}"]`);
                        let itemProps = manager.getItemProps(key);
                        router.open(item, e, itemProps.href, itemProps.routerOptions);
                        return;
                    }
                    manager.setFocusedKey(key, childFocus);
                    if (manager.isLink(key) && linkBehavior === 'override') return;
                    if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);
                    else if (selectOnFocus && !($feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);
                }
            };
            switch(e.key){
                case 'ArrowDown':
                    if (delegate.getKeyBelow) {
                        var _delegate_getFirstKey, _delegate_getFirstKey1;
                        e.preventDefault();
                        let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);
                        if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);
                        navigateToKey(nextKey);
                    }
                    break;
                case 'ArrowUp':
                    if (delegate.getKeyAbove) {
                        var _delegate_getLastKey, _delegate_getLastKey1;
                        e.preventDefault();
                        let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);
                        if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);
                        navigateToKey(nextKey);
                    }
                    break;
                case 'ArrowLeft':
                    if (delegate.getKeyLeftOf) {
                        var _delegate_getFirstKey2, _delegate_getLastKey2;
                        e.preventDefault();
                        let nextKey = delegate.getKeyLeftOf(manager.focusedKey);
                        if (nextKey == null && shouldFocusWrap) nextKey = direction === 'rtl' ? (_delegate_getFirstKey2 = delegate.getFirstKey) === null || _delegate_getFirstKey2 === void 0 ? void 0 : _delegate_getFirstKey2.call(delegate, manager.focusedKey) : (_delegate_getLastKey2 = delegate.getLastKey) === null || _delegate_getLastKey2 === void 0 ? void 0 : _delegate_getLastKey2.call(delegate, manager.focusedKey);
                        navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');
                    }
                    break;
                case 'ArrowRight':
                    if (delegate.getKeyRightOf) {
                        var _delegate_getLastKey3, _delegate_getFirstKey3;
                        e.preventDefault();
                        let nextKey = delegate.getKeyRightOf(manager.focusedKey);
                        if (nextKey == null && shouldFocusWrap) nextKey = direction === 'rtl' ? (_delegate_getLastKey3 = delegate.getLastKey) === null || _delegate_getLastKey3 === void 0 ? void 0 : _delegate_getLastKey3.call(delegate, manager.focusedKey) : (_delegate_getFirstKey3 = delegate.getFirstKey) === null || _delegate_getFirstKey3 === void 0 ? void 0 : _delegate_getFirstKey3.call(delegate, manager.focusedKey);
                        navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');
                    }
                    break;
                case 'Home':
                    if (delegate.getFirstKey) {
                        e.preventDefault();
                        let firstKey = delegate.getFirstKey(manager.focusedKey, ($feb5ffebff200149$export$16792effe837dba3)(e));
                        manager.setFocusedKey(firstKey);
                        if (($feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);
                        else if (selectOnFocus) manager.replaceSelection(firstKey);
                    }
                    break;
                case 'End':
                    if (delegate.getLastKey) {
                        e.preventDefault();
                        let lastKey = delegate.getLastKey(manager.focusedKey, ($feb5ffebff200149$export$16792effe837dba3)(e));
                        manager.setFocusedKey(lastKey);
                        if (($feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);
                        else if (selectOnFocus) manager.replaceSelection(lastKey);
                    }
                    break;
                case 'PageDown':
                    if (delegate.getKeyPageBelow) {
                        e.preventDefault();
                        let nextKey = delegate.getKeyPageBelow(manager.focusedKey);
                        navigateToKey(nextKey);
                    }
                    break;
                case 'PageUp':
                    if (delegate.getKeyPageAbove) {
                        e.preventDefault();
                        let nextKey = delegate.getKeyPageAbove(manager.focusedKey);
                        navigateToKey(nextKey);
                    }
                    break;
                case 'a':
                    if (($feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {
                        e.preventDefault();
                        manager.selectAll();
                    }
                    break;
                case 'Escape':
                    if (!disallowEmptySelection && manager.selectedKeys.size !== 0) {
                        e.stopPropagation();
                        e.preventDefault();
                        manager.clearSelection();
                    }
                    break;
                case 'Tab':
                    if (!allowsTabNavigation) {
                        // There may be elements that are "tabbable" inside a collection (e.g. in a grid cell).
                        // However, collections should be treated as a single tab stop, with arrow key navigation internally.
                        // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.
                        // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element
                        // in the collection, so that the browser default behavior will apply starting from that element
                        // rather than the currently focused one.
                        if (e.shiftKey) ref.current.focus();
                        else {
                            let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
                                tabbable: true
                            });
                            let next;
                            let last;
                            do {
                                last = walker.lastChild();
                                if (last) next = last;
                            }while (last);
                            if (next && !next.contains(document.activeElement)) ($7215afc6de606d6b$export$de79e2c695e052f3)(next);
                        }
                        break;
                    }
            }
        };
        // Store the scroll position so we can restore it later.
        let scrollPos = (0, wp.element.useRef)({
            top: 0,
            left: 0
        });
        ($e9faafb641e167db$export$90fc3a17d93f704c)(scrollRef, 'scroll', isVirtualized ? null : ()=>{
            scrollPos.current = {
                top: scrollRef.current.scrollTop,
                left: scrollRef.current.scrollLeft
            };
        });
        let onFocus = (e)=>{
            if (manager.isFocused) {
                // If a focus event bubbled through a portal, reset focus state.
                if (!e.currentTarget.contains(e.target)) manager.setFocused(false);
                return;
            }
            // Focus events can bubble through portals. Ignore these events.
            if (!e.currentTarget.contains(e.target)) return;
            manager.setFocused(true);
            if (manager.focusedKey == null) {
                let navigateToFirstKey = (key)=>{
                    if (key != null) {
                        manager.setFocusedKey(key);
                        if (selectOnFocus) manager.replaceSelection(key);
                    }
                };
                // If the user hasn't yet interacted with the collection, there will be no focusedKey set.
                // Attempt to detect whether the user is tabbing forward or backward into the collection
                // and either focus the first or last item accordingly.
                let relatedTarget = e.relatedTarget;
                var _manager_lastSelectedKey, _manager_firstSelectedKey;
                if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());
                else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());
            } else if (!isVirtualized) {
                // Restore the scroll position to what it was before.
                scrollRef.current.scrollTop = scrollPos.current.top;
                scrollRef.current.scrollLeft = scrollPos.current.left;
            }
            if (!isVirtualized && manager.focusedKey != null) {
                // Refocus and scroll the focused item into view if it exists within the scrollable region.
                let element = scrollRef.current.querySelector(`[data-key="${CSS.escape(manager.focusedKey.toString())}"]`);
                if (element) {
                    // This prevents a flash of focus on the first/last element in the collection, or the collection itself.
                    if (!element.contains(document.activeElement)) ($7215afc6de606d6b$export$de79e2c695e052f3)(element);
                    let modality = ($507fabe10e71c6fb$export$630ff653c5ada6a9)();
                    if (modality === 'keyboard') ($2f04cbc44ee30ce0$export$c826860796309d1b)(element, {
                        containingElement: ref.current
                    });
                }
            }
        };
        let onBlur = (e)=>{
            // Don't set blurred and then focused again if moving focus within the collection.
            if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);
        };
        const autoFocusRef = (0, wp.element.useRef)(autoFocus);
        (0, wp.element.useEffect)(()=>{
            if (autoFocusRef.current) {
                let focusedKey = null;
                // Check focus strategy to determine which item to focus
                if (autoFocus === 'first') focusedKey = delegate.getFirstKey();
                if (autoFocus === 'last') focusedKey = delegate.getLastKey();
                // If there are any selected keys, make the first one the new focus target
                let selectedKeys = manager.selectedKeys;
                if (selectedKeys.size) {
                    for (let key of selectedKeys)if (manager.canSelectItem(key)) {
                        focusedKey = key;
                        break;
                    }
                }
                manager.setFocused(true);
                manager.setFocusedKey(focusedKey);
                // If no default focus key is selected, focus the collection itself.
                if (focusedKey == null && !shouldUseVirtualFocus) ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
            }
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        // If not virtualized, scroll the focused element into view when the focusedKey changes.
        // When virtualized, Virtualizer handles this internally.
        let lastFocusedKey = (0, wp.element.useRef)(manager.focusedKey);
        (0, wp.element.useEffect)(()=>{
            let modality = ($507fabe10e71c6fb$export$630ff653c5ada6a9)();
            if (manager.isFocused && manager.focusedKey != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {
                let element = scrollRef.current.querySelector(`[data-key="${CSS.escape(manager.focusedKey.toString())}"]`);
                if (element && (modality === 'keyboard' || autoFocusRef.current)) {
                    if (!isVirtualized) ($2f04cbc44ee30ce0$export$53a0910f038337bd)(scrollRef.current, element);
                    // Avoid scroll in iOS VO, since it may cause overlay to close (i.e. RAC submenu)
                    if (modality !== 'virtual') ($2f04cbc44ee30ce0$export$c826860796309d1b)(element, {
                        containingElement: ref.current
                    });
                }
            }
            // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.
            if (manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null) ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
            lastFocusedKey.current = manager.focusedKey;
            autoFocusRef.current = false;
        }, [
            isVirtualized,
            scrollRef,
            manager.focusedKey,
            manager.isFocused,
            ref
        ]);
        let handlers = {
            onKeyDown: onKeyDown,
            onFocus: onFocus,
            onBlur: onBlur,
            onMouseDown (e) {
                // Ignore events that bubbled through portals.
                if (scrollRef.current === e.target) // Prevent focus going to the collection when clicking on the scrollbar.
                e.preventDefault();
            }
        };
        let { typeSelectProps: typeSelectProps } = ($fb3050f43d946246$export$e32c88dfddc6e1d8)({
            keyboardDelegate: delegate,
            selectionManager: manager
        });
        if (!disallowTypeAhead) handlers = ($3ef42575df84b30b$export$9d1611c77c2fe928)(typeSelectProps, handlers);
        // If nothing is focused within the collection, make the collection itself tabbable.
        // This will be marshalled to either the first or last item depending on where focus came from.
        // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try
        // to move real DOM focus to the element anyway.
        let tabIndex;
        if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;
        return {
            collectionProps: {
                ...handlers,
                tabIndex: tabIndex
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $880e95eb8b93ba9a$export$ecf600387e221c37(options) {
        let { selectionManager: manager, key: key, ref: ref, shouldSelectOnPressUp: shouldSelectOnPressUp, shouldUseVirtualFocus: shouldUseVirtualFocus, focus: focus, isDisabled: isDisabled, onAction: onAction, allowsDifferentPressOrigin: allowsDifferentPressOrigin, linkBehavior: linkBehavior = 'action' } = options;
        let router = ($ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
        let onSelect = (e)=>{
            if (e.pointerType === 'keyboard' && ($feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);
            else {
                if (manager.selectionMode === 'none') return;
                if (manager.isLink(key)) {
                    if (linkBehavior === 'selection') {
                        let itemProps = manager.getItemProps(key);
                        router.open(ref.current, e, itemProps.href, itemProps.routerOptions);
                        // Always set selected keys back to what they were so that select and combobox close.
                        manager.setSelectedKeys(manager.selectedKeys);
                        return;
                    } else if (linkBehavior === 'override' || linkBehavior === 'none') return;
                }
                if (manager.selectionMode === 'single') {
                    if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);
                    else manager.replaceSelection(key);
                } else if (e && e.shiftKey) manager.extendSelection(key);
                else if (manager.selectionBehavior === 'toggle' || e && (($feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys
                manager.toggleSelection(key);
                else manager.replaceSelection(key);
            }
        };
        // Focus the associated DOM node when this item becomes the focusedKey
        (0, wp.element.useEffect)(()=>{
            let isFocused = key === manager.focusedKey;
            if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {
                if (focus) focus();
                else if (document.activeElement !== ref.current) ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
            }
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, [
            ref,
            key,
            manager.focusedKey,
            manager.childFocusStrategy,
            manager.isFocused,
            shouldUseVirtualFocus
        ]);
        isDisabled = isDisabled || manager.isDisabled(key);
        // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused
        // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver
        // on iOS 14 doesn't try to move real DOM focus to the item anyway.
        let itemProps = {};
        if (!shouldUseVirtualFocus && !isDisabled) itemProps = {
            tabIndex: key === manager.focusedKey ? 0 : -1,
            onFocus (e) {
                if (e.target === ref.current) manager.setFocusedKey(key);
            }
        };
        else if (isDisabled) itemProps.onMouseDown = (e)=>{
            // Prevent focus going to the body when clicking on a disabled item.
            e.preventDefault();
        };
        // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.
        // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.
        // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.
        // With touch, onAction occurs on single tap, and long press enters selection mode.
        let isLinkOverride = manager.isLink(key) && linkBehavior === 'override';
        let hasLinkAction = manager.isLink(key) && linkBehavior !== 'selection' && linkBehavior !== 'none';
        let allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride;
        let allowsActions = (onAction || hasLinkAction) && !isDisabled;
        let hasPrimaryAction = allowsActions && (manager.selectionBehavior === 'replace' ? !allowsSelection : !allowsSelection || manager.isEmpty);
        let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';
        let hasAction = hasPrimaryAction || hasSecondaryAction;
        let modality = (0, wp.element.useRef)(null);
        let longPressEnabled = hasAction && allowsSelection;
        let longPressEnabledOnPressStart = (0, wp.element.useRef)(false);
        let hadPrimaryActionOnPressStart = (0, wp.element.useRef)(false);
        let performAction = (e)=>{
            if (onAction) onAction();
            if (hasLinkAction) {
                let itemProps = manager.getItemProps(key);
                router.open(ref.current, e, itemProps.href, itemProps.routerOptions);
            }
        };
        // By default, selection occurs on pointer down. This can be strange if selecting an
        // item causes the UI to disappear immediately (e.g. menus).
        // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.
        // onPress requires a pointer down event on the same element as pointer up. For menus,
        // we want to be able to have the pointer down on the trigger that opens the menu and
        // the pointer up on the menu item rather than requiring a separate press.
        // For keyboard events, selection still occurs on key down.
        let itemPressProps = {};
        if (shouldSelectOnPressUp) {
            itemPressProps.onPressStart = (e)=>{
                modality.current = e.pointerType;
                longPressEnabledOnPressStart.current = longPressEnabled;
                if (e.pointerType === 'keyboard' && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);
            };
            // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)
            // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)
            if (!allowsDifferentPressOrigin) itemPressProps.onPress = (e)=>{
                if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== 'mouse') {
                    if (e.pointerType === 'keyboard' && !$880e95eb8b93ba9a$var$isActionKey()) return;
                    performAction(e);
                } else if (e.pointerType !== 'keyboard' && allowsSelection) onSelect(e);
            };
            else {
                itemPressProps.onPressUp = hasPrimaryAction ? null : (e)=>{
                    if (e.pointerType !== 'keyboard' && allowsSelection) onSelect(e);
                };
                itemPressProps.onPress = hasPrimaryAction ? performAction : null;
            }
        } else {
            itemPressProps.onPressStart = (e)=>{
                modality.current = e.pointerType;
                longPressEnabledOnPressStart.current = longPressEnabled;
                hadPrimaryActionOnPressStart.current = hasPrimaryAction;
                // Select on mouse down unless there is a primary action which will occur on mouse up.
                // For keyboard, select on key down. If there is an action, the Space key selects on key down,
                // and the Enter key performs onAction on key up.
                if (allowsSelection && (e.pointerType === 'mouse' && !hasPrimaryAction || e.pointerType === 'keyboard' && (!allowsActions || $880e95eb8b93ba9a$var$isSelectionKey()))) onSelect(e);
            };
            itemPressProps.onPress = (e)=>{
                // Selection occurs on touch up. Primary actions always occur on pointer up.
                // Both primary and secondary actions occur on Enter key up. The only exception
                // is secondary actions, which occur on double click with a mouse.
                if (e.pointerType === 'touch' || e.pointerType === 'pen' || e.pointerType === 'virtual' || e.pointerType === 'keyboard' && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current) {
                    if (hasAction) performAction(e);
                    else if (allowsSelection) onSelect(e);
                }
            };
        }
        itemProps['data-key'] = key;
        itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;
        let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)(itemPressProps);
        // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.
        let onDoubleClick = hasSecondaryAction ? (e)=>{
            if (modality.current === 'mouse') {
                e.stopPropagation();
                e.preventDefault();
                performAction(e);
            }
        } : undefined;
        // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior
        // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to
        // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.
        let { longPressProps: longPressProps } = ($8a26561d2877236e$export$c24ed0104d07eab9)({
            isDisabled: !longPressEnabled,
            onLongPress (e) {
                if (e.pointerType === 'touch') {
                    onSelect(e);
                    manager.setSelectionBehavior('toggle');
                }
            }
        });
        // Prevent native drag and drop on long press if we also select on long press.
        // Once the user is in selection mode, they can long press again to drag.
        // Use a capturing listener to ensure this runs before useDrag, regardless of
        // the order the props get merged.
        let onDragStartCapture = (e)=>{
            if (modality.current === 'touch' && longPressEnabledOnPressStart.current) e.preventDefault();
        };
        // Prevent default on link clicks so that we control exactly
        // when they open (to match selection behavior).
        let onClick = manager.isLink(key) ? (e)=>{
            if (!($ea8dcbcb9ea1b556$export$95185d699e05d4d7).isOpening) e.preventDefault();
        } : undefined;
        return {
            itemProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {
                onDoubleClick: onDoubleClick,
                onDragStartCapture: onDragStartCapture,
                onClick: onClick
            }),
            isPressed: isPressed,
            isSelected: manager.isSelected(key),
            isFocused: manager.isFocused && manager.focusedKey === key,
            isDisabled: isDisabled,
            allowsSelection: allowsSelection,
            hasAction: hasAction
        };
    }
    function $880e95eb8b93ba9a$var$isActionKey() {
        let event = window.event;
        return (event === null || event === void 0 ? void 0 : event.key) === 'Enter';
    }
    function $880e95eb8b93ba9a$var$isSelectionKey() {
        let event = window.event;
        return (event === null || event === void 0 ? void 0 : event.key) === ' ' || (event === null || event === void 0 ? void 0 : event.code) === 'Space';
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    class $2a25aae57d74318e$export$a05409b8bb224a5a {
        isDisabled(item) {
            var _item_props;
            return this.disabledBehavior === 'all' && (((_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || this.disabledKeys.has(item.key));
        }
        getNextKey(key) {
            key = this.collection.getKeyAfter(key);
            while(key != null){
                let item = this.collection.getItem(key);
                if (item.type === 'item' && !this.isDisabled(item)) return key;
                key = this.collection.getKeyAfter(key);
            }
            return null;
        }
        getPreviousKey(key) {
            key = this.collection.getKeyBefore(key);
            while(key != null){
                let item = this.collection.getItem(key);
                if (item.type === 'item' && !this.isDisabled(item)) return key;
                key = this.collection.getKeyBefore(key);
            }
            return null;
        }
        findKey(key, nextKey, shouldSkip) {
            let item = this.getItem(key);
            if (!item) return null;
            // Find the item above or below in the same column.
            let prevRect = item.getBoundingClientRect();
            do {
                key = nextKey(key);
                item = this.getItem(key);
            }while (item && shouldSkip(prevRect, item.getBoundingClientRect()));
            return key;
        }
        isSameRow(prevRect, itemRect) {
            return prevRect.top === itemRect.top || prevRect.left !== itemRect.left;
        }
        isSameColumn(prevRect, itemRect) {
            return prevRect.left === itemRect.left || prevRect.top !== itemRect.top;
        }
        getKeyBelow(key) {
            if (this.layout === 'grid' && this.orientation === 'vertical') return this.findKey(key, (key)=>this.getNextKey(key), this.isSameRow);
            else return this.getNextKey(key);
        }
        getKeyAbove(key) {
            if (this.layout === 'grid' && this.orientation === 'vertical') return this.findKey(key, (key)=>this.getPreviousKey(key), this.isSameRow);
            else return this.getPreviousKey(key);
        }
        getNextColumn(key, right) {
            return right ? this.getPreviousKey(key) : this.getNextKey(key);
        }
        getKeyRightOf(key) {
            if (this.layout === 'grid') {
                if (this.orientation === 'vertical') return this.getNextColumn(key, this.direction === 'rtl');
                else return this.findKey(key, (key)=>this.getNextColumn(key, this.direction === 'rtl'), this.isSameColumn);
            } else if (this.orientation === 'horizontal') return this.getNextColumn(key, this.direction === 'rtl');
            return null;
        }
        getKeyLeftOf(key) {
            if (this.layout === 'grid') {
                if (this.orientation === 'vertical') return this.getNextColumn(key, this.direction === 'ltr');
                else return this.findKey(key, (key)=>this.getNextColumn(key, this.direction === 'ltr'), this.isSameColumn);
            } else if (this.orientation === 'horizontal') return this.getNextColumn(key, this.direction === 'ltr');
            return null;
        }
        getFirstKey() {
            let key = this.collection.getFirstKey();
            while(key != null){
                let item = this.collection.getItem(key);
                if ((item === null || item === void 0 ? void 0 : item.type) === 'item' && !this.isDisabled(item)) return key;
                key = this.collection.getKeyAfter(key);
            }
            return null;
        }
        getLastKey() {
            let key = this.collection.getLastKey();
            while(key != null){
                let item = this.collection.getItem(key);
                if (item.type === 'item' && !this.isDisabled(item)) return key;
                key = this.collection.getKeyBefore(key);
            }
            return null;
        }
        getItem(key) {
            return key !== null ? this.ref.current.querySelector(`[data-key="${CSS.escape(key.toString())}"]`) : null;
        }
        getKeyPageAbove(key) {
            let menu = this.ref.current;
            let item = this.getItem(key);
            if (!item) return null;
            if (!($cc38e7bd3fc7b213$export$2bb74740c4e19def)(menu)) return this.getFirstKey();
            let containerRect = menu.getBoundingClientRect();
            let itemRect = item.getBoundingClientRect();
            if (this.orientation === 'horizontal') {
                let containerX = containerRect.x - menu.scrollLeft;
                let pageX = Math.max(0, itemRect.x - containerX + itemRect.width - containerRect.width);
                while(item && itemRect.x - containerX > pageX){
                    key = this.getKeyAbove(key);
                    item = key == null ? null : this.getItem(key);
                    itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
                }
            } else {
                let containerY = containerRect.y - menu.scrollTop;
                let pageY = Math.max(0, itemRect.y - containerY + itemRect.height - containerRect.height);
                while(item && itemRect.y - containerY > pageY){
                    key = this.getKeyAbove(key);
                    item = key == null ? null : this.getItem(key);
                    itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
                }
            }
            return key !== null && key !== void 0 ? key : this.getFirstKey();
        }
        getKeyPageBelow(key) {
            let menu = this.ref.current;
            let item = this.getItem(key);
            if (!item) return null;
            if (!($cc38e7bd3fc7b213$export$2bb74740c4e19def)(menu)) return this.getLastKey();
            let containerRect = menu.getBoundingClientRect();
            let itemRect = item.getBoundingClientRect();
            if (this.orientation === 'horizontal') {
                let containerX = containerRect.x - menu.scrollLeft;
                let pageX = Math.min(menu.scrollWidth, itemRect.x - containerX - itemRect.width + containerRect.width);
                while(item && itemRect.x - containerX < pageX){
                    key = this.getKeyBelow(key);
                    item = key == null ? null : this.getItem(key);
                    itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
                }
            } else {
                let containerY = containerRect.y - menu.scrollTop;
                let pageY = Math.min(menu.scrollHeight, itemRect.y - containerY - itemRect.height + containerRect.height);
                while(item && itemRect.y - containerY < pageY){
                    key = this.getKeyBelow(key);
                    item = key == null ? null : this.getItem(key);
                    itemRect = item === null || item === void 0 ? void 0 : item.getBoundingClientRect();
                }
            }
            return key !== null && key !== void 0 ? key : this.getLastKey();
        }
        getKeyForSearch(search, fromKey) {
            if (!this.collator) return null;
            let collection = this.collection;
            let key = fromKey || this.getFirstKey();
            while(key != null){
                let item = collection.getItem(key);
                let substring = item.textValue.slice(0, search.length);
                if (item.textValue && this.collator.compare(substring, search) === 0) return key;
                key = this.getKeyBelow(key);
            }
            return null;
        }
        constructor(...args){
            if (args.length === 1) {
                let opts = args[0];
                this.collection = opts.collection;
                this.ref = opts.ref;
                this.collator = opts.collator;
                this.disabledKeys = opts.disabledKeys || new Set();
                this.disabledBehavior = opts.disabledBehavior || 'all';
                this.orientation = opts.orientation;
                this.direction = opts.direction;
                this.layout = opts.layout || 'stack';
            } else {
                this.collection = args[0];
                this.disabledKeys = args[1];
                this.ref = args[2];
                this.collator = args[3];
                this.layout = 'stack';
                this.orientation = 'vertical';
                this.disabledBehavior = 'all';
            }
            // If this is a vertical stack, remove the left/right methods completely
            // so they aren't called by useDroppableCollection.
            if (this.layout === 'stack' && this.orientation === 'vertical') {
                this.getKeyLeftOf = undefined;
                this.getKeyRightOf = undefined;
            }
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $982254629710d113$export$b95089534ab7c1fd(props) {
        let { selectionManager: selectionManager, collection: collection, disabledKeys: disabledKeys, ref: ref, keyboardDelegate: keyboardDelegate } = props;
        // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
        // When virtualized, the layout object will be passed in as a prop and override this.
        let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
            usage: 'search',
            sensitivity: 'base'
        });
        let disabledBehavior = selectionManager.disabledBehavior;
        let delegate = (0, wp.element.useMemo)(()=>keyboardDelegate || new ($2a25aae57d74318e$export$a05409b8bb224a5a)({
                collection: collection,
                disabledKeys: disabledKeys,
                disabledBehavior: disabledBehavior,
                ref: ref,
                collator: collator
            }), [
            keyboardDelegate,
            collection,
            disabledKeys,
            ref,
            collator,
            disabledBehavior
        ]);
        let { collectionProps: collectionProps } = ($ae20dd8cbca75726$export$d6daf82dcd84e87c)({
            ...props,
            ref: ref,
            selectionManager: selectionManager,
            keyboardDelegate: delegate
        });
        return {
            listProps: collectionProps
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            labelable: true
        });
        // Use props instead of state here. We don't want this to change due to long press.
        let selectionBehavior = props.selectionBehavior || 'toggle';
        let linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');
        if (selectionBehavior === 'toggle' && linkBehavior === 'action') // linkBehavior="action" does not work with selectionBehavior="toggle" because there is no way
        // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be
        // selectable in this configuration.
        linkBehavior = 'override';
        let { listProps: listProps } = ($982254629710d113$export$b95089534ab7c1fd)({
            ...props,
            ref: ref,
            selectionManager: state.selectionManager,
            collection: state.collection,
            disabledKeys: state.disabledKeys,
            linkBehavior: linkBehavior
        });
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            onFocusWithin: props.onFocus,
            onBlurWithin: props.onBlur,
            onFocusWithinChange: props.onFocusChange
        });
        // Share list id and some props with child options.
        let id = ($bdb11010cef70236$export$f680877a34711e37)(props.id);
        ($b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {
            id: id,
            shouldUseVirtualFocus: props.shouldUseVirtualFocus,
            shouldSelectOnPressUp: props.shouldSelectOnPressUp,
            shouldFocusOnHover: props.shouldFocusOnHover,
            isVirtualized: props.isVirtualized,
            onAction: props.onAction,
            linkBehavior: linkBehavior
        });
        let { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)({
            ...props,
            id: id,
            // listbox is not an HTML input element so it
            // shouldn't be labeled by a <label> element.
            labelElementType: 'span'
        });
        return {
            labelProps: labelProps,
            listBoxProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {
                'aria-multiselectable': 'true'
            } : {}, {
                role: 'listbox',
                ...($3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, listProps)
            })
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $c1d7fb2ec91bae71$var$Item(props) {
        return null;
    }
    $c1d7fb2ec91bae71$var$Item.getCollectionNode = function* getCollectionNode(props, context) {
        let { childItems: childItems, title: title, children: children } = props;
        let rendered = props.title || props.children;
        let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || '';
        // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.
        if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning)) console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');
        yield {
            type: 'item',
            props: props,
            rendered: rendered,
            textValue: textValue,
            'aria-label': props['aria-label'],
            hasChildNodes: $c1d7fb2ec91bae71$var$hasChildItems(props),
            *childNodes () {
                if (childItems) for (let child of childItems)yield {
                    type: 'item',
                    value: child
                };
                else if (title) {
                    let items = [];
                    (wp.element).Children.forEach(children, (child)=>{
                        items.push({
                            type: 'item',
                            element: child
                        });
                    });
                    yield* items;
                }
            }
        };
    };
    function $c1d7fb2ec91bae71$var$hasChildItems(props) {
        if (props.hasChildItems != null) return props.hasChildItems;
        if (props.childItems) return true;
        if (props.title && (wp.element).Children.count(props.children) > 0) return true;
        return false;
    }
    // We don't want getCollectionNode to show up in the type definition
    let $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 = $c1d7fb2ec91bae71$var$Item;

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $9fc4852771d079eb$var$Section(props) {
        return null;
    }
    $9fc4852771d079eb$var$Section.getCollectionNode = function* getCollectionNode(props) {
        let { children: children, title: title, items: items } = props;
        yield {
            type: 'section',
            props: props,
            hasChildNodes: true,
            rendered: title,
            'aria-label': props['aria-label'],
            *childNodes () {
                if (typeof children === 'function') {
                    if (!items) throw new Error('props.children was a function but props.items is missing');
                    for (let item of items)yield {
                        type: 'item',
                        value: item,
                        renderer: children
                    };
                } else {
                    let items = [];
                    (wp.element).Children.forEach(children, (child)=>{
                        items.push({
                            type: 'item',
                            element: child
                        });
                    });
                    yield* items;
                }
            }
        };
    };
    // We don't want getCollectionNode to show up in the type definition
    let $9fc4852771d079eb$export$6e2c8f0811a474ce = $9fc4852771d079eb$var$Section;

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    class $eb2240fc39a57fa5$export$bf788dd355e3a401 {
        build(props, context) {
            this.context = context;
            return $eb2240fc39a57fa5$var$iterable(()=>this.iterateCollection(props));
        }
        *iterateCollection(props) {
            let { children: children, items: items } = props;
            if (typeof children === 'function') {
                if (!items) throw new Error('props.children was a function but props.items is missing');
                for (let item of props.items)yield* this.getFullNode({
                    value: item
                }, {
                    renderer: children
                });
            } else {
                let items = [];
                (wp.element).Children.forEach(children, (child)=>{
                    items.push(child);
                });
                let index = 0;
                for (let item of items){
                    let nodes = this.getFullNode({
                        element: item,
                        index: index
                    }, {});
                    for (let node of nodes){
                        index++;
                        yield node;
                    }
                }
            }
        }
        getKey(item, partialNode, state, parentKey) {
            if (item.key != null) return item.key;
            if (partialNode.type === 'cell' && partialNode.key != null) return `${parentKey}${partialNode.key}`;
            let v = partialNode.value;
            if (v != null) {
                var _v_key;
                let key = (_v_key = v.key) !== null && _v_key !== void 0 ? _v_key : v.id;
                if (key == null) throw new Error('No key found for item');
                return key;
            }
            return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;
        }
        getChildState(state, partialNode) {
            return {
                renderer: partialNode.renderer || state.renderer
            };
        }
        *getFullNode(partialNode, state, parentKey, parentNode) {
            // If there's a value instead of an element on the node, and a parent renderer function is available,
            // use it to render an element for the value.
            let element = partialNode.element;
            if (!element && partialNode.value && state && state.renderer) {
                let cached = this.cache.get(partialNode.value);
                if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
                    cached.index = partialNode.index;
                    cached.parentKey = parentNode ? parentNode.key : null;
                    yield cached;
                    return;
                }
                element = state.renderer(partialNode.value);
            }
            // If there's an element with a getCollectionNode function on its type, then it's a supported component.
            // Call this function to get a partial node, and recursively build a full node from there.
            if ((wp.element).isValidElement(element)) {
                let type = element.type;
                if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {
                    let name = typeof element.type === 'function' ? element.type.name : element.type;
                    throw new Error(`Unknown element <${name}> in collection.`);
                }
                let childNodes = type.getCollectionNode(element.props, this.context);
                let index = partialNode.index;
                let result = childNodes.next();
                while(!result.done && result.value){
                    let childNode = result.value;
                    partialNode.index = index;
                    let nodeKey = childNode.key;
                    if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
                    let nodes = this.getFullNode({
                        ...childNode,
                        key: nodeKey,
                        index: index,
                        wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)
                    }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);
                    let children = [
                        ...nodes
                    ];
                    for (let node of children){
                        // Cache the node based on its value
                        node.value = childNode.value || partialNode.value;
                        if (node.value) this.cache.set(node.value, node);
                        // The partial node may have specified a type for the child in order to specify a constraint.
                        // Verify that the full node that was built recursively matches this type.
                        if (partialNode.type && node.type !== partialNode.type) throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);
                        index++;
                        yield node;
                    }
                    result = childNodes.next(children);
                }
                return;
            }
            // Ignore invalid elements
            if (partialNode.key == null) return;
            // Create full node
            let builder = this;
            let node = {
                type: partialNode.type,
                props: partialNode.props,
                key: partialNode.key,
                parentKey: parentNode ? parentNode.key : null,
                value: partialNode.value,
                level: parentNode ? parentNode.level + 1 : 0,
                index: partialNode.index,
                rendered: partialNode.rendered,
                textValue: partialNode.textValue,
                'aria-label': partialNode['aria-label'],
                wrapper: partialNode.wrapper,
                shouldInvalidate: partialNode.shouldInvalidate,
                hasChildNodes: partialNode.hasChildNodes,
                childNodes: $eb2240fc39a57fa5$var$iterable(function*() {
                    if (!partialNode.hasChildNodes) return;
                    let index = 0;
                    for (let child of partialNode.childNodes()){
                        // Ensure child keys are globally unique by prepending the parent node's key
                        if (child.key != null) // TODO: Remove this line entirely and enforce that users always provide unique keys.
                        // Currently this line will have issues when a parent has a key `a` and a child with key `bc`
                        // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both
                        // children having a key of `abc`.
                        child.key = `${node.key}${child.key}`;
                        child.index = index;
                        let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);
                        for (let node of nodes){
                            index++;
                            yield node;
                        }
                    }
                })
            };
            yield node;
        }
        constructor(){
            this.cache = new WeakMap();
        }
    }
    // Wraps an iterator function as an iterable object, and caches the results.
    function $eb2240fc39a57fa5$var$iterable(iterator) {
        let cache = [];
        let iterable = null;
        return {
            *[Symbol.iterator] () {
                for (let item of cache)yield item;
                if (!iterable) iterable = iterator();
                for (let item of iterable){
                    cache.push(item);
                    yield item;
                }
            }
        };
    }
    function $eb2240fc39a57fa5$var$compose(outer, inner) {
        if (outer && inner) return (element)=>outer(inner(element));
        if (outer) return outer;
        if (inner) return inner;
    }
    function $eb2240fc39a57fa5$var$capitalize(str) {
        return str[0].toUpperCase() + str.slice(1);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context) {
        let builder = (0, wp.element.useMemo)(()=>new ($eb2240fc39a57fa5$export$bf788dd355e3a401)(), []);
        let { children: children, items: items, collection: collection } = props;
        let result = (0, wp.element.useMemo)(()=>{
            if (collection) return collection;
            let nodes = builder.build({
                children: children,
                items: items
            }, context);
            return factory(nodes);
        }, [
            builder,
            children,
            items,
            collection,
            context,
            factory
        ]);
        return result;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ function $c5a24bc478652b5f$export$1005530eda016c13(node, collection) {
        // New API: call collection.getChildren with the node key.
        if (typeof collection.getChildren === 'function') return collection.getChildren(node.key);
        // Old API: access childNodes directly.
        return node.childNodes;
    }
    function $c5a24bc478652b5f$export$fbdeaa6a76694f71(iterable) {
        return $c5a24bc478652b5f$export$5f3398f8733f90e2(iterable, 0);
    }
    function $c5a24bc478652b5f$export$5f3398f8733f90e2(iterable, index) {
        if (index < 0) return undefined;
        let i = 0;
        for (let item of iterable){
            if (i === index) return item;
            i++;
        }
    }
    function $c5a24bc478652b5f$export$8c434b3a7a4dad6(collection, a, b) {
        // If the two nodes have the same parent, compare their indices.
        if (a.parentKey === b.parentKey) return a.index - b.index;
        // Otherwise, collect all of the ancestors from each node, and find the first one that doesn't match starting from the root.
        // Include the base nodes in case we are comparing nodes of different levels so that we can compare the higher node to the lower level node's
        // ancestor of the same level
        let aAncestors = [
            ...$c5a24bc478652b5f$var$getAncestors(collection, a),
            a
        ];
        let bAncestors = [
            ...$c5a24bc478652b5f$var$getAncestors(collection, b),
            b
        ];
        let firstNonMatchingAncestor = aAncestors.slice(0, bAncestors.length).findIndex((a, i)=>a !== bAncestors[i]);
        if (firstNonMatchingAncestor !== -1) {
            // Compare the indices of two children within the common ancestor.
            a = aAncestors[firstNonMatchingAncestor];
            b = bAncestors[firstNonMatchingAncestor];
            return a.index - b.index;
        }
        // If there isn't a non matching ancestor, we might be in a case where one of the nodes is the ancestor of the other.
        if (aAncestors.findIndex((node)=>node === b) >= 0) return 1;
        else if (bAncestors.findIndex((node)=>node === a) >= 0) return -1;
        // 🤷
        return -1;
    }
    function $c5a24bc478652b5f$var$getAncestors(collection, node) {
        let parents = [];
        while((node === null || node === void 0 ? void 0 : node.parentKey) != null){
            node = collection.getItem(node.parentKey);
            parents.unshift(node);
        }
        return parents;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    const $453cc9f0df89c0a5$var$cache = new WeakMap();
    function $453cc9f0df89c0a5$export$77d5aafae4e095b2(collection) {
        let count = $453cc9f0df89c0a5$var$cache.get(collection);
        if (count != null) return count;
        count = 0;
        let countItems = (items)=>{
            for (let item of items)if (item.type === 'section') countItems(($c5a24bc478652b5f$export$1005530eda016c13)(item, collection));
            else count++;
        };
        countItems(collection);
        $453cc9f0df89c0a5$var$cache.set(collection, count);
        return count;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $293f70390ea03370$export$497855f14858aa34(props, state, ref) {
        var _item_props, _item_props1;
        let { key: key } = props;
        let data = ($b1f0cad8af73213b$export$3585ede4d035bf14).get(state);
        var _props_isDisabled;
        let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.selectionManager.isDisabled(key);
        var _props_isSelected;
        let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);
        var _props_shouldSelectOnPressUp;
        let shouldSelectOnPressUp = (_props_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _props_shouldSelectOnPressUp !== void 0 ? _props_shouldSelectOnPressUp : data === null || data === void 0 ? void 0 : data.shouldSelectOnPressUp;
        var _props_shouldFocusOnHover;
        let shouldFocusOnHover = (_props_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _props_shouldFocusOnHover !== void 0 ? _props_shouldFocusOnHover : data === null || data === void 0 ? void 0 : data.shouldFocusOnHover;
        var _props_shouldUseVirtualFocus;
        let shouldUseVirtualFocus = (_props_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _props_shouldUseVirtualFocus !== void 0 ? _props_shouldUseVirtualFocus : data === null || data === void 0 ? void 0 : data.shouldUseVirtualFocus;
        var _props_isVirtualized;
        let isVirtualized = (_props_isVirtualized = props.isVirtualized) !== null && _props_isVirtualized !== void 0 ? _props_isVirtualized : data === null || data === void 0 ? void 0 : data.isVirtualized;
        let labelId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
        let descriptionId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
        let optionProps = {
            role: 'option',
            'aria-disabled': isDisabled || undefined,
            'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined
        };
        // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply "text".
        // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.
        // https://bugs.webkit.org/show_bug.cgi?id=209279
        if (!(($c87311424ea30a05$export$9ac100e40613ea10)() && ($c87311424ea30a05$export$78551043582a6a98)())) {
            optionProps['aria-label'] = props['aria-label'];
            optionProps['aria-labelledby'] = labelId;
            optionProps['aria-describedby'] = descriptionId;
        }
        let item = state.collection.getItem(key);
        if (isVirtualized) {
            let index = Number(item === null || item === void 0 ? void 0 : item.index);
            optionProps['aria-posinset'] = Number.isNaN(index) ? undefined : index + 1;
            optionProps['aria-setsize'] = ($453cc9f0df89c0a5$export$77d5aafae4e095b2)(state.collection);
        }
        let onAction = (data === null || data === void 0 ? void 0 : data.onAction) ? ()=>{
            var _data_onAction;
            return data === null || data === void 0 ? void 0 : (_data_onAction = data.onAction) === null || _data_onAction === void 0 ? void 0 : _data_onAction.call(data, key);
        } : undefined;
        let { itemProps: itemProps, isPressed: isPressed, isFocused: isFocused, hasAction: hasAction, allowsSelection: allowsSelection } = ($880e95eb8b93ba9a$export$ecf600387e221c37)({
            selectionManager: state.selectionManager,
            key: key,
            ref: ref,
            shouldSelectOnPressUp: shouldSelectOnPressUp,
            allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,
            isVirtualized: isVirtualized,
            shouldUseVirtualFocus: shouldUseVirtualFocus,
            isDisabled: isDisabled,
            onAction: onAction || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.onAction) ? ($ff5963eb1fccf552$export$e08e3b67e392101e)(item === null || item === void 0 ? void 0 : (_item_props1 = item.props) === null || _item_props1 === void 0 ? void 0 : _item_props1.onAction, onAction) : undefined,
            linkBehavior: data === null || data === void 0 ? void 0 : data.linkBehavior
        });
        let { hoverProps: hoverProps } = ($6179b936705e76d3$export$ae780daf29e6d456)({
            isDisabled: isDisabled || !shouldFocusOnHover,
            onHoverStart () {
                if (!($507fabe10e71c6fb$export$b9b3dfddab17db27)()) {
                    state.selectionManager.setFocused(true);
                    state.selectionManager.setFocusedKey(key);
                }
            }
        });
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(item === null || item === void 0 ? void 0 : item.props);
        delete domProps.id;
        let linkProps = ($ea8dcbcb9ea1b556$export$7e924b3091a3bd18)(item === null || item === void 0 ? void 0 : item.props);
        return {
            optionProps: {
                ...optionProps,
                ...($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, itemProps, hoverProps, linkProps),
                id: ($b1f0cad8af73213b$export$9145995848b05025)(state, key)
            },
            labelProps: {
                id: labelId
            },
            descriptionProps: {
                id: descriptionId
            },
            isFocused: isFocused,
            isFocusVisible: isFocused && ($507fabe10e71c6fb$export$b9b3dfddab17db27)(),
            isSelected: isSelected,
            isDisabled: isDisabled,
            isPressed: isPressed,
            allowsSelection: allowsSelection,
            hasAction: hasAction
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {
        let { heading: heading, 'aria-label': ariaLabel } = props;
        let headingId = ($bdb11010cef70236$export$f680877a34711e37)();
        return {
            itemProps: {
                role: 'presentation'
            },
            headingProps: heading ? {
                // Techincally, listbox cannot contain headings according to ARIA.
                // We hide the heading from assistive technology, using role="presentation",
                // and only use it as a visual label for the nested group.
                id: headingId,
                role: 'presentation'
            } : {},
            groupProps: {
                role: 'group',
                'aria-label': ariaLabel,
                'aria-labelledby': heading ? headingId : undefined
            }
        };
    }

    var $c0398ad35c3639b7$exports = {};
    $c0398ad35c3639b7$exports = {
        "longPressMessage": `\u{627}\u{636}\u{63A}\u{637} \u{645}\u{637}\u{648}\u{644}\u{627}\u{64B} \u{623}\u{648} \u{627}\u{636}\u{63A}\u{637} \u{639}\u{644}\u{649} Alt + \u{627}\u{644}\u{633}\u{647}\u{645} \u{644}\u{623}\u{633}\u{641}\u{644} \u{644}\u{641}\u{62A}\u{62D} \u{627}\u{644}\u{642}\u{627}\u{626}\u{645}\u{629}`
    };

    var $7af657c4165927c3$exports = {};
    $7af657c4165927c3$exports = {
        "longPressMessage": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{43F}\u{440}\u{43E}\u{434}\u{44A}\u{43B}\u{436}\u{438}\u{442}\u{435}\u{43B}\u{43D}\u{43E} \u{438}\u{43B}\u{438} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} Alt+ \u{441}\u{442}\u{440}\u{435}\u{43B}\u{43A}\u{430} \u{43D}\u{430}\u{434}\u{43E}\u{43B}\u{443}, \u{437}\u{430} \u{434}\u{430} \u{43E}\u{442}\u{432}\u{43E}\u{440}\u{438}\u{442}\u{435} \u{43C}\u{435}\u{43D}\u{44E}\u{442}\u{43E}`
    };

    var $d95d4da6d531ab81$exports = {};
    $d95d4da6d531ab81$exports = {
        "longPressMessage": `Dlouh\xfdm stiskem nebo stisknut\xedm kl\xe1ves Alt + \u{161}ipka dol\u{16F} otev\u{159}ete nab\xeddku`
    };

    var $24ebda9c775dca17$exports = {};
    $24ebda9c775dca17$exports = {
        "longPressMessage": `Langt tryk eller tryk p\xe5 Alt + pil ned for at \xe5bne menuen`
    };

    var $743e0dfca6cab1e9$exports = {};
    $743e0dfca6cab1e9$exports = {
        "longPressMessage": `Dr\xfccken Sie lange oder dr\xfccken Sie Alt + Nach-unten, um das Men\xfc zu \xf6ffnen`
    };

    var $a2f41026e05f1c84$exports = {};
    $a2f41026e05f1c84$exports = {
        "longPressMessage": `\u{3A0}\u{3B9}\u{3AD}\u{3C3}\u{3C4}\u{3B5} \u{3C0}\u{3B1}\u{3C1}\u{3B1}\u{3C4}\u{3B5}\u{3C4}\u{3B1}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3AE} \u{3C0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Alt + \u{3BA}\u{3AC}\u{3C4}\u{3C9} \u{3B2}\u{3AD}\u{3BB}\u{3BF}\u{3C2} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3B1}\u{3BD}\u{3BF}\u{3AF}\u{3BE}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3BF} \u{3BC}\u{3B5}\u{3BD}\u{3BF}\u{3CD}`
    };

    var $43b800e97c901737$exports = {};
    $43b800e97c901737$exports = {
        "longPressMessage": `Long press or press Alt + ArrowDown to open menu`
    };

    var $442f5f6ac211e29f$exports = {};
    $442f5f6ac211e29f$exports = {
        "longPressMessage": `Mantenga pulsado o pulse Alt + flecha abajo para abrir el men\xfa`
    };

    var $dff280acfeb2d8ac$exports = {};
    $dff280acfeb2d8ac$exports = {
        "longPressMessage": `Men\xfc\xfc avamiseks vajutage pikalt v\xf5i vajutage klahve Alt + allanool`
    };

    var $51608325613944d7$exports = {};
    $51608325613944d7$exports = {
        "longPressMessage": `Avaa valikko painamalla pohjassa tai n\xe4pp\xe4inyhdistelm\xe4ll\xe4 Alt + Alanuoli`
    };

    var $c4a1b1eabeaa87be$exports = {};
    $c4a1b1eabeaa87be$exports = {
        "longPressMessage": `Appuyez de mani\xe8re prolong\xe9e ou appuyez sur Alt\xa0+\xa0Fl\xe8che vers le bas pour ouvrir le menu.`
    };

    var $8c74815cdee18d1b$exports = {};
    $8c74815cdee18d1b$exports = {
        "longPressMessage": `\u{5DC}\u{5D7}\u{5E5} \u{5DC}\u{5D7}\u{5D9}\u{5E6}\u{5D4} \u{5D0}\u{5E8}\u{5D5}\u{5DB}\u{5D4} \u{5D0}\u{5D5} \u{5D4}\u{5E7}\u{5E9} Alt + ArrowDown \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E4}\u{5EA}\u{5D5}\u{5D7} \u{5D0}\u{5EA} \u{5D4}\u{5EA}\u{5E4}\u{5E8}\u{5D9}\u{5D8}`
    };

    var $fd0e9ef6a7fe0ec9$exports = {};
    $fd0e9ef6a7fe0ec9$exports = {
        "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika`
    };

    var $a89a74a39eba465a$exports = {};
    $a89a74a39eba465a$exports = {
        "longPressMessage": `Nyomja meg hosszan, vagy nyomja meg az Alt + lefele ny\xedl gombot a men\xfc megnyit\xe1s\xe1hoz`
    };

    var $edc7c66594a0ae8a$exports = {};
    $edc7c66594a0ae8a$exports = {
        "longPressMessage": `Premere a lungo o premere Alt + Freccia gi\xf9 per aprire il menu`
    };

    var $f1ab51510712db52$exports = {};
    $f1ab51510712db52$exports = {
        "longPressMessage": `\u{9577}\u{62BC}\u{3057}\u{307E}\u{305F}\u{306F} Alt+\u{4E0B}\u{77E2}\u{5370}\u{30AD}\u{30FC}\u{3067}\u{30E1}\u{30CB}\u{30E5}\u{30FC}\u{3092}\u{958B}\u{304F}`
    };

    var $f9b672d9b82fa3d6$exports = {};
    $f9b672d9b82fa3d6$exports = {
        "longPressMessage": `\u{AE38}\u{AC8C} \u{B204}\u{B974}\u{AC70}\u{B098} Alt + \u{C544}\u{B798}\u{CABD} \u{D654}\u{C0B4}\u{D45C}\u{B97C} \u{B20C}\u{B7EC} \u{BA54}\u{B274} \u{C5F4}\u{AE30}`
    };

    var $a385f3910feda499$exports = {};
    $a385f3910feda499$exports = {
        "longPressMessage": `Nor\u{117}dami atidaryti meniu, nuspaud\u{119} palaikykite arba paspauskite \u{201E}Alt + ArrowDown\u{201C}.`
    };

    var $4f1bde932c441789$exports = {};
    $4f1bde932c441789$exports = {
        "longPressMessage": `Lai atv\u{113}rtu izv\u{113}lni, turiet nospiestu vai nospiediet tausti\u{146}u kombin\u{101}ciju Alt + lejupv\u{113}rst\u{101} bulti\u{146}a`
    };

    var $914a51a8a594d5be$exports = {};
    $914a51a8a594d5be$exports = {
        "longPressMessage": `Langt trykk eller trykk Alt + PilNed for \xe5 \xe5pne menyen`
    };

    var $89aaf803103bb500$exports = {};
    $89aaf803103bb500$exports = {
        "longPressMessage": `Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen`
    };

    var $c685891476dbaaca$exports = {};
    $c685891476dbaaca$exports = {
        "longPressMessage": `Naci\u{15B}nij i przytrzymaj lub naci\u{15B}nij klawisze Alt + Strza\u{142}ka w d\xf3\u{142}, aby otworzy\u{107} menu`
    };

    var $885879b9b10c2959$exports = {};
    $885879b9b10c2959$exports = {
        "longPressMessage": `Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu`
    };

    var $6b39616688a51692$exports = {};
    $6b39616688a51692$exports = {
        "longPressMessage": `Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu`
    };

    var $f26362aed63f47e2$exports = {};
    $f26362aed63f47e2$exports = {
        "longPressMessage": `Ap\u{103}sa\u{21B}i lung sau ap\u{103}sa\u{21B}i pe Alt + s\u{103}geat\u{103} \xeen jos pentru a deschide meniul`
    };

    var $06cbade644558bf0$exports = {};
    $06cbade644558bf0$exports = {
        "longPressMessage": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{438} \u{443}\u{434}\u{435}\u{440}\u{436}\u{438}\u{432}\u{430}\u{439}\u{442}\u{435} \u{438}\u{43B}\u{438} \u{43D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} Alt + \u{421}\u{442}\u{440}\u{435}\u{43B}\u{43A}\u{430} \u{432}\u{43D}\u{438}\u{437}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43E}\u{442}\u{43A}\u{440}\u{44B}\u{442}\u{44C} \u{43C}\u{435}\u{43D}\u{44E}`
    };

    var $0a391ff68f9d59b1$exports = {};
    $0a391ff68f9d59b1$exports = {
        "longPressMessage": `Ponuku otvor\xedte dlh\xfdm stla\u{10D}en\xedm alebo stla\u{10D}en\xedm kl\xe1vesu Alt + kl\xe1vesu so \u{161}\xedpkou nadol`
    };

    var $8193cf0e649c7928$exports = {};
    $8193cf0e649c7928$exports = {
        "longPressMessage": `Za odprtje menija pritisnite in dr\u{17E}ite gumb ali pritisnite Alt+pu\u{161}\u{10D}ica navzdol`
    };

    var $f398debcce5a5c55$exports = {};
    $f398debcce5a5c55$exports = {
        "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni`
    };

    var $9e9fef000aa4c013$exports = {};
    $9e9fef000aa4c013$exports = {
        "longPressMessage": `H\xe5ll nedtryckt eller tryck p\xe5 Alt + pil ned\xe5t f\xf6r att \xf6ppna menyn`
    };

    var $c016c8183bbe3d68$exports = {};
    $c016c8183bbe3d68$exports = {
        "longPressMessage": `Men\xfcy\xfc a\xe7mak i\xe7in uzun bas\u{131}n veya Alt + A\u{15F}a\u{11F}\u{131} Ok tu\u{15F}una bas\u{131}n`
    };

    var $ca4f6c8462244e62$exports = {};
    $ca4f6c8462244e62$exports = {
        "longPressMessage": `\u{414}\u{43E}\u{432}\u{433}\u{43E} \u{430}\u{431}\u{43E} \u{437}\u{432}\u{438}\u{447}\u{430}\u{439}\u{43D}\u{43E} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} \u{43A}\u{43E}\u{43C}\u{431}\u{456}\u{43D}\u{430}\u{446}\u{456}\u{44E} \u{43A}\u{43B}\u{430}\u{432}\u{456}\u{448} Alt \u{456} \u{441}\u{442}\u{440}\u{456}\u{43B}\u{43A}\u{430} \u{432}\u{43D}\u{438}\u{437}, \u{449}\u{43E}\u{431} \u{432}\u{456}\u{434}\u{43A}\u{440}\u{438}\u{442}\u{438} \u{43C}\u{435}\u{43D}\u{44E}`
    };

    var $2d9960c02ccac927$exports = {};
    $2d9960c02ccac927$exports = {
        "longPressMessage": `\u{957F}\u{6309}\u{6216}\u{6309} Alt + \u{5411}\u{4E0B}\u{65B9}\u{5411}\u{952E}\u{4EE5}\u{6253}\u{5F00}\u{83DC}\u{5355}`
    };

    var $f1b682a4c8c5631c$exports = {};
    $f1b682a4c8c5631c$exports = {
        "longPressMessage": `\u{9577}\u{6309}\u{6216}\u{6309} Alt+\u{5411}\u{4E0B}\u{9375}\u{4EE5}\u{958B}\u{555F}\u{529F}\u{80FD}\u{8868}`
    };

    var $2cbb7ca666678a14$exports = {};


































    $2cbb7ca666678a14$exports = {
        "ar-AE": $c0398ad35c3639b7$exports,
        "bg-BG": $7af657c4165927c3$exports,
        "cs-CZ": $d95d4da6d531ab81$exports,
        "da-DK": $24ebda9c775dca17$exports,
        "de-DE": $743e0dfca6cab1e9$exports,
        "el-GR": $a2f41026e05f1c84$exports,
        "en-US": $43b800e97c901737$exports,
        "es-ES": $442f5f6ac211e29f$exports,
        "et-EE": $dff280acfeb2d8ac$exports,
        "fi-FI": $51608325613944d7$exports,
        "fr-FR": $c4a1b1eabeaa87be$exports,
        "he-IL": $8c74815cdee18d1b$exports,
        "hr-HR": $fd0e9ef6a7fe0ec9$exports,
        "hu-HU": $a89a74a39eba465a$exports,
        "it-IT": $edc7c66594a0ae8a$exports,
        "ja-JP": $f1ab51510712db52$exports,
        "ko-KR": $f9b672d9b82fa3d6$exports,
        "lt-LT": $a385f3910feda499$exports,
        "lv-LV": $4f1bde932c441789$exports,
        "nb-NO": $914a51a8a594d5be$exports,
        "nl-NL": $89aaf803103bb500$exports,
        "pl-PL": $c685891476dbaaca$exports,
        "pt-BR": $885879b9b10c2959$exports,
        "pt-PT": $6b39616688a51692$exports,
        "ro-RO": $f26362aed63f47e2$exports,
        "ru-RU": $06cbade644558bf0$exports,
        "sk-SK": $0a391ff68f9d59b1$exports,
        "sl-SI": $8193cf0e649c7928$exports,
        "sr-SP": $f398debcce5a5c55$exports,
        "sv-SE": $9e9fef000aa4c013$exports,
        "tr-TR": $c016c8183bbe3d68$exports,
        "uk-UA": $ca4f6c8462244e62$exports,
        "zh-CN": $2d9960c02ccac927$exports,
        "zh-TW": $f1b682a4c8c5631c$exports
    };

    function $parcel$interopDefault$a(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {
        let { type: type = 'menu', isDisabled: isDisabled, trigger: trigger = 'press' } = props;
        let menuTriggerId = ($bdb11010cef70236$export$f680877a34711e37)();
        let { triggerProps: triggerProps, overlayProps: overlayProps } = ($628037886ba31236$export$f9d5c8beee7d008d)({
            type: type
        }, state, ref);
        let onKeyDown = (e)=>{
            if (isDisabled) return;
            if (trigger === 'longPress' && !e.altKey) return;
            if (ref && ref.current) switch(e.key){
                case 'Enter':
                case ' ':
                    if (trigger === 'longPress') return;
                // fallthrough
                case 'ArrowDown':
                    // Stop propagation, unless it would already be handled by useKeyboard.
                    if (!('continuePropagation' in e)) e.stopPropagation();
                    e.preventDefault();
                    state.toggle('first');
                    break;
                case 'ArrowUp':
                    if (!('continuePropagation' in e)) e.stopPropagation();
                    e.preventDefault();
                    state.toggle('last');
                    break;
                default:
                    // Allow other keys.
                    if ('continuePropagation' in e) e.continuePropagation();
            }
        };
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$a($2cbb7ca666678a14$exports))), '@react-aria/menu');
        let { longPressProps: longPressProps } = ($8a26561d2877236e$export$c24ed0104d07eab9)({
            isDisabled: isDisabled || trigger !== 'longPress',
            accessibilityDescription: stringFormatter.format('longPressMessage'),
            onLongPressStart () {
                state.close();
            },
            onLongPress () {
                state.open('first');
            }
        });
        let pressProps = {
            onPressStart (e) {
                // For consistency with native, open the menu on mouse/key down, but touch up.
                if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled) // If opened with a screen reader, auto focus the first item.
                // Otherwise, the menu itself will be focused.
                state.open(e.pointerType === 'virtual' ? 'first' : null);
            },
            onPress (e) {
                if (e.pointerType === 'touch' && !isDisabled) state.toggle();
            }
        };
        // omit onPress from triggerProps since we override it above.
        delete triggerProps.onPress;
        return {
            menuTriggerProps: {
                ...triggerProps,
                ...trigger === 'press' ? pressProps : longPressProps,
                id: menuTriggerId,
                onKeyDown: onKeyDown
            },
            menuProps: {
                ...overlayProps,
                'aria-labelledby': menuTriggerId,
                autoFocus: state.focusStrategy || true,
                onClose: state.close
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 






    function $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {
        let { inputElementType: inputElementType = 'input', isDisabled: isDisabled = false, isRequired: isRequired = false, isReadOnly: isReadOnly = false, type: type = 'text', validationBehavior: validationBehavior = 'aria' } = props;
        let [value, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || '', props.onChange);
        let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
        let validationState = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: value
        });
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = validationState.displayValidation;
        let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
            ...props,
            isInvalid: isInvalid,
            errorMessage: props.errorMessage || validationErrors
        });
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            labelable: true
        });
        const inputOnlyProps = {
            type: type,
            pattern: props.pattern
        };
        ($99facab73266f662$export$5add1d006293d136)(ref, value, setValue);
        ($e93e671b31057976$export$b8473d3665f3a75a)(props, validationState, ref);
        (0, wp.element.useEffect)(()=>{
            // This works around a React/Chrome bug that prevents textarea elements from validating when controlled.
            // We prevent React from updating defaultValue (i.e. children) of textarea when `value` changes,
            // which causes Chrome to skip validation. Only updating `value` is ok in our case since our
            // textareas are always controlled. React is planning on removing this synchronization in a
            // future major version.
            // https://github.com/facebook/react/issues/19474
            // https://github.com/facebook/react/issues/11896
            if (ref.current instanceof ($431fbd86ca7dc216$export$f21a1ffae260145a)(ref.current).HTMLTextAreaElement) {
                let input = ref.current;
                Object.defineProperty(input, 'defaultValue', {
                    get: ()=>input.value,
                    set: ()=>{},
                    configurable: true
                });
            }
        }, [
            ref
        ]);
        return {
            labelProps: labelProps,
            inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, inputElementType === 'input' && inputOnlyProps, {
                disabled: isDisabled,
                readOnly: isReadOnly,
                required: isRequired && validationBehavior === 'native',
                'aria-required': isRequired && validationBehavior === 'aria' || undefined,
                'aria-invalid': isInvalid || undefined,
                'aria-errormessage': props['aria-errormessage'],
                'aria-activedescendant': props['aria-activedescendant'],
                'aria-autocomplete': props['aria-autocomplete'],
                'aria-haspopup': props['aria-haspopup'],
                value: value,
                onChange: (e)=>setValue(e.target.value),
                autoComplete: props.autoComplete,
                autoCapitalize: props.autoCapitalize,
                maxLength: props.maxLength,
                minLength: props.minLength,
                name: props.name,
                placeholder: props.placeholder,
                inputMode: props.inputMode,
                // Clipboard events
                onCopy: props.onCopy,
                onCut: props.onCut,
                onPaste: props.onPaste,
                // Composition events
                onCompositionEnd: props.onCompositionEnd,
                onCompositionStart: props.onCompositionStart,
                onCompositionUpdate: props.onCompositionUpdate,
                // Selection events
                onSelect: props.onSelect,
                // Input events
                onBeforeInput: props.onBeforeInput,
                onInput: props.onInput,
                ...focusableProps,
                ...fieldProps
            }),
            descriptionProps: descriptionProps,
            errorMessageProps: errorMessageProps,
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    /*
     * Copyright 2021 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $d841c8010a73d545$var$supportsNativeBeforeInputEvent() {
        return typeof window !== 'undefined' && window.InputEvent && // @ts-ignore
        typeof InputEvent.prototype.getTargetRanges === 'function';
    }
    function $d841c8010a73d545$export$4f384c9210e583c3(props, state, inputRef) {
        // All browsers implement the 'beforeinput' event natively except Firefox
        // (currently behind a flag as of Firefox 84). React's polyfill does not
        // run in all cases that the native event fires, e.g. when deleting text.
        // Use the native event if available so that we can prevent invalid deletions.
        // We do not attempt to polyfill this in Firefox since it would be very complicated,
        // the benefit of doing so is fairly minor, and it's going to be natively supported soon.
        let onBeforeInputFallback = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
            let input = inputRef.current;
            // Compute the next value of the input if the event is allowed to proceed.
            // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.
            let nextValue;
            switch(e.inputType){
                case 'historyUndo':
                case 'historyRedo':
                    // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,
                    // because presumably the input would have already been validated previously.
                    return;
                case 'insertLineBreak':
                    // Explicitly allow "insertLineBreak" event, to allow onSubmit for "enter" key. e.data is null in this case.
                    return;
                case 'deleteContent':
                case 'deleteByCut':
                case 'deleteByDrag':
                    nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                    break;
                case 'deleteContentForward':
                    // This is potentially incorrect, since the browser may actually delete more than a single UTF-16
                    // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters
                    // or code points may be deleted. However, in our currently supported locales, there are no such cases.
                    // If we support additional locales in the future, this may need to change.
                    nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                    break;
                case 'deleteContentBackward':
                    nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                    break;
                case 'deleteSoftLineBackward':
                case 'deleteHardLineBackward':
                    nextValue = input.value.slice(input.selectionStart);
                    break;
                default:
                    if (e.data != null) nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);
                    break;
            }
            // If we did not compute a value, or the new value is invalid, prevent the event
            // so that the browser does not update the input text, move the selection, or add to
            // the undo/redo stack.
            if (nextValue == null || !state.validate(nextValue)) e.preventDefault();
        });
        (0, wp.element.useEffect)(()=>{
            if (!$d841c8010a73d545$var$supportsNativeBeforeInputEvent()) return;
            let input = inputRef.current;
            input.addEventListener('beforeinput', onBeforeInputFallback, false);
            return ()=>{
                input.removeEventListener('beforeinput', onBeforeInputFallback, false);
            };
        }, [
            inputRef,
            onBeforeInputFallback
        ]);
        let onBeforeInput = !$d841c8010a73d545$var$supportsNativeBeforeInputEvent() ? (e)=>{
            let nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);
            if (!state.validate(nextValue)) e.preventDefault();
        } : null;
        let { labelProps: labelProps, inputProps: textFieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($2d73ec29415bd339$export$712718f7aec83d5)(props, inputRef);
        let compositionStartState = (0, wp.element.useRef)(null);
        return {
            inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(textFieldProps, {
                onBeforeInput: onBeforeInput,
                onCompositionStart () {
                    // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition
                    // and deleteByComposition inputType values for the beforeinput event. These are meant to occur
                    // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are
                    // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,
                    // nor would we want to cancel them because the input from the user is incomplete at that point.
                    // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel
                    // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either
                    // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when
                    // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.
                    // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition
                    // are implemented, there is no other way to prevent composed input.
                    // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204
                    let { value: value, selectionStart: selectionStart, selectionEnd: selectionEnd } = inputRef.current;
                    compositionStartState.current = {
                        value: value,
                        selectionStart: selectionStart,
                        selectionEnd: selectionEnd
                    };
                },
                onCompositionEnd () {
                    if (!state.validate(inputRef.current.value)) {
                        // Restore the input value in the DOM immediately so we can synchronously update the selection position.
                        // But also update the value in React state as well so it is correct for future updates.
                        let { value: value, selectionStart: selectionStart, selectionEnd: selectionEnd } = compositionStartState.current;
                        inputRef.current.value = value;
                        inputRef.current.setSelectionRange(selectionStart, selectionEnd);
                        state.setInputValue(value);
                    }
                }
            }),
            labelProps: labelProps,
            descriptionProps: descriptionProps,
            errorMessageProps: errorMessageProps,
            ...validation
        };
    }

    function $parcel$interopDefault$9(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 











    function $c350ade66beef0af$export$8c18d1b4f7232bbf(props, state) {
        let { buttonRef: buttonRef, popoverRef: popoverRef, inputRef: inputRef, listBoxRef: listBoxRef, keyboardDelegate: keyboardDelegate, shouldFocusWrap: // completionMode = 'suggest',
        shouldFocusWrap, isReadOnly: isReadOnly, isDisabled: isDisabled } = props;
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$9($de5926a92e8ebc5b$exports))), '@react-aria/combobox');
        let { menuTriggerProps: menuTriggerProps, menuProps: menuProps } = ($168583247155ddda$export$dc9c12ed27dd1b49)({
            type: 'listbox',
            isDisabled: isDisabled || isReadOnly
        }, state, buttonRef);
        // Set listbox id so it can be used when calling getItemId later
        ($b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {
            id: menuProps.id
        });
        // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
        // When virtualized, the layout object will be passed in as a prop and override this.
        let delegate = (0, wp.element.useMemo)(()=>keyboardDelegate || new ($2a25aae57d74318e$export$a05409b8bb224a5a)(state.collection, state.disabledKeys, listBoxRef), [
            keyboardDelegate,
            state.collection,
            state.disabledKeys,
            listBoxRef
        ]);
        // Use useSelectableCollection to get the keyboard handlers to apply to the textfield
        let { collectionProps: collectionProps } = ($ae20dd8cbca75726$export$d6daf82dcd84e87c)({
            selectionManager: state.selectionManager,
            keyboardDelegate: delegate,
            disallowTypeAhead: true,
            disallowEmptySelection: true,
            shouldFocusWrap: shouldFocusWrap,
            ref: inputRef,
            // Prevent item scroll behavior from being applied here, should be handled in the user's Popover + ListBox component
            isVirtualized: true
        });
        let router = ($ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
        // For textfield specific keydown operations
        let onKeyDown = (e)=>{
            switch(e.key){
                case 'Enter':
                case 'Tab':
                    // Prevent form submission if menu is open since we may be selecting a option
                    if (state.isOpen && e.key === 'Enter') e.preventDefault();
                    // If the focused item is a link, trigger opening it. Items that are links are not selectable.
                    if (state.isOpen && state.selectionManager.focusedKey != null && state.selectionManager.isLink(state.selectionManager.focusedKey)) {
                        if (e.key === 'Enter') {
                            let item = listBoxRef.current.querySelector(`[data-key="${CSS.escape(state.selectionManager.focusedKey.toString())}"]`);
                            if (item instanceof HTMLAnchorElement) {
                                let collectionItem = state.collection.getItem(state.selectionManager.focusedKey);
                                router.open(item, e, collectionItem.props.href, collectionItem.props.routerOptions);
                            }
                        }
                        state.close();
                    } else state.commit();
                    break;
                case 'Escape':
                    if (state.selectedKey !== null || state.inputValue === '' || props.allowsCustomValue) e.continuePropagation();
                    state.revert();
                    break;
                case 'ArrowDown':
                    state.open('first', 'manual');
                    break;
                case 'ArrowUp':
                    state.open('last', 'manual');
                    break;
                case 'ArrowLeft':
                case 'ArrowRight':
                    state.selectionManager.setFocusedKey(null);
                    break;
            }
        };
        let onBlur = (e)=>{
            var _popoverRef_current;
            let blurFromButton = (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) && buttonRef.current === e.relatedTarget;
            let blurIntoPopover = (_popoverRef_current = popoverRef.current) === null || _popoverRef_current === void 0 ? void 0 : _popoverRef_current.contains(e.relatedTarget);
            // Ignore blur if focused moved to the button(if exists) or into the popover.
            if (blurFromButton || blurIntoPopover) return;
            if (props.onBlur) props.onBlur(e);
            state.setFocused(false);
        };
        let onFocus = (e)=>{
            if (state.isFocused) return;
            if (props.onFocus) props.onFocus(e);
            state.setFocused(true);
        };
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
        let { labelProps: labelProps, inputProps: inputProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2d73ec29415bd339$export$712718f7aec83d5)({
            ...props,
            onChange: state.setInputValue,
            onKeyDown: !isReadOnly ? ($ff5963eb1fccf552$export$e08e3b67e392101e)(state.isOpen && collectionProps.onKeyDown, onKeyDown, props.onKeyDown) : props.onKeyDown,
            onBlur: onBlur,
            value: state.inputValue,
            onFocus: onFocus,
            autoComplete: 'off',
            validate: undefined,
            [($e5be200c675c3b3a$export$a763b9476acd3eb)]: state
        }, inputRef);
        // Press handlers for the ComboBox button
        let onPress = (e)=>{
            if (e.pointerType === 'touch') {
                // Focus the input field in case it isn't focused yet
                inputRef.current.focus();
                state.toggle(null, 'manual');
            }
        };
        let onPressStart = (e)=>{
            if (e.pointerType !== 'touch') {
                inputRef.current.focus();
                state.toggle(e.pointerType === 'keyboard' || e.pointerType === 'virtual' ? 'first' : null, 'manual');
            }
        };
        let triggerLabelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            id: menuTriggerProps.id,
            'aria-label': stringFormatter.format('buttonLabel'),
            'aria-labelledby': props['aria-labelledby'] || labelProps.id
        });
        let listBoxProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            id: menuProps.id,
            'aria-label': stringFormatter.format('listboxLabel'),
            'aria-labelledby': props['aria-labelledby'] || labelProps.id
        });
        // If a touch happens on direct center of ComboBox input, might be virtual click from iPad so open ComboBox menu
        let lastEventTime = (0, wp.element.useRef)(0);
        let onTouchEnd = (e)=>{
            if (isDisabled || isReadOnly) return;
            // Sometimes VoiceOver on iOS fires two touchend events in quick succession. Ignore the second one.
            if (e.timeStamp - lastEventTime.current < 500) {
                e.preventDefault();
                inputRef.current.focus();
                return;
            }
            let rect = e.target.getBoundingClientRect();
            let touch = e.changedTouches[0];
            let centerX = Math.ceil(rect.left + .5 * rect.width);
            let centerY = Math.ceil(rect.top + .5 * rect.height);
            if (touch.clientX === centerX && touch.clientY === centerY) {
                e.preventDefault();
                inputRef.current.focus();
                state.toggle(null, 'manual');
                lastEventTime.current = e.timeStamp;
            }
        };
        // VoiceOver has issues with announcing aria-activedescendant properly on change
        // (especially on iOS). We use a live region announcer to announce focus changes
        // manually. In addition, section titles are announced when navigating into a new section.
        let focusedItem = state.selectionManager.focusedKey != null && state.isOpen ? state.collection.getItem(state.selectionManager.focusedKey) : undefined;
        var _focusedItem_parentKey;
        let sectionKey = (_focusedItem_parentKey = focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.parentKey) !== null && _focusedItem_parentKey !== void 0 ? _focusedItem_parentKey : null;
        var _state_selectionManager_focusedKey;
        let itemKey = (_state_selectionManager_focusedKey = state.selectionManager.focusedKey) !== null && _state_selectionManager_focusedKey !== void 0 ? _state_selectionManager_focusedKey : null;
        let lastSection = (0, wp.element.useRef)(sectionKey);
        let lastItem = (0, wp.element.useRef)(itemKey);
        (0, wp.element.useEffect)(()=>{
            if (($c87311424ea30a05$export$e1865c3bedcd822b)() && focusedItem != null && itemKey !== lastItem.current) {
                let isSelected = state.selectionManager.isSelected(itemKey);
                let section = sectionKey != null ? state.collection.getItem(sectionKey) : null;
                let sectionTitle = (section === null || section === void 0 ? void 0 : section['aria-label']) || (typeof (section === null || section === void 0 ? void 0 : section.rendered) === 'string' ? section.rendered : '') || '';
                let announcement = stringFormatter.format('focusAnnouncement', {
                    isGroupChange: section && sectionKey !== lastSection.current,
                    groupTitle: sectionTitle,
                    groupCount: section ? [
                        ...($c5a24bc478652b5f$export$1005530eda016c13)(section, state.collection)
                    ].length : 0,
                    optionText: focusedItem['aria-label'] || focusedItem.textValue || '',
                    isSelected: isSelected
                });
                ($319e236875307eab$export$a9b970dcc4ae71a9)(announcement);
            }
            lastSection.current = sectionKey;
            lastItem.current = itemKey;
        });
        // Announce the number of available suggestions when it changes
        let optionCount = ($453cc9f0df89c0a5$export$77d5aafae4e095b2)(state.collection);
        let lastSize = (0, wp.element.useRef)(optionCount);
        let lastOpen = (0, wp.element.useRef)(state.isOpen);
        (0, wp.element.useEffect)(()=>{
            // Only announce the number of options available when the menu opens if there is no
            // focused item, otherwise screen readers will typically read e.g. "1 of 6".
            // The exception is VoiceOver since this isn't included in the message above.
            let didOpenWithoutFocusedItem = state.isOpen !== lastOpen.current && (state.selectionManager.focusedKey == null || ($c87311424ea30a05$export$e1865c3bedcd822b)());
            if (state.isOpen && (didOpenWithoutFocusedItem || optionCount !== lastSize.current)) {
                let announcement = stringFormatter.format('countAnnouncement', {
                    optionCount: optionCount
                });
                ($319e236875307eab$export$a9b970dcc4ae71a9)(announcement);
            }
            lastSize.current = optionCount;
            lastOpen.current = state.isOpen;
        });
        // Announce when a selection occurs for VoiceOver. Other screen readers typically do this automatically.
        let lastSelectedKey = (0, wp.element.useRef)(state.selectedKey);
        (0, wp.element.useEffect)(()=>{
            if (($c87311424ea30a05$export$e1865c3bedcd822b)() && state.isFocused && state.selectedItem && state.selectedKey !== lastSelectedKey.current) {
                let optionText = state.selectedItem['aria-label'] || state.selectedItem.textValue || '';
                let announcement = stringFormatter.format('selectedAnnouncement', {
                    optionText: optionText
                });
                ($319e236875307eab$export$a9b970dcc4ae71a9)(announcement);
            }
            lastSelectedKey.current = state.selectedKey;
        });
        (0, wp.element.useEffect)(()=>{
            if (state.isOpen) return ($5e3802645cc19319$export$1c3ebcada18427bf)([
                inputRef.current,
                popoverRef.current
            ]);
        }, [
            state.isOpen,
            inputRef,
            popoverRef
        ]);
        return {
            labelProps: labelProps,
            buttonProps: {
                ...menuTriggerProps,
                ...triggerLabelProps,
                excludeFromTabOrder: true,
                onPress: onPress,
                onPressStart: onPressStart,
                isDisabled: isDisabled || isReadOnly
            },
            inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(inputProps, {
                role: 'combobox',
                'aria-expanded': menuTriggerProps['aria-expanded'],
                'aria-controls': state.isOpen ? menuProps.id : undefined,
                // TODO: readd proper logic for completionMode = complete (aria-autocomplete: both)
                'aria-autocomplete': 'list',
                'aria-activedescendant': focusedItem ? ($b1f0cad8af73213b$export$9145995848b05025)(state, focusedItem.key) : undefined,
                onTouchEnd: onTouchEnd,
                // This disable's iOS's autocorrect suggestions, since the combo box provides its own suggestions.
                autoCorrect: 'off',
                // This disable's the macOS Safari spell check auto corrections.
                spellCheck: 'false'
            }),
            listBoxProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(menuProps, listBoxProps, {
                autoFocus: state.focusStrategy,
                shouldUseVirtualFocus: true,
                shouldSelectOnPressUp: true,
                shouldFocusOnHover: true,
                linkBehavior: 'selection'
            }),
            descriptionProps: descriptionProps,
            errorMessageProps: errorMessageProps,
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    var $f23889fffbde9058$exports = {};
    $f23889fffbde9058$exports = {
        "calendar": `\u{627}\u{644}\u{62A}\u{642}\u{648}\u{64A}\u{645}`,
        "day": `\u{64A}\u{648}\u{645}`,
        "dayPeriod": `\u{635}/\u{645}`,
        "endDate": `\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{627}\u{644}\u{627}\u{646}\u{62A}\u{647}\u{627}\u{621}`,
        "era": `\u{627}\u{644}\u{639}\u{635}\u{631}`,
        "hour": `\u{627}\u{644}\u{633}\u{627}\u{639}\u{627}\u{62A}`,
        "minute": `\u{627}\u{644}\u{62F}\u{642}\u{627}\u{626}\u{642}`,
        "month": `\u{627}\u{644}\u{634}\u{647}\u{631}`,
        "second": `\u{627}\u{644}\u{62B}\u{648}\u{627}\u{646}\u{64A}`,
        "selectedDateDescription": (args)=>`\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{645}\u{62D}\u{62F}\u{62F}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{627}\u{644}\u{645}\u{62F}\u{649} \u{627}\u{644}\u{632}\u{645}\u{646}\u{64A} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}: ${args.startDate} \u{625}\u{644}\u{649} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{627}\u{644}\u{648}\u{642}\u{62A} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}: ${args.time}`,
        "startDate": `\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{627}\u{644}\u{628}\u{62F}\u{621}`,
        "timeZoneName": `\u{627}\u{644}\u{62A}\u{648}\u{642}\u{64A}\u{62A}`,
        "weekday": `\u{627}\u{644}\u{64A}\u{648}\u{645}`,
        "year": `\u{627}\u{644}\u{633}\u{646}\u{629}`
    };

    var $09d9badaa8903929$exports = {};
    $09d9badaa8903929$exports = {
        "calendar": `\u{41A}\u{430}\u{43B}\u{435}\u{43D}\u{434}\u{430}\u{440}`,
        "day": `\u{434}\u{435}\u{43D}`,
        "dayPeriod": `\u{43F}\u{440}.\u{43E}\u{431}./\u{441}\u{43B}.\u{43E}\u{431}.`,
        "endDate": `\u{41A}\u{440}\u{430}\u{439}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
        "era": `\u{435}\u{440}\u{430}`,
        "hour": `\u{447}\u{430}\u{441}`,
        "minute": `\u{43C}\u{438}\u{43D}\u{443}\u{442}\u{430}`,
        "month": `\u{43C}\u{435}\u{441}\u{435}\u{446}`,
        "second": `\u{441}\u{435}\u{43A}\u{443}\u{43D}\u{434}\u{430}`,
        "selectedDateDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.startDate} \u{434}\u{43E} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{43E} \u{432}\u{440}\u{435}\u{43C}\u{435}: ${args.time}`,
        "startDate": `\u{41D}\u{430}\u{447}\u{430}\u{43B}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
        "timeZoneName": `\u{447}\u{430}\u{441}\u{43E}\u{432}\u{430} \u{437}\u{43E}\u{43D}\u{430}`,
        "weekday": `\u{434}\u{435}\u{43D} \u{43E}\u{442} \u{441}\u{435}\u{434}\u{43C}\u{438}\u{446}\u{430}\u{442}\u{430}`,
        "year": `\u{433}\u{43E}\u{434}\u{438}\u{43D}\u{430}`
    };

    var $151b77e0fd711730$exports = {};
    $151b77e0fd711730$exports = {
        "calendar": `Kalend\xe1\u{159}`,
        "day": `den`,
        "dayPeriod": `\u{10D}\xe1st dne`,
        "endDate": `Kone\u{10D}n\xe9 datum`,
        "era": `letopo\u{10D}et`,
        "hour": `hodina`,
        "minute": `minuta`,
        "month": `m\u{11B}s\xedc`,
        "second": `sekunda`,
        "selectedDateDescription": (args)=>`Vybran\xe9 datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Vybran\xe9 obdob\xed: ${args.startDate} a\u{17E} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Vybran\xfd \u{10D}as: ${args.time}`,
        "startDate": `Po\u{10D}\xe1te\u{10D}n\xed datum`,
        "timeZoneName": `\u{10D}asov\xe9 p\xe1smo`,
        "weekday": `den v t\xfddnu`,
        "year": `rok`
    };

    var $61915aa8630b90a2$exports = {};
    $61915aa8630b90a2$exports = {
        "calendar": `Kalender`,
        "day": `dag`,
        "dayPeriod": `AM/PM`,
        "endDate": `Slutdato`,
        "era": `\xe6ra`,
        "hour": `time`,
        "minute": `minut`,
        "month": `m\xe5ned`,
        "second": `sekund`,
        "selectedDateDescription": (args)=>`Valgt dato: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valgt interval: ${args.startDate} til ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Valgt tidspunkt: ${args.time}`,
        "startDate": `Startdato`,
        "timeZoneName": `tidszone`,
        "weekday": `ugedag`,
        "year": `\xe5r`
    };

    var $35cea00159787840$exports = {};
    $35cea00159787840$exports = {
        "calendar": `Kalender`,
        "day": `Tag`,
        "dayPeriod": `Tagesh\xe4lfte`,
        "endDate": `Enddatum`,
        "era": `Epoche`,
        "hour": `Stunde`,
        "minute": `Minute`,
        "month": `Monat`,
        "second": `Sekunde`,
        "selectedDateDescription": (args)=>`Ausgew\xe4hltes Datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Ausgew\xe4hlter Bereich: ${args.startDate} bis ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Ausgew\xe4hlte Zeit: ${args.time}`,
        "startDate": `Anfangsdatum`,
        "timeZoneName": `Zeitzone`,
        "weekday": `Wochentag`,
        "year": `Jahr`
    };

    var $518b4e82b9eacafd$exports = {};
    $518b4e82b9eacafd$exports = {
        "calendar": `\u{397}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BB}\u{3CC}\u{3B3}\u{3B9}\u{3BF}`,
        "day": `\u{3B7}\u{3BC}\u{3AD}\u{3C1}\u{3B1}`,
        "dayPeriod": `\u{3C0}.\u{3BC}./\u{3BC}.\u{3BC}.`,
        "endDate": `\u{397}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3BB}\u{3AE}\u{3BE}\u{3B7}\u{3C2}`,
        "era": `\u{3C0}\u{3B5}\u{3C1}\u{3AF}\u{3BF}\u{3B4}\u{3BF}\u{3C2}`,
        "hour": `\u{3CE}\u{3C1}\u{3B1}`,
        "minute": `\u{3BB}\u{3B5}\u{3C0}\u{3C4}\u{3CC}`,
        "month": `\u{3BC}\u{3AE}\u{3BD}\u{3B1}\u{3C2}`,
        "second": `\u{3B4}\u{3B5}\u{3C5}\u{3C4}\u{3B5}\u{3C1}\u{3CC}\u{3BB}\u{3B5}\u{3C0}\u{3C4}\u{3BF}`,
        "selectedDateDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF} \u{3B5}\u{3CD}\u{3C1}\u{3BF}\u{3C2}: ${args.startDate} \u{3AD}\u{3C9}\u{3C2} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3CE}\u{3C1}\u{3B1}: ${args.time}`,
        "startDate": `\u{397}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3AD}\u{3BD}\u{3B1}\u{3C1}\u{3BE}\u{3B7}\u{3C2}`,
        "timeZoneName": `\u{3B6}\u{3CE}\u{3BD}\u{3B7} \u{3CE}\u{3C1}\u{3B1}\u{3C2}`,
        "weekday": `\u{3BA}\u{3B1}\u{3B8}\u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3B9}\u{3BD}\u{3AE}`,
        "year": `\u{3AD}\u{3C4}\u{3BF}\u{3C2}`
    };

    var $1c2b297f7e2cf474$exports = {};
    $1c2b297f7e2cf474$exports = {
        "era": `era`,
        "year": `year`,
        "month": `month`,
        "day": `day`,
        "hour": `hour`,
        "minute": `minute`,
        "second": `second`,
        "dayPeriod": `AM/PM`,
        "calendar": `Calendar`,
        "startDate": `Start Date`,
        "endDate": `End Date`,
        "weekday": `day of the week`,
        "timeZoneName": `time zone`,
        "selectedDateDescription": (args)=>`Selected Date: ${args.date}`,
        "selectedRangeDescription": (args)=>`Selected Range: ${args.startDate} to ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Selected Time: ${args.time}`
    };

    var $07f628a707cf9b18$exports = {};
    $07f628a707cf9b18$exports = {
        "calendar": `Calendario`,
        "day": `d\xeda`,
        "dayPeriod": `a.\xa0m./p.\xa0m.`,
        "endDate": `Fecha final`,
        "era": `era`,
        "hour": `hora`,
        "minute": `minuto`,
        "month": `mes`,
        "second": `segundo`,
        "selectedDateDescription": (args)=>`Fecha seleccionada: ${args.date}`,
        "selectedRangeDescription": (args)=>`Rango seleccionado: ${args.startDate} a ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Hora seleccionada: ${args.time}`,
        "startDate": `Fecha de inicio`,
        "timeZoneName": `zona horaria`,
        "weekday": `d\xeda de la semana`,
        "year": `a\xf1o`
    };

    var $db553ffe17c7f4db$exports = {};
    $db553ffe17c7f4db$exports = {
        "calendar": `Kalender`,
        "day": `p\xe4ev`,
        "dayPeriod": `enne/p\xe4rast l\xf5unat`,
        "endDate": `L\xf5ppkuup\xe4ev`,
        "era": `ajastu`,
        "hour": `tund`,
        "minute": `minut`,
        "month": `kuu`,
        "second": `sekund`,
        "selectedDateDescription": (args)=>`Valitud kuup\xe4ev: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valitud vahemik: ${args.startDate} kuni ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Valitud aeg: ${args.time}`,
        "startDate": `Alguskuup\xe4ev`,
        "timeZoneName": `ajav\xf6\xf6nd`,
        "weekday": `n\xe4dalap\xe4ev`,
        "year": `aasta`
    };

    var $4afcfe00cd703f83$exports = {};
    $4afcfe00cd703f83$exports = {
        "calendar": `Kalenteri`,
        "day": `p\xe4iv\xe4`,
        "dayPeriod": `vuorokaudenaika`,
        "endDate": `P\xe4\xe4ttymisp\xe4iv\xe4`,
        "era": `aikakausi`,
        "hour": `tunti`,
        "minute": `minuutti`,
        "month": `kuukausi`,
        "second": `sekunti`,
        "selectedDateDescription": (args)=>`Valittu p\xe4iv\xe4m\xe4\xe4r\xe4: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valittu aikav\xe4li: ${args.startDate} \u{2013} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Valittu aika: ${args.time}`,
        "startDate": `Alkamisp\xe4iv\xe4`,
        "timeZoneName": `aikavy\xf6hyke`,
        "weekday": `viikonp\xe4iv\xe4`,
        "year": `vuosi`
    };

    var $1d2645d18d4c5be0$exports = {};
    $1d2645d18d4c5be0$exports = {
        "calendar": `Calendrier`,
        "day": `jour`,
        "dayPeriod": `cadran`,
        "endDate": `Date de fin`,
        "era": `\xe8re`,
        "hour": `heure`,
        "minute": `minute`,
        "month": `mois`,
        "second": `seconde`,
        "selectedDateDescription": (args)=>`Date s\xe9lectionn\xe9e\xa0: ${args.date}`,
        "selectedRangeDescription": (args)=>`Plage s\xe9lectionn\xe9e\xa0: ${args.startDate} au ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Heure choisie\xa0: ${args.time}`,
        "startDate": `Date de d\xe9but`,
        "timeZoneName": `fuseau horaire`,
        "weekday": `jour de la semaine`,
        "year": `ann\xe9e`
    };

    var $64cb6a9be1f6fa48$exports = {};
    $64cb6a9be1f6fa48$exports = {
        "calendar": `\u{5DC}\u{5D5}\u{5D7} \u{5E9}\u{5E0}\u{5D4}`,
        "day": `\u{5D9}\u{5D5}\u{5DD}`,
        "dayPeriod": `\u{5DC}\u{5E4}\u{5E0}\u{5D4}\u{5F4}\u{5E6}/\u{5D0}\u{5D7}\u{5D4}\u{5F4}\u{5E6}`,
        "endDate": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E1}\u{5D9}\u{5D5}\u{5DD}`,
        "era": `\u{5EA}\u{5E7}\u{5D5}\u{5E4}\u{5D4}`,
        "hour": `\u{5E9}\u{5E2}\u{5D4}`,
        "minute": `\u{5D3}\u{5E7}\u{5D4}`,
        "month": `\u{5D7}\u{5D5}\u{5D3}\u{5E9}`,
        "second": `\u{5E9}\u{5E0}\u{5D9}\u{5D9}\u{5D4}`,
        "selectedDateDescription": (args)=>`\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{5D8}\u{5D5}\u{5D5}\u{5D7} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.startDate} \u{5E2}\u{5D3} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{5D6}\u{5DE}\u{5DF} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.time}`,
        "startDate": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5D4}\u{5EA}\u{5D7}\u{5DC}\u{5D4}`,
        "timeZoneName": `\u{5D0}\u{5D6}\u{5D5}\u{5E8} \u{5D6}\u{5DE}\u{5DF}`,
        "weekday": `\u{5D9}\u{5D5}\u{5DD} \u{5D1}\u{5E9}\u{5D1}\u{5D5}\u{5E2}`,
        "year": `\u{5E9}\u{5E0}\u{5D4}`
    };

    var $2a1ef2e8050be27a$exports = {};
    $2a1ef2e8050be27a$exports = {
        "calendar": `Kalendar`,
        "day": `dan`,
        "dayPeriod": `AM/PM`,
        "endDate": `Datum zavr\u{161}etka`,
        "era": `era`,
        "hour": `sat`,
        "minute": `minuta`,
        "month": `mjesec`,
        "second": `sekunda`,
        "selectedDateDescription": (args)=>`Odabrani datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Odabrani raspon: ${args.startDate} do ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Odabrano vrijeme: ${args.time}`,
        "startDate": `Datum po\u{10D}etka`,
        "timeZoneName": `vremenska zona`,
        "weekday": `dan u tjednu`,
        "year": `godina`
    };

    var $ad429dca102acd0e$exports = {};
    $ad429dca102acd0e$exports = {
        "calendar": `Napt\xe1r`,
        "day": `nap`,
        "dayPeriod": `napszak`,
        "endDate": `Befejez\u{151} d\xe1tum`,
        "era": `\xe9ra`,
        "hour": `\xf3ra`,
        "minute": `perc`,
        "month": `h\xf3nap`,
        "second": `m\xe1sodperc`,
        "selectedDateDescription": (args)=>`Kijel\xf6lt d\xe1tum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Kijel\xf6lt tartom\xe1ny: ${args.startDate}\u{2013}${args.endDate}`,
        "selectedTimeDescription": (args)=>`Kijel\xf6lt id\u{151}: ${args.time}`,
        "startDate": `Kezd\u{151} d\xe1tum`,
        "timeZoneName": `id\u{151}z\xf3na`,
        "weekday": `h\xe9t napja`,
        "year": `\xe9v`
    };

    var $6e68cb5d1cb97bd2$exports = {};
    $6e68cb5d1cb97bd2$exports = {
        "calendar": `Calendario`,
        "day": `giorno`,
        "dayPeriod": `AM/PM`,
        "endDate": `Data finale`,
        "era": `era`,
        "hour": `ora`,
        "minute": `minuto`,
        "month": `mese`,
        "second": `secondo`,
        "selectedDateDescription": (args)=>`Data selezionata: ${args.date}`,
        "selectedRangeDescription": (args)=>`Intervallo selezionato: da ${args.startDate} a ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Ora selezionata: ${args.time}`,
        "startDate": `Data iniziale`,
        "timeZoneName": `fuso orario`,
        "weekday": `giorno della settimana`,
        "year": `anno`
    };

    var $a82ee9af063ee069$exports = {};
    $a82ee9af063ee069$exports = {
        "calendar": `\u{30AB}\u{30EC}\u{30F3}\u{30C0}\u{30FC}`,
        "day": `\u{65E5}`,
        "dayPeriod": `\u{5348}\u{524D}/\u{5348}\u{5F8C}`,
        "endDate": `\u{7D42}\u{4E86}\u{65E5}`,
        "era": `\u{6642}\u{4EE3}`,
        "hour": `\u{6642}`,
        "minute": `\u{5206}`,
        "month": `\u{6708}`,
        "second": `\u{79D2}`,
        "selectedDateDescription": (args)=>`\u{9078}\u{629E}\u{3057}\u{305F}\u{65E5}\u{4ED8} : ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{9078}\u{629E}\u{7BC4}\u{56F2} : ${args.startDate} \u{304B}\u{3089} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{9078}\u{629E}\u{3057}\u{305F}\u{6642}\u{9593} : ${args.time}`,
        "startDate": `\u{958B}\u{59CB}\u{65E5}`,
        "timeZoneName": `\u{30BF}\u{30A4}\u{30E0}\u{30BE}\u{30FC}\u{30F3}`,
        "weekday": `\u{66DC}\u{65E5}`,
        "year": `\u{5E74}`
    };

    var $67e9091dbf37d4eb$exports = {};
    $67e9091dbf37d4eb$exports = {
        "calendar": `\u{B2EC}\u{B825}`,
        "day": `\u{C77C}`,
        "dayPeriod": `\u{C624}\u{C804}/\u{C624}\u{D6C4}`,
        "endDate": `\u{C885}\u{B8CC}\u{C77C}`,
        "era": `\u{C5F0}\u{D638}`,
        "hour": `\u{C2DC}`,
        "minute": `\u{BD84}`,
        "month": `\u{C6D4}`,
        "second": `\u{CD08}`,
        "selectedDateDescription": (args)=>`\u{C120}\u{D0DD} \u{C77C}\u{C790}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{C120}\u{D0DD} \u{BC94}\u{C704}: ${args.startDate} ~ ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{C120}\u{D0DD} \u{C2DC}\u{AC04}: ${args.time}`,
        "startDate": `\u{C2DC}\u{C791}\u{C77C}`,
        "timeZoneName": `\u{C2DC}\u{AC04}\u{B300}`,
        "weekday": `\u{C694}\u{C77C}`,
        "year": `\u{B144}`
    };

    var $75834f9729f653d1$exports = {};
    $75834f9729f653d1$exports = {
        "calendar": `Kalendorius`,
        "day": `diena`,
        "dayPeriod": `iki piet\u{173} / po piet\u{173}`,
        "endDate": `Pabaigos data`,
        "era": `era`,
        "hour": `valanda`,
        "minute": `minut\u{117}`,
        "month": `m\u{117}nuo`,
        "second": `sekund\u{117}`,
        "selectedDateDescription": (args)=>`Pasirinkta data: ${args.date}`,
        "selectedRangeDescription": (args)=>`Pasirinktas intervalas: nuo ${args.startDate} iki ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Pasirinktas laikas: ${args.time}`,
        "startDate": `Prad\u{17E}ios data`,
        "timeZoneName": `laiko juosta`,
        "weekday": `savait\u{117}s diena`,
        "year": `metai`
    };

    var $a2df2c2520b4a7f0$exports = {};
    $a2df2c2520b4a7f0$exports = {
        "calendar": `Kalend\u{101}rs`,
        "day": `diena`,
        "dayPeriod": `priek\u{161}pusdien\u{101}/p\u{113}cpusdien\u{101}`,
        "endDate": `Beigu datums`,
        "era": `\u{113}ra`,
        "hour": `stundas`,
        "minute": `min\u{16B}tes`,
        "month": `m\u{113}nesis`,
        "second": `sekundes`,
        "selectedDateDescription": (args)=>`Atlas\u{12B}tais datums: ${args.date}`,
        "selectedRangeDescription": (args)=>`Atlas\u{12B}tais diapazons: no ${args.startDate} l\u{12B}dz ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Atlas\u{12B}tais laiks: ${args.time}`,
        "startDate": `S\u{101}kuma datums`,
        "timeZoneName": `laika josla`,
        "weekday": `ned\u{113}\u{13C}as diena`,
        "year": `gads`
    };

    var $aedcd71db4933ed5$exports = {};
    $aedcd71db4933ed5$exports = {
        "calendar": `Kalender`,
        "day": `dag`,
        "dayPeriod": `a.m./p.m.`,
        "endDate": `Sluttdato`,
        "era": `tidsalder`,
        "hour": `time`,
        "minute": `minutt`,
        "month": `m\xe5ned`,
        "second": `sekund`,
        "selectedDateDescription": (args)=>`Valgt dato: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valgt omr\xe5de: ${args.startDate} til ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Valgt tid: ${args.time}`,
        "startDate": `Startdato`,
        "timeZoneName": `tidssone`,
        "weekday": `ukedag`,
        "year": `\xe5r`
    };

    var $3b2df9e54353046c$exports = {};
    $3b2df9e54353046c$exports = {
        "calendar": `Kalender`,
        "day": `dag`,
        "dayPeriod": `a.m./p.m.`,
        "endDate": `Einddatum`,
        "era": `tijdperk`,
        "hour": `uur`,
        "minute": `minuut`,
        "month": `maand`,
        "second": `seconde`,
        "selectedDateDescription": (args)=>`Geselecteerde datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Geselecteerd bereik: ${args.startDate} tot ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Geselecteerde tijd: ${args.time}`,
        "startDate": `Startdatum`,
        "timeZoneName": `tijdzone`,
        "weekday": `dag van de week`,
        "year": `jaar`
    };

    var $c03fe977fcfafe93$exports = {};
    $c03fe977fcfafe93$exports = {
        "calendar": `Kalendarz`,
        "day": `dzie\u{144}`,
        "dayPeriod": `rano / po po\u{142}udniu / wieczorem`,
        "endDate": `Data ko\u{144}cowa`,
        "era": `era`,
        "hour": `godzina`,
        "minute": `minuta`,
        "month": `miesi\u{105}c`,
        "second": `sekunda`,
        "selectedDateDescription": (args)=>`Wybrana data: ${args.date}`,
        "selectedRangeDescription": (args)=>`Wybrany zakres: ${args.startDate} do ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Wybrany czas: ${args.time}`,
        "startDate": `Data pocz\u{105}tkowa`,
        "timeZoneName": `strefa czasowa`,
        "weekday": `dzie\u{144} tygodnia`,
        "year": `rok`
    };

    var $569f006fc292345f$exports = {};
    $569f006fc292345f$exports = {
        "calendar": `Calend\xe1rio`,
        "day": `dia`,
        "dayPeriod": `AM/PM`,
        "endDate": `Data final`,
        "era": `era`,
        "hour": `hora`,
        "minute": `minuto`,
        "month": `m\xeas`,
        "second": `segundo`,
        "selectedDateDescription": (args)=>`Data selecionada: ${args.date}`,
        "selectedRangeDescription": (args)=>`Intervalo selecionado: ${args.startDate} a ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Hora selecionada: ${args.time}`,
        "startDate": `Data inicial`,
        "timeZoneName": `fuso hor\xe1rio`,
        "weekday": `dia da semana`,
        "year": `ano`
    };

    var $7c2494e14452f2dd$exports = {};
    $7c2494e14452f2dd$exports = {
        "calendar": `Calend\xe1rio`,
        "day": `dia`,
        "dayPeriod": `am/pm`,
        "endDate": `Data de T\xe9rmino`,
        "era": `era`,
        "hour": `hora`,
        "minute": `minuto`,
        "month": `m\xeas`,
        "second": `segundo`,
        "selectedDateDescription": (args)=>`Data selecionada: ${args.date}`,
        "selectedRangeDescription": (args)=>`Intervalo selecionado: ${args.startDate} a ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Hora selecionada: ${args.time}`,
        "startDate": `Data de In\xedcio`,
        "timeZoneName": `fuso hor\xe1rio`,
        "weekday": `dia da semana`,
        "year": `ano`
    };

    var $eb82ef981b5592bf$exports = {};
    $eb82ef981b5592bf$exports = {
        "calendar": `Calendar`,
        "day": `zi`,
        "dayPeriod": `a.m/p.m.`,
        "endDate": `Dat\u{103} final`,
        "era": `er\u{103}`,
        "hour": `or\u{103}`,
        "minute": `minut`,
        "month": `lun\u{103}`,
        "second": `secund\u{103}`,
        "selectedDateDescription": (args)=>`Dat\u{103} selectat\u{103}: ${args.date}`,
        "selectedRangeDescription": (args)=>`Interval selectat: de la ${args.startDate} p\xe2n\u{103} la ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Ora selectat\u{103}: ${args.time}`,
        "startDate": `Dat\u{103} \xeenceput`,
        "timeZoneName": `fus orar`,
        "weekday": `ziua din s\u{103}pt\u{103}m\xe2n\u{103}`,
        "year": `an`
    };

    var $6efa0e119f396950$exports = {};
    $6efa0e119f396950$exports = {
        "calendar": `\u{41A}\u{430}\u{43B}\u{435}\u{43D}\u{434}\u{430}\u{440}\u{44C}`,
        "day": `\u{434}\u{435}\u{43D}\u{44C}`,
        "dayPeriod": `AM/PM`,
        "endDate": `\u{414}\u{430}\u{442}\u{430} \u{43E}\u{43A}\u{43E}\u{43D}\u{447}\u{430}\u{43D}\u{438}\u{44F}`,
        "era": `\u{44D}\u{440}\u{430}`,
        "hour": `\u{447}\u{430}\u{441}`,
        "minute": `\u{43C}\u{438}\u{43D}\u{443}\u{442}\u{430}`,
        "month": `\u{43C}\u{435}\u{441}\u{44F}\u{446}`,
        "second": `\u{441}\u{435}\u{43A}\u{443}\u{43D}\u{434}\u{430}`,
        "selectedDateDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{439} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: \u{441} ${args.startDate} \u{43F}\u{43E} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{43E}\u{435} \u{432}\u{440}\u{435}\u{43C}\u{44F}: ${args.time}`,
        "startDate": `\u{414}\u{430}\u{442}\u{430} \u{43D}\u{430}\u{447}\u{430}\u{43B}\u{430}`,
        "timeZoneName": `\u{447}\u{430}\u{441}\u{43E}\u{432}\u{43E}\u{439} \u{43F}\u{43E}\u{44F}\u{441}`,
        "weekday": `\u{434}\u{435}\u{43D}\u{44C} \u{43D}\u{435}\u{434}\u{435}\u{43B}\u{438}`,
        "year": `\u{433}\u{43E}\u{434}`
    };

    var $7f5e57085d7f5049$exports = {};
    $7f5e57085d7f5049$exports = {
        "calendar": `Kalend\xe1r`,
        "day": `de\u{148}`,
        "dayPeriod": `AM/PM`,
        "endDate": `D\xe1tum ukon\u{10D}enia`,
        "era": `letopo\u{10D}et`,
        "hour": `hodina`,
        "minute": `min\xfata`,
        "month": `mesiac`,
        "second": `sekunda`,
        "selectedDateDescription": (args)=>`Vybrat\xfd d\xe1tum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Vybrat\xfd rozsah: od ${args.startDate} do ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Vybrat\xfd \u{10D}as: ${args.time}`,
        "startDate": `D\xe1tum za\u{10D}atia`,
        "timeZoneName": `\u{10D}asov\xe9 p\xe1smo`,
        "weekday": `de\u{148} t\xfd\u{17E}d\u{148}a`,
        "year": `rok`
    };

    var $578ee7c11dcdde7a$exports = {};
    $578ee7c11dcdde7a$exports = {
        "calendar": `Koledar`,
        "day": `dan`,
        "dayPeriod": `dop/pop`,
        "endDate": `Datum konca`,
        "era": `doba`,
        "hour": `ura`,
        "minute": `minuta`,
        "month": `mesec`,
        "second": `sekunda`,
        "selectedDateDescription": (args)=>`Izbrani datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Izbrano obmo\u{10D}je: ${args.startDate} do ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Izbrani \u{10D}as: ${args.time}`,
        "startDate": `Datum za\u{10D}etka`,
        "timeZoneName": `\u{10D}asovni pas`,
        "weekday": `dan v tednu`,
        "year": `leto`
    };

    var $bbc3fd6cd0bc9d50$exports = {};
    $bbc3fd6cd0bc9d50$exports = {
        "calendar": `Kalendar`,
        "day": `\u{434}\u{430}\u{43D}`,
        "dayPeriod": `\u{43F}\u{440}\u{435} \u{43F}\u{43E}\u{434}\u{43D}\u{435}/\u{43F}\u{43E} \u{43F}\u{43E}\u{434}\u{43D}\u{435}`,
        "endDate": `Datum zavr\u{161}etka`,
        "era": `\u{435}\u{440}\u{430}`,
        "hour": `\u{441}\u{430}\u{442}`,
        "minute": `\u{43C}\u{438}\u{43D}\u{443}\u{442}`,
        "month": `\u{43C}\u{435}\u{441}\u{435}\u{446}`,
        "second": `\u{441}\u{435}\u{43A}\u{443}\u{43D}\u{434}`,
        "selectedDateDescription": (args)=>`Izabrani datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Izabrani opseg: od ${args.startDate} do ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Izabrano vreme: ${args.time}`,
        "startDate": `Datum po\u{10D}etka`,
        "timeZoneName": `\u{432}\u{440}\u{435}\u{43C}\u{435}\u{43D}\u{441}\u{43A}\u{430} \u{437}\u{43E}\u{43D}\u{430}`,
        "weekday": `\u{434}\u{430}\u{43D} \u{443} \u{43D}\u{435}\u{434}\u{435}\u{459}\u{438}`,
        "year": `\u{433}\u{43E}\u{434}\u{438}\u{43D}\u{430}`
    };

    var $0b04512118591d2a$exports = {};
    $0b04512118591d2a$exports = {
        "calendar": `Kalender`,
        "day": `dag`,
        "dayPeriod": `fm/em`,
        "endDate": `Slutdatum`,
        "era": `era`,
        "hour": `timme`,
        "minute": `minut`,
        "month": `m\xe5nad`,
        "second": `sekund`,
        "selectedDateDescription": (args)=>`Valt datum: ${args.date}`,
        "selectedRangeDescription": (args)=>`Valt intervall: ${args.startDate} till ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Vald tid: ${args.time}`,
        "startDate": `Startdatum`,
        "timeZoneName": `tidszon`,
        "weekday": `veckodag`,
        "year": `\xe5r`
    };

    var $3a49d121fe4c9e1d$exports = {};
    $3a49d121fe4c9e1d$exports = {
        "calendar": `Takvim`,
        "day": `g\xfcn`,
        "dayPeriod": `\xd6\xd6/\xd6S`,
        "endDate": `Biti\u{15F} Tarihi`,
        "era": `\xe7a\u{11F}`,
        "hour": `saat`,
        "minute": `dakika`,
        "month": `ay`,
        "second": `saniye`,
        "selectedDateDescription": (args)=>`Se\xe7ilen Tarih: ${args.date}`,
        "selectedRangeDescription": (args)=>`Se\xe7ilen Aral\u{131}k: ${args.startDate} - ${args.endDate}`,
        "selectedTimeDescription": (args)=>`Se\xe7ilen Zaman: ${args.time}`,
        "startDate": `Ba\u{15F}lang\u{131}\xe7 Tarihi`,
        "timeZoneName": `saat dilimi`,
        "weekday": `haftan\u{131}n g\xfcn\xfc`,
        "year": `y\u{131}l`
    };

    var $5ba21dbb8914919d$exports = {};
    $5ba21dbb8914919d$exports = {
        "calendar": `\u{41A}\u{430}\u{43B}\u{435}\u{43D}\u{434}\u{430}\u{440}`,
        "day": `\u{434}\u{435}\u{43D}\u{44C}`,
        "dayPeriod": `\u{434}\u{43F}/\u{43F}\u{43F}`,
        "endDate": `\u{414}\u{430}\u{442}\u{430} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{435}\u{43D}\u{43D}\u{44F}`,
        "era": `\u{435}\u{440}\u{430}`,
        "hour": `\u{433}\u{43E}\u{434}\u{438}\u{43D}\u{430}`,
        "minute": `\u{445}\u{432}\u{438}\u{43B}\u{438}\u{43D}\u{430}`,
        "month": `\u{43C}\u{456}\u{441}\u{44F}\u{446}\u{44C}`,
        "second": `\u{441}\u{435}\u{43A}\u{443}\u{43D}\u{434}\u{430}`,
        "selectedDateDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
        "selectedRangeDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{434}\u{456}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.startDate} \u{2014} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{447}\u{430}\u{441}: ${args.time}`,
        "startDate": `\u{414}\u{430}\u{442}\u{430} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{43A}\u{443}`,
        "timeZoneName": `\u{447}\u{430}\u{441}\u{43E}\u{432}\u{438}\u{439} \u{43F}\u{43E}\u{44F}\u{441}`,
        "weekday": `\u{434}\u{435}\u{43D}\u{44C} \u{442}\u{438}\u{436}\u{43D}\u{44F}`,
        "year": `\u{440}\u{456}\u{43A}`
    };

    var $51078838e1b16cd7$exports = {};
    $51078838e1b16cd7$exports = {
        "calendar": `\u{65E5}\u{5386}`,
        "day": `\u{65E5}`,
        "dayPeriod": `\u{4E0A}\u{5348}/\u{4E0B}\u{5348}`,
        "endDate": `\u{7ED3}\u{675F}\u{65E5}\u{671F}`,
        "era": `\u{7EAA}\u{5143}`,
        "hour": `\u{5C0F}\u{65F6}`,
        "minute": `\u{5206}\u{949F}`,
        "month": `\u{6708}`,
        "second": `\u{79D2}`,
        "selectedDateDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{65E5}\u{671F}\u{FF1A}${args.date}`,
        "selectedRangeDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{8303}\u{56F4}\u{FF1A}${args.startDate} \u{81F3} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{65F6}\u{95F4}\u{FF1A}${args.time}`,
        "startDate": `\u{5F00}\u{59CB}\u{65E5}\u{671F}`,
        "timeZoneName": `\u{65F6}\u{533A}`,
        "weekday": `\u{5DE5}\u{4F5C}\u{65E5}`,
        "year": `\u{5E74}`
    };

    var $33fab8219207655a$exports = {};
    $33fab8219207655a$exports = {
        "calendar": `\u{65E5}\u{66C6}`,
        "day": `\u{65E5}`,
        "dayPeriod": `\u{4E0A}\u{5348}/\u{4E0B}\u{5348}`,
        "endDate": `\u{7D50}\u{675F}\u{65E5}\u{671F}`,
        "era": `\u{7EAA}\u{5143}`,
        "hour": `\u{5C0F}\u{65F6}`,
        "minute": `\u{5206}\u{949F}`,
        "month": `\u{6708}`,
        "second": `\u{79D2}`,
        "selectedDateDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{65E5}\u{671F}\u{FF1A}${args.date}`,
        "selectedRangeDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{7BC4}\u{570D}\u{FF1A}${args.startDate} \u{81F3} ${args.endDate}`,
        "selectedTimeDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{6642}\u{9593}\u{FF1A}${args.time}`,
        "startDate": `\u{958B}\u{59CB}\u{65E5}\u{671F}`,
        "timeZoneName": `\u{65F6}\u{533A}`,
        "weekday": `\u{5DE5}\u{4F5C}\u{65E5}`,
        "year": `\u{5E74}`
    };

    var $dfb4eba373ed9493$exports = {};


































    $dfb4eba373ed9493$exports = {
        "ar-AE": $f23889fffbde9058$exports,
        "bg-BG": $09d9badaa8903929$exports,
        "cs-CZ": $151b77e0fd711730$exports,
        "da-DK": $61915aa8630b90a2$exports,
        "de-DE": $35cea00159787840$exports,
        "el-GR": $518b4e82b9eacafd$exports,
        "en-US": $1c2b297f7e2cf474$exports,
        "es-ES": $07f628a707cf9b18$exports,
        "et-EE": $db553ffe17c7f4db$exports,
        "fi-FI": $4afcfe00cd703f83$exports,
        "fr-FR": $1d2645d18d4c5be0$exports,
        "he-IL": $64cb6a9be1f6fa48$exports,
        "hr-HR": $2a1ef2e8050be27a$exports,
        "hu-HU": $ad429dca102acd0e$exports,
        "it-IT": $6e68cb5d1cb97bd2$exports,
        "ja-JP": $a82ee9af063ee069$exports,
        "ko-KR": $67e9091dbf37d4eb$exports,
        "lt-LT": $75834f9729f653d1$exports,
        "lv-LV": $a2df2c2520b4a7f0$exports,
        "nb-NO": $aedcd71db4933ed5$exports,
        "nl-NL": $3b2df9e54353046c$exports,
        "pl-PL": $c03fe977fcfafe93$exports,
        "pt-BR": $569f006fc292345f$exports,
        "pt-PT": $7c2494e14452f2dd$exports,
        "ro-RO": $eb82ef981b5592bf$exports,
        "ru-RU": $6efa0e119f396950$exports,
        "sk-SK": $7f5e57085d7f5049$exports,
        "sl-SI": $578ee7c11dcdde7a$exports,
        "sr-SP": $bbc3fd6cd0bc9d50$exports,
        "sv-SE": $0b04512118591d2a$exports,
        "tr-TR": $3a49d121fe4c9e1d$exports,
        "uk-UA": $5ba21dbb8914919d$exports,
        "zh-CN": $51078838e1b16cd7$exports,
        "zh-TW": $33fab8219207655a$exports
    };

    function $3dfb0f96be0d6a08$export$4a931266a3838b86(state, ref, disableArrowNavigation) {
        let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let focusManager = (0, wp.element.useMemo)(()=>($9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
            ref
        ]);
        // Open the popover on alt + arrow down
        let onKeyDown = (e)=>{
            if (!e.currentTarget.contains(e.target)) return;
            if (e.altKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp') && 'setOpen' in state) {
                e.preventDefault();
                e.stopPropagation();
                state.setOpen(true);
            }
            if (disableArrowNavigation) return;
            switch(e.key){
                case 'ArrowLeft':
                    e.preventDefault();
                    e.stopPropagation();
                    if (direction === 'rtl') focusManager.focusNext();
                    else focusManager.focusPrevious();
                    break;
                case 'ArrowRight':
                    e.preventDefault();
                    e.stopPropagation();
                    if (direction === 'rtl') focusManager.focusPrevious();
                    else focusManager.focusNext();
                    break;
            }
        };
        // Focus the first placeholder segment from the end on mouse down/touch up in the field.
        let focusLast = ()=>{
            var _window_event;
            // Try to find the segment prior to the element that was clicked on.
            let target = (_window_event = window.event) === null || _window_event === void 0 ? void 0 : _window_event.target;
            let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
                tabbable: true
            });
            if (target) {
                walker.currentNode = target;
                target = walker.previousNode();
            }
            // If no target found, find the last element from the end.
            if (!target) {
                let last;
                do {
                    last = walker.lastChild();
                    if (last) target = last;
                }while (last);
            }
            // Now go backwards until we find an element that is not a placeholder.
            while(target === null || target === void 0 ? void 0 : target.hasAttribute('data-placeholder')){
                let prev = walker.previousNode();
                if (prev && prev.hasAttribute('data-placeholder')) target = prev;
                else break;
            }
            if (target) target.focus();
        };
        let { pressProps: pressProps } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
            preventFocusOnPress: true,
            allowTextSelectionOnPress: true,
            onPressStart (e) {
                if (e.pointerType === 'mouse') focusLast();
            },
            onPress (e) {
                if (e.pointerType !== 'mouse') focusLast();
            }
        });
        return ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, {
            onKeyDown: onKeyDown
        });
    }

    function $parcel$interopDefault$8(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 








    const $16f0b7bb276bc17e$export$653eddfc964b0f8a = new WeakMap();
    const $16f0b7bb276bc17e$export$300019f83c56d282 = '__role_' + Date.now();
    const $16f0b7bb276bc17e$export$7b3062cd49e80452 = '__focusManager_' + Date.now();
    function $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref) {
        var _state_value;
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
        let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
            ...props,
            labelElementType: 'span',
            isInvalid: isInvalid,
            errorMessage: props.errorMessage || validationErrors
        });
        let valueOnFocus = (0, wp.element.useRef)(null);
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            ...props,
            onFocusWithin (e) {
                var _props_onFocus;
                valueOnFocus.current = state.value;
                (_props_onFocus = props.onFocus) === null || _props_onFocus === void 0 ? void 0 : _props_onFocus.call(props, e);
            },
            onBlurWithin: (e)=>{
                var _props_onBlur;
                state.confirmPlaceholder();
                if (state.value !== valueOnFocus.current) state.commitValidation();
                (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);
            },
            onFocusWithinChange: props.onFocusChange
        });
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$8($dfb4eba373ed9493$exports))), '@react-aria/datepicker');
        let message = state.maxGranularity === 'hour' ? 'selectedTimeDescription' : 'selectedDateDescription';
        let field = state.maxGranularity === 'hour' ? 'time' : 'date';
        let description = state.value ? stringFormatter.format(message, {
            [field]: state.formatValue({
                month: 'long'
            })
        }) : '';
        let descProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(description);
        // If within a date picker or date range picker, the date field will have role="presentation" and an aria-describedby
        // will be passed in that references the value (e.g. entire range). Otherwise, add the field's value description.
        let describedBy = props[$16f0b7bb276bc17e$export$300019f83c56d282] === 'presentation' ? fieldProps['aria-describedby'] : [
            descProps['aria-describedby'],
            fieldProps['aria-describedby']
        ].filter(Boolean).join(' ') || undefined;
        let propsFocusManager = props[$16f0b7bb276bc17e$export$7b3062cd49e80452];
        let focusManager = (0, wp.element.useMemo)(()=>propsFocusManager || ($9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
            propsFocusManager,
            ref
        ]);
        let groupProps = ($3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref, props[$16f0b7bb276bc17e$export$300019f83c56d282] === 'presentation');
        // Pass labels and other information to segments.
        $16f0b7bb276bc17e$export$653eddfc964b0f8a.set(state, {
            ariaLabel: props['aria-label'],
            ariaLabelledBy: [
                labelProps.id,
                props['aria-labelledby']
            ].filter(Boolean).join(' ') || undefined,
            ariaDescribedBy: describedBy,
            focusManager: focusManager
        });
        let autoFocusRef = (0, wp.element.useRef)(props.autoFocus);
        // When used within a date picker or date range picker, the field gets role="presentation"
        // rather than role="group". Since the date picker/date range picker already has a role="group"
        // with a label and description, and the segments are already labeled by this as well, this
        // avoids very verbose duplicate announcements.
        let fieldDOMProps;
        if (props[$16f0b7bb276bc17e$export$300019f83c56d282] === 'presentation') fieldDOMProps = {
            role: 'presentation'
        };
        else fieldDOMProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, {
            role: 'group',
            'aria-disabled': props.isDisabled || undefined,
            'aria-describedby': describedBy
        });
        (0, wp.element.useEffect)(()=>{
            if (autoFocusRef.current) focusManager.focusFirst();
            autoFocusRef.current = false;
        }, [
            focusManager
        ]);
        ($99facab73266f662$export$5add1d006293d136)(props.inputRef, state.value, state.setValue);
        ($e93e671b31057976$export$b8473d3665f3a75a)({
            ...props,
            focus () {
                focusManager.focusFirst();
            }
        }, state, props.inputRef);
        let inputProps = {
            type: 'hidden',
            name: props.name,
            value: ((_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.toString()) || ''
        };
        if (props.validationBehavior === 'native') {
            // Use a hidden <input type="text"> rather than <input type="hidden">
            // so that an empty value blocks HTML form submission when the field is required.
            inputProps.type = 'text';
            inputProps.hidden = true;
            inputProps.required = props.isRequired;
            // Ignore react warning.
            inputProps.onChange = ()=>{};
        }
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
        return {
            labelProps: {
                ...labelProps,
                onClick: ()=>{
                    focusManager.focusFirst();
                }
            },
            fieldProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, fieldDOMProps, groupProps, focusWithinProps, {
                onKeyDown (e) {
                    if (props.onKeyDown) props.onKeyDown(e);
                },
                onKeyUp (e) {
                    if (props.onKeyUp) props.onKeyUp(e);
                }
            }),
            inputProps: inputProps,
            descriptionProps: descriptionProps,
            errorMessageProps: errorMessageProps,
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    function $parcel$interopDefault$7(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 









    function $6057a3d2a53a12fd$export$42df105a73306d51(props, state, ref) {
        let buttonId = ($bdb11010cef70236$export$f680877a34711e37)();
        let dialogId = ($bdb11010cef70236$export$f680877a34711e37)();
        let fieldId = ($bdb11010cef70236$export$f680877a34711e37)();
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$7($dfb4eba373ed9493$exports))), '@react-aria/datepicker');
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
        let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
            ...props,
            labelElementType: 'span',
            isInvalid: isInvalid,
            errorMessage: props.errorMessage || validationErrors
        });
        let groupProps = ($3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);
        let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let date = state.formatValue(locale, {
            month: 'long'
        });
        let description = date ? stringFormatter.format('selectedDateDescription', {
            date: date
        }) : '';
        let descProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(description);
        let ariaDescribedBy = [
            descProps['aria-describedby'],
            fieldProps['aria-describedby']
        ].filter(Boolean).join(' ') || undefined;
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
        let focusManager = (0, wp.element.useMemo)(()=>($9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
            ref
        ]);
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            ...props,
            isDisabled: state.isOpen,
            onBlurWithin: props.onBlur,
            onFocusWithin: props.onFocus,
            onFocusWithinChange: props.onFocusChange
        });
        return {
            groupProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {
                role: 'group',
                'aria-disabled': props.isDisabled || null,
                'aria-labelledby': labelledBy,
                'aria-describedby': ariaDescribedBy,
                onKeyDown (e) {
                    if (state.isOpen) return;
                    if (props.onKeyDown) props.onKeyDown(e);
                },
                onKeyUp (e) {
                    if (state.isOpen) return;
                    if (props.onKeyUp) props.onKeyUp(e);
                }
            }),
            labelProps: {
                ...labelProps,
                onClick: ()=>{
                    focusManager.focusFirst();
                }
            },
            fieldProps: {
                ...fieldProps,
                id: fieldId,
                [($16f0b7bb276bc17e$export$300019f83c56d282)]: 'presentation',
                'aria-describedby': ariaDescribedBy,
                value: state.value,
                onChange: state.setValue,
                placeholderValue: props.placeholderValue,
                hideTimeZone: props.hideTimeZone,
                hourCycle: props.hourCycle,
                shouldForceLeadingZeros: props.shouldForceLeadingZeros,
                granularity: props.granularity,
                isDisabled: props.isDisabled,
                isReadOnly: props.isReadOnly,
                isRequired: props.isRequired,
                validationBehavior: props.validationBehavior,
                // DatePicker owns the validation state for the date field.
                [($e5be200c675c3b3a$export$a763b9476acd3eb)]: state,
                autoFocus: props.autoFocus,
                name: props.name
            },
            descriptionProps: descriptionProps,
            errorMessageProps: errorMessageProps,
            buttonProps: {
                ...descProps,
                id: buttonId,
                'aria-haspopup': 'dialog',
                'aria-label': stringFormatter.format('calendar'),
                'aria-labelledby': `${buttonId} ${labelledBy}`,
                'aria-describedby': ariaDescribedBy,
                'aria-expanded': state.isOpen,
                isDisabled: props.isDisabled || props.isReadOnly,
                onPress: ()=>state.setOpen(true)
            },
            dialogProps: {
                id: dialogId,
                'aria-labelledby': `${buttonId} ${labelledBy}`
            },
            calendarProps: {
                autoFocus: true,
                value: state.dateValue,
                onChange: state.setDateValue,
                minValue: props.minValue,
                maxValue: props.maxValue,
                isDisabled: props.isDisabled,
                isReadOnly: props.isReadOnly,
                isDateUnavailable: props.isDateUnavailable,
                defaultFocusedValue: state.dateValue ? undefined : props.placeholderValue,
                isInvalid: state.isInvalid,
                errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(' ')
            },
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    function $parcel$interopDefault$6(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ // @ts-ignore



    function $3aeceb3a64eb8358$export$d42c60378c8168f8() {
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let dictionary = ($fca6afa0e843324b$export$87b761675e8eaa10)((($parcel$interopDefault$6($dfb4eba373ed9493$exports))), '@react-aria/datepicker');
        return (0, wp.element.useMemo)(()=>{
            // Try to use Intl.DisplayNames if possible. It may be supported in browsers, but not support the dateTimeField
            // type as that was only added in v2. https://github.com/tc39/intl-displaynames-v2
            try {
                // @ts-ignore
                return new Intl.DisplayNames(locale, {
                    type: 'dateTimeField'
                });
            } catch (err) {
                return new $3aeceb3a64eb8358$var$DisplayNamesPolyfill(locale, dictionary);
            }
        }, [
            locale,
            dictionary
        ]);
    }
    class $3aeceb3a64eb8358$var$DisplayNamesPolyfill {
        of(field) {
            return this.dictionary.getStringForLocale(field, this.locale);
        }
        constructor(locale, dictionary){
            this.locale = locale;
            this.dictionary = dictionary;
        }
    }

    var $ed6aae4e5f766f1e$exports = {};
    $ed6aae4e5f766f1e$exports = {
        "Empty": `\u{641}\u{627}\u{631}\u{63A}`
    };

    var $38854e2b175151fa$exports = {};
    $38854e2b175151fa$exports = {
        "Empty": `\u{418}\u{437}\u{43F}\u{440}\u{430}\u{437}\u{43D}\u{438}`
    };

    var $15b25ab20f3945b2$exports = {};
    $15b25ab20f3945b2$exports = {
        "Empty": `Pr\xe1zdn\xe9`
    };

    var $692a4298b6b649a2$exports = {};
    $692a4298b6b649a2$exports = {
        "Empty": `Tom`
    };

    var $1c6e1539193f1243$exports = {};
    $1c6e1539193f1243$exports = {
        "Empty": `Leer`
    };

    var $1e8678632c464b6d$exports = {};
    $1e8678632c464b6d$exports = {
        "Empty": `\u{386}\u{3B4}\u{3B5}\u{3B9}\u{3BF}`
    };

    var $4adc85d9bf5b9eed$exports = {};
    $4adc85d9bf5b9eed$exports = {
        "Empty": `Empty`
    };

    var $41c4b2bb61dafbca$exports = {};
    $41c4b2bb61dafbca$exports = {
        "Empty": `Vac\xedo`
    };

    var $405f8b24f5dd2a60$exports = {};
    $405f8b24f5dd2a60$exports = {
        "Empty": `T\xfchjenda`
    };

    var $7efe3ed02b9b9dd4$exports = {};
    $7efe3ed02b9b9dd4$exports = {
        "Empty": `Tyhj\xe4`
    };

    var $99fc4c101d92daf3$exports = {};
    $99fc4c101d92daf3$exports = {
        "Empty": `Vide`
    };

    var $f9e155e6e8cacaa2$exports = {};
    $f9e155e6e8cacaa2$exports = {
        "Empty": `\u{5E8}\u{5D9}\u{5E7}`
    };

    var $c31b5e8e9a249fd5$exports = {};
    $c31b5e8e9a249fd5$exports = {
        "Empty": `Prazno`
    };

    var $9c5435bc17499bd9$exports = {};
    $9c5435bc17499bd9$exports = {
        "Empty": `\xdcres`
    };

    var $6d1fc8e84d8165e1$exports = {};
    $6d1fc8e84d8165e1$exports = {
        "Empty": `Vuoto`
    };

    var $46ea6b3641b83e71$exports = {};
    $46ea6b3641b83e71$exports = {
        "Empty": `\u{7A7A}`
    };

    var $0e3cc9a288289dc5$exports = {};
    $0e3cc9a288289dc5$exports = {
        "Empty": `\u{BE44}\u{C5B4} \u{C788}\u{C74C}`
    };

    var $4ff2bb25c0089ffb$exports = {};
    $4ff2bb25c0089ffb$exports = {
        "Empty": `Tu\u{161}\u{10D}ias`
    };

    var $6cf33cd4c010a2fb$exports = {};
    $6cf33cd4c010a2fb$exports = {
        "Empty": `Tuk\u{161}s`
    };

    var $5a9f8486f8b8837e$exports = {};
    $5a9f8486f8b8837e$exports = {
        "Empty": `Tom`
    };

    var $583f94d807f6ecea$exports = {};
    $583f94d807f6ecea$exports = {
        "Empty": `Leeg`
    };

    var $cc4dcfeea2b4050d$exports = {};
    $cc4dcfeea2b4050d$exports = {
        "Empty": `Pusty`
    };

    var $68ac2954d56e12b4$exports = {};
    $68ac2954d56e12b4$exports = {
        "Empty": `Vazio`
    };

    var $fdb0616f309780b0$exports = {};
    $fdb0616f309780b0$exports = {
        "Empty": `Vazio`
    };

    var $fe1eccf4ee1d6f52$exports = {};
    $fe1eccf4ee1d6f52$exports = {
        "Empty": `Gol`
    };

    var $a38b6c4e18725976$exports = {};
    $a38b6c4e18725976$exports = {
        "Empty": `\u{41D}\u{435} \u{437}\u{430}\u{43F}\u{43E}\u{43B}\u{43D}\u{435}\u{43D}\u{43E}`
    };

    var $6c14ae2b766b652c$exports = {};
    $6c14ae2b766b652c$exports = {
        "Empty": `Pr\xe1zdne`
    };

    var $8f1c9692e16dc5eb$exports = {};
    $8f1c9692e16dc5eb$exports = {
        "Empty": `Prazen`
    };

    var $d2aa7abea627cafa$exports = {};
    $d2aa7abea627cafa$exports = {
        "Empty": `Prazno`
    };

    var $676b82e4b56408e6$exports = {};
    $676b82e4b56408e6$exports = {
        "Empty": `Tomt`
    };

    var $14c9042552d7ce08$exports = {};
    $14c9042552d7ce08$exports = {
        "Empty": `Bo\u{15F}`
    };

    var $393254ebcb66c9f5$exports = {};
    $393254ebcb66c9f5$exports = {
        "Empty": `\u{41F}\u{443}\u{441}\u{442}\u{43E}`
    };

    var $d49d621f310cf6ce$exports = {};
    $d49d621f310cf6ce$exports = {
        "Empty": `\u{7A7A}`
    };

    var $94b60c866ca5dfe6$exports = {};
    $94b60c866ca5dfe6$exports = {
        "Empty": `\u{7A7A}\u{767D}`
    };

    var $a99895ee3dc79e61$exports = {};


































    $a99895ee3dc79e61$exports = {
        "ar-AE": $ed6aae4e5f766f1e$exports,
        "bg-BG": $38854e2b175151fa$exports,
        "cs-CZ": $15b25ab20f3945b2$exports,
        "da-DK": $692a4298b6b649a2$exports,
        "de-DE": $1c6e1539193f1243$exports,
        "el-GR": $1e8678632c464b6d$exports,
        "en-US": $4adc85d9bf5b9eed$exports,
        "es-ES": $41c4b2bb61dafbca$exports,
        "et-EE": $405f8b24f5dd2a60$exports,
        "fi-FI": $7efe3ed02b9b9dd4$exports,
        "fr-FR": $99fc4c101d92daf3$exports,
        "he-IL": $f9e155e6e8cacaa2$exports,
        "hr-HR": $c31b5e8e9a249fd5$exports,
        "hu-HU": $9c5435bc17499bd9$exports,
        "it-IT": $6d1fc8e84d8165e1$exports,
        "ja-JP": $46ea6b3641b83e71$exports,
        "ko-KR": $0e3cc9a288289dc5$exports,
        "lt-LT": $4ff2bb25c0089ffb$exports,
        "lv-LV": $6cf33cd4c010a2fb$exports,
        "nb-NO": $5a9f8486f8b8837e$exports,
        "nl-NL": $583f94d807f6ecea$exports,
        "pl-PL": $cc4dcfeea2b4050d$exports,
        "pt-BR": $68ac2954d56e12b4$exports,
        "pt-PT": $fdb0616f309780b0$exports,
        "ro-RO": $fe1eccf4ee1d6f52$exports,
        "ru-RU": $a38b6c4e18725976$exports,
        "sk-SK": $6c14ae2b766b652c$exports,
        "sl-SI": $8f1c9692e16dc5eb$exports,
        "sr-SP": $d2aa7abea627cafa$exports,
        "sv-SE": $676b82e4b56408e6$exports,
        "tr-TR": $14c9042552d7ce08$exports,
        "uk-UA": $393254ebcb66c9f5$exports,
        "zh-CN": $d49d621f310cf6ce$exports,
        "zh-TW": $94b60c866ca5dfe6$exports
    };

    function $parcel$interopDefault$5(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $d2e8511e6f209edf$export$e908e06f4b8e3402(props) {
        const _async = (0, wp.element.useRef)();
        let { value: value, textValue: textValue, minValue: minValue, maxValue: maxValue, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, onIncrement: onIncrement, onIncrementPage: onIncrementPage, onDecrement: onDecrement, onDecrementPage: onDecrementPage, onDecrementToMin: onDecrementToMin, onIncrementToMax: onIncrementToMax } = props;
        const stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$5($a99895ee3dc79e61$exports))), '@react-aria/spinbutton');
        const clearAsync = ()=>clearTimeout(_async.current);
        // eslint-disable-next-line arrow-body-style
        (0, wp.element.useEffect)(()=>{
            return ()=>clearAsync();
        }, []);
        let onKeyDown = (e)=>{
            if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) return;
            switch(e.key){
                case 'PageUp':
                    if (onIncrementPage) {
                        e.preventDefault();
                        onIncrementPage === null || onIncrementPage === void 0 ? void 0 : onIncrementPage();
                        break;
                    }
                // fallthrough!
                case 'ArrowUp':
                case 'Up':
                    if (onIncrement) {
                        e.preventDefault();
                        onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();
                    }
                    break;
                case 'PageDown':
                    if (onDecrementPage) {
                        e.preventDefault();
                        onDecrementPage === null || onDecrementPage === void 0 ? void 0 : onDecrementPage();
                        break;
                    }
                // fallthrough
                case 'ArrowDown':
                case 'Down':
                    if (onDecrement) {
                        e.preventDefault();
                        onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();
                    }
                    break;
                case 'Home':
                    if (onDecrementToMin) {
                        e.preventDefault();
                        onDecrementToMin === null || onDecrementToMin === void 0 ? void 0 : onDecrementToMin();
                    }
                    break;
                case 'End':
                    if (onIncrementToMax) {
                        e.preventDefault();
                        onIncrementToMax === null || onIncrementToMax === void 0 ? void 0 : onIncrementToMax();
                    }
                    break;
            }
        };
        let isFocused = (0, wp.element.useRef)(false);
        let onFocus = ()=>{
            isFocused.current = true;
        };
        let onBlur = ()=>{
            isFocused.current = false;
        };
        // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).
        // This ensures that macOS VoiceOver announces it as "minus" even with other characters between the minus sign
        // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.
        // In addition, replace the empty string with the word "Empty" so that iOS VoiceOver does not read "50%" for an empty field.
        let ariaTextValue = textValue === '' ? stringFormatter.format('Empty') : (textValue || `${value}`).replace('-', '\u2212');
        (0, wp.element.useEffect)(()=>{
            if (isFocused.current) {
                ($319e236875307eab$export$d10ae4f68404609a)('assertive');
                ($319e236875307eab$export$a9b970dcc4ae71a9)(ariaTextValue, 'assertive');
            }
        }, [
            ariaTextValue
        ]);
        const onIncrementPressStart = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((initialStepDelay)=>{
            clearAsync();
            onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();
            // Start spinning after initial delay
            _async.current = window.setTimeout(()=>{
                if (maxValue === undefined || isNaN(maxValue) || value === undefined || isNaN(value) || value < maxValue) onIncrementPressStart(60);
            }, initialStepDelay);
        });
        const onDecrementPressStart = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((initialStepDelay)=>{
            clearAsync();
            onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();
            // Start spinning after initial delay
            _async.current = window.setTimeout(()=>{
                if (minValue === undefined || isNaN(minValue) || value === undefined || isNaN(value) || value > minValue) onDecrementPressStart(60);
            }, initialStepDelay);
        });
        let cancelContextMenu = (e)=>{
            e.preventDefault();
        };
        let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
        return {
            spinButtonProps: {
                role: 'spinbutton',
                'aria-valuenow': value !== undefined && !isNaN(value) ? value : undefined,
                'aria-valuetext': ariaTextValue,
                'aria-valuemin': minValue,
                'aria-valuemax': maxValue,
                'aria-disabled': isDisabled || undefined,
                'aria-readonly': isReadOnly || undefined,
                'aria-required': isRequired || undefined,
                onKeyDown: onKeyDown,
                onFocus: onFocus,
                onBlur: onBlur
            },
            incrementButtonProps: {
                onPressStart: ()=>{
                    onIncrementPressStart(400);
                    addGlobalListener(window, 'contextmenu', cancelContextMenu);
                },
                onPressEnd: ()=>{
                    clearAsync();
                    removeAllGlobalListeners();
                },
                onFocus: onFocus,
                onBlur: onBlur
            },
            decrementButtonProps: {
                onPressStart: ()=>{
                    onDecrementPressStart(400);
                    addGlobalListener(window, 'contextmenu', cancelContextMenu);
                },
                onPressEnd: ()=>{
                    clearAsync();
                    removeAllGlobalListeners();
                },
                onFocus: onFocus,
                onBlur: onBlur
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 







    function $32489daedd52963e$export$1315d136e6f7581(segment, state, ref) {
        let enteredKeys = (0, wp.element.useRef)('');
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let displayNames = ($3aeceb3a64eb8358$export$d42c60378c8168f8)();
        let { ariaLabel: ariaLabel, ariaLabelledBy: ariaLabelledBy, ariaDescribedBy: ariaDescribedBy, focusManager: focusManager } = ($16f0b7bb276bc17e$export$653eddfc964b0f8a).get(state);
        let textValue = segment.isPlaceholder ? '' : segment.text;
        let options = (0, wp.element.useMemo)(()=>state.dateFormatter.resolvedOptions(), [
            state.dateFormatter
        ]);
        let monthDateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            month: 'long',
            timeZone: options.timeZone
        });
        let hourDateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            hour: 'numeric',
            hour12: options.hour12,
            timeZone: options.timeZone
        });
        if (segment.type === 'month' && !segment.isPlaceholder) {
            let monthTextValue = monthDateFormatter.format(state.dateValue);
            textValue = monthTextValue !== textValue ? `${textValue} \u{2013} ${monthTextValue}` : monthTextValue;
        } else if (segment.type === 'hour' && !segment.isPlaceholder) textValue = hourDateFormatter.format(state.dateValue);
        let { spinButtonProps: spinButtonProps } = ($d2e8511e6f209edf$export$e908e06f4b8e3402)({
            // The ARIA spec says aria-valuenow is optional if there's no value, but aXe seems to require it.
            // This doesn't seem to have any negative effects with real AT since we also use aria-valuetext.
            // https://github.com/dequelabs/axe-core/issues/3505
            value: segment.value,
            textValue: textValue,
            minValue: segment.minValue,
            maxValue: segment.maxValue,
            isDisabled: state.isDisabled,
            isReadOnly: state.isReadOnly || !segment.isEditable,
            isRequired: state.isRequired,
            onIncrement: ()=>{
                enteredKeys.current = '';
                state.increment(segment.type);
            },
            onDecrement: ()=>{
                enteredKeys.current = '';
                state.decrement(segment.type);
            },
            onIncrementPage: ()=>{
                enteredKeys.current = '';
                state.incrementPage(segment.type);
            },
            onDecrementPage: ()=>{
                enteredKeys.current = '';
                state.decrementPage(segment.type);
            },
            onIncrementToMax: ()=>{
                enteredKeys.current = '';
                state.setSegment(segment.type, segment.maxValue);
            },
            onDecrementToMin: ()=>{
                enteredKeys.current = '';
                state.setSegment(segment.type, segment.minValue);
            }
        });
        let parser = (0, wp.element.useMemo)(()=>new ($6c7bd7858deea686$export$cd11ab140839f11d)(locale, {
                maximumFractionDigits: 0
            }), [
            locale
        ]);
        let backspace = ()=>{
            if (segment.text === segment.placeholder) focusManager.focusPrevious();
            if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly && !segment.isPlaceholder) {
                let newValue = segment.text.slice(0, -1);
                let parsed = parser.parse(newValue);
                newValue = parsed === 0 ? '' : newValue;
                if (newValue.length === 0 || parsed === 0) state.clearSegment(segment.type);
                else state.setSegment(segment.type, parsed);
                enteredKeys.current = newValue;
            } else if (segment.type === 'dayPeriod') state.clearSegment(segment.type);
        };
        let onKeyDown = (e)=>{
            // Firefox does not fire selectstart for Ctrl/Cmd + A
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1742153
            if (e.key === 'a' && (($c87311424ea30a05$export$9ac100e40613ea10)() ? e.metaKey : e.ctrlKey)) e.preventDefault();
            if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) return;
            switch(e.key){
                case 'Backspace':
                case 'Delete':
                    // Safari on iOS does not fire beforeinput for the backspace key because the cursor is at the start.
                    e.preventDefault();
                    e.stopPropagation();
                    backspace();
                    break;
            }
        };
        // Safari dayPeriod option doesn't work...
        let { startsWith: startsWith } = ($bb77f239b46e8c72$export$3274cf84b703fff)({
            sensitivity: 'base'
        });
        let amPmFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            hour: 'numeric',
            hour12: true
        });
        let am = (0, wp.element.useMemo)(()=>{
            let date = new Date();
            date.setHours(0);
            return amPmFormatter.formatToParts(date).find((part)=>part.type === 'dayPeriod').value;
        }, [
            amPmFormatter
        ]);
        let pm = (0, wp.element.useMemo)(()=>{
            let date = new Date();
            date.setHours(12);
            return amPmFormatter.formatToParts(date).find((part)=>part.type === 'dayPeriod').value;
        }, [
            amPmFormatter
        ]);
        // Get a list of formatted era names so users can type the first character to choose one.
        let eraFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
            year: 'numeric',
            era: 'narrow',
            timeZone: 'UTC'
        });
        let eras = (0, wp.element.useMemo)(()=>{
            if (segment.type !== 'era') return [];
            let date = ($11d87f3f76e88657$export$b4a036af3fc0b032)(new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(1, 1, 1), state.calendar);
            let eras = state.calendar.getEras().map((era)=>{
                let eraDate = date.set({
                    year: 1,
                    month: 1,
                    day: 1,
                    era: era
                }).toDate('UTC');
                let parts = eraFormatter.formatToParts(eraDate);
                let formatted = parts.find((p)=>p.type === 'era').value;
                return {
                    era: era,
                    formatted: formatted
                };
            });
            // Remove the common prefix from formatted values. This is so that in calendars with eras like
            // ERA0 and ERA1 (e.g. Ethiopic), users can press "0" and "1" to select an era. In other cases,
            // the first letter is used.
            let prefixLength = $32489daedd52963e$var$commonPrefixLength(eras.map((era)=>era.formatted));
            if (prefixLength) for (let era of eras)era.formatted = era.formatted.slice(prefixLength);
            return eras;
        }, [
            eraFormatter,
            state.calendar,
            segment.type
        ]);
        let onInput = (key)=>{
            if (state.isDisabled || state.isReadOnly) return;
            let newValue = enteredKeys.current + key;
            switch(segment.type){
                case 'dayPeriod':
                    if (startsWith(am, key)) state.setSegment('dayPeriod', 0);
                    else if (startsWith(pm, key)) state.setSegment('dayPeriod', 12);
                    else break;
                    focusManager.focusNext();
                    break;
                case 'era':
                    {
                        let matched = eras.find((e)=>startsWith(e.formatted, key));
                        if (matched) {
                            state.setSegment('era', matched.era);
                            focusManager.focusNext();
                        }
                        break;
                    }
                case 'day':
                case 'hour':
                case 'minute':
                case 'second':
                case 'month':
                case 'year':
                    {
                        if (!parser.isValidPartialNumber(newValue)) return;
                        let numberValue = parser.parse(newValue);
                        let segmentValue = numberValue;
                        let allowsZero = segment.minValue === 0;
                        if (segment.type === 'hour' && state.dateFormatter.resolvedOptions().hour12) {
                            switch(state.dateFormatter.resolvedOptions().hourCycle){
                                case 'h11':
                                    if (numberValue > 11) segmentValue = parser.parse(key);
                                    break;
                                case 'h12':
                                    allowsZero = false;
                                    if (numberValue > 12) segmentValue = parser.parse(key);
                                    break;
                            }
                            if (segment.value >= 12 && numberValue > 1) numberValue += 12;
                        } else if (numberValue > segment.maxValue) segmentValue = parser.parse(key);
                        if (isNaN(numberValue)) return;
                        let shouldSetValue = segmentValue !== 0 || allowsZero;
                        if (shouldSetValue) state.setSegment(segment.type, segmentValue);
                        if (Number(numberValue + '0') > segment.maxValue || newValue.length >= String(segment.maxValue).length) {
                            enteredKeys.current = '';
                            if (shouldSetValue) focusManager.focusNext();
                        } else enteredKeys.current = newValue;
                        break;
                    }
            }
        };
        let onFocus = ()=>{
            enteredKeys.current = '';
            ($2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
                containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
            });
            // Collapse selection to start or Chrome won't fire input events.
            let selection = window.getSelection();
            selection.collapse(ref.current);
        };
        let compositionRef = (0, wp.element.useRef)('');
        // @ts-ignore - TODO: possibly old TS version? doesn't fail in my editor...
        ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'beforeinput', (e)=>{
            e.preventDefault();
            switch(e.inputType){
                case 'deleteContentBackward':
                case 'deleteContentForward':
                    if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly) backspace();
                    break;
                case 'insertCompositionText':
                    // insertCompositionText cannot be canceled.
                    // Record the current state of the element so we can restore it in the `input` event below.
                    compositionRef.current = ref.current.textContent;
                    // Safari gets stuck in a composition state unless we also assign to the value here.
                    // eslint-disable-next-line no-self-assign
                    ref.current.textContent = ref.current.textContent;
                    break;
                default:
                    if (e.data != null) onInput(e.data);
                    break;
            }
        });
        ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'input', (e)=>{
            let { inputType: inputType, data: data } = e;
            switch(inputType){
                case 'insertCompositionText':
                    // Reset the DOM to how it was in the beforeinput event.
                    ref.current.textContent = compositionRef.current;
                    // Android sometimes fires key presses of letters as composition events. Need to handle am/pm keys here too.
                    // Can also happen e.g. with Pinyin keyboard on iOS.
                    if (startsWith(am, data) || startsWith(pm, data)) onInput(data);
                    break;
            }
        });
        ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
            let element = ref.current;
            return ()=>{
                // If the focused segment is removed, focus the previous one, or the next one if there was no previous one.
                if (document.activeElement === element) {
                    let prev = focusManager.focusPrevious();
                    if (!prev) focusManager.focusNext();
                }
            };
        }, [
            ref,
            focusManager
        ]);
        // spinbuttons cannot be focused with VoiceOver on iOS.
        let touchPropOverrides = ($c87311424ea30a05$export$fedb369cb70207f1)() || segment.type === 'timeZoneName' ? {
            role: 'textbox',
            'aria-valuemax': null,
            'aria-valuemin': null,
            'aria-valuetext': null,
            'aria-valuenow': null
        } : {};
        // Only apply aria-describedby to the first segment, unless the field is invalid. This avoids it being
        // read every time the user navigates to a new segment.
        let firstSegment = (0, wp.element.useMemo)(()=>state.segments.find((s)=>s.isEditable), [
            state.segments
        ]);
        if (segment !== firstSegment && !state.isInvalid) ariaDescribedBy = undefined;
        let id = ($bdb11010cef70236$export$f680877a34711e37)();
        let isEditable = !state.isDisabled && !state.isReadOnly && segment.isEditable;
        // Prepend the label passed from the field to each segment name.
        // This is needed because VoiceOver on iOS does not announce groups.
        let name = segment.type === 'literal' ? '' : displayNames.of(segment.type);
        let labelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            'aria-label': `${name}${ariaLabel ? `, ${ariaLabel}` : ''}${ariaLabelledBy ? ', ' : ''}`,
            'aria-labelledby': ariaLabelledBy
        });
        // Literal segments should not be visible to screen readers. We don't really need any of the above,
        // but the rules of hooks mean hooks cannot be conditional so we have to put this condition here.
        if (segment.type === 'literal') return {
            segmentProps: {
                'aria-hidden': true
            }
        };
        return {
            segmentProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(spinButtonProps, labelProps, {
                id: id,
                ...touchPropOverrides,
                'aria-invalid': state.isInvalid ? 'true' : undefined,
                'aria-describedby': ariaDescribedBy,
                'aria-readonly': state.isReadOnly || !segment.isEditable ? 'true' : undefined,
                'data-placeholder': segment.isPlaceholder || undefined,
                contentEditable: isEditable,
                suppressContentEditableWarning: isEditable,
                spellCheck: isEditable ? 'false' : undefined,
                autoCapitalize: isEditable ? 'off' : undefined,
                autoCorrect: isEditable ? 'off' : undefined,
                // Capitalization was changed in React 17...
                [parseInt((wp.element).version, 10) >= 17 ? 'enterKeyHint' : 'enterkeyhint']: isEditable ? 'next' : undefined,
                inputMode: state.isDisabled || segment.type === 'dayPeriod' || segment.type === 'era' || !isEditable ? undefined : 'numeric',
                tabIndex: state.isDisabled ? undefined : 0,
                onKeyDown: onKeyDown,
                onFocus: onFocus,
                style: {
                    caretColor: 'transparent'
                },
                // Prevent pointer events from reaching useDatePickerGroup, and allow native browser behavior to focus the segment.
                onPointerDown (e) {
                    e.stopPropagation();
                },
                onMouseDown (e) {
                    e.stopPropagation();
                }
            })
        };
    }
    function $32489daedd52963e$var$commonPrefixLength(strings) {
        // Sort the strings, and compare the characters in the first and last to find the common prefix.
        strings.sort();
        let first = strings[0];
        let last = strings[strings.length - 1];
        for(let i = 0; i < first.length; i++){
            if (first[i] !== last[i]) return i;
        }
        return 0;
    }

    function $parcel$interopDefault$4(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 









    function $887cac91b7cc8801$export$12fd5f0e9f4bb192(props, state, ref) {
        var _state_value, _state_value1;
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$4($dfb4eba373ed9493$exports))), '@react-aria/datepicker');
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
        let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
            ...props,
            labelElementType: 'span',
            isInvalid: isInvalid,
            errorMessage: props.errorMessage || validationErrors
        });
        let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;
        let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let range = state.formatValue(locale, {
            month: 'long'
        });
        let description = range ? stringFormatter.format('selectedRangeDescription', {
            startDate: range.start,
            endDate: range.end
        }) : '';
        let descProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(description);
        let startFieldProps = {
            'aria-label': stringFormatter.format('startDate'),
            'aria-labelledby': labelledBy
        };
        let endFieldProps = {
            'aria-label': stringFormatter.format('endDate'),
            'aria-labelledby': labelledBy
        };
        let buttonId = ($bdb11010cef70236$export$f680877a34711e37)();
        let dialogId = ($bdb11010cef70236$export$f680877a34711e37)();
        let groupProps = ($3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);
        let ariaDescribedBy = [
            descProps['aria-describedby'],
            fieldProps['aria-describedby']
        ].filter(Boolean).join(' ') || undefined;
        let focusManager = (0, wp.element.useMemo)(()=>($9bf71ea28793e738$export$c5251b9e124bf29)(ref, {
                // Exclude the button from the focus manager.
                accept: (element)=>element.id !== buttonId
            }), [
            ref,
            buttonId
        ]);
        let commonFieldProps = {
            [($16f0b7bb276bc17e$export$7b3062cd49e80452)]: focusManager,
            [($16f0b7bb276bc17e$export$300019f83c56d282)]: 'presentation',
            'aria-describedby': ariaDescribedBy,
            placeholderValue: props.placeholderValue,
            hideTimeZone: props.hideTimeZone,
            hourCycle: props.hourCycle,
            granularity: props.granularity,
            shouldForceLeadingZeros: props.shouldForceLeadingZeros,
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            isRequired: props.isRequired,
            validationBehavior: props.validationBehavior
        };
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            ...props,
            isDisabled: state.isOpen,
            onBlurWithin: props.onBlur,
            onFocusWithin: props.onFocus,
            onFocusWithinChange: props.onFocusChange
        });
        let startFieldValidation = (0, wp.element.useRef)(($e5be200c675c3b3a$export$dad6ae84456c676a));
        let endFieldValidation = (0, wp.element.useRef)(($e5be200c675c3b3a$export$dad6ae84456c676a));
        return {
            groupProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {
                role: 'group',
                'aria-disabled': props.isDisabled || null,
                'aria-describedby': ariaDescribedBy,
                onKeyDown (e) {
                    if (state.isOpen) return;
                    if (props.onKeyDown) props.onKeyDown(e);
                },
                onKeyUp (e) {
                    if (state.isOpen) return;
                    if (props.onKeyUp) props.onKeyUp(e);
                }
            }),
            labelProps: {
                ...labelProps,
                onClick: ()=>{
                    focusManager.focusFirst();
                }
            },
            buttonProps: {
                ...descProps,
                id: buttonId,
                'aria-haspopup': 'dialog',
                'aria-label': stringFormatter.format('calendar'),
                'aria-labelledby': `${buttonId} ${labelledBy}`,
                'aria-describedby': ariaDescribedBy,
                'aria-expanded': state.isOpen,
                isDisabled: props.isDisabled || props.isReadOnly,
                onPress: ()=>state.setOpen(true)
            },
            dialogProps: {
                id: dialogId,
                'aria-labelledby': `${buttonId} ${labelledBy}`
            },
            startFieldProps: {
                ...startFieldProps,
                ...commonFieldProps,
                value: (_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.start,
                onChange: (start)=>state.setDateTime('start', start),
                autoFocus: props.autoFocus,
                name: props.startName,
                [($e5be200c675c3b3a$export$a763b9476acd3eb)]: {
                    realtimeValidation: state.realtimeValidation,
                    displayValidation: state.displayValidation,
                    updateValidation (e) {
                        startFieldValidation.current = e;
                        state.updateValidation(($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(e, endFieldValidation.current));
                    },
                    resetValidation: state.resetValidation,
                    commitValidation: state.commitValidation
                }
            },
            endFieldProps: {
                ...endFieldProps,
                ...commonFieldProps,
                value: (_state_value1 = state.value) === null || _state_value1 === void 0 ? void 0 : _state_value1.end,
                onChange: (end)=>state.setDateTime('end', end),
                name: props.endName,
                [($e5be200c675c3b3a$export$a763b9476acd3eb)]: {
                    realtimeValidation: state.realtimeValidation,
                    displayValidation: state.displayValidation,
                    updateValidation (e) {
                        endFieldValidation.current = e;
                        state.updateValidation(($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(startFieldValidation.current, e));
                    },
                    resetValidation: state.resetValidation,
                    commitValidation: state.commitValidation
                }
            },
            descriptionProps: descriptionProps,
            errorMessageProps: errorMessageProps,
            calendarProps: {
                autoFocus: true,
                value: state.dateRange,
                onChange: state.setDateRange,
                minValue: props.minValue,
                maxValue: props.maxValue,
                isDisabled: props.isDisabled,
                isReadOnly: props.isReadOnly,
                isDateUnavailable: props.isDateUnavailable,
                allowsNonContiguousRanges: props.allowsNonContiguousRanges,
                defaultFocusedValue: state.dateRange ? undefined : props.placeholderValue,
                isInvalid: state.isInvalid,
                errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(' ')
            },
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {
        let { role: role = 'dialog' } = props;
        let titleId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
        titleId = props['aria-label'] ? undefined : titleId;
        let isRefocusing = (0, wp.element.useRef)(false);
        // Focus the dialog itself on mount, unless a child element is already focused.
        (0, wp.element.useEffect)(()=>{
            if (ref.current && !ref.current.contains(document.activeElement)) {
                ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
                // Safari on iOS does not move the VoiceOver cursor to the dialog
                // or announce that it has opened until it has rendered. A workaround
                // is to wait for half a second, then blur and re-focus the dialog.
                let timeout = setTimeout(()=>{
                    if (document.activeElement === ref.current) {
                        isRefocusing.current = true;
                        if (ref.current) {
                            ref.current.blur();
                            ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
                        }
                        isRefocusing.current = false;
                    }
                }, 500);
                return ()=>{
                    clearTimeout(timeout);
                };
            }
        }, [
            ref
        ]);
        ($337b884510726a0d$export$14c98a7594375490)();
        // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused
        // on mount when inside an iframe, no matter which element we programmatically focus.
        // See https://bugs.webkit.org/show_bug.cgi?id=211934.
        // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal
        // even without aria-modal on the dialog itself.
        return {
            dialogProps: {
                ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
                    labelable: true
                }),
                role: role,
                tabIndex: -1,
                'aria-labelledby': props['aria-labelledby'] || titleId,
                // Prevent blur events from reaching useOverlay, which may cause
                // popovers to close. Since focus is contained within the dialog,
                // we don't want this to occur due to the above useEffect.
                onBlur: (e)=>{
                    if (isRefocusing.current) e.stopPropagation();
                }
            },
            titleProps: {
                id: titleId
            }
        };
    }

    var $fb78e0f6ab6349ed$exports = {};
    $fb78e0f6ab6349ed$exports = {
        "decrease": (args)=>`\u{62E}\u{641}\u{636} ${args.fieldLabel}`,
        "increase": (args)=>`\u{632}\u{64A}\u{627}\u{62F}\u{629} ${args.fieldLabel}`,
        "numberField": `\u{62D}\u{642}\u{644} \u{631}\u{642}\u{645}\u{64A}`
    };

    var $2776acdd9959a647$exports = {};
    $2776acdd9959a647$exports = {
        "decrease": (args)=>`\u{41D}\u{430}\u{43C}\u{430}\u{43B}\u{44F}\u{432}\u{430}\u{43D}\u{435} ${args.fieldLabel}`,
        "increase": (args)=>`\u{423}\u{441}\u{438}\u{43B}\u{432}\u{430}\u{43D}\u{435} ${args.fieldLabel}`,
        "numberField": `\u{41D}\u{43E}\u{43C}\u{435}\u{440} \u{43D}\u{430} \u{43F}\u{43E}\u{43B}\u{435}\u{442}\u{43E}`
    };

    var $741954410a365ad3$exports = {};
    $741954410a365ad3$exports = {
        "decrease": (args)=>`Sn\xed\u{17E}it ${args.fieldLabel}`,
        "increase": (args)=>`Zv\xfd\u{161}it ${args.fieldLabel}`,
        "numberField": `\u{10C}\xedseln\xe9 pole`
    };

    var $8321ed0f8ab642f0$exports = {};
    $8321ed0f8ab642f0$exports = {
        "decrease": (args)=>`Reducer ${args.fieldLabel}`,
        "increase": (args)=>`\xd8g ${args.fieldLabel}`,
        "numberField": `Talfelt`
    };

    var $92978e0c4ecafa32$exports = {};
    $92978e0c4ecafa32$exports = {
        "decrease": (args)=>`${args.fieldLabel} verringern`,
        "increase": (args)=>`${args.fieldLabel} erh\xf6hen`,
        "numberField": `Nummernfeld`
    };

    var $ac5ff71962864a84$exports = {};
    $ac5ff71962864a84$exports = {
        "decrease": (args)=>`\u{39C}\u{3B5}\u{3AF}\u{3C9}\u{3C3}\u{3B7} ${args.fieldLabel}`,
        "increase": (args)=>`\u{391}\u{3CD}\u{3BE}\u{3B7}\u{3C3}\u{3B7} ${args.fieldLabel}`,
        "numberField": `\u{3A0}\u{3B5}\u{3B4}\u{3AF}\u{3BF} \u{3B1}\u{3C1}\u{3B9}\u{3B8}\u{3BC}\u{3BF}\u{3CD}`
    };

    var $efe4685e2440d8be$exports = {};
    $efe4685e2440d8be$exports = {
        "decrease": (args)=>`Decrease ${args.fieldLabel}`,
        "increase": (args)=>`Increase ${args.fieldLabel}`,
        "numberField": `Number field`
    };

    var $e50a9a48739b90e1$exports = {};
    $e50a9a48739b90e1$exports = {
        "decrease": (args)=>`Reducir ${args.fieldLabel}`,
        "increase": (args)=>`Aumentar ${args.fieldLabel}`,
        "numberField": `Campo de n\xfamero`
    };

    var $6e0d5294ecbb8ab6$exports = {};
    $6e0d5294ecbb8ab6$exports = {
        "decrease": (args)=>`V\xe4henda ${args.fieldLabel}`,
        "increase": (args)=>`Suurenda ${args.fieldLabel}`,
        "numberField": `Numbri v\xe4li`
    };

    var $e7129d65f607f77f$exports = {};
    $e7129d65f607f77f$exports = {
        "decrease": (args)=>`V\xe4henn\xe4 ${args.fieldLabel}`,
        "increase": (args)=>`Lis\xe4\xe4 ${args.fieldLabel}`,
        "numberField": `Numerokentt\xe4`
    };

    var $d72adf5b20573e34$exports = {};
    $d72adf5b20573e34$exports = {
        "decrease": (args)=>`Diminuer ${args.fieldLabel}`,
        "increase": (args)=>`Augmenter ${args.fieldLabel}`,
        "numberField": `Champ de nombre`
    };

    var $a25c707e88b844a7$exports = {};
    $a25c707e88b844a7$exports = {
        "decrease": (args)=>`\u{5D4}\u{5E7}\u{5D8}\u{5DF} ${args.fieldLabel}`,
        "increase": (args)=>`\u{5D4}\u{5D2}\u{5D3}\u{5DC} ${args.fieldLabel}`,
        "numberField": `\u{5E9}\u{5D3}\u{5D4} \u{5DE}\u{5E1}\u{5E4}\u{5E8}`
    };

    var $69b41140b9a4ca54$exports = {};
    $69b41140b9a4ca54$exports = {
        "decrease": (args)=>`Smanji ${args.fieldLabel}`,
        "increase": (args)=>`Pove\u{107}aj ${args.fieldLabel}`,
        "numberField": `Polje broja`
    };

    var $81dab28f37f59d1a$exports = {};
    $81dab28f37f59d1a$exports = {
        "decrease": (args)=>`${args.fieldLabel} cs\xf6kkent\xe9se`,
        "increase": (args)=>`${args.fieldLabel} n\xf6vel\xe9se`,
        "numberField": `Sz\xe1mmez\u{151}`
    };

    var $866555b31f2d7711$exports = {};
    $866555b31f2d7711$exports = {
        "decrease": (args)=>`Riduci ${args.fieldLabel}`,
        "increase": (args)=>`Aumenta ${args.fieldLabel}`,
        "numberField": `Campo numero`
    };

    var $dafcd55d52b9d371$exports = {};
    $dafcd55d52b9d371$exports = {
        "decrease": (args)=>`${args.fieldLabel}\u{3092}\u{7E2E}\u{5C0F}`,
        "increase": (args)=>`${args.fieldLabel}\u{3092}\u{62E1}\u{5927}`,
        "numberField": `\u{6570}\u{5024}\u{30D5}\u{30A3}\u{30FC}\u{30EB}\u{30C9}`
    };

    var $f090c1f8c5da0145$exports = {};
    $f090c1f8c5da0145$exports = {
        "decrease": (args)=>`${args.fieldLabel} \u{AC10}\u{C18C}`,
        "increase": (args)=>`${args.fieldLabel} \u{C99D}\u{AC00}`,
        "numberField": `\u{BC88}\u{D638} \u{D544}\u{B4DC}`
    };

    var $6f10f3a13360a75c$exports = {};
    $6f10f3a13360a75c$exports = {
        "decrease": (args)=>`Suma\u{17E}inti ${args.fieldLabel}`,
        "increase": (args)=>`Padidinti ${args.fieldLabel}`,
        "numberField": `Numerio laukas`
    };

    var $47432cefd4b7bd1b$exports = {};
    $47432cefd4b7bd1b$exports = {
        "decrease": (args)=>`Samazin\u{101}\u{161}ana ${args.fieldLabel}`,
        "increase": (args)=>`Palielin\u{101}\u{161}ana ${args.fieldLabel}`,
        "numberField": `Skait\u{13C}u lauks`
    };

    var $dc578a950a2bf23d$exports = {};
    $dc578a950a2bf23d$exports = {
        "decrease": (args)=>`Reduser ${args.fieldLabel}`,
        "increase": (args)=>`\xd8k ${args.fieldLabel}`,
        "numberField": `Tallfelt`
    };

    var $353f1bfca4dc395a$exports = {};
    $353f1bfca4dc395a$exports = {
        "decrease": (args)=>`${args.fieldLabel} verlagen`,
        "increase": (args)=>`${args.fieldLabel} verhogen`,
        "numberField": `Getalveld`
    };

    var $241bc0bbd870e982$exports = {};
    $241bc0bbd870e982$exports = {
        "decrease": (args)=>`Zmniejsz ${args.fieldLabel}`,
        "increase": (args)=>`Zwi\u{119}ksz ${args.fieldLabel}`,
        "numberField": `Pole numeru`
    };

    var $da3005c7bd72b0a8$exports = {};
    $da3005c7bd72b0a8$exports = {
        "decrease": (args)=>`Diminuir ${args.fieldLabel}`,
        "increase": (args)=>`Aumentar ${args.fieldLabel}`,
        "numberField": `Campo de n\xfamero`
    };

    var $cf48bfc540882310$exports = {};
    $cf48bfc540882310$exports = {
        "decrease": (args)=>`Diminuir ${args.fieldLabel}`,
        "increase": (args)=>`Aumentar ${args.fieldLabel}`,
        "numberField": `Campo num\xe9rico`
    };

    var $b63a28c481ab9ee3$exports = {};
    $b63a28c481ab9ee3$exports = {
        "decrease": (args)=>`Sc\u{103}dere ${args.fieldLabel}`,
        "increase": (args)=>`Cre\u{219}tere ${args.fieldLabel}`,
        "numberField": `C\xe2mp numeric`
    };

    var $19f9df95c2464ab6$exports = {};
    $19f9df95c2464ab6$exports = {
        "decrease": (args)=>`\u{423}\u{43C}\u{435}\u{43D}\u{44C}\u{448}\u{435}\u{43D}\u{438}\u{435} ${args.fieldLabel}`,
        "increase": (args)=>`\u{423}\u{432}\u{435}\u{43B}\u{438}\u{447}\u{435}\u{43D}\u{438}\u{435} ${args.fieldLabel}`,
        "numberField": `\u{427}\u{438}\u{441}\u{43B}\u{43E}\u{432}\u{43E}\u{435} \u{43F}\u{43E}\u{43B}\u{435}`
    };

    var $b272932a685e8482$exports = {};
    $b272932a685e8482$exports = {
        "decrease": (args)=>`Zn\xed\u{17E}i\u{165} ${args.fieldLabel}`,
        "increase": (args)=>`Zv\xfd\u{161}i\u{165} ${args.fieldLabel}`,
        "numberField": `\u{10C}\xedseln\xe9 pole`
    };

    var $cbaf8b5b61f9e544$exports = {};
    $cbaf8b5b61f9e544$exports = {
        "decrease": (args)=>`Upadati ${args.fieldLabel}`,
        "increase": (args)=>`Pove\u{10D}ajte ${args.fieldLabel}`,
        "numberField": `\u{160}tevil\u{10D}no polje`
    };

    var $e0a3af6ac1449b2f$exports = {};
    $e0a3af6ac1449b2f$exports = {
        "decrease": (args)=>`Smanji ${args.fieldLabel}`,
        "increase": (args)=>`Pove\u{107}aj ${args.fieldLabel}`,
        "numberField": `Polje broja`
    };

    var $71e167d2458a6019$exports = {};
    $71e167d2458a6019$exports = {
        "decrease": (args)=>`Minska ${args.fieldLabel}`,
        "increase": (args)=>`\xd6ka ${args.fieldLabel}`,
        "numberField": `Nummerf\xe4lt`
    };

    var $3719245abc082946$exports = {};
    $3719245abc082946$exports = {
        "decrease": (args)=>`${args.fieldLabel} azalt`,
        "increase": (args)=>`${args.fieldLabel} artt\u{131}r`,
        "numberField": `Say\u{131} alan\u{131}`
    };

    var $2ccc589e2f51824d$exports = {};
    $2ccc589e2f51824d$exports = {
        "decrease": (args)=>`\u{417}\u{43C}\u{435}\u{43D}\u{448}\u{438}\u{442}\u{438} ${args.fieldLabel}`,
        "increase": (args)=>`\u{417}\u{431}\u{456}\u{43B}\u{44C}\u{448}\u{438}\u{442}\u{438} ${args.fieldLabel}`,
        "numberField": `\u{41F}\u{43E}\u{43B}\u{435} \u{43D}\u{43E}\u{43C}\u{435}\u{440}\u{430}`
    };

    var $e1103cb9b4c13942$exports = {};
    $e1103cb9b4c13942$exports = {
        "decrease": (args)=>`\u{964D}\u{4F4E} ${args.fieldLabel}`,
        "increase": (args)=>`\u{63D0}\u{9AD8} ${args.fieldLabel}`,
        "numberField": `\u{6570}\u{5B57}\u{5B57}\u{6BB5}`
    };

    var $448607634f80dccb$exports = {};
    $448607634f80dccb$exports = {
        "decrease": (args)=>`\u{7E2E}\u{5C0F} ${args.fieldLabel}`,
        "increase": (args)=>`\u{653E}\u{5927} ${args.fieldLabel}`,
        "numberField": `\u{6578}\u{5B57}\u{6B04}\u{4F4D}`
    };

    var $280a227d7cb94b92$exports = {};


































    $280a227d7cb94b92$exports = {
        "ar-AE": $fb78e0f6ab6349ed$exports,
        "bg-BG": $2776acdd9959a647$exports,
        "cs-CZ": $741954410a365ad3$exports,
        "da-DK": $8321ed0f8ab642f0$exports,
        "de-DE": $92978e0c4ecafa32$exports,
        "el-GR": $ac5ff71962864a84$exports,
        "en-US": $efe4685e2440d8be$exports,
        "es-ES": $e50a9a48739b90e1$exports,
        "et-EE": $6e0d5294ecbb8ab6$exports,
        "fi-FI": $e7129d65f607f77f$exports,
        "fr-FR": $d72adf5b20573e34$exports,
        "he-IL": $a25c707e88b844a7$exports,
        "hr-HR": $69b41140b9a4ca54$exports,
        "hu-HU": $81dab28f37f59d1a$exports,
        "it-IT": $866555b31f2d7711$exports,
        "ja-JP": $dafcd55d52b9d371$exports,
        "ko-KR": $f090c1f8c5da0145$exports,
        "lt-LT": $6f10f3a13360a75c$exports,
        "lv-LV": $47432cefd4b7bd1b$exports,
        "nb-NO": $dc578a950a2bf23d$exports,
        "nl-NL": $353f1bfca4dc395a$exports,
        "pl-PL": $241bc0bbd870e982$exports,
        "pt-BR": $da3005c7bd72b0a8$exports,
        "pt-PT": $cf48bfc540882310$exports,
        "ro-RO": $b63a28c481ab9ee3$exports,
        "ru-RU": $19f9df95c2464ab6$exports,
        "sk-SK": $b272932a685e8482$exports,
        "sl-SI": $cbaf8b5b61f9e544$exports,
        "sr-SP": $e0a3af6ac1449b2f$exports,
        "sv-SE": $71e167d2458a6019$exports,
        "tr-TR": $3719245abc082946$exports,
        "uk-UA": $2ccc589e2f51824d$exports,
        "zh-CN": $e1103cb9b4c13942$exports,
        "zh-TW": $448607634f80dccb$exports
    };

    function $parcel$interopDefault$3(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 







    function $81397a9303501bda$export$23f548e970bdf099(props, state, inputRef) {
        let { id: id, decrementAriaLabel: decrementAriaLabel, incrementAriaLabel: incrementAriaLabel, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, minValue: minValue, maxValue: maxValue, autoFocus: autoFocus, label: label, formatOptions: formatOptions, onBlur: onBlur = ()=>{}, onFocus: onFocus, onFocusChange: onFocusChange, onKeyDown: onKeyDown, onKeyUp: onKeyUp, description: description, errorMessage: errorMessage, isWheelDisabled: isWheelDisabled, ...otherProps } = props;
        let { increment: increment, incrementToMax: incrementToMax, decrement: decrement, decrementToMin: decrementToMin, numberValue: numberValue, inputValue: inputValue, commit: commit, commitValidation: commitValidation } = state;
        const stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$3($280a227d7cb94b92$exports))), '@react-aria/numberfield');
        let inputId = ($bdb11010cef70236$export$f680877a34711e37)(id);
        let { focusProps: focusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
            onBlur () {
                // Set input value to normalized valid value
                commit();
            }
        });
        let numberFormatter = ($a916eb452884faea$export$b7a616150fdb9f44)(formatOptions);
        let intlOptions = (0, wp.element.useMemo)(()=>numberFormatter.resolvedOptions(), [
            numberFormatter
        ]);
        // Replace negative textValue formatted using currencySign: 'accounting'
        // with a textValue that can be announced using a minus sign.
        let textValueFormatter = ($a916eb452884faea$export$b7a616150fdb9f44)({
            ...formatOptions,
            currencySign: undefined
        });
        let textValue = (0, wp.element.useMemo)(()=>isNaN(numberValue) ? '' : textValueFormatter.format(numberValue), [
            textValueFormatter,
            numberValue
        ]);
        let { spinButtonProps: spinButtonProps, incrementButtonProps: incButtonProps, decrementButtonProps: decButtonProps } = ($d2e8511e6f209edf$export$e908e06f4b8e3402)({
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isRequired: isRequired,
            maxValue: maxValue,
            minValue: minValue,
            onIncrement: increment,
            onIncrementToMax: incrementToMax,
            onDecrement: decrement,
            onDecrementToMin: decrementToMin,
            value: numberValue,
            textValue: textValue
        });
        let [focusWithin, setFocusWithin] = (0, wp.element.useState)(false);
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            isDisabled: isDisabled,
            onFocusWithinChange: setFocusWithin
        });
        let onWheel = (0, wp.element.useCallback)((e)=>{
            // if on a trackpad, users can scroll in both X and Y at once, check the magnitude of the change
            // if it's mostly in the X direction, then just return, the user probably doesn't mean to inc/dec
            // this isn't perfect, events come in fast with small deltas and a part of the scroll may give a false indication
            // especially if the user is scrolling near 45deg
            if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) return;
            if (e.deltaY > 0) increment();
            else if (e.deltaY < 0) decrement();
        }, [
            decrement,
            increment
        ]);
        // If the input isn't supposed to receive input, disable scrolling.
        let scrollingDisabled = isWheelDisabled || isDisabled || isReadOnly || !focusWithin;
        ($7d0a636d7a4dcefd$export$2123ff2b87c81ca)({
            onScroll: onWheel,
            isDisabled: scrollingDisabled
        }, inputRef);
        // The inputMode attribute influences the software keyboard that is shown on touch devices.
        // Browsers and operating systems are quite inconsistent about what keys are available, however.
        // We choose between numeric and decimal based on whether we allow negative and fractional numbers,
        // and based on testing on various devices to determine what keys are available in each inputMode.
        let hasDecimals = intlOptions.maximumFractionDigits > 0;
        let hasNegative = state.minValue === undefined || isNaN(state.minValue) || state.minValue < 0;
        let inputMode = 'numeric';
        if (($c87311424ea30a05$export$186c6964ca17d99)()) {
            // iPhone doesn't have a minus sign in either numeric or decimal.
            // Note this is only for iPhone, not iPad, which always has both
            // minus and decimal in numeric.
            if (hasNegative) inputMode = 'text';
            else if (hasDecimals) inputMode = 'decimal';
        } else if (($c87311424ea30a05$export$a11b0059900ceec8)()) {
            // Android numeric has both a decimal point and minus key.
            // decimal does not have a minus key.
            if (hasNegative) inputMode = 'numeric';
            else if (hasDecimals) inputMode = 'decimal';
        }
        let onChange = (value)=>{
            if (state.validate(value)) state.setInputValue(value);
        };
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
        let onKeyDownEnter = (0, wp.element.useCallback)((e)=>{
            if (e.key === 'Enter') {
                commit();
                commitValidation();
            } else e.continuePropagation();
        }, [
            commit,
            commitValidation
        ]);
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
        let { labelProps: labelProps, inputProps: textFieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($d841c8010a73d545$export$4f384c9210e583c3)({
            ...otherProps,
            ...domProps,
            name: undefined,
            label: label,
            autoFocus: autoFocus,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isRequired: isRequired,
            validate: undefined,
            [($e5be200c675c3b3a$export$a763b9476acd3eb)]: state,
            value: inputValue,
            defaultValue: undefined,
            autoComplete: 'off',
            'aria-label': props['aria-label'] || undefined,
            'aria-labelledby': props['aria-labelledby'] || undefined,
            id: inputId,
            type: 'text',
            inputMode: inputMode,
            onChange: onChange,
            onBlur: onBlur,
            onFocus: onFocus,
            onFocusChange: onFocusChange,
            onKeyDown: (0, wp.element.useMemo)(()=>($ff5963eb1fccf552$export$e08e3b67e392101e)(onKeyDownEnter, onKeyDown), [
                onKeyDownEnter,
                onKeyDown
            ]),
            onKeyUp: onKeyUp,
            description: description,
            errorMessage: errorMessage
        }, state, inputRef);
        ($99facab73266f662$export$5add1d006293d136)(inputRef, state.numberValue, state.setNumberValue);
        let inputProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(spinButtonProps, focusProps, textFieldProps, {
            // override the spinbutton role, we can't focus a spin button with VO
            role: null,
            // ignore aria-roledescription on iOS so that required state will announce when it is present
            'aria-roledescription': !($c87311424ea30a05$export$fedb369cb70207f1)() ? stringFormatter.format('numberField') : null,
            'aria-valuemax': null,
            'aria-valuemin': null,
            'aria-valuenow': null,
            'aria-valuetext': null,
            autoCorrect: 'off',
            spellCheck: 'false'
        });
        if (props.validationBehavior === 'native') inputProps['aria-required'] = undefined;
        let onButtonPressStart = (e)=>{
            var _inputRef_current;
            // If focus is already on the input, keep it there so we don't hide the
            // software keyboard when tapping the increment/decrement buttons.
            if (document.activeElement === inputRef.current) return;
            // Otherwise, when using a mouse, move focus to the input.
            // On touch, or with a screen reader, focus the button so that the software
            // keyboard does not appear and the screen reader cursor is not moved off the button.
            if (e.pointerType === 'mouse') (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();
            else e.target.focus();
        };
        // Determine the label for the increment and decrement buttons. There are 4 cases:
        //
        // 1. With a visible label that is a string: aria-label: `Increase ${props.label}`
        // 2. With a visible label that is JSX: aria-label: 'Increase', aria-labelledby: '${incrementId} ${labelId}'
        // 3. With an aria-label: aria-label: `Increase ${props['aria-label']}`
        // 4. With an aria-labelledby: aria-label: 'Increase', aria-labelledby: `${incrementId} ${props['aria-labelledby']}`
        //
        // (1) and (2) could possibly be combined and both use aria-labelledby. However, placing the label in
        // the aria-label string rather than using aria-labelledby gives more flexibility to translators to change
        // the order or add additional words around the label if needed.
        let fieldLabel = props['aria-label'] || (typeof props.label === 'string' ? props.label : '');
        let ariaLabelledby;
        if (!fieldLabel) ariaLabelledby = props.label != null ? labelProps.id : props['aria-labelledby'];
        let incrementId = ($bdb11010cef70236$export$f680877a34711e37)();
        let decrementId = ($bdb11010cef70236$export$f680877a34711e37)();
        let incrementButtonProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(incButtonProps, {
            'aria-label': incrementAriaLabel || stringFormatter.format('increase', {
                fieldLabel: fieldLabel
            }).trim(),
            id: ariaLabelledby && !incrementAriaLabel ? incrementId : null,
            'aria-labelledby': ariaLabelledby && !incrementAriaLabel ? `${incrementId} ${ariaLabelledby}` : null,
            'aria-controls': inputId,
            excludeFromTabOrder: true,
            preventFocusOnPress: true,
            allowFocusWhenDisabled: true,
            isDisabled: !state.canIncrement,
            onPressStart: onButtonPressStart
        });
        let decrementButtonProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(decButtonProps, {
            'aria-label': decrementAriaLabel || stringFormatter.format('decrease', {
                fieldLabel: fieldLabel
            }).trim(),
            id: ariaLabelledby && !decrementAriaLabel ? decrementId : null,
            'aria-labelledby': ariaLabelledby && !decrementAriaLabel ? `${decrementId} ${ariaLabelledby}` : null,
            'aria-controls': inputId,
            excludeFromTabOrder: true,
            preventFocusOnPress: true,
            allowFocusWhenDisabled: true,
            isDisabled: !state.canDecrement,
            onPressStart: onButtonPressStart
        });
        return {
            groupProps: {
                ...focusWithinProps,
                role: 'group',
                'aria-disabled': isDisabled,
                'aria-invalid': isInvalid ? 'true' : undefined
            },
            labelProps: labelProps,
            inputProps: inputProps,
            incrementButtonProps: incrementButtonProps,
            decrementButtonProps: decrementButtonProps,
            errorMessageProps: errorMessageProps,
            descriptionProps: descriptionProps,
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ const $884aeceb3d67f00f$export$37b65e5b5444d35c = new WeakMap();

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {
        let { value: value, children: children, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby } = props;
        const isDisabled = props.isDisabled || state.isDisabled;
        let hasChildren = children != null;
        let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
        if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');
        let checked = state.selectedValue === value;
        let onChange = (e)=>{
            e.stopPropagation();
            state.setSelectedValue(value);
        };
        let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
            isDisabled: isDisabled
        });
        // iOS does not toggle radios if you drag off and back onto the label, so handle it ourselves.
        let { pressProps: labelProps, isPressed: isLabelPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
            isDisabled: isDisabled,
            onPress () {
                state.setSelectedValue(value);
            }
        });
        let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(($3ef42575df84b30b$export$9d1611c77c2fe928)(props, {
            onFocus: ()=>state.setLastFocusedValue(value)
        }), ref);
        let interactions = ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps);
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            labelable: true
        });
        let tabIndex = -1;
        if (state.selectedValue != null) {
            if (state.selectedValue === value) tabIndex = 0;
        } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) tabIndex = 0;
        if (isDisabled) tabIndex = undefined;
        let { name: name, descriptionId: descriptionId, errorMessageId: errorMessageId, validationBehavior: validationBehavior } = ($884aeceb3d67f00f$export$37b65e5b5444d35c).get(state);
        ($99facab73266f662$export$5add1d006293d136)(ref, state.selectedValue, state.setSelectedValue);
        ($e93e671b31057976$export$b8473d3665f3a75a)({
            validationBehavior: validationBehavior
        }, state, ref);
        return {
            labelProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
                onClick: (e)=>e.preventDefault()
            }),
            inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
                ...interactions,
                type: 'radio',
                name: name,
                tabIndex: tabIndex,
                disabled: isDisabled,
                required: state.isRequired && validationBehavior === 'native',
                checked: checked,
                value: value,
                onChange: onChange,
                'aria-describedby': [
                    props['aria-describedby'],
                    state.isInvalid ? errorMessageId : null,
                    descriptionId
                ].filter(Boolean).join(' ') || undefined
            }),
            isDisabled: isDisabled,
            isSelected: checked,
            isPressed: isPressed || isLabelPressed
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state) {
        let { name: name, isReadOnly: isReadOnly, isRequired: isRequired, isDisabled: isDisabled, orientation: orientation = 'vertical', validationBehavior: validationBehavior = 'aria' } = props;
        let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
        let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
            ...props,
            // Radio group is not an HTML input element so it
            // shouldn't be labeled by a <label> element.
            labelElementType: 'span',
            isInvalid: state.isInvalid,
            errorMessage: props.errorMessage || validationErrors
        });
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            labelable: true
        });
        // When the radio group loses focus, reset the focusable radio to null if
        // there is no selection. This allows tabbing into the group from either
        // direction to go to the first or last radio.
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            onBlurWithin (e) {
                var _props_onBlur;
                (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);
                if (!state.selectedValue) state.setLastFocusedValue(null);
            },
            onFocusWithin: props.onFocus,
            onFocusWithinChange: props.onFocusChange
        });
        let onKeyDown = (e)=>{
            let nextDir;
            switch(e.key){
                case 'ArrowRight':
                    if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'prev';
                    else nextDir = 'next';
                    break;
                case 'ArrowLeft':
                    if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'next';
                    else nextDir = 'prev';
                    break;
                case 'ArrowDown':
                    nextDir = 'next';
                    break;
                case 'ArrowUp':
                    nextDir = 'prev';
                    break;
                default:
                    return;
            }
            e.preventDefault();
            let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(e.currentTarget, {
                from: e.target
            });
            let nextElem;
            if (nextDir === 'next') {
                nextElem = walker.nextNode();
                if (!nextElem) {
                    walker.currentNode = e.currentTarget;
                    nextElem = walker.firstChild();
                }
            } else {
                nextElem = walker.previousNode();
                if (!nextElem) {
                    walker.currentNode = e.currentTarget;
                    nextElem = walker.lastChild();
                }
            }
            if (nextElem) {
                // Call focus on nextElem so that keyboard navigation scrolls the radio into view
                nextElem.focus();
                state.setSelectedValue(nextElem.value);
            }
        };
        let groupName = ($bdb11010cef70236$export$f680877a34711e37)(name);
        ($884aeceb3d67f00f$export$37b65e5b5444d35c).set(state, {
            name: groupName,
            descriptionId: descriptionProps.id,
            errorMessageId: errorMessageProps.id,
            validationBehavior: validationBehavior
        });
        return {
            radioGroupProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
                // https://www.w3.org/TR/wai-aria-1.2/#radiogroup
                role: 'radiogroup',
                onKeyDown: onKeyDown,
                'aria-invalid': state.isInvalid || undefined,
                'aria-errormessage': props['aria-errormessage'],
                'aria-readonly': isReadOnly || undefined,
                'aria-required': isRequired || undefined,
                'aria-disabled': isDisabled || undefined,
                'aria-orientation': orientation,
                ...fieldProps,
                ...focusWithinProps
            }),
            labelProps: labelProps,
            descriptionProps: descriptionProps,
            errorMessageProps: errorMessageProps,
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 






    const $58aed456727eb0f3$export$703601b7e90536f8 = new WeakMap();
    function $58aed456727eb0f3$export$e64b2f635402ca43(props, state, ref) {
        let { keyboardDelegate: keyboardDelegate, isDisabled: isDisabled, isRequired: isRequired, name: name, validationBehavior: validationBehavior = 'aria' } = props;
        // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
        // When virtualized, the layout object will be passed in as a prop and override this.
        let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
            usage: 'search',
            sensitivity: 'base'
        });
        let delegate = (0, wp.element.useMemo)(()=>keyboardDelegate || new ($2a25aae57d74318e$export$a05409b8bb224a5a)(state.collection, state.disabledKeys, null, collator), [
            keyboardDelegate,
            state.collection,
            state.disabledKeys,
            collator
        ]);
        let { menuTriggerProps: menuTriggerProps, menuProps: menuProps } = ($168583247155ddda$export$dc9c12ed27dd1b49)({
            isDisabled: isDisabled,
            type: 'listbox'
        }, state, ref);
        let onKeyDown = (e)=>{
            switch(e.key){
                case 'ArrowLeft':
                    {
                        // prevent scrolling containers
                        e.preventDefault();
                        let key = state.selectedKey != null ? delegate.getKeyAbove(state.selectedKey) : delegate.getFirstKey();
                        if (key) state.setSelectedKey(key);
                        break;
                    }
                case 'ArrowRight':
                    {
                        // prevent scrolling containers
                        e.preventDefault();
                        let key = state.selectedKey != null ? delegate.getKeyBelow(state.selectedKey) : delegate.getFirstKey();
                        if (key) state.setSelectedKey(key);
                        break;
                    }
            }
        };
        let { typeSelectProps: typeSelectProps } = ($fb3050f43d946246$export$e32c88dfddc6e1d8)({
            keyboardDelegate: delegate,
            selectionManager: state.selectionManager,
            onTypeSelect (key) {
                state.setSelectedKey(key);
            }
        });
        let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
        let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
            ...props,
            labelElementType: 'span',
            isInvalid: isInvalid,
            errorMessage: props.errorMessage || validationErrors
        });
        typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;
        delete typeSelectProps.onKeyDownCapture;
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            labelable: true
        });
        let triggerProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(typeSelectProps, menuTriggerProps, fieldProps);
        let valueId = ($bdb11010cef70236$export$f680877a34711e37)();
        $58aed456727eb0f3$export$703601b7e90536f8.set(state, {
            isDisabled: isDisabled,
            isRequired: isRequired,
            name: name,
            validationBehavior: validationBehavior
        });
        return {
            labelProps: {
                ...labelProps,
                onClick: ()=>{
                    if (!props.isDisabled) {
                        ref.current.focus();
                        // Show the focus ring so the user knows where focus went
                        ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
                    }
                }
            },
            triggerProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
                ...triggerProps,
                isDisabled: isDisabled,
                onKeyDown: ($ff5963eb1fccf552$export$e08e3b67e392101e)(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),
                onKeyUp: props.onKeyUp,
                'aria-labelledby': [
                    valueId,
                    triggerProps['aria-labelledby'],
                    triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null
                ].filter(Boolean).join(' '),
                onFocus (e) {
                    if (state.isFocused) return;
                    if (props.onFocus) props.onFocus(e);
                    if (props.onFocusChange) props.onFocusChange(true);
                    state.setFocused(true);
                },
                onBlur (e) {
                    if (state.isOpen) return;
                    if (props.onBlur) props.onBlur(e);
                    if (props.onFocusChange) props.onFocusChange(false);
                    state.setFocused(false);
                }
            }),
            valueProps: {
                id: valueId
            },
            menuProps: {
                ...menuProps,
                autoFocus: state.focusStrategy || true,
                shouldSelectOnPressUp: true,
                shouldFocusOnHover: true,
                disallowEmptySelection: true,
                linkBehavior: 'selection',
                onBlur: (e)=>{
                    if (e.currentTarget.contains(e.relatedTarget)) return;
                    if (props.onBlur) props.onBlur(e);
                    if (props.onFocusChange) props.onFocusChange(false);
                    state.setFocused(false);
                },
                'aria-labelledby': [
                    fieldProps['aria-labelledby'],
                    triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null
                ].filter(Boolean).join(' ')
            },
            descriptionProps: descriptionProps,
            errorMessageProps: errorMessageProps,
            isInvalid: isInvalid,
            validationErrors: validationErrors,
            validationDetails: validationDetails
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef) {
        let data = ($58aed456727eb0f3$export$703601b7e90536f8).get(state) || {};
        let { autoComplete: autoComplete, name: name = data.name, isDisabled: isDisabled = data.isDisabled } = props;
        let { validationBehavior: validationBehavior, isRequired: isRequired } = data;
        let modality = ($507fabe10e71c6fb$export$98e20ec92f614cfe)();
        let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)();
        ($99facab73266f662$export$5add1d006293d136)(props.selectRef, state.selectedKey, state.setSelectedKey);
        ($e93e671b31057976$export$b8473d3665f3a75a)({
            validationBehavior: validationBehavior,
            focus: ()=>triggerRef.current.focus()
        }, state, props.selectRef);
        var _state_selectedKey;
        // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.
        // In Firefox, there must be a <label> to identify the <select> whereas other browsers
        // seem to identify it just by surrounding text.
        // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a
        // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>
        // non tabbable with tabIndex={-1}.
        //
        // In mobile browsers, there are next/previous buttons above the software keyboard for navigating
        // between fields in a form. These only support native form inputs that are tabbable. In order to
        // support those, an additional hidden input is used to marshall focus to the button. It is tabbable
        // except when the button is focused, so that shift tab works properly to go to the actual previous
        // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes
        // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to
        // prevent Safari from zooming in on the input when it is focused.
        //
        // If the current interaction modality is null, then the user hasn't interacted with the page yet.
        // In this case, we set the tabIndex to -1 on the input element so that automated accessibility
        // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.
        return {
            containerProps: {
                ...visuallyHiddenProps,
                'aria-hidden': true,
                ['data-react-aria-prevent-focus']: true,
                ['data-a11y-ignore']: 'aria-hidden-focus'
            },
            inputProps: {
                type: 'text',
                tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,
                style: {
                    fontSize: 16
                },
                onFocus: ()=>triggerRef.current.focus(),
                disabled: isDisabled
            },
            selectProps: {
                tabIndex: -1,
                autoComplete: autoComplete,
                disabled: isDisabled,
                required: validationBehavior === 'native' && isRequired,
                name: name,
                value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : '',
                onChange: (e)=>state.setSelectedKey(e.target.value)
            }
        };
    }
    function $bdd25dc72710631f$export$cbd84cdb2e668835(props) {
        let { state: state, triggerRef: triggerRef, label: label, name: name, isDisabled: isDisabled } = props;
        let selectRef = (0, wp.element.useRef)(null);
        let { containerProps: containerProps, inputProps: inputProps, selectProps: selectProps } = $bdd25dc72710631f$export$f809e80f58e251d1({
            ...props,
            selectRef: selectRef
        }, state, triggerRef);
        var _state_selectedKey;
        // If used in a <form>, use a hidden input so the value can be submitted to a server.
        // If the collection isn't too big, use a hidden <select> element for this so that browser
        // autofill will work. Otherwise, use an <input type="hidden">.
        if (state.collection.size <= 300) return /*#__PURE__*/ (wp.element).createElement("div", {
            ...containerProps,
            "data-testid": "hidden-select-container"
        }, /*#__PURE__*/ (wp.element).createElement("input", inputProps), /*#__PURE__*/ (wp.element).createElement("label", null, label, /*#__PURE__*/ (wp.element).createElement("select", {
            ...selectProps,
            ref: selectRef
        }, /*#__PURE__*/ (wp.element).createElement("option", null), [
            ...state.collection.getKeys()
        ].map((key)=>{
            let item = state.collection.getItem(key);
            if (item.type === 'item') return /*#__PURE__*/ (wp.element).createElement("option", {
                key: item.key,
                value: item.key
            }, item.textValue);
        }))));
        else if (name) return /*#__PURE__*/ (wp.element).createElement("input", {
            type: "hidden",
            autoComplete: selectProps.autoComplete,
            name: name,
            disabled: isDisabled,
            value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : ''
        });
        return null;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $f4b273590fab9f93$export$52210f68a14655d0(props) {
        let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            labelable: true
        });
        let ariaOrientation;
        // if orientation is horizontal, aria-orientation default is horizontal, so we leave it undefined
        // if it's vertical, we need to specify it
        if (props.orientation === 'vertical') ariaOrientation = 'vertical';
        // hr elements implicitly have role = separator and a horizontal orientation
        if (props.elementType !== 'hr') return {
            separatorProps: {
                ...domProps,
                role: 'separator',
                'aria-orientation': ariaOrientation
            }
        };
        return {
            separatorProps: domProps
        };
    }

    const $aa519ee6cf463259$export$d6c8d9636a3dc49c = new WeakMap();
    function $aa519ee6cf463259$export$68e648cbec363a18(state, index) {
        let data = $aa519ee6cf463259$export$d6c8d9636a3dc49c.get(state);
        if (!data) throw new Error('Unknown slider state');
        return `${data.id}-${index}`;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $bcca50147b47f54d$export$56b2c08e277f365(props, state, trackRef) {
        let { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)(props);
        let isVertical = props.orientation === 'vertical';
        var _labelProps_id;
        // Attach id of the label to the state so it can be accessed by useSliderThumb.
        ($aa519ee6cf463259$export$d6c8d9636a3dc49c).set(state, {
            id: (_labelProps_id = labelProps.id) !== null && _labelProps_id !== void 0 ? _labelProps_id : fieldProps.id,
            'aria-describedby': props['aria-describedby'],
            'aria-details': props['aria-details']
        });
        let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
        // When the user clicks or drags the track, we want the motion to set and drag the
        // closest thumb.  Hence we also need to install useMove() on the track element.
        // Here, we keep track of which index is the "closest" to the drag start point.
        // It is set onMouseDown/onTouchDown; see trackProps below.
        const realTimeTrackDraggingIndex = (0, wp.element.useRef)(null);
        const reverseX = direction === 'rtl';
        const currentPosition = (0, wp.element.useRef)(null);
        const { moveProps: moveProps } = ($e8a7022cf87cba2a$export$36da96379f79f245)({
            onMoveStart () {
                currentPosition.current = null;
            },
            onMove ({ deltaX: deltaX, deltaY: deltaY }) {
                let { height: height, width: width } = trackRef.current.getBoundingClientRect();
                let size = isVertical ? height : width;
                if (currentPosition.current == null) currentPosition.current = state.getThumbPercent(realTimeTrackDraggingIndex.current) * size;
                let delta = isVertical ? deltaY : deltaX;
                if (isVertical || reverseX) delta = -delta;
                currentPosition.current += delta;
                if (realTimeTrackDraggingIndex.current != null && trackRef.current) {
                    const percent = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(currentPosition.current / size, 0, 1);
                    state.setThumbPercent(realTimeTrackDraggingIndex.current, percent);
                }
            },
            onMoveEnd () {
                if (realTimeTrackDraggingIndex.current != null) {
                    state.setThumbDragging(realTimeTrackDraggingIndex.current, false);
                    realTimeTrackDraggingIndex.current = null;
                }
            }
        });
        let currentPointer = (0, wp.element.useRef)(undefined);
        let onDownTrack = (e, id, clientX, clientY)=>{
            // We only trigger track-dragging if the user clicks on the track itself and nothing is currently being dragged.
            if (trackRef.current && !props.isDisabled && state.values.every((_, i)=>!state.isThumbDragging(i))) {
                let { height: height, width: width, top: top, left: left } = trackRef.current.getBoundingClientRect();
                let size = isVertical ? height : width;
                // Find the closest thumb
                const trackPosition = isVertical ? top : left;
                const clickPosition = isVertical ? clientY : clientX;
                const offset = clickPosition - trackPosition;
                let percent = offset / size;
                if (direction === 'rtl' || isVertical) percent = 1 - percent;
                let value = state.getPercentValue(percent);
                // to find the closet thumb we split the array based on the first thumb position to the "right/end" of the click.
                let closestThumb;
                let split = state.values.findIndex((v)=>value - v < 0);
                if (split === 0) closestThumb = split;
                else if (split === -1) closestThumb = state.values.length - 1;
                else {
                    let lastLeft = state.values[split - 1];
                    let firstRight = state.values[split];
                    // Pick the last left/start thumb, unless they are stacked on top of each other, then pick the right/end one
                    if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) closestThumb = split - 1;
                    else closestThumb = split;
                }
                // Confirm that the found closest thumb is editable, not disabled, and move it
                if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {
                    // Don't unfocus anything
                    e.preventDefault();
                    realTimeTrackDraggingIndex.current = closestThumb;
                    state.setFocusedThumb(closestThumb);
                    currentPointer.current = id;
                    state.setThumbDragging(realTimeTrackDraggingIndex.current, true);
                    state.setThumbValue(closestThumb, value);
                    addGlobalListener(window, 'mouseup', onUpTrack, false);
                    addGlobalListener(window, 'touchend', onUpTrack, false);
                    addGlobalListener(window, 'pointerup', onUpTrack, false);
                } else realTimeTrackDraggingIndex.current = null;
            }
        };
        let onUpTrack = (e)=>{
            var _e_changedTouches;
            var _e_pointerId;
            let id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;
            if (id === currentPointer.current) {
                if (realTimeTrackDraggingIndex.current != null) {
                    state.setThumbDragging(realTimeTrackDraggingIndex.current, false);
                    realTimeTrackDraggingIndex.current = null;
                }
                removeGlobalListener(window, 'mouseup', onUpTrack, false);
                removeGlobalListener(window, 'touchend', onUpTrack, false);
                removeGlobalListener(window, 'pointerup', onUpTrack, false);
            }
        };
        if ('htmlFor' in labelProps && labelProps.htmlFor) {
            // Ideally the `for` attribute should point to the first thumb, but VoiceOver on iOS
            // causes this to override the `aria-labelledby` on the thumb. This causes the first
            // thumb to only be announced as the slider label rather than its individual name as well.
            // See https://bugs.webkit.org/show_bug.cgi?id=172464.
            delete labelProps.htmlFor;
            labelProps.onClick = ()=>{
                var // Safari does not focus <input type="range"> elements when clicking on an associated <label>,
                // so do it manually. In addition, make sure we show the focus ring.
                _document_getElementById;
                (_document_getElementById = document.getElementById(($aa519ee6cf463259$export$68e648cbec363a18)(state, 0))) === null || _document_getElementById === void 0 ? void 0 : _document_getElementById.focus();
                ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
            };
        }
        return {
            labelProps: labelProps,
            // The root element of the Slider will have role="group" to group together
            // all the thumb inputs in the Slider.  The label of the Slider will
            // be used to label the group.
            groupProps: {
                role: 'group',
                ...fieldProps
            },
            trackProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)({
                onMouseDown (e) {
                    if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                    onDownTrack(e, undefined, e.clientX, e.clientY);
                },
                onPointerDown (e) {
                    if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) return;
                    onDownTrack(e, e.pointerId, e.clientX, e.clientY);
                },
                onTouchStart (e) {
                    onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);
                },
                style: {
                    position: 'relative',
                    touchAction: 'none'
                }
            }, moveProps),
            outputProps: {
                htmlFor: state.values.map((_, index)=>($aa519ee6cf463259$export$68e648cbec363a18)(state, index)).join(' '),
                'aria-live': 'off'
            }
        };
    }

    function $47b897dc8cdb026b$export$8d15029008292ae(opts, state) {
        let { index: index = 0, isRequired: isRequired, validationState: validationState, isInvalid: isInvalid, trackRef: trackRef, inputRef: inputRef, orientation: orientation = state.orientation, name: name } = opts;
        let isDisabled = opts.isDisabled || state.isDisabled;
        let isVertical = orientation === 'vertical';
        let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
        let data = ($aa519ee6cf463259$export$d6c8d9636a3dc49c).get(state);
        var _opts_arialabelledby;
        const { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)({
            ...opts,
            id: ($aa519ee6cf463259$export$68e648cbec363a18)(state, index),
            'aria-labelledby': `${data.id} ${(_opts_arialabelledby = opts['aria-labelledby']) !== null && _opts_arialabelledby !== void 0 ? _opts_arialabelledby : ''}`.trim()
        });
        const value = state.values[index];
        const focusInput = (0, wp.element.useCallback)(()=>{
            if (inputRef.current) ($7215afc6de606d6b$export$de79e2c695e052f3)(inputRef.current);
        }, [
            inputRef
        ]);
        const isFocused = state.focusedThumb === index;
        (0, wp.element.useEffect)(()=>{
            if (isFocused) focusInput();
        }, [
            isFocused,
            focusInput
        ]);
        let reverseX = direction === 'rtl';
        let currentPosition = (0, wp.element.useRef)(null);
        let { keyboardProps: keyboardProps } = ($46d819fcbaf35654$export$8f71654801c2f7cd)({
            onKeyDown (e) {
                let { getThumbMaxValue: getThumbMaxValue, getThumbMinValue: getThumbMinValue, decrementThumb: decrementThumb, incrementThumb: incrementThumb, setThumbValue: setThumbValue, setThumbDragging: setThumbDragging, pageSize: pageSize } = state;
                // these are the cases that useMove or useSlider don't handle
                if (!/^(PageUp|PageDown|Home|End)$/.test(e.key)) {
                    e.continuePropagation();
                    return;
                }
                // same handling as useMove, stopPropagation to prevent useSlider from handling the event as well.
                e.preventDefault();
                // remember to set this so that onChangeEnd is fired
                setThumbDragging(index, true);
                switch(e.key){
                    case 'PageUp':
                        incrementThumb(index, pageSize);
                        break;
                    case 'PageDown':
                        decrementThumb(index, pageSize);
                        break;
                    case 'Home':
                        setThumbValue(index, getThumbMinValue(index));
                        break;
                    case 'End':
                        setThumbValue(index, getThumbMaxValue(index));
                        break;
                }
                setThumbDragging(index, false);
            }
        });
        let { moveProps: moveProps } = ($e8a7022cf87cba2a$export$36da96379f79f245)({
            onMoveStart () {
                currentPosition.current = null;
                state.setThumbDragging(index, true);
            },
            onMove ({ deltaX: deltaX, deltaY: deltaY, pointerType: pointerType, shiftKey: shiftKey }) {
                const { getThumbPercent: getThumbPercent, setThumbPercent: setThumbPercent, decrementThumb: decrementThumb, incrementThumb: incrementThumb, step: step, pageSize: pageSize } = state;
                let { width: width, height: height } = trackRef.current.getBoundingClientRect();
                let size = isVertical ? height : width;
                if (currentPosition.current == null) currentPosition.current = getThumbPercent(index) * size;
                if (pointerType === 'keyboard') {
                    if (deltaX > 0 && reverseX || deltaX < 0 && !reverseX || deltaY > 0) decrementThumb(index, shiftKey ? pageSize : step);
                    else incrementThumb(index, shiftKey ? pageSize : step);
                } else {
                    let delta = isVertical ? deltaY : deltaX;
                    if (isVertical || reverseX) delta = -delta;
                    currentPosition.current += delta;
                    setThumbPercent(index, ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(currentPosition.current / size, 0, 1));
                }
            },
            onMoveEnd () {
                state.setThumbDragging(index, false);
            }
        });
        // Immediately register editability with the state
        state.setThumbEditable(index, !isDisabled);
        const { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(($3ef42575df84b30b$export$9d1611c77c2fe928)(opts, {
            onFocus: ()=>state.setFocusedThumb(index),
            onBlur: ()=>state.setFocusedThumb(undefined)
        }), inputRef);
        let currentPointer = (0, wp.element.useRef)(undefined);
        let onDown = (id)=>{
            focusInput();
            currentPointer.current = id;
            state.setThumbDragging(index, true);
            addGlobalListener(window, 'mouseup', onUp, false);
            addGlobalListener(window, 'touchend', onUp, false);
            addGlobalListener(window, 'pointerup', onUp, false);
        };
        let onUp = (e)=>{
            var _e_changedTouches;
            var _e_pointerId;
            let id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;
            if (id === currentPointer.current) {
                focusInput();
                state.setThumbDragging(index, false);
                removeGlobalListener(window, 'mouseup', onUp, false);
                removeGlobalListener(window, 'touchend', onUp, false);
                removeGlobalListener(window, 'pointerup', onUp, false);
            }
        };
        let thumbPosition = state.getThumbPercent(index);
        if (isVertical || direction === 'rtl') thumbPosition = 1 - thumbPosition;
        let interactions = !isDisabled ? ($3ef42575df84b30b$export$9d1611c77c2fe928)(keyboardProps, moveProps, {
            onMouseDown: (e)=>{
                if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                onDown();
            },
            onPointerDown: (e)=>{
                if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                onDown(e.pointerId);
            },
            onTouchStart: (e)=>{
                onDown(e.changedTouches[0].identifier);
            }
        }) : {};
        ($99facab73266f662$export$5add1d006293d136)(inputRef, value, (v)=>{
            state.setThumbValue(index, v);
        });
        // We install mouse handlers for the drag motion on the thumb div, but
        // not the key handler for moving the thumb with the slider.  Instead,
        // we focus the range input, and let the browser handle the keyboard
        // interactions; we then listen to input's onChange to update state.
        return {
            inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, fieldProps, {
                type: 'range',
                tabIndex: !isDisabled ? 0 : undefined,
                min: state.getThumbMinValue(index),
                max: state.getThumbMaxValue(index),
                step: state.step,
                value: value,
                name: name,
                disabled: isDisabled,
                'aria-orientation': orientation,
                'aria-valuetext': state.getThumbValueLabel(index),
                'aria-required': isRequired || undefined,
                'aria-invalid': isInvalid || validationState === 'invalid' || undefined,
                'aria-errormessage': opts['aria-errormessage'],
                'aria-describedby': [
                    data['aria-describedby'],
                    opts['aria-describedby']
                ].filter(Boolean).join(' '),
                'aria-details': [
                    data['aria-details'],
                    opts['aria-details']
                ].filter(Boolean).join(' '),
                onChange: (e)=>{
                    state.setThumbValue(index, parseFloat(e.target.value));
                }
            }),
            thumbProps: {
                ...interactions,
                style: {
                    position: 'absolute',
                    [isVertical ? 'top' : 'left']: `${thumbPosition * 100}%`,
                    transform: 'translate(-50%, -50%)',
                    touchAction: 'none'
                }
            },
            labelProps: labelProps,
            isDragging: state.isThumbDragging(index),
            isDisabled: isDisabled,
            isFocused: isFocused
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $b418ec0c85c52f27$export$d853f7095ae95f88(props, state, ref) {
        let { labelProps: labelProps, inputProps: inputProps, isSelected: isSelected, isPressed: isPressed, isDisabled: isDisabled, isReadOnly: isReadOnly } = ($d2c8e2b0480f3f34$export$cbe85ee05b554577)(props, state, ref);
        return {
            labelProps: labelProps,
            inputProps: {
                ...inputProps,
                role: 'switch',
                checked: isSelected
            },
            isSelected: isSelected,
            isPressed: isPressed,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly
        };
    }

    var __defProp$1x = Object.defineProperty;
    var __name$1x = (target, value) => __defProp$1x(target, "name", { value, configurable: true });
    const dynamicValueToString = /* @__PURE__ */ __name$1x((type, settings = false) => {
      if (settings === false)
        return `[[${type}]]`;
      let settingsString = "";
      for (const key in settings) {
        const value = settings[key];
        settingsString += `::${key}=${typeof value === "object" ? JSON.stringify(value) : value}`;
      }
      return `[[${type}${settingsString}]]`;
    }, "dynamicValueToString");
    const stringToDynamicValue = /* @__PURE__ */ __name$1x((string) => {
      if (typeof string !== "string")
        return false;
      const data = string.replace("[[", "").replace("]]", "").split("::");
      if (data.length === 0)
        return false;
      return data.reduce(
        (response, string2, i) => {
          if (i === 0)
            return response;
          const setting = string2.split("=");
          return {
            ...response,
            fields: {
              ...response.fields,
              [setting[0]]: setting[1]
            }
          };
        },
        {
          type: data[0],
          settings: {}
        }
      );
    }, "stringToDynamicValue");

    var __defProp$1w = Object.defineProperty;
    var __name$1w = (target, value) => __defProp$1w(target, "name", { value, configurable: true });
    const { dynamics } = TangibleFields;
    const dynamicValueRegex = /\[\[((?:(?!\]\]).)+\]?)\]\]/g;
    const getDynamicStrings = /* @__PURE__ */ __name$1w((string) => typeof string === "string" ? Array.from(
      string.matchAll(dynamicValueRegex),
      (match) => match[1]
    ) : [], "getDynamicStrings");
    const dynamicValuesAPI = /* @__PURE__ */ __name$1w((value, setValue, config) => ({
      getTypes: () => config.types,
      getMode: () => config.mode,
      getCategories: () => config.categories,
      getList: () => dynamics.values,
      getAll: () => getDynamicStrings(value).map(stringToDynamicValue),
      getLabel: (type) => dynamics.values[type] ? dynamics.values[type].label : type,
      stringify: dynamicValueToString,
      parse: stringToDynamicValue,
      hasValues: () => getDynamicStrings(value).length !== 0,
      setValue: (value2) => setValue(value2)
    }), "dynamicValuesAPI");

    var __defProp$1v = Object.defineProperty;
    var __name$1v = (target, value) => __defProp$1v(target, "name", { value, configurable: true });
    const uniqid = /* @__PURE__ */ __name$1v(() => {
      const sec = Date.now() * 1e3 + Math.random() * 1e3;
      return sec.toString(16).replace(/\./g, "").padEnd(14, "0");
    }, "uniqid");
    const initJSON = /* @__PURE__ */ __name$1v((value, empty = false) => {
      if (Array.isArray(value) || typeof value === "object") {
        return value;
      }
      if (value === "" && empty)
        return empty;
      try {
        return JSON.parse(value);
      } catch {
        return {};
      }
    }, "initJSON");
    const initSet = /* @__PURE__ */ __name$1v((value) => {
      if (value instanceof Set)
        return value;
      if (Array.isArray(value))
        return new Set(value);
      if (value.startsWith("[") && value.endsWith("]")) {
        return initJSON(value, /* @__PURE__ */ new Set());
      }
      return new Set(value.split(","));
    }, "initSet");
    const getOptions = /* @__PURE__ */ __name$1v((choices) => Object.keys(choices).map((key) => choices[key].choices ? {
      ...choices[key],
      key: choices[key].name,
      label: choices[key].name,
      choices: Object.keys(choices[key].choices).map(
        (value) => ({
          value,
          label: choices[key].choices[value]
        })
      )
    } : {
      value: key,
      label: choices[key]
    }), "getOptions");
    const getOption = /* @__PURE__ */ __name$1v((value, options) => options.filter((option) => option.value === value)[0] ?? false, "getOption");
    const areSameObjects = /* @__PURE__ */ __name$1v((object1, object2) => JSON.stringify(object1) === JSON.stringify(object2), "areSameObjects");
    const deepCopy = /* @__PURE__ */ __name$1v((object) => JSON.parse(JSON.stringify(object)), "deepCopy");

    var utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        areSameObjects: areSameObjects,
        deepCopy: deepCopy,
        getOption: getOption,
        getOptions: getOptions,
        initJSON: initJSON,
        initSet: initSet,
        uniqid: uniqid
    });

    var __defProp$1u = Object.defineProperty;
    var __name$1u = (target, value) => __defProp$1u(target, "name", { value, configurable: true });
    const repeaterDispatcher = /* @__PURE__ */ __name$1u((emptyItem, maxLength) => (items, action) => {
      if (action.callback)
        setTimeout(action.callback);
      switch (action.type) {
        case "add":
          return items.length >= maxLength ? items : [
            ...items,
            {
              key: uniqid(),
              ...action.data ?? emptyItem
            }
          ];
        case "insert":
          return items.length >= maxLength ? items : [
            ...items.slice(0, action.position),
            {
              key: uniqid(),
              ...action.data ?? emptyItem
            },
            ...items.slice(action.position)
          ];
        case "remove":
          return [...items.slice(0, action.item), ...items.slice(action.item + 1)];
        case "update":
          items[action.item][action.control] = action.value;
          return [...items];
        case "clone":
          return items.length >= maxLength ? items : [
            ...items,
            {
              ...action.item,
              key: uniqid()
            }
          ];
        case "clear":
          return [];
        case "bulkCheck":
          return items.map((item) => ({ ...item, _bulkCheckbox: true }));
        case "bulkUncheck":
          return items.map((item) => ({ ...item, _bulkCheckbox: false }));
        case "bulkUpdate":
          return items.map((item) => item._bulkCheckbox === true ? {
            ...item,
            [action.control]: action.value
          } : item);
        case "bulkRemove":
          return items.filter((item) => item._bulkCheckbox !== true);
        default:
          return items;
      }
    }, "repeaterDispatcher");
    const initDispatcher = /* @__PURE__ */ __name$1u((value) => {
      try {
        const initialItems = Array.isArray(value) ? value : JSON.parse(value);
        return Array.isArray(initialItems) ? initialItems : [{}];
      } catch (err) {
        return [{}];
      }
    }, "initDispatcher");

    const Button = wp.element.forwardRef(({
      children,
      ...props
    }, ref) => {
      const _ref = wp.element.useRef();
      const buttonRef = ref ?? _ref;
      const content = props.content ?? children;
      const buttonType = props.buttonType ?? "button";
      const type = props.layout ? props.layout ? `tf-button-${props.layout}` : "" : props.type ? `tf-button-${props.type}` : "";
      const { buttonProps } = $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref);
      const context = props.context ? `tf-button-is-${props.context}` : "";
      const classes = `${type} ${context} ${props.className ?? ""}`;
      const CustomTag = props.changeTag && props.changeTag == "span" ? "span" : "button";
      return /* @__PURE__ */ wp.element.createElement(
        CustomTag,
        {
          className: classes,
          style: props.style,
          ...buttonProps,
          onClick: (event) => {
            buttonProps.onClick(event);
            triggerEvent("buttonPressed", {
              name: props.name ?? false,
              props,
              event
            });
          },
          ref: buttonRef,
          type: buttonType
        },
        props.contentVisuallyHidden ? /* @__PURE__ */ wp.element.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, content) : content
      );
    });

    var __defProp$1t = Object.defineProperty;
    var __name$1t = (target, value) => __defProp$1t(target, "name", { value, configurable: true });
    const Description = /* @__PURE__ */ __name$1t(({
      descriptionProps,
      parent,
      children,
      ...props
    }) => {
      const Wrapper = parent?.descriptionVisuallyHidden ? $5c3e21d68f1c4674$export$439d29a4e110a164 : wp.element.Fragment;
      const content = props.content ?? children;
      return /* @__PURE__ */ wp.element.createElement(Wrapper, null, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-description", ...descriptionProps }, content));
    }, "Description");

    var __defProp$1s = Object.defineProperty;
    var __name$1s = (target, value) => __defProp$1s(target, "name", { value, configurable: true });
    const Dialog = /* @__PURE__ */ __name$1s(({ title, children, ...props }) => {
      const ref = wp.element.useRef();
      const { dialogProps } = $40df3f8667284809$export$d55e7ee900f34e93(props, ref);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dialog", ...dialogProps, ref }, title && /* @__PURE__ */ wp.element.createElement(Title, { level: 4 }, title), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dialog-content" }, children));
    }, "Dialog");

    var __defProp$1r = Object.defineProperty;
    var __name$1r = (target, value) => __defProp$1r(target, "name", { value, configurable: true });
    const ExpandablePanel = /* @__PURE__ */ __name$1r((props) => {
      const [showItem, setShowItem] = wp.element.useState(true);
      wp.element.useEffect(() => {
        if (props.isOpen !== showItem) {
          setShowItem(props.isOpen);
        }
      }, [props.isOpen]);
      const toggle = /* @__PURE__ */ __name$1r(() => {
        setShowItem(!showItem);
        props.onChange && props.onChange(!showItem);
      }, "toggle");
      let classes = "tf-panel";
      classes += ` tf-panel-${showItem ? "open" : "closed"}`;
      classes += props.className ? ` ${props.className}` : "";
      classes += props.class ? ` ${props.class}` : "";
      classes += !props.footer ? " tf-panel-no-footer" : "";
      return /* @__PURE__ */ wp.element.createElement("div", { className: classes, "data-status": showItem ? "open" : "closed" }, /* @__PURE__ */ wp.element.createElement(Button, { className: "tf-panel-header", type: "action", onClick: toggle }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-panel-header-left" }, props.headerLeft ? /* @__PURE__ */ wp.element.createElement("div", { className: "tf-panel-header-before-title" }, props.headerLeft) : null, props.title ? /* @__PURE__ */ wp.element.createElement("div", { className: "tf-panel-header-title" }, !wp.element.isValidElement(props.title) ? /* @__PURE__ */ wp.element.createElement("strong", null, props.title) : props.title) : null), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-panel-header-right" }, props.headerRight ? /* @__PURE__ */ wp.element.createElement("div", { className: "tf-panel-header-before-title" }, props.headerRight) : null, /* @__PURE__ */ wp.element.createElement("span", { className: "tf-panel-arrow" }))), showItem || props?.behavior === "hide" ? /* @__PURE__ */ wp.element.createElement("div", { className: "tf-panel-content" }, props.children) : null, props.footer ? /* @__PURE__ */ wp.element.createElement("div", { className: "tf-panel-footer" }, props.footer) : null);
    }, "ExpandablePanel");

    var __defProp$1q = Object.defineProperty;
    var __name$1q = (target, value) => __defProp$1q(target, "name", { value, configurable: true });
    const Label = /* @__PURE__ */ __name$1q(({
      labelProps,
      parent,
      children,
      ...props
    }) => {
      const Wrapper = parent?.labelVisuallyHidden ? $5c3e21d68f1c4674$export$439d29a4e110a164 : wp.element.Fragment;
      const content = props.content ?? children;
      return /* @__PURE__ */ wp.element.createElement(Wrapper, null, /* @__PURE__ */ wp.element.createElement("label", { className: "tf-label", ...labelProps }, content));
    }, "Label");

    var __defProp$1p = Object.defineProperty;
    var __name$1p = (target, value) => __defProp$1p(target, "name", { value, configurable: true });
    const Option = /* @__PURE__ */ __name$1p(({ item, state }) => {
      const ref = wp.element.useRef();
      const {
        optionProps,
        isSelected,
        isFocused,
        isDisabled
      } = $293f70390ea03370$export$497855f14858aa34({ key: item.key }, state, ref);
      const { focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
      let classes = "tf-list-box-option";
      if (isSelected)
        classes = classes += " tf-list-box-option-selected";
      if (isDisabled)
        classes = classes += " tf-list-box-option-disabled";
      if (isFocused)
        classes = classes += " tf-list-box-option-focus";
      return /* @__PURE__ */ wp.element.createElement(
        "li",
        {
          ...$3ef42575df84b30b$export$9d1611c77c2fe928(optionProps, focusProps),
          ref,
          className: classes
        },
        item.rendered
      );
    }, "Option");

    var __defProp$1o = Object.defineProperty;
    var __name$1o = (target, value) => __defProp$1o(target, "name", { value, configurable: true });
    const Section = /* @__PURE__ */ __name$1o(({ section, state }) => {
      const {
        itemProps,
        headingProps,
        groupProps
      } = $af383d3bef1cfdc9$export$c3f9f39876e4bc7({
        "heading": section.rendered,
        "aria-label": section["aria-label"]
      });
      const { separatorProps } = $f4b273590fab9f93$export$52210f68a14655d0({
        elementType: "li"
      });
      const isFirst = section.key === state.collection.getFirstKey();
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, !isFirst && /* @__PURE__ */ wp.element.createElement("li", { className: "tf-list-box-section-separator", ...separatorProps }), /* @__PURE__ */ wp.element.createElement("li", { className: "tf-list-box-section", ...itemProps }, section.rendered && /* @__PURE__ */ wp.element.createElement("span", { ...headingProps }, section.rendered), /* @__PURE__ */ wp.element.createElement("ul", { ...groupProps }, [...section.childNodes].map((item) => /* @__PURE__ */ wp.element.createElement(
        Option,
        {
          key: item.key ?? item.name,
          item,
          state
        }
      )))));
    }, "Section");

    var __defProp$1n = Object.defineProperty;
    var __name$1n = (target, value) => __defProp$1n(target, "name", { value, configurable: true });
    const ListBox = /* @__PURE__ */ __name$1n((props) => {
      const ref = wp.element.useRef();
      const { listBoxRef = ref, state } = props;
      const { listBoxProps } = $c132121280ec012d$export$50eacbbf140a3141(props, state, listBoxRef);
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
        "ul",
        {
          ...listBoxProps,
          ref: listBoxRef,
          className: "tf-list-box"
        },
        [...state.collection].map((item) => item.type === "section" ? /* @__PURE__ */ wp.element.createElement(Section, { key: item.key ?? item.level, section: item, state, shouldUseVirtualFocus: true }) : /* @__PURE__ */ wp.element.createElement(Option, { key: item.key ?? item.name, item, state, shouldUseVirtualFocus: true }))
      ), /* @__PURE__ */ wp.element.createElement($86ea4cb521eb2e37$export$2317d149ed6f78c4, { onDismiss: state.close }));
    }, "ListBox");

    var __defProp$1m = Object.defineProperty;
    var __name$1m = (target, value) => __defProp$1m(target, "name", { value, configurable: true });
    const Modal = /* @__PURE__ */ __name$1m(({ state, children, ...props }) => {
      const { ControlContext } = tangibleFields;
      const control = wp.element.useContext(ControlContext);
      const ref = wp.element.useRef(null);
      const { modalProps, underlayProps } = $8ac8429251c45e4b$export$dbc0f175b25fb0fb(props, state, ref);
      return /* @__PURE__ */ wp.element.createElement($337b884510726a0d$export$c6fdb837b070b4ff, { portalContainer: control.portalContainer }, /* @__PURE__ */ wp.element.createElement("div", { className: control.wrapper }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-modal", ...underlayProps, style: { zIndex: 1e6 } }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-modal-container", ref, ...modalProps }, children))));
    }, "Modal");

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    function $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue) {
        return minValue != null && date.compare(minValue) < 0 || maxValue != null && date.compare(maxValue) > 0;
    }
    function $f62d864046160412$export$f4a51ff076cc9a09(date, duration, locale, minValue, maxValue) {
        let halfDuration = {};
        for(let key in duration){
            halfDuration[key] = Math.floor(duration[key] / 2);
            if (halfDuration[key] > 0 && duration[key] % 2 === 0) halfDuration[key]--;
        }
        let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(halfDuration);
        return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
    }
    function $f62d864046160412$export$144a00ba6044eb9(date, duration, locale, minValue, maxValue) {
        // align to the start of the largest unit
        let aligned = date;
        if (duration.years) aligned = ($14e0f24ef4ac5c92$export$f91e89d3d0406102)(date);
        else if (duration.months) aligned = ($14e0f24ef4ac5c92$export$a5a3b454ada2268e)(date);
        else if (duration.weeks) aligned = ($14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(date, locale);
        return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
    }
    function $f62d864046160412$export$530edbfc915b2b04(date, duration, locale, minValue, maxValue) {
        let d = {
            ...duration
        };
        // subtract 1 from the smallest unit
        if (duration.days) d.days--;
        else if (duration.weeks) d.weeks--;
        else if (duration.months) d.months--;
        else if (duration.years) d.years--;
        let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(d);
        return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
    }
    function $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue) {
        if (minValue && date.compare(minValue) >= 0) aligned = ($14e0f24ef4ac5c92$export$a75f2bff57811055)(aligned, $f62d864046160412$export$144a00ba6044eb9(($11d87f3f76e88657$export$93522d1a439f3617)(minValue), duration, locale));
        if (maxValue && date.compare(maxValue) <= 0) aligned = ($14e0f24ef4ac5c92$export$5c333a116e949cdd)(aligned, $f62d864046160412$export$530edbfc915b2b04(($11d87f3f76e88657$export$93522d1a439f3617)(maxValue), duration, locale));
        return aligned;
    }
    function $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue) {
        if (minValue) date = ($14e0f24ef4ac5c92$export$a75f2bff57811055)(date, ($11d87f3f76e88657$export$93522d1a439f3617)(minValue));
        if (maxValue) date = ($14e0f24ef4ac5c92$export$5c333a116e949cdd)(date, ($11d87f3f76e88657$export$93522d1a439f3617)(maxValue));
        return date;
    }
    function $f62d864046160412$export$a1d3911297b952d7(date, minValue, isDateUnavailable) {
        if (!isDateUnavailable) return date;
        while(date.compare(minValue) >= 0 && isDateUnavailable(date))date = date.subtract({
            days: 1
        });
        if (date.compare(minValue) >= 0) return date;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $131cf43a05231e1e$export$6d095e787d2b5e1f(props) {
        let defaultFormatter = (0, wp.element.useMemo)(()=>new ($fb18d541ea1ad717$export$ad991b66133851cf)(props.locale), [
            props.locale
        ]);
        let resolvedOptions = (0, wp.element.useMemo)(()=>defaultFormatter.resolvedOptions(), [
            defaultFormatter
        ]);
        let { locale: locale, createCalendar: createCalendar, visibleDuration: visibleDuration = {
            months: 1
        }, minValue: minValue, maxValue: maxValue, selectionAlignment: selectionAlignment, isDateUnavailable: isDateUnavailable, pageBehavior: pageBehavior = 'visible' } = props;
        let calendar = (0, wp.element.useMemo)(()=>createCalendar(resolvedOptions.calendar), [
            createCalendar,
            resolvedOptions.calendar
        ]);
        let [value, setControlledValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
        let calendarDateValue = (0, wp.element.useMemo)(()=>value ? ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$93522d1a439f3617)(value), calendar) : null, [
            value,
            calendar
        ]);
        let timeZone = (0, wp.element.useMemo)(()=>value && 'timeZone' in value ? value.timeZone : resolvedOptions.timeZone, [
            value,
            resolvedOptions.timeZone
        ]);
        let focusedCalendarDate = (0, wp.element.useMemo)(()=>props.focusedValue ? ($f62d864046160412$export$4f5203c0d889109e)(($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$93522d1a439f3617)(props.focusedValue), calendar), minValue, maxValue) : undefined, [
            props.focusedValue,
            calendar,
            minValue,
            maxValue
        ]);
        let defaultFocusedCalendarDate = (0, wp.element.useMemo)(()=>($f62d864046160412$export$4f5203c0d889109e)(props.defaultFocusedValue ? ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$93522d1a439f3617)(props.defaultFocusedValue), calendar) : calendarDateValue || ($11d87f3f76e88657$export$b4a036af3fc0b032)(($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)(timeZone), calendar), minValue, maxValue), [
            props.defaultFocusedValue,
            calendarDateValue,
            timeZone,
            calendar,
            minValue,
            maxValue
        ]);
        let [focusedDate, setFocusedDate] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(focusedCalendarDate, defaultFocusedCalendarDate, props.onFocusChange);
        let [startDate, setStartDate] = (0, wp.element.useState)(()=>{
            switch(selectionAlignment){
                case 'start':
                    return ($f62d864046160412$export$144a00ba6044eb9)(focusedDate, visibleDuration, locale, minValue, maxValue);
                case 'end':
                    return ($f62d864046160412$export$530edbfc915b2b04)(focusedDate, visibleDuration, locale, minValue, maxValue);
                case 'center':
                default:
                    return ($f62d864046160412$export$f4a51ff076cc9a09)(focusedDate, visibleDuration, locale, minValue, maxValue);
            }
        });
        let [isFocused, setFocused] = (0, wp.element.useState)(props.autoFocus || false);
        let endDate = (0, wp.element.useMemo)(()=>{
            let duration = {
                ...visibleDuration
            };
            if (duration.days) duration.days--;
            else duration.days = -1;
            return startDate.add(duration);
        }, [
            startDate,
            visibleDuration
        ]);
        // Reset focused date and visible range when calendar changes.
        let [lastCalendarIdentifier, setLastCalendarIdentifier] = (0, wp.element.useState)(calendar.identifier);
        if (calendar.identifier !== lastCalendarIdentifier) {
            let newFocusedDate = ($11d87f3f76e88657$export$b4a036af3fc0b032)(focusedDate, calendar);
            setStartDate(($f62d864046160412$export$f4a51ff076cc9a09)(newFocusedDate, visibleDuration, locale, minValue, maxValue));
            setFocusedDate(newFocusedDate);
            setLastCalendarIdentifier(calendar.identifier);
        }
        if (($f62d864046160412$export$eac50920cf2fd59a)(focusedDate, minValue, maxValue)) // If the focused date was moved to an invalid value, it can't be focused, so constrain it.
        setFocusedDate(($f62d864046160412$export$4f5203c0d889109e)(focusedDate, minValue, maxValue));
        else if (focusedDate.compare(startDate) < 0) setStartDate(($f62d864046160412$export$530edbfc915b2b04)(focusedDate, visibleDuration, locale, minValue, maxValue));
        else if (focusedDate.compare(endDate) > 0) setStartDate(($f62d864046160412$export$144a00ba6044eb9)(focusedDate, visibleDuration, locale, minValue, maxValue));
        // Sets focus to a specific cell date
        function focusCell(date) {
            date = ($f62d864046160412$export$4f5203c0d889109e)(date, minValue, maxValue);
            setFocusedDate(date);
        }
        function setValue(newValue) {
            if (!props.isDisabled && !props.isReadOnly) {
                if (newValue === null) {
                    setControlledValue(null);
                    return;
                }
                newValue = ($f62d864046160412$export$4f5203c0d889109e)(newValue, minValue, maxValue);
                newValue = ($f62d864046160412$export$a1d3911297b952d7)(newValue, startDate, isDateUnavailable);
                if (!newValue) return;
                // The display calendar should not have any effect on the emitted value.
                // Emit dates in the same calendar as the original value, if any, otherwise gregorian.
                newValue = ($11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (value === null || value === void 0 ? void 0 : value.calendar) || new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
                // Preserve time if the input value had one.
                if (value && 'hour' in value) setControlledValue(value.set(newValue));
                else setControlledValue(newValue);
            }
        }
        let isUnavailable = (0, wp.element.useMemo)(()=>{
            if (!calendarDateValue) return false;
            if (isDateUnavailable && isDateUnavailable(calendarDateValue)) return true;
            return ($f62d864046160412$export$eac50920cf2fd59a)(calendarDateValue, minValue, maxValue);
        }, [
            calendarDateValue,
            isDateUnavailable,
            minValue,
            maxValue
        ]);
        let isValueInvalid = props.isInvalid || props.validationState === 'invalid' || isUnavailable;
        let validationState = isValueInvalid ? 'invalid' : null;
        let pageDuration = (0, wp.element.useMemo)(()=>{
            if (pageBehavior === 'visible') return visibleDuration;
            return $131cf43a05231e1e$var$unitDuration(visibleDuration);
        }, [
            pageBehavior,
            visibleDuration
        ]);
        return {
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            value: calendarDateValue,
            setValue: setValue,
            visibleRange: {
                start: startDate,
                end: endDate
            },
            minValue: minValue,
            maxValue: maxValue,
            focusedDate: focusedDate,
            timeZone: timeZone,
            validationState: validationState,
            isValueInvalid: isValueInvalid,
            setFocusedDate (date) {
                focusCell(date);
                setFocused(true);
            },
            focusNextDay () {
                focusCell(focusedDate.add({
                    days: 1
                }));
            },
            focusPreviousDay () {
                focusCell(focusedDate.subtract({
                    days: 1
                }));
            },
            focusNextRow () {
                if (visibleDuration.days) this.focusNextPage();
                else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years) focusCell(focusedDate.add({
                    weeks: 1
                }));
            },
            focusPreviousRow () {
                if (visibleDuration.days) this.focusPreviousPage();
                else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years) focusCell(focusedDate.subtract({
                    weeks: 1
                }));
            },
            focusNextPage () {
                let start = startDate.add(pageDuration);
                setFocusedDate(($f62d864046160412$export$4f5203c0d889109e)(focusedDate.add(pageDuration), minValue, maxValue));
                setStartDate(($f62d864046160412$export$144a00ba6044eb9)(($f62d864046160412$export$5bb865b12696a77d)(focusedDate, start, pageDuration, locale, minValue, maxValue), pageDuration, locale));
            },
            focusPreviousPage () {
                let start = startDate.subtract(pageDuration);
                setFocusedDate(($f62d864046160412$export$4f5203c0d889109e)(focusedDate.subtract(pageDuration), minValue, maxValue));
                setStartDate(($f62d864046160412$export$144a00ba6044eb9)(($f62d864046160412$export$5bb865b12696a77d)(focusedDate, start, pageDuration, locale, minValue, maxValue), pageDuration, locale));
            },
            focusSectionStart () {
                if (visibleDuration.days) focusCell(startDate);
                else if (visibleDuration.weeks) focusCell(($14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(focusedDate, locale));
                else if (visibleDuration.months || visibleDuration.years) focusCell(($14e0f24ef4ac5c92$export$a5a3b454ada2268e)(focusedDate));
            },
            focusSectionEnd () {
                if (visibleDuration.days) focusCell(endDate);
                else if (visibleDuration.weeks) focusCell(($14e0f24ef4ac5c92$export$ef8b6d9133084f4e)(focusedDate, locale));
                else if (visibleDuration.months || visibleDuration.years) focusCell(($14e0f24ef4ac5c92$export$a2258d9c4118825c)(focusedDate));
            },
            focusNextSection (larger) {
                if (!larger && !visibleDuration.days) {
                    focusCell(focusedDate.add($131cf43a05231e1e$var$unitDuration(visibleDuration)));
                    return;
                }
                if (visibleDuration.days) this.focusNextPage();
                else if (visibleDuration.weeks) focusCell(focusedDate.add({
                    months: 1
                }));
                else if (visibleDuration.months || visibleDuration.years) focusCell(focusedDate.add({
                    years: 1
                }));
            },
            focusPreviousSection (larger) {
                if (!larger && !visibleDuration.days) {
                    focusCell(focusedDate.subtract($131cf43a05231e1e$var$unitDuration(visibleDuration)));
                    return;
                }
                if (visibleDuration.days) this.focusPreviousPage();
                else if (visibleDuration.weeks) focusCell(focusedDate.subtract({
                    months: 1
                }));
                else if (visibleDuration.months || visibleDuration.years) focusCell(focusedDate.subtract({
                    years: 1
                }));
            },
            selectFocusedDate () {
                setValue(focusedDate);
            },
            selectDate (date) {
                setValue(date);
            },
            isFocused: isFocused,
            setFocused: setFocused,
            isInvalid (date) {
                return ($f62d864046160412$export$eac50920cf2fd59a)(date, minValue, maxValue);
            },
            isSelected (date) {
                return calendarDateValue != null && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, calendarDateValue) && !this.isCellDisabled(date) && !this.isCellUnavailable(date);
            },
            isCellFocused (date) {
                return isFocused && focusedDate && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, focusedDate);
            },
            isCellDisabled (date) {
                return props.isDisabled || date.compare(startDate) < 0 || date.compare(endDate) > 0 || this.isInvalid(date, minValue, maxValue);
            },
            isCellUnavailable (date) {
                return props.isDateUnavailable && props.isDateUnavailable(date);
            },
            isPreviousVisibleRangeInvalid () {
                let prev = startDate.subtract({
                    days: 1
                });
                return ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(prev, startDate) || this.isInvalid(prev, minValue, maxValue);
            },
            isNextVisibleRangeInvalid () {
                // Adding may return the same date if we reached the end of time
                // according to the calendar system (e.g. 9999-12-31).
                let next = endDate.add({
                    days: 1
                });
                return ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(next, endDate) || this.isInvalid(next, minValue, maxValue);
            },
            getDatesInWeek (weekIndex, from = startDate) {
                // let date = startOfWeek(from, locale);
                let date = from.add({
                    weeks: weekIndex
                });
                let dates = [];
                date = ($14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(date, locale);
                // startOfWeek will clamp dates within the calendar system's valid range, which may
                // start in the middle of a week. In this case, add null placeholders.
                let dayOfWeek = ($14e0f24ef4ac5c92$export$2061056d06d7cdf7)(date, locale);
                for(let i = 0; i < dayOfWeek; i++)dates.push(null);
                while(dates.length < 7){
                    dates.push(date);
                    let nextDate = date.add({
                        days: 1
                    });
                    if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, nextDate)) break;
                    date = nextDate;
                }
                // Add null placeholders if at the end of the calendar system.
                while(dates.length < 7)dates.push(null);
                return dates;
            }
        };
    }
    function $131cf43a05231e1e$var$unitDuration(duration) {
        let unit = {
            ...duration
        };
        for(let key in duration)unit[key] = 1;
        return unit;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    function $9a36b6ba2fb1a7c5$export$9a987164d97ecc90(props) {
        let { value: valueProp, defaultValue: defaultValue, onChange: onChange, createCalendar: createCalendar, locale: locale, visibleDuration: visibleDuration = {
            months: 1
        }, minValue: minValue, maxValue: maxValue, ...calendarProps } = props;
        let [value, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(valueProp, defaultValue || null, onChange);
        let [anchorDate, setAnchorDateState] = (0, wp.element.useState)(null);
        let alignment = 'center';
        if (value && value.start && value.end) {
            let start = ($f62d864046160412$export$f4a51ff076cc9a09)(($11d87f3f76e88657$export$93522d1a439f3617)(value.start), visibleDuration, locale, minValue, maxValue);
            let end = start.add(visibleDuration).subtract({
                days: 1
            });
            if (value.end.compare(end) > 0) alignment = 'start';
        }
        // Available range must be stored in a ref so we have access to the updated version immediately in `isInvalid`.
        let availableRangeRef = (0, wp.element.useRef)(null);
        let [availableRange, setAvailableRange] = (0, wp.element.useState)(null);
        let min = (0, wp.element.useMemo)(()=>($14e0f24ef4ac5c92$export$a75f2bff57811055)(minValue, availableRange === null || availableRange === void 0 ? void 0 : availableRange.start), [
            minValue,
            availableRange
        ]);
        let max = (0, wp.element.useMemo)(()=>($14e0f24ef4ac5c92$export$5c333a116e949cdd)(maxValue, availableRange === null || availableRange === void 0 ? void 0 : availableRange.end), [
            maxValue,
            availableRange
        ]);
        let calendar = ($131cf43a05231e1e$export$6d095e787d2b5e1f)({
            ...calendarProps,
            value: value && value.start,
            createCalendar: createCalendar,
            locale: locale,
            visibleDuration: visibleDuration,
            minValue: min,
            maxValue: max,
            selectionAlignment: alignment
        });
        let updateAvailableRange = (date)=>{
            if (date && props.isDateUnavailable && !props.allowsNonContiguousRanges) {
                availableRangeRef.current = {
                    start: $9a36b6ba2fb1a7c5$var$nextUnavailableDate(date, calendar, -1),
                    end: $9a36b6ba2fb1a7c5$var$nextUnavailableDate(date, calendar, 1)
                };
                setAvailableRange(availableRangeRef.current);
            } else {
                availableRangeRef.current = null;
                setAvailableRange(null);
            }
        };
        // If the visible range changes, we need to update the available range.
        let [lastVisibleRange, setLastVisibleRange] = (0, wp.element.useState)(calendar.visibleRange);
        if (!($14e0f24ef4ac5c92$export$91b62ebf2ba703ee)(calendar.visibleRange.start, lastVisibleRange.start) || !($14e0f24ef4ac5c92$export$91b62ebf2ba703ee)(calendar.visibleRange.end, lastVisibleRange.end)) {
            updateAvailableRange(anchorDate);
            setLastVisibleRange(calendar.visibleRange);
        }
        let setAnchorDate = (date)=>{
            if (date) {
                setAnchorDateState(date);
                updateAvailableRange(date);
            } else {
                setAnchorDateState(null);
                updateAvailableRange(null);
            }
        };
        let highlightedRange = anchorDate ? $9a36b6ba2fb1a7c5$var$makeRange(anchorDate, calendar.focusedDate) : value && $9a36b6ba2fb1a7c5$var$makeRange(value.start, value.end);
        let selectDate = (date)=>{
            if (props.isReadOnly) return;
            date = ($f62d864046160412$export$4f5203c0d889109e)(date, min, max);
            date = ($f62d864046160412$export$a1d3911297b952d7)(date, calendar.visibleRange.start, props.isDateUnavailable);
            if (!date) return;
            if (!anchorDate) setAnchorDate(date);
            else {
                let range = $9a36b6ba2fb1a7c5$var$makeRange(anchorDate, date);
                setValue({
                    start: $9a36b6ba2fb1a7c5$var$convertValue(range.start, value === null || value === void 0 ? void 0 : value.start),
                    end: $9a36b6ba2fb1a7c5$var$convertValue(range.end, value === null || value === void 0 ? void 0 : value.end)
                });
                setAnchorDate(null);
            }
        };
        let [isDragging, setDragging] = (0, wp.element.useState)(false);
        let { isDateUnavailable: isDateUnavailable } = props;
        let isInvalidSelection = (0, wp.element.useMemo)(()=>{
            if (!value || anchorDate) return false;
            if (isDateUnavailable && (isDateUnavailable(value.start) || isDateUnavailable(value.end))) return true;
            return ($f62d864046160412$export$eac50920cf2fd59a)(value.start, minValue, maxValue) || ($f62d864046160412$export$eac50920cf2fd59a)(value.end, minValue, maxValue);
        }, [
            isDateUnavailable,
            value,
            anchorDate,
            minValue,
            maxValue
        ]);
        let isValueInvalid = props.isInvalid || props.validationState === 'invalid' || isInvalidSelection;
        let validationState = isValueInvalid ? 'invalid' : null;
        return {
            ...calendar,
            value: value,
            setValue: setValue,
            anchorDate: anchorDate,
            setAnchorDate: setAnchorDate,
            highlightedRange: highlightedRange,
            validationState: validationState,
            isValueInvalid: isValueInvalid,
            selectFocusedDate () {
                selectDate(calendar.focusedDate);
            },
            selectDate: selectDate,
            highlightDate (date) {
                if (anchorDate) calendar.setFocusedDate(date);
            },
            isSelected (date) {
                return highlightedRange && date.compare(highlightedRange.start) >= 0 && date.compare(highlightedRange.end) <= 0 && !calendar.isCellDisabled(date) && !calendar.isCellUnavailable(date);
            },
            isInvalid (date) {
                var _availableRangeRef_current, _availableRangeRef_current1;
                return calendar.isInvalid(date) || ($f62d864046160412$export$eac50920cf2fd59a)(date, (_availableRangeRef_current = availableRangeRef.current) === null || _availableRangeRef_current === void 0 ? void 0 : _availableRangeRef_current.start, (_availableRangeRef_current1 = availableRangeRef.current) === null || _availableRangeRef_current1 === void 0 ? void 0 : _availableRangeRef_current1.end);
            },
            isDragging: isDragging,
            setDragging: setDragging
        };
    }
    function $9a36b6ba2fb1a7c5$var$makeRange(start, end) {
        if (!start || !end) return null;
        if (end.compare(start) < 0) [start, end] = [
            end,
            start
        ];
        return {
            start: ($11d87f3f76e88657$export$93522d1a439f3617)(start),
            end: ($11d87f3f76e88657$export$93522d1a439f3617)(end)
        };
    }
    function $9a36b6ba2fb1a7c5$var$convertValue(newValue, oldValue) {
        // The display calendar should not have any effect on the emitted value.
        // Emit dates in the same calendar as the original value, if any, otherwise gregorian.
        newValue = ($11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (oldValue === null || oldValue === void 0 ? void 0 : oldValue.calendar) || new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
        // Preserve time if the input value had one.
        if (oldValue && 'hour' in oldValue) return oldValue.set(newValue);
        return newValue;
    }
    function $9a36b6ba2fb1a7c5$var$nextUnavailableDate(anchorDate, state, dir) {
        let nextDate = anchorDate.add({
            days: dir
        });
        while((dir < 0 ? nextDate.compare(state.visibleRange.start) >= 0 : nextDate.compare(state.visibleRange.end) <= 0) && !state.isCellUnavailable(nextDate))nextDate = nextDate.add({
            days: dir
        });
        if (state.isCellUnavailable(nextDate)) return nextDate.add({
            days: -dir
        });
        return null;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ class $a02d57049d202695$export$d085fb9e920b5ca7 {
        *[Symbol.iterator]() {
            yield* this.iterable;
        }
        get size() {
            return this.keyMap.size;
        }
        getKeys() {
            return this.keyMap.keys();
        }
        getKeyBefore(key) {
            let node = this.keyMap.get(key);
            return node ? node.prevKey : null;
        }
        getKeyAfter(key) {
            let node = this.keyMap.get(key);
            return node ? node.nextKey : null;
        }
        getFirstKey() {
            return this.firstKey;
        }
        getLastKey() {
            return this.lastKey;
        }
        getItem(key) {
            return this.keyMap.get(key);
        }
        at(idx) {
            const keys = [
                ...this.getKeys()
            ];
            return this.getItem(keys[idx]);
        }
        getChildren(key) {
            let node = this.keyMap.get(key);
            return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
        }
        constructor(nodes){
            this.keyMap = new Map();
            this.iterable = nodes;
            let visit = (node)=>{
                this.keyMap.set(node.key, node);
                if (node.childNodes && node.type === 'section') for (let child of node.childNodes)visit(child);
            };
            for (let node of nodes)visit(node);
            let last;
            let index = 0;
            for (let [key, node] of this.keyMap){
                if (last) {
                    last.nextKey = key;
                    node.prevKey = last.key;
                } else {
                    this.firstKey = key;
                    node.prevKey = undefined;
                }
                if (node.type === 'item') node.index = index++;
                last = node;
                // Set nextKey as undefined since this might be the last node
                // If it isn't the last node, last.nextKey will properly set at start of new loop
                last.nextKey = undefined;
            }
            this.lastKey = last === null || last === void 0 ? void 0 : last.key;
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ class $e40ea825a81a3709$export$52baac22726c72bf extends Set {
        constructor(keys, anchorKey, currentKey){
            super(keys);
            if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {
                this.anchorKey = anchorKey || keys.anchorKey;
                this.currentKey = currentKey || keys.currentKey;
            } else {
                this.anchorKey = anchorKey;
                this.currentKey = currentKey;
            }
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $7af3f5b51489e0b5$var$equalSets(setA, setB) {
        if (setA.size !== setB.size) return false;
        for (let item of setA){
            if (!setB.has(item)) return false;
        }
        return true;
    }
    function $7af3f5b51489e0b5$export$253fe78d46329472(props) {
        let { selectionMode: selectionMode = 'none', disallowEmptySelection: disallowEmptySelection, allowDuplicateSelectionEvents: allowDuplicateSelectionEvents, selectionBehavior: selectionBehaviorProp = 'toggle', disabledBehavior: disabledBehavior = 'all' } = props;
        // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.
        // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).
        let isFocusedRef = (0, wp.element.useRef)(false);
        let [, setFocused] = (0, wp.element.useState)(false);
        let focusedKeyRef = (0, wp.element.useRef)(null);
        let childFocusStrategyRef = (0, wp.element.useRef)(null);
        let [, setFocusedKey] = (0, wp.element.useState)(null);
        let selectedKeysProp = (0, wp.element.useMemo)(()=>$7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [
            props.selectedKeys
        ]);
        let defaultSelectedKeys = (0, wp.element.useMemo)(()=>$7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new ($e40ea825a81a3709$export$52baac22726c72bf)()), [
            props.defaultSelectedKeys
        ]);
        let [selectedKeys, setSelectedKeys] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
        let disabledKeysProp = (0, wp.element.useMemo)(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [
            props.disabledKeys
        ]);
        let [selectionBehavior, setSelectionBehavior] = (0, wp.element.useState)(selectionBehaviorProp);
        // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press
        // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.
        if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');
        // If the selectionBehavior prop changes, update the state as well.
        let lastSelectionBehavior = (0, wp.element.useRef)(selectionBehaviorProp);
        (0, wp.element.useEffect)(()=>{
            if (selectionBehaviorProp !== lastSelectionBehavior.current) {
                setSelectionBehavior(selectionBehaviorProp);
                lastSelectionBehavior.current = selectionBehaviorProp;
            }
        }, [
            selectionBehaviorProp
        ]);
        return {
            selectionMode: selectionMode,
            disallowEmptySelection: disallowEmptySelection,
            selectionBehavior: selectionBehavior,
            setSelectionBehavior: setSelectionBehavior,
            get isFocused () {
                return isFocusedRef.current;
            },
            setFocused (f) {
                isFocusedRef.current = f;
                setFocused(f);
            },
            get focusedKey () {
                return focusedKeyRef.current;
            },
            get childFocusStrategy () {
                return childFocusStrategyRef.current;
            },
            setFocusedKey (k, childFocusStrategy = 'first') {
                focusedKeyRef.current = k;
                childFocusStrategyRef.current = childFocusStrategy;
                setFocusedKey(k);
            },
            selectedKeys: selectedKeys,
            setSelectedKeys (keys) {
                if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);
            },
            disabledKeys: disabledKeysProp,
            disabledBehavior: disabledBehavior
        };
    }
    function $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {
        if (!selection) return defaultValue;
        return selection === 'all' ? 'all' : new ($e40ea825a81a3709$export$52baac22726c72bf)(selection);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    class $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {
        /**
       * The type of selection that is allowed in the collection.
       */ get selectionMode() {
            return this.state.selectionMode;
        }
        /**
       * Whether the collection allows empty selection.
       */ get disallowEmptySelection() {
            return this.state.disallowEmptySelection;
        }
        /**
       * The selection behavior for the collection.
       */ get selectionBehavior() {
            return this.state.selectionBehavior;
        }
        /**
       * Sets the selection behavior for the collection.
       */ setSelectionBehavior(selectionBehavior) {
            this.state.setSelectionBehavior(selectionBehavior);
        }
        /**
       * Whether the collection is currently focused.
       */ get isFocused() {
            return this.state.isFocused;
        }
        /**
       * Sets whether the collection is focused.
       */ setFocused(isFocused) {
            this.state.setFocused(isFocused);
        }
        /**
       * The current focused key in the collection.
       */ get focusedKey() {
            return this.state.focusedKey;
        }
        /** Whether the first or last child of the focused key should receive focus. */ get childFocusStrategy() {
            return this.state.childFocusStrategy;
        }
        /**
       * Sets the focused key.
       */ setFocusedKey(key, childFocusStrategy) {
            if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);
        }
        /**
       * The currently selected keys in the collection.
       */ get selectedKeys() {
            return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
        }
        /**
       * The raw selection value for the collection.
       * Either 'all' for select all, or a set of keys.
       */ get rawSelection() {
            return this.state.selectedKeys;
        }
        /**
       * Returns whether a key is selected.
       */ isSelected(key) {
            if (this.state.selectionMode === 'none') return false;
            key = this.getKey(key);
            return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);
        }
        /**
       * Whether the selection is empty.
       */ get isEmpty() {
            return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;
        }
        /**
       * Whether all items in the collection are selected.
       */ get isSelectAll() {
            if (this.isEmpty) return false;
            if (this.state.selectedKeys === 'all') return true;
            if (this._isSelectAll != null) return this._isSelectAll;
            let allKeys = this.getSelectAllKeys();
            let selectedKeys = this.state.selectedKeys;
            this._isSelectAll = allKeys.every((k)=>selectedKeys.has(k));
            return this._isSelectAll;
        }
        get firstSelectedKey() {
            let first = null;
            for (let key of this.state.selectedKeys){
                let item = this.collection.getItem(key);
                if (!first || item && ($c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, item, first) < 0) first = item;
            }
            return first === null || first === void 0 ? void 0 : first.key;
        }
        get lastSelectedKey() {
            let last = null;
            for (let key of this.state.selectedKeys){
                let item = this.collection.getItem(key);
                if (!last || item && ($c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, item, last) > 0) last = item;
            }
            return last === null || last === void 0 ? void 0 : last.key;
        }
        get disabledKeys() {
            return this.state.disabledKeys;
        }
        get disabledBehavior() {
            return this.state.disabledBehavior;
        }
        /**
       * Extends the selection to the given key.
       */ extendSelection(toKey) {
            if (this.selectionMode === 'none') return;
            if (this.selectionMode === 'single') {
                this.replaceSelection(toKey);
                return;
            }
            toKey = this.getKey(toKey);
            let selection;
            // Only select the one key if coming from a select all.
            if (this.state.selectedKeys === 'all') selection = new ($e40ea825a81a3709$export$52baac22726c72bf)([
                toKey
            ], toKey, toKey);
            else {
                let selectedKeys = this.state.selectedKeys;
                let anchorKey = selectedKeys.anchorKey || toKey;
                selection = new ($e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);
                for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))selection.delete(key);
                for (let key of this.getKeyRange(toKey, anchorKey))if (this.canSelectItem(key)) selection.add(key);
            }
            this.state.setSelectedKeys(selection);
        }
        getKeyRange(from, to) {
            let fromItem = this.collection.getItem(from);
            let toItem = this.collection.getItem(to);
            if (fromItem && toItem) {
                if (($c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, fromItem, toItem) <= 0) return this.getKeyRangeInternal(from, to);
                return this.getKeyRangeInternal(to, from);
            }
            return [];
        }
        getKeyRangeInternal(from, to) {
            let keys = [];
            let key = from;
            while(key){
                let item = this.collection.getItem(key);
                if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);
                if (key === to) return keys;
                key = this.collection.getKeyAfter(key);
            }
            return [];
        }
        getKey(key) {
            let item = this.collection.getItem(key);
            if (!item) // ¯\_(ツ)_/¯
            return key;
            // If cell selection is allowed, just return the key.
            if (item.type === 'cell' && this.allowsCellSelection) return key;
            // Find a parent item to select
            while(item.type !== 'item' && item.parentKey != null)item = this.collection.getItem(item.parentKey);
            if (!item || item.type !== 'item') return null;
            return item.key;
        }
        /**
       * Toggles whether the given key is selected.
       */ toggleSelection(key) {
            if (this.selectionMode === 'none') return;
            if (this.selectionMode === 'single' && !this.isSelected(key)) {
                this.replaceSelection(key);
                return;
            }
            key = this.getKey(key);
            if (key == null) return;
            let keys = new ($e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);
            if (keys.has(key)) keys.delete(key);
            else if (this.canSelectItem(key)) {
                keys.add(key);
                keys.anchorKey = key;
                keys.currentKey = key;
            }
            if (this.disallowEmptySelection && keys.size === 0) return;
            this.state.setSelectedKeys(keys);
        }
        /**
       * Replaces the selection with only the given key.
       */ replaceSelection(key) {
            if (this.selectionMode === 'none') return;
            key = this.getKey(key);
            if (key == null) return;
            let selection = this.canSelectItem(key) ? new ($e40ea825a81a3709$export$52baac22726c72bf)([
                key
            ], key, key) : new ($e40ea825a81a3709$export$52baac22726c72bf)();
            this.state.setSelectedKeys(selection);
        }
        /**
       * Replaces the selection with the given keys.
       */ setSelectedKeys(keys) {
            if (this.selectionMode === 'none') return;
            let selection = new ($e40ea825a81a3709$export$52baac22726c72bf)();
            for (let key of keys){
                key = this.getKey(key);
                if (key != null) {
                    selection.add(key);
                    if (this.selectionMode === 'single') break;
                }
            }
            this.state.setSelectedKeys(selection);
        }
        getSelectAllKeys() {
            let keys = [];
            let addKeys = (key)=>{
                while(key){
                    if (this.canSelectItem(key)) {
                        let item = this.collection.getItem(key);
                        if (item.type === 'item') keys.push(key);
                        // Add child keys. If cell selection is allowed, then include item children too.
                        if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) addKeys(($c5a24bc478652b5f$export$fbdeaa6a76694f71)(($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection)).key);
                    }
                    key = this.collection.getKeyAfter(key);
                }
            };
            addKeys(this.collection.getFirstKey());
            return keys;
        }
        /**
       * Selects all items in the collection.
       */ selectAll() {
            if (!this.isSelectAll && this.selectionMode === 'multiple') this.state.setSelectedKeys('all');
        }
        /**
       * Removes all keys from the selection.
       */ clearSelection() {
            if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new ($e40ea825a81a3709$export$52baac22726c72bf)());
        }
        /**
       * Toggles between select all and an empty selection.
       */ toggleSelectAll() {
            if (this.isSelectAll) this.clearSelection();
            else this.selectAll();
        }
        select(key, e) {
            if (this.selectionMode === 'none') return;
            if (this.selectionMode === 'single') {
                if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);
                else this.replaceSelection(key);
            } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys
            this.toggleSelection(key);
            else this.replaceSelection(key);
        }
        /**
       * Returns whether the current selection is equal to the given selection.
       */ isSelectionEqual(selection) {
            if (selection === this.state.selectedKeys) return true;
            // Check if the set of keys match.
            let selectedKeys = this.selectedKeys;
            if (selection.size !== selectedKeys.size) return false;
            for (let key of selection){
                if (!selectedKeys.has(key)) return false;
            }
            for (let key of selectedKeys){
                if (!selection.has(key)) return false;
            }
            return true;
        }
        canSelectItem(key) {
            var _item_props;
            if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;
            let item = this.collection.getItem(key);
            if (!item || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || item.type === 'cell' && !this.allowsCellSelection) return false;
            return true;
        }
        isDisabled(key) {
            var _this_collection_getItem_props, _this_collection_getItem;
            return this.state.disabledBehavior === 'all' && (this.state.disabledKeys.has(key) || !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.isDisabled));
        }
        isLink(key) {
            var _this_collection_getItem_props, _this_collection_getItem;
            return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);
        }
        getItemProps(key) {
            var _this_collection_getItem;
            return (_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : _this_collection_getItem.props;
        }
        constructor(collection, state, options){
            this.collection = collection;
            this.state = state;
            var _options_allowsCellSelection;
            this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;
            this._isSelectAll = null;
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $e72dd72e1c76a225$export$2f645645f7bca764(props) {
        let { filter: filter } = props;
        let selectionState = ($7af3f5b51489e0b5$export$253fe78d46329472)(props);
        let disabledKeys = (0, wp.element.useMemo)(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [
            props.disabledKeys
        ]);
        let factory = (0, wp.element.useCallback)((nodes)=>filter ? new ($a02d57049d202695$export$d085fb9e920b5ca7)(filter(nodes)) : new ($a02d57049d202695$export$d085fb9e920b5ca7)(nodes), [
            filter
        ]);
        let context = (0, wp.element.useMemo)(()=>({
                suppressTextValueWarning: props.suppressTextValueWarning
            }), [
            props.suppressTextValueWarning
        ]);
        let collection = ($7613b1592d41b092$export$6cd28814d92fa9c9)(props, factory, context);
        let selectionManager = (0, wp.element.useMemo)(()=>new ($d496c0a20b6e58ec$export$6c8a5aaad13c9852)(collection, selectionState), [
            collection,
            selectionState
        ]);
        // Reset focused key if that item is deleted from the collection.
        const cachedCollection = (0, wp.element.useRef)(null);
        (0, wp.element.useEffect)(()=>{
            if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
                const startItem = cachedCollection.current.getItem(selectionState.focusedKey);
                const cachedItemNodes = [
                    ...cachedCollection.current.getKeys()
                ].map((key)=>{
                    const itemNode = cachedCollection.current.getItem(key);
                    return itemNode.type === 'item' ? itemNode : null;
                }).filter((node)=>node !== null);
                const itemNodes = [
                    ...collection.getKeys()
                ].map((key)=>{
                    const itemNode = collection.getItem(key);
                    return itemNode.type === 'item' ? itemNode : null;
                }).filter((node)=>node !== null);
                const diff = cachedItemNodes.length - itemNodes.length;
                let index = Math.min(diff > 1 ? Math.max(startItem.index - diff + 1, 0) : startItem.index, itemNodes.length - 1);
                let newNode;
                while(index >= 0){
                    if (!selectionManager.isDisabled(itemNodes[index].key)) {
                        newNode = itemNodes[index];
                        break;
                    }
                    // Find next, not disabled item.
                    if (index < itemNodes.length - 1) index++;
                    else {
                        if (index > startItem.index) index = startItem.index;
                        index--;
                    }
                }
                selectionState.setFocusedKey(newNode ? newNode.key : null);
            }
            cachedCollection.current = collection;
        }, [
            collection,
            selectionManager,
            selectionState,
            selectionState.focusedKey
        ]);
        return {
            collection: collection,
            disabledKeys: disabledKeys,
            selectionManager: selectionManager
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    function $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {
        var _props_defaultSelectedKey;
        let [selectedKey, setSelectedKey] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange);
        let selectedKeys = (0, wp.element.useMemo)(()=>selectedKey != null ? [
                selectedKey
            ] : [], [
            selectedKey
        ]);
        let { collection: collection, disabledKeys: disabledKeys, selectionManager: selectionManager } = ($e72dd72e1c76a225$export$2f645645f7bca764)({
            ...props,
            selectionMode: 'single',
            disallowEmptySelection: true,
            allowDuplicateSelectionEvents: true,
            selectedKeys: selectedKeys,
            onSelectionChange: (keys)=>{
                var _keys_values_next_value;
                let key = (_keys_values_next_value = keys.values().next().value) !== null && _keys_values_next_value !== void 0 ? _keys_values_next_value : null;
                // Always fire onSelectionChange, even if the key is the same
                // as the current key (useControlledState does not).
                if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);
                setSelectedKey(key);
            }
        });
        let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;
        return {
            collection: collection,
            disabledKeys: disabledKeys,
            selectionManager: selectionManager,
            selectedKey: selectedKey,
            setSelectedKey: setSelectedKey,
            selectedItem: selectedItem
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
        let [isOpen, setOpen] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
        const open = (0, wp.element.useCallback)(()=>{
            setOpen(true);
        }, [
            setOpen
        ]);
        const close = (0, wp.element.useCallback)(()=>{
            setOpen(false);
        }, [
            setOpen
        ]);
        const toggle = (0, wp.element.useCallback)(()=>{
            setOpen(!isOpen);
        }, [
            setOpen,
            isOpen
        ]);
        return {
            isOpen: isOpen,
            setOpen: setOpen,
            open: open,
            close: close,
            toggle: toggle
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e(props) {
        var _collection_getItem, _collection_getItem1;
        let { defaultFilter: defaultFilter, menuTrigger: menuTrigger = 'input', allowsEmptyCollection: allowsEmptyCollection = false, allowsCustomValue: allowsCustomValue, shouldCloseOnBlur: shouldCloseOnBlur = true } = props;
        let [showAllItems, setShowAllItems] = (0, wp.element.useState)(false);
        let [isFocused, setFocusedState] = (0, wp.element.useState)(false);
        let [focusStrategy, setFocusStrategy] = (0, wp.element.useState)(null);
        let onSelectionChange = (key)=>{
            if (props.onSelectionChange) props.onSelectionChange(key);
            // If key is the same, reset the inputValue and close the menu
            // (scenario: user clicks on already selected option)
            if (key === selectedKey) {
                resetInputValue();
                closeMenu();
            }
        };
        var _props_items;
        let { collection: collection, selectionManager: selectionManager, selectedKey: selectedKey, setSelectedKey: setSelectedKey, selectedItem: selectedItem, disabledKeys: disabledKeys } = ($a0d645289fe9b86b$export$e7f05e985daf4b5f)({
            ...props,
            onSelectionChange: onSelectionChange,
            items: (_props_items = props.items) !== null && _props_items !== void 0 ? _props_items : props.defaultItems
        });
        var _props_defaultInputValue, _ref;
        let [inputValue, setInputValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.inputValue, (_ref = (_props_defaultInputValue = props.defaultInputValue) !== null && _props_defaultInputValue !== void 0 ? _props_defaultInputValue : (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _ref !== void 0 ? _ref : '', props.onInputChange);
        // Preserve original collection so we can show all items on demand
        let originalCollection = collection;
        let filteredCollection = (0, wp.element.useMemo)(()=>// No default filter if items are controlled.
            props.items != null || !defaultFilter ? collection : $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, defaultFilter), [
            collection,
            inputValue,
            defaultFilter,
            props.items
        ]);
        let [lastCollection, setLastCollection] = (0, wp.element.useState)(filteredCollection);
        // Track what action is attempting to open the menu
        let menuOpenTrigger = (0, wp.element.useRef)('focus');
        let onOpenChange = (open)=>{
            if (props.onOpenChange) props.onOpenChange(open, open ? menuOpenTrigger.current : undefined);
            selectionManager.setFocused(open);
            if (!open) selectionManager.setFocusedKey(null);
        };
        let triggerState = ($fc909762b330b746$export$61c6a8c84e605fb6)({
            ...props,
            onOpenChange: onOpenChange,
            isOpen: undefined,
            defaultOpen: undefined
        });
        let open = (focusStrategy = null, trigger)=>{
            let displayAllItems = trigger === 'manual' || trigger === 'focus' && menuTrigger === 'focus';
            // Prevent open operations from triggering if there is nothing to display
            // Also prevent open operations from triggering if items are uncontrolled but defaultItems is empty, even if displayAllItems is true.
            // This is to prevent comboboxes with empty defaultItems from opening but allow controlled items comboboxes to open even if the inital list is empty (assumption is user will provide swap the empty list with a base list via onOpenChange returning `menuTrigger` manual)
            if (allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) {
                if (displayAllItems && !triggerState.isOpen && props.items === undefined) // Show all items if menu is manually opened. Only care about this if items are undefined
                setShowAllItems(true);
                menuOpenTrigger.current = trigger;
                setFocusStrategy(focusStrategy);
                triggerState.open();
            }
        };
        let toggle = (focusStrategy = null, trigger)=>{
            let displayAllItems = trigger === 'manual' || trigger === 'focus' && menuTrigger === 'focus';
            // If the menu is closed and there is nothing to display, early return so toggle isn't called to prevent extraneous onOpenChange
            if (!(allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) && !triggerState.isOpen) return;
            if (displayAllItems && !triggerState.isOpen && props.items === undefined) // Show all items if menu is toggled open. Only care about this if items are undefined
            setShowAllItems(true);
            // Only update the menuOpenTrigger if menu is currently closed
            if (!triggerState.isOpen) menuOpenTrigger.current = trigger;
            toggleMenu(focusStrategy);
        };
        let updateLastCollection = (0, wp.element.useCallback)(()=>{
            setLastCollection(showAllItems ? originalCollection : filteredCollection);
        }, [
            showAllItems,
            originalCollection,
            filteredCollection
        ]);
        // If menu is going to close, save the current collection so we can freeze the displayed collection when the
        // user clicks outside the popover to close the menu. Prevents the menu contents from updating as the menu closes.
        let toggleMenu = (0, wp.element.useCallback)((focusStrategy = null)=>{
            if (triggerState.isOpen) updateLastCollection();
            setFocusStrategy(focusStrategy);
            triggerState.toggle();
        }, [
            triggerState,
            updateLastCollection
        ]);
        let closeMenu = (0, wp.element.useCallback)(()=>{
            if (triggerState.isOpen) {
                updateLastCollection();
                triggerState.close();
            }
        }, [
            triggerState,
            updateLastCollection
        ]);
        let [lastValue, setLastValue] = (0, wp.element.useState)(inputValue);
        let resetInputValue = ()=>{
            var _collection_getItem;
            var _collection_getItem_textValue;
            let itemText = (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';
            setLastValue(itemText);
            setInputValue(itemText);
        };
        var _props_selectedKey, _ref1;
        let lastSelectedKey = (0, wp.element.useRef)((_ref1 = (_props_selectedKey = props.selectedKey) !== null && _props_selectedKey !== void 0 ? _props_selectedKey : props.defaultSelectedKey) !== null && _ref1 !== void 0 ? _ref1 : null);
        var _collection_getItem_textValue;
        let lastSelectedKeyText = (0, wp.element.useRef)((_collection_getItem_textValue = (_collection_getItem1 = collection.getItem(selectedKey)) === null || _collection_getItem1 === void 0 ? void 0 : _collection_getItem1.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '');
        // intentional omit dependency array, want this to happen on every render
        // eslint-disable-next-line react-hooks/exhaustive-deps
        (0, wp.element.useEffect)(()=>{
            var _collection_getItem;
            // Open and close menu automatically when the input value changes if the input is focused,
            // and there are items in the collection or allowEmptyCollection is true.
            if (isFocused && (filteredCollection.size > 0 || allowsEmptyCollection) && !triggerState.isOpen && inputValue !== lastValue && menuTrigger !== 'manual') open(null, 'input');
            // Close the menu if the collection is empty. Don't close menu if filtered collection size is 0
            // but we are currently showing all items via button press
            if (!showAllItems && !allowsEmptyCollection && triggerState.isOpen && filteredCollection.size === 0) closeMenu();
            // Close when an item is selected.
            if (selectedKey != null && selectedKey !== lastSelectedKey.current) closeMenu();
            // Clear focused key when input value changes and display filtered collection again.
            if (inputValue !== lastValue) {
                selectionManager.setFocusedKey(null);
                setShowAllItems(false);
                // Set selectedKey to null when the user clears the input.
                // If controlled, this is the application developer's responsibility.
                if (inputValue === '' && (props.inputValue === undefined || props.selectedKey === undefined)) setSelectedKey(null);
            }
            // If the selectedKey changed, update the input value.
            // Do nothing if both inputValue and selectedKey are controlled.
            // In this case, it's the user's responsibility to update inputValue in onSelectionChange.
            if (selectedKey !== lastSelectedKey.current && (props.inputValue === undefined || props.selectedKey === undefined)) resetInputValue();
            else if (lastValue !== inputValue) setLastValue(inputValue);
            var _collection_getItem_textValue;
            // Update the inputValue if the selected item's text changes from its last tracked value.
            // This is to handle cases where a selectedKey is specified but the items aren't available (async loading) or the selected item's text value updates.
            // Only reset if the user isn't currently within the field so we don't erroneously modify user input.
            // If inputValue is controlled, it is the user's responsibility to update the inputValue when items change.
            let selectedItemText = (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';
            if (!isFocused && selectedKey != null && props.inputValue === undefined && selectedKey === lastSelectedKey.current) {
                if (lastSelectedKeyText.current !== selectedItemText) {
                    setLastValue(selectedItemText);
                    setInputValue(selectedItemText);
                }
            }
            lastSelectedKey.current = selectedKey;
            lastSelectedKeyText.current = selectedItemText;
        });
        let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: (0, wp.element.useMemo)(()=>({
                    inputValue: inputValue,
                    selectedKey: selectedKey
                }), [
                inputValue,
                selectedKey
            ])
        });
        // Revert input value and close menu
        let revert = ()=>{
            if (allowsCustomValue && selectedKey == null) commitCustomValue();
            else commitSelection();
        };
        let commitCustomValue = ()=>{
            lastSelectedKey.current = null;
            setSelectedKey(null);
            closeMenu();
        };
        let commitSelection = ()=>{
            // If multiple things are controlled, call onSelectionChange
            if (props.selectedKey !== undefined && props.inputValue !== undefined) {
                var _collection_getItem;
                props.onSelectionChange(selectedKey);
                var _collection_getItem_textValue;
                // Stop menu from reopening from useEffect
                let itemText = (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';
                setLastValue(itemText);
                closeMenu();
            } else {
                // If only a single aspect of combobox is controlled, reset input value and close menu for the user
                resetInputValue();
                closeMenu();
            }
        };
        const commitValue = ()=>{
            if (allowsCustomValue) {
                var _collection_getItem;
                var _collection_getItem_textValue;
                const itemText = (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';
                inputValue === itemText ? commitSelection() : commitCustomValue();
            } else // Reset inputValue and close menu
            commitSelection();
        };
        let commit = ()=>{
            if (triggerState.isOpen && selectionManager.focusedKey != null) {
                // Reset inputValue and close menu here if the selected key is already the focused key. Otherwise
                // fire onSelectionChange to allow the application to control the closing.
                if (selectedKey === selectionManager.focusedKey) commitSelection();
                else setSelectedKey(selectionManager.focusedKey);
            } else commitValue();
        };
        let valueOnFocus = (0, wp.element.useRef)(inputValue);
        let setFocused = (isFocused)=>{
            if (isFocused) {
                valueOnFocus.current = inputValue;
                if (menuTrigger === 'focus') open(null, 'focus');
            } else {
                if (shouldCloseOnBlur) commitValue();
                if (inputValue !== valueOnFocus.current) validation.commitValidation();
            }
            setFocusedState(isFocused);
        };
        let displayedCollection = (0, wp.element.useMemo)(()=>{
            if (triggerState.isOpen) {
                if (showAllItems) return originalCollection;
                else return filteredCollection;
            } else return lastCollection;
        }, [
            triggerState.isOpen,
            originalCollection,
            filteredCollection,
            showAllItems,
            lastCollection
        ]);
        return {
            ...validation,
            ...triggerState,
            focusStrategy: focusStrategy,
            toggle: toggle,
            open: open,
            close: commitValue,
            selectionManager: selectionManager,
            selectedKey: selectedKey,
            setSelectedKey: setSelectedKey,
            disabledKeys: disabledKeys,
            isFocused: isFocused,
            setFocused: setFocused,
            selectedItem: selectedItem,
            collection: displayedCollection,
            inputValue: inputValue,
            setInputValue: setInputValue,
            commit: commit,
            revert: revert
        };
    }
    function $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, filter) {
        return new ($a02d57049d202695$export$d085fb9e920b5ca7)($a9e7382a7d111cb5$var$filterNodes(collection, collection, inputValue, filter));
    }
    function $a9e7382a7d111cb5$var$filterNodes(collection, nodes, inputValue, filter) {
        let filteredNode = [];
        for (let node of nodes){
            if (node.type === 'section' && node.hasChildNodes) {
                let filtered = $a9e7382a7d111cb5$var$filterNodes(collection, ($c5a24bc478652b5f$export$1005530eda016c13)(node, collection), inputValue, filter);
                if ([
                    ...filtered
                ].some((node)=>node.type === 'item')) filteredNode.push({
                    ...node,
                    childNodes: filtered
                });
            } else if (node.type === 'item' && filter(node.textValue, inputValue)) filteredNode.push({
                ...node
            });
            else if (node.type !== 'item') filteredNode.push({
                ...node
            });
        }
        return filteredNode;
    }

    var $b3427c06585c22a0$exports = {};
    $b3427c06585c22a0$exports = {
        "rangeOverflow": (args)=>`\u{64A}\u{62C}\u{628} \u{623}\u{646} \u{62A}\u{643}\u{648}\u{646} \u{627}\u{644}\u{642}\u{64A}\u{645}\u{629} ${args.maxValue} \u{623}\u{648} \u{642}\u{628}\u{644} \u{630}\u{644}\u{643}.`,
        "rangeReversed": `\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{627}\u{644}\u{628}\u{62F}\u{621} \u{64A}\u{62C}\u{628} \u{623}\u{646} \u{64A}\u{643}\u{648}\u{646} \u{642}\u{628}\u{644} \u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{627}\u{644}\u{627}\u{646}\u{62A}\u{647}\u{627}\u{621}.`,
        "rangeUnderflow": (args)=>`\u{64A}\u{62C}\u{628} \u{623}\u{646} \u{62A}\u{643}\u{648}\u{646} \u{627}\u{644}\u{642}\u{64A}\u{645}\u{629} ${args.minValue} \u{623}\u{648} \u{628}\u{639}\u{62F} \u{630}\u{644}\u{643}.`,
        "unavailableDate": `\u{627}\u{644}\u{628}\u{64A}\u{627}\u{646}\u{627}\u{62A} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}\u{629} \u{63A}\u{64A}\u{631} \u{645}\u{62A}\u{627}\u{62D}\u{629}.`
    };

    var $d282528f459122b9$exports = {};
    $d282528f459122b9$exports = {
        "rangeOverflow": (args)=>`\u{421}\u{442}\u{43E}\u{439}\u{43D}\u{43E}\u{441}\u{442}\u{442}\u{430} \u{442}\u{440}\u{44F}\u{431}\u{432}\u{430} \u{434}\u{430} \u{435} ${args.maxValue} \u{438}\u{43B}\u{438} \u{43F}\u{43E}-\u{440}\u{430}\u{43D}\u{43D}\u{430}.`,
        "rangeReversed": `\u{41D}\u{430}\u{447}\u{430}\u{43B}\u{43D}\u{430}\u{442}\u{430} \u{434}\u{430}\u{442}\u{430} \u{442}\u{440}\u{44F}\u{431}\u{432}\u{430} \u{434}\u{430} \u{435} \u{43F}\u{440}\u{435}\u{434}\u{438} \u{43A}\u{440}\u{430}\u{439}\u{43D}\u{430}\u{442}\u{430}.`,
        "rangeUnderflow": (args)=>`\u{421}\u{442}\u{43E}\u{439}\u{43D}\u{43E}\u{441}\u{442}\u{442}\u{430} \u{442}\u{440}\u{44F}\u{431}\u{432}\u{430} \u{434}\u{430} \u{435} ${args.minValue} \u{438}\u{43B}\u{438} \u{43F}\u{43E}-\u{43A}\u{44A}\u{441}\u{43D}\u{43E}.`,
        "unavailableDate": `\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{430}\u{442}\u{430} \u{434}\u{430}\u{442}\u{430} \u{43D}\u{435} \u{435} \u{43D}\u{430}\u{43B}\u{438}\u{447}\u{43D}\u{430}.`
    };

    var $2d5eecd634a9ca45$exports = {};
    $2d5eecd634a9ca45$exports = {
        "rangeOverflow": (args)=>`Hodnota mus\xed b\xfdt ${args.maxValue} nebo d\u{159}\xedv\u{11B}j\u{161}\xed.`,
        "rangeReversed": `Datum zah\xe1jen\xed mus\xed p\u{159}edch\xe1zet datu ukon\u{10D}en\xed.`,
        "rangeUnderflow": (args)=>`Hodnota mus\xed b\xfdt ${args.minValue} nebo pozd\u{11B}j\u{161}\xed.`,
        "unavailableDate": `Vybran\xe9 datum nen\xed k dispozici.`
    };

    var $c8e2288226c24a67$exports = {};
    $c8e2288226c24a67$exports = {
        "rangeOverflow": (args)=>`V\xe6rdien skal v\xe6re ${args.maxValue} eller tidligere.`,
        "rangeReversed": `Startdatoen skal v\xe6re f\xf8r slutdatoen.`,
        "rangeUnderflow": (args)=>`V\xe6rdien skal v\xe6re ${args.minValue} eller nyere.`,
        "unavailableDate": `Den valgte dato er ikke tilg\xe6ngelig.`
    };

    var $6f5745e389c346d7$exports = {};
    $6f5745e389c346d7$exports = {
        "rangeOverflow": (args)=>`Der Wert muss ${args.maxValue} oder fr\xfcher sein.`,
        "rangeReversed": `Das Anfangsdatum muss vor dem Enddatum liegen.`,
        "rangeUnderflow": (args)=>`Der Wert muss ${args.minValue} oder sp\xe4ter sein.`,
        "unavailableDate": `Das ausgew\xe4hlte Datum ist nicht verf\xfcgbar.`
    };

    var $8c882ccf4300d1da$exports = {};
    $8c882ccf4300d1da$exports = {
        "rangeOverflow": (args)=>`\u{397} \u{3C4}\u{3B9}\u{3BC}\u{3AE} \u{3C0}\u{3C1}\u{3AD}\u{3C0}\u{3B5}\u{3B9} \u{3BD}\u{3B1} \u{3B5}\u{3AF}\u{3BD}\u{3B1}\u{3B9} ${args.maxValue} \u{3AE} \u{3C0}\u{3B1}\u{3BB}\u{3B1}\u{3B9}\u{3CC}\u{3C4}\u{3B5}\u{3C1}\u{3B7}.`,
        "rangeReversed": `\u{397} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3AD}\u{3BD}\u{3B1}\u{3C1}\u{3BE}\u{3B7}\u{3C2} \u{3C0}\u{3C1}\u{3AD}\u{3C0}\u{3B5}\u{3B9} \u{3BD}\u{3B1} \u{3B5}\u{3AF}\u{3BD}\u{3B1}\u{3B9} \u{3C0}\u{3C1}\u{3B9}\u{3BD} \u{3B1}\u{3C0}\u{3CC} \u{3C4}\u{3B7}\u{3BD} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3BB}\u{3AE}\u{3BE}\u{3B7}\u{3C2}.`,
        "rangeUnderflow": (args)=>`\u{397} \u{3C4}\u{3B9}\u{3BC}\u{3AE} \u{3C0}\u{3C1}\u{3AD}\u{3C0}\u{3B5}\u{3B9} \u{3BD}\u{3B1} \u{3B5}\u{3AF}\u{3BD}\u{3B1}\u{3B9} ${args.minValue} \u{3AE} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3B3}\u{3B5}\u{3BD}\u{3AD}\u{3C3}\u{3C4}\u{3B5}\u{3C1}\u{3B7}.`,
        "unavailableDate": `\u{397} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3B4}\u{3B5}\u{3BD} \u{3B5}\u{3AF}\u{3BD}\u{3B1}\u{3B9} \u{3B4}\u{3B9}\u{3B1}\u{3B8}\u{3AD}\u{3C3}\u{3B9}\u{3BC}\u{3B7}.`
    };

    var $22195056771860be$exports = {};
    $22195056771860be$exports = {
        "rangeUnderflow": (args)=>`Value must be ${args.minValue} or later.`,
        "rangeOverflow": (args)=>`Value must be ${args.maxValue} or earlier.`,
        "rangeReversed": `Start date must be before end date.`,
        "unavailableDate": `Selected date unavailable.`
    };

    var $cedfa43b4e2a5906$exports = {};
    $cedfa43b4e2a5906$exports = {
        "rangeOverflow": (args)=>`El valor debe ser ${args.maxValue} o anterior.`,
        "rangeReversed": `La fecha de inicio debe ser anterior a la fecha de finalizaci\xf3n.`,
        "rangeUnderflow": (args)=>`El valor debe ser ${args.minValue} o posterior.`,
        "unavailableDate": `Fecha seleccionada no disponible.`
    };

    var $eeeaa8daee3601c7$exports = {};
    $eeeaa8daee3601c7$exports = {
        "rangeOverflow": (args)=>`V\xe4\xe4rtus peab olema ${args.maxValue} v\xf5i varasem.`,
        "rangeReversed": `Alguskuup\xe4ev peab olema enne l\xf5ppkuup\xe4eva.`,
        "rangeUnderflow": (args)=>`V\xe4\xe4rtus peab olema ${args.minValue} v\xf5i hilisem.`,
        "unavailableDate": `Valitud kuup\xe4ev pole saadaval.`
    };

    var $35e0614a49b3bb40$exports = {};
    $35e0614a49b3bb40$exports = {
        "rangeOverflow": (args)=>`Arvon on oltava ${args.maxValue} tai sit\xe4 aikaisempi.`,
        "rangeReversed": `Aloitusp\xe4iv\xe4n on oltava ennen lopetusp\xe4iv\xe4\xe4.`,
        "rangeUnderflow": (args)=>`Arvon on oltava ${args.minValue} tai sit\xe4 my\xf6h\xe4isempi.`,
        "unavailableDate": `Valittu p\xe4iv\xe4m\xe4\xe4r\xe4 ei ole k\xe4ytett\xe4viss\xe4.`
    };

    var $929bc63f7705a78f$exports = {};
    $929bc63f7705a78f$exports = {
        "rangeOverflow": (args)=>`La valeur doit \xeatre ${args.maxValue} ou ant\xe9rieure.`,
        "rangeReversed": `La date de d\xe9but doit \xeatre ant\xe9rieure \xe0 la date de fin.`,
        "rangeUnderflow": (args)=>`La valeur doit \xeatre ${args.minValue} ou ult\xe9rieure.`,
        "unavailableDate": `La date s\xe9lectionn\xe9e n\u{2019}est pas disponible.`
    };

    var $9a28d073b034d183$exports = {};
    $9a28d073b034d183$exports = {
        "rangeOverflow": (args)=>`\u{5D4}\u{5E2}\u{5E8}\u{5DA} \u{5D7}\u{5D9}\u{5D9}\u{5D1} \u{5DC}\u{5D4}\u{5D9}\u{5D5}\u{5EA} ${args.maxValue} \u{5D0}\u{5D5} \u{5DE}\u{5D5}\u{5E7}\u{5D3}\u{5DD} \u{5D9}\u{5D5}\u{5EA}\u{5E8}.`,
        "rangeReversed": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5D4}\u{5D4}\u{5EA}\u{5D7}\u{5DC}\u{5D4} \u{5D7}\u{5D9}\u{5D9}\u{5D1} \u{5DC}\u{5D4}\u{5D9}\u{5D5}\u{5EA} \u{5DC}\u{5E4}\u{5E0}\u{5D9} \u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5D4}\u{5E1}\u{5D9}\u{5D5}\u{5DD}.`,
        "rangeUnderflow": (args)=>`\u{5D4}\u{5E2}\u{5E8}\u{5DA} \u{5D7}\u{5D9}\u{5D9}\u{5D1} \u{5DC}\u{5D4}\u{5D9}\u{5D5}\u{5EA} ${args.minValue} \u{5D0}\u{5D5} \u{5DE}\u{5D0}\u{5D5}\u{5D7}\u{5E8} \u{5D9}\u{5D5}\u{5EA}\u{5E8}.`,
        "unavailableDate": `\u{5D4}\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5D4}\u{5E0}\u{5D1}\u{5D7}\u{5E8} \u{5D0}\u{5D9}\u{5E0}\u{5D5} \u{5D6}\u{5DE}\u{5D9}\u{5DF}.`
    };

    var $7743e79780ebcca3$exports = {};
    $7743e79780ebcca3$exports = {
        "rangeOverflow": (args)=>`Vrijednost mora biti ${args.maxValue} ili ranije.`,
        "rangeReversed": `Datum po\u{10D}etka mora biti prije datuma zavr\u{161}etka.`,
        "rangeUnderflow": (args)=>`Vrijednost mora biti ${args.minValue} ili kasnije.`,
        "unavailableDate": `Odabrani datum nije dostupan.`
    };

    var $3351817a04898858$exports = {};
    $3351817a04898858$exports = {
        "rangeOverflow": (args)=>`Az \xe9rt\xe9knek ${args.maxValue} vagy kor\xe1bbinak kell lennie.`,
        "rangeReversed": `A kezd\u{151} d\xe1tumnak a befejez\u{151} d\xe1tumn\xe1l kor\xe1bbinak kell lennie.`,
        "rangeUnderflow": (args)=>`Az \xe9rt\xe9knek ${args.minValue} vagy k\xe9s\u{151}bbinek kell lennie.`,
        "unavailableDate": `A kiv\xe1lasztott d\xe1tum nem \xe9rhet\u{151} el.`
    };

    var $4120bdb1d03484db$exports = {};
    $4120bdb1d03484db$exports = {
        "rangeOverflow": (args)=>`Il valore deve essere ${args.maxValue} o precedente.`,
        "rangeReversed": `La data di inizio deve essere antecedente alla data di fine.`,
        "rangeUnderflow": (args)=>`Il valore deve essere ${args.minValue} o successivo.`,
        "unavailableDate": `Data selezionata non disponibile.`
    };

    var $65e5e1569f34ea4f$exports = {};
    $65e5e1569f34ea4f$exports = {
        "rangeOverflow": (args)=>`\u{5024}\u{306F} ${args.maxValue} \u{4EE5}\u{4E0B}\u{306B}\u{3059}\u{308B}\u{5FC5}\u{8981}\u{304C}\u{3042}\u{308A}\u{307E}\u{3059}\u{3002}`,
        "rangeReversed": `\u{958B}\u{59CB}\u{65E5}\u{306F}\u{7D42}\u{4E86}\u{65E5}\u{3088}\u{308A}\u{524D}\u{306B}\u{3059}\u{308B}\u{5FC5}\u{8981}\u{304C}\u{3042}\u{308A}\u{307E}\u{3059}\u{3002}`,
        "rangeUnderflow": (args)=>`\u{5024}\u{306F} ${args.minValue} \u{4EE5}\u{4E0A}\u{306B}\u{3059}\u{308B}\u{5FC5}\u{8981}\u{304C}\u{3042}\u{308A}\u{307E}\u{3059}\u{3002}`,
        "unavailableDate": `\u{9078}\u{629E}\u{3057}\u{305F}\u{65E5}\u{4ED8}\u{306F}\u{4F7F}\u{7528}\u{3067}\u{304D}\u{307E}\u{305B}\u{3093}\u{3002}`
    };

    var $d34552a7550967e7$exports = {};
    $d34552a7550967e7$exports = {
        "rangeOverflow": (args)=>`\u{AC12}\u{C740} ${args.maxValue} \u{C774}\u{C804}\u{C774}\u{C5B4}\u{C57C} \u{D569}\u{B2C8}\u{B2E4}.`,
        "rangeReversed": `\u{C2DC}\u{C791}\u{C77C}\u{C740} \u{C885}\u{B8CC}\u{C77C} \u{C774}\u{C804}\u{C774}\u{C5B4}\u{C57C} \u{D569}\u{B2C8}\u{B2E4}.`,
        "rangeUnderflow": (args)=>`\u{AC12}\u{C740} ${args.minValue} \u{C774}\u{C0C1}\u{C774}\u{C5B4}\u{C57C} \u{D569}\u{B2C8}\u{B2E4}.`,
        "unavailableDate": `\u{C120}\u{D0DD}\u{D55C} \u{B0A0}\u{C9DC}\u{B97C} \u{C0AC}\u{C6A9}\u{D560} \u{C218} \u{C5C6}\u{C2B5}\u{B2C8}\u{B2E4}.`
    };

    var $8f855bffe63f6eca$exports = {};
    $8f855bffe63f6eca$exports = {
        "rangeOverflow": (args)=>`Reik\u{161}m\u{117} turi b\u{16B}ti ${args.maxValue} arba ankstesn\u{117}.`,
        "rangeReversed": `Prad\u{17E}ios data turi b\u{16B}ti ankstesn\u{117} nei pabaigos data.`,
        "rangeUnderflow": (args)=>`Reik\u{161}m\u{117} turi b\u{16B}ti ${args.minValue} arba naujesn\u{117}.`,
        "unavailableDate": `Pasirinkta data nepasiekiama.`
    };

    var $ce40f46d09034645$exports = {};
    $ce40f46d09034645$exports = {
        "rangeOverflow": (args)=>`V\u{113}rt\u{12B}bai ir j\u{101}b\u{16B}t ${args.maxValue} vai agr\u{101}kai.`,
        "rangeReversed": `S\u{101}kuma datumam ir j\u{101}b\u{16B}t pirms beigu datuma.`,
        "rangeUnderflow": (args)=>`V\u{113}rt\u{12B}bai ir j\u{101}b\u{16B}t ${args.minValue} vai v\u{113}l\u{101}kai.`,
        "unavailableDate": `Atlas\u{12B}tais datums nav pieejams.`
    };

    var $dd1a9a73340c793e$exports = {};
    $dd1a9a73340c793e$exports = {
        "rangeOverflow": (args)=>`Verdien m\xe5 v\xe6re ${args.maxValue} eller tidligere.`,
        "rangeReversed": `Startdatoen m\xe5 v\xe6re f\xf8r sluttdatoen.`,
        "rangeUnderflow": (args)=>`Verdien m\xe5 v\xe6re ${args.minValue} eller senere.`,
        "unavailableDate": `Valgt dato utilgjengelig.`
    };

    var $4ee1fb3f0cbe6f59$exports = {};
    $4ee1fb3f0cbe6f59$exports = {
        "rangeOverflow": (args)=>`Waarde moet ${args.maxValue} of eerder zijn.`,
        "rangeReversed": `De startdatum moet voor de einddatum liggen.`,
        "rangeUnderflow": (args)=>`Waarde moet ${args.minValue} of later zijn.`,
        "unavailableDate": `Geselecteerde datum niet beschikbaar.`
    };

    var $c85829aebb0bc94b$exports = {};
    $c85829aebb0bc94b$exports = {
        "rangeOverflow": (args)=>`Warto\u{15B}\u{107} musi mie\u{107} warto\u{15B}\u{107} ${args.maxValue} lub wcze\u{15B}niejsz\u{105}.`,
        "rangeReversed": `Data rozpocz\u{119}cia musi by\u{107} wcze\u{15B}niejsza ni\u{17C} data zako\u{144}czenia.`,
        "rangeUnderflow": (args)=>`Warto\u{15B}\u{107} musi mie\u{107} warto\u{15B}\u{107} ${args.minValue} lub p\xf3\u{17A}niejsz\u{105}.`,
        "unavailableDate": `Wybrana data jest niedost\u{119}pna.`
    };

    var $27f5cd2291ca8a02$exports = {};
    $27f5cd2291ca8a02$exports = {
        "rangeOverflow": (args)=>`O valor deve ser ${args.maxValue} ou anterior.`,
        "rangeReversed": `A data inicial deve ser anterior \xe0 data final.`,
        "rangeUnderflow": (args)=>`O valor deve ser ${args.minValue} ou posterior.`,
        "unavailableDate": `Data selecionada indispon\xedvel.`
    };

    var $e046fdccd69bea8e$exports = {};
    $e046fdccd69bea8e$exports = {
        "rangeOverflow": (args)=>`O valor tem de ser ${args.maxValue} ou anterior.`,
        "rangeReversed": `A data de in\xedcio deve ser anterior \xe0 data de fim.`,
        "rangeUnderflow": (args)=>`O valor tem de ser ${args.minValue} ou posterior.`,
        "unavailableDate": `Data selecionada indispon\xedvel.`
    };

    var $fa5f88e804986547$exports = {};
    $fa5f88e804986547$exports = {
        "rangeOverflow": (args)=>`Valoarea trebuie s\u{103} fie ${args.maxValue} sau anterioar\u{103}.`,
        "rangeReversed": `Data de \xeenceput trebuie s\u{103} fie anterioar\u{103} datei de sf\xe2r\u{219}it.`,
        "rangeUnderflow": (args)=>`Valoarea trebuie s\u{103} fie ${args.minValue} sau ulterioar\u{103}.`,
        "unavailableDate": `Data selectat\u{103} nu este disponibil\u{103}.`
    };

    var $28e4714602d1b568$exports = {};
    $28e4714602d1b568$exports = {
        "rangeOverflow": (args)=>`\u{417}\u{43D}\u{430}\u{447}\u{435}\u{43D}\u{438}\u{435} \u{434}\u{43E}\u{43B}\u{436}\u{43D}\u{43E} \u{431}\u{44B}\u{442}\u{44C} \u{43D}\u{435} \u{43F}\u{43E}\u{437}\u{436}\u{435} ${args.maxValue}.`,
        "rangeReversed": `\u{414}\u{430}\u{442}\u{430} \u{43D}\u{430}\u{447}\u{430}\u{43B}\u{430} \u{434}\u{43E}\u{43B}\u{436}\u{43D}\u{430} \u{43F}\u{440}\u{435}\u{434}\u{448}\u{435}\u{441}\u{442}\u{432}\u{43E}\u{432}\u{430}\u{442}\u{44C} \u{434}\u{430}\u{442}\u{435} \u{43E}\u{43A}\u{43E}\u{43D}\u{447}\u{430}\u{43D}\u{438}\u{44F}.`,
        "rangeUnderflow": (args)=>`\u{417}\u{43D}\u{430}\u{447}\u{435}\u{43D}\u{438}\u{435} \u{434}\u{43E}\u{43B}\u{436}\u{43D}\u{43E} \u{431}\u{44B}\u{442}\u{44C} \u{43D}\u{435} \u{440}\u{430}\u{43D}\u{44C}\u{448}\u{435} ${args.minValue}.`,
        "unavailableDate": `\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430} \u{43D}\u{435}\u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430}.`
    };

    var $4e3bc8cf783ad569$exports = {};
    $4e3bc8cf783ad569$exports = {
        "rangeOverflow": (args)=>`Hodnota mus\xed by\u{165} ${args.maxValue} alebo skor\u{161}ia.`,
        "rangeReversed": `D\xe1tum za\u{10D}iatku mus\xed by\u{165} skor\u{161}\xed ako d\xe1tum konca.`,
        "rangeUnderflow": (args)=>`Hodnota mus\xed by\u{165} ${args.minValue} alebo neskor\u{161}ia.`,
        "unavailableDate": `Vybrat\xfd d\xe1tum je nedostupn\xfd.`
    };

    var $bee07513333bdc15$exports = {};
    $bee07513333bdc15$exports = {
        "rangeOverflow": (args)=>`Vrednost mora biti ${args.maxValue} ali starej\u{161}a.`,
        "rangeReversed": `Za\u{10D}etni datum mora biti pred kon\u{10D}nim datumom.`,
        "rangeUnderflow": (args)=>`Vrednost mora biti ${args.minValue} ali novej\u{161}a.`,
        "unavailableDate": `Izbrani datum ni na voljo.`
    };

    var $7ed9c6fad16a15ec$exports = {};
    $7ed9c6fad16a15ec$exports = {
        "rangeOverflow": (args)=>`Vrednost mora da bude ${args.maxValue} ili starija.`,
        "rangeReversed": `Datum po\u{10D}etka mora biti pre datuma zavr\u{161}etka.`,
        "rangeUnderflow": (args)=>`Vrednost mora da bude ${args.minValue} ili novija.`,
        "unavailableDate": `Izabrani datum nije dostupan.`
    };

    var $8bef6d5a236de86c$exports = {};
    $8bef6d5a236de86c$exports = {
        "rangeOverflow": (args)=>`V\xe4rdet m\xe5ste vara ${args.maxValue} eller tidigare.`,
        "rangeReversed": `Startdatumet m\xe5ste vara f\xf6re slutdatumet.`,
        "rangeUnderflow": (args)=>`V\xe4rdet m\xe5ste vara ${args.minValue} eller senare.`,
        "unavailableDate": `Det valda datumet \xe4r inte tillg\xe4ngligt.`
    };

    var $098b9a2d2340cfc5$exports = {};
    $098b9a2d2340cfc5$exports = {
        "rangeOverflow": (args)=>`De\u{11F}er, ${args.maxValue} veya \xf6ncesi olmal\u{131}d\u{131}r.`,
        "rangeReversed": `Ba\u{15F}lang\u{131}\xe7 tarihi biti\u{15F} tarihinden \xf6nce olmal\u{131}d\u{131}r.`,
        "rangeUnderflow": (args)=>`De\u{11F}er, ${args.minValue} veya sonras\u{131} olmal\u{131}d\u{131}r.`,
        "unavailableDate": `Se\xe7ilen tarih kullan\u{131}lam\u{131}yor.`
    };

    var $54a862ea7fad7419$exports = {};
    $54a862ea7fad7419$exports = {
        "rangeOverflow": (args)=>`\u{417}\u{43D}\u{430}\u{447}\u{435}\u{43D}\u{43D}\u{44F} \u{43C}\u{430}\u{454} \u{431}\u{443}\u{442}\u{438} \u{43D}\u{435} \u{43F}\u{456}\u{437}\u{43D}\u{456}\u{448}\u{435} ${args.maxValue}.`,
        "rangeReversed": `\u{414}\u{430}\u{442}\u{430} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{43A}\u{443} \u{43C}\u{430}\u{454} \u{43F}\u{435}\u{440}\u{435}\u{434}\u{443}\u{432}\u{430}\u{442}\u{438} \u{434}\u{430}\u{442}\u{456} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{435}\u{43D}\u{43D}\u{44F}.`,
        "rangeUnderflow": (args)=>`\u{417}\u{43D}\u{430}\u{447}\u{435}\u{43D}\u{43D}\u{44F} \u{43C}\u{430}\u{454} \u{431}\u{443}\u{442}\u{438} \u{43D}\u{435} \u{440}\u{430}\u{43D}\u{456}\u{448}\u{435} ${args.minValue}.`,
        "unavailableDate": `\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430} \u{43D}\u{435}\u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430}.`
    };

    var $e6cc491d590dfda5$exports = {};
    $e6cc491d590dfda5$exports = {
        "rangeOverflow": (args)=>`\u{503C}\u{5FC5}\u{987B}\u{662F} ${args.maxValue} \u{6216}\u{66F4}\u{65E9}\u{65E5}\u{671F}\u{3002}`,
        "rangeReversed": `\u{5F00}\u{59CB}\u{65E5}\u{671F}\u{5FC5}\u{987B}\u{65E9}\u{4E8E}\u{7ED3}\u{675F}\u{65E5}\u{671F}\u{3002}`,
        "rangeUnderflow": (args)=>`\u{503C}\u{5FC5}\u{987B}\u{662F} ${args.minValue} \u{6216}\u{66F4}\u{665A}\u{65E5}\u{671F}\u{3002}`,
        "unavailableDate": `\u{6240}\u{9009}\u{65E5}\u{671F}\u{4E0D}\u{53EF}\u{7528}\u{3002}`
    };

    var $9aebf53181a474bd$exports = {};
    $9aebf53181a474bd$exports = {
        "rangeOverflow": (args)=>`\u{503C}\u{5FC5}\u{9808}\u{662F} ${args.maxValue} \u{6216}\u{66F4}\u{65E9}\u{3002}`,
        "rangeReversed": `\u{958B}\u{59CB}\u{65E5}\u{671F}\u{5FC5}\u{9808}\u{5728}\u{7D50}\u{675F}\u{65E5}\u{671F}\u{4E4B}\u{524D}\u{3002}`,
        "rangeUnderflow": (args)=>`\u{503C}\u{5FC5}\u{9808}\u{662F} ${args.minValue} \u{6216}\u{66F4}\u{665A}\u{3002}`,
        "unavailableDate": `\u{6240}\u{9078}\u{65E5}\u{671F}\u{7121}\u{6CD5}\u{4F7F}\u{7528}\u{3002}`
    };

    var $452ac34de8c2444e$exports = {};


































    $452ac34de8c2444e$exports = {
        "ar-AE": $b3427c06585c22a0$exports,
        "bg-BG": $d282528f459122b9$exports,
        "cs-CZ": $2d5eecd634a9ca45$exports,
        "da-DK": $c8e2288226c24a67$exports,
        "de-DE": $6f5745e389c346d7$exports,
        "el-GR": $8c882ccf4300d1da$exports,
        "en-US": $22195056771860be$exports,
        "es-ES": $cedfa43b4e2a5906$exports,
        "et-EE": $eeeaa8daee3601c7$exports,
        "fi-FI": $35e0614a49b3bb40$exports,
        "fr-FR": $929bc63f7705a78f$exports,
        "he-IL": $9a28d073b034d183$exports,
        "hr-HR": $7743e79780ebcca3$exports,
        "hu-HU": $3351817a04898858$exports,
        "it-IT": $4120bdb1d03484db$exports,
        "ja-JP": $65e5e1569f34ea4f$exports,
        "ko-KR": $d34552a7550967e7$exports,
        "lt-LT": $8f855bffe63f6eca$exports,
        "lv-LV": $ce40f46d09034645$exports,
        "nb-NO": $dd1a9a73340c793e$exports,
        "nl-NL": $4ee1fb3f0cbe6f59$exports,
        "pl-PL": $c85829aebb0bc94b$exports,
        "pt-BR": $27f5cd2291ca8a02$exports,
        "pt-PT": $e046fdccd69bea8e$exports,
        "ro-RO": $fa5f88e804986547$exports,
        "ru-RU": $28e4714602d1b568$exports,
        "sk-SK": $4e3bc8cf783ad569$exports,
        "sl-SI": $bee07513333bdc15$exports,
        "sr-SP": $7ed9c6fad16a15ec$exports,
        "sv-SE": $8bef6d5a236de86c$exports,
        "tr-TR": $098b9a2d2340cfc5$exports,
        "uk-UA": $54a862ea7fad7419$exports,
        "zh-CN": $e6cc491d590dfda5$exports,
        "zh-TW": $9aebf53181a474bd$exports
    };

    function $parcel$interopDefault$2(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    const $35a22f14a1f04b11$var$dictionary = new ($5b160d28a433310d$export$c17fa47878dc55b6)((($parcel$interopDefault$2($452ac34de8c2444e$exports))));
    function $35a22f14a1f04b11$var$getLocale() {
        // Match browser language setting here, NOT react-aria's I18nProvider, so that we match other browser-provided
        // validation messages, which to not respect our provider's language.
        // @ts-ignore
        return typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
    }
    function $35a22f14a1f04b11$export$f18627323ab57ac0(value, minValue, maxValue, isDateUnavailable, options) {
        let rangeOverflow = value != null && maxValue != null && value.compare(maxValue) > 0;
        let rangeUnderflow = value != null && minValue != null && value.compare(minValue) < 0;
        let isUnavailable = value != null && (isDateUnavailable === null || isDateUnavailable === void 0 ? void 0 : isDateUnavailable(value)) || false;
        let isInvalid = rangeOverflow || rangeUnderflow || isUnavailable;
        let errors = [];
        if (isInvalid) {
            let locale = $35a22f14a1f04b11$var$getLocale();
            let strings = ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage('@react-stately/datepicker') || $35a22f14a1f04b11$var$dictionary;
            let formatter = new ($6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, strings);
            let dateFormatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, $35a22f14a1f04b11$export$7e319ea407e63bc0({}, options));
            let timeZone = dateFormatter.resolvedOptions().timeZone;
            if (rangeUnderflow) errors.push(formatter.format('rangeUnderflow', {
                minValue: dateFormatter.format(minValue.toDate(timeZone))
            }));
            if (rangeOverflow) errors.push(formatter.format('rangeOverflow', {
                maxValue: dateFormatter.format(maxValue.toDate(timeZone))
            }));
            if (isUnavailable) errors.push(formatter.format('unavailableDate'));
        }
        return {
            isInvalid: isInvalid,
            validationErrors: errors,
            validationDetails: {
                badInput: isUnavailable,
                customError: false,
                patternMismatch: false,
                rangeOverflow: rangeOverflow,
                rangeUnderflow: rangeUnderflow,
                stepMismatch: false,
                tooLong: false,
                tooShort: false,
                typeMismatch: false,
                valueMissing: false,
                valid: !isInvalid
            }
        };
    }
    function $35a22f14a1f04b11$export$80ff8fc0ae339c13(value, minValue, maxValue, isDateUnavailable, options) {
        let startValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.start, minValue, maxValue, isDateUnavailable, options);
        let endValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.end, minValue, maxValue, isDateUnavailable, options);
        let result = ($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(startValidation, endValidation);
        if (value.end != null && value.start != null && value.end.compare(value.start) < 0) {
            let strings = ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage('@react-stately/datepicker') || $35a22f14a1f04b11$var$dictionary;
            result = ($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(result, {
                isInvalid: true,
                validationErrors: [
                    strings.getStringForLocale('rangeReversed', $35a22f14a1f04b11$var$getLocale())
                ],
                validationDetails: {
                    ...($e5be200c675c3b3a$export$aca958c65c314e6c),
                    rangeUnderflow: true,
                    rangeOverflow: true,
                    valid: false
                }
            });
        }
        return result;
    }
    const $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {
        year: 'numeric',
        month: 'numeric',
        day: 'numeric',
        hour: 'numeric',
        minute: '2-digit',
        second: '2-digit'
    };
    const $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    };
    function $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options) {
        let defaultFieldOptions = options.shouldForceLeadingZeros ? $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS : $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS;
        fieldOptions = {
            ...defaultFieldOptions,
            ...fieldOptions
        };
        let granularity = options.granularity || 'minute';
        let keys = Object.keys(fieldOptions);
        var _options_maxGranularity;
        let startIdx = keys.indexOf((_options_maxGranularity = options.maxGranularity) !== null && _options_maxGranularity !== void 0 ? _options_maxGranularity : 'year');
        if (startIdx < 0) startIdx = 0;
        let endIdx = keys.indexOf(granularity);
        if (endIdx < 0) endIdx = 2;
        if (startIdx > endIdx) throw new Error('maxGranularity must be greater than granularity');
        let opts = keys.slice(startIdx, endIdx + 1).reduce((opts, key)=>{
            opts[key] = fieldOptions[key];
            return opts;
        }, {});
        if (options.hourCycle != null) opts.hour12 = options.hourCycle === 12;
        opts.timeZone = options.timeZone || 'UTC';
        let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';
        if (hasTime && options.timeZone && !options.hideTimeZone) opts.timeZoneName = 'short';
        if (options.showEra && startIdx === 0) opts.era = 'short';
        return opts;
    }
    function $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {
        if (placeholderValue && 'hour' in placeholderValue) return placeholderValue;
        return new ($35ea8db9cb2ccb90$export$680ea196effce5f)();
    }
    function $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {
        if (value === null) return null;
        if (!value) return undefined;
        return ($11d87f3f76e88657$export$b4a036af3fc0b032)(value, calendar);
    }
    function $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {
        if (placeholderValue) return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);
        let date = ($11d87f3f76e88657$export$b4a036af3fc0b032)(($14e0f24ef4ac5c92$export$461939dd4422153)(timeZone).set({
            hour: 0,
            minute: 0,
            second: 0,
            millisecond: 0
        }), calendar);
        if (granularity === 'year' || granularity === 'month' || granularity === 'day') return ($11d87f3f76e88657$export$93522d1a439f3617)(date);
        if (!timeZone) return ($11d87f3f76e88657$export$b21e0b124e224484)(date);
        return date;
    }
    function $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {
        // Compute default granularity and time zone from the value. If the value becomes null, keep the last values.
        let defaultTimeZone = v && 'timeZone' in v ? v.timeZone : undefined;
        let defaultGranularity = v && 'minute' in v ? 'minute' : 'day';
        // props.granularity must actually exist in the value if one is provided.
        if (v && granularity && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());
        let [lastValue, setLastValue] = (0, wp.element.useState)([
            defaultGranularity,
            defaultTimeZone
        ]);
        // If the granularity or time zone changed, update the last value.
        if (v && (lastValue[0] !== defaultGranularity || lastValue[1] !== defaultTimeZone)) setLastValue([
            defaultGranularity,
            defaultTimeZone
        ]);
        if (!granularity) granularity = v ? defaultGranularity : lastValue[0];
        let timeZone = v ? defaultTimeZone : lastValue[1];
        return [
            granularity,
            timeZone
        ];
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $ab5bf3f618090389$export$87194bb378cc3ac2(props) {
        let overlayState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
        let [value, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || null, props.onChange);
        let v = value || props.placeholderValue;
        let [granularity, defaultTimeZone] = ($35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
        let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : 'UTC') : null;
        let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';
        var _props_shouldCloseOnSelect;
        let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
        let [selectedDate, setSelectedDate] = (0, wp.element.useState)(null);
        let [selectedTime, setSelectedTime] = (0, wp.element.useState)(null);
        if (value) {
            selectedDate = value;
            if ('hour' in value) selectedTime = value;
        }
        // props.granularity must actually exist in the value if one is provided.
        if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());
        let showEra = (value === null || value === void 0 ? void 0 : value.calendar.identifier) === 'gregory' && value.era === 'BC';
        let formatOpts = (0, wp.element.useMemo)(()=>({
                granularity: granularity,
                timeZone: defaultTimeZone,
                hideTimeZone: props.hideTimeZone,
                hourCycle: props.hourCycle,
                shouldForceLeadingZeros: props.shouldForceLeadingZeros,
                showEra: showEra
            }), [
            granularity,
            props.hourCycle,
            props.shouldForceLeadingZeros,
            defaultTimeZone,
            props.hideTimeZone,
            showEra
        ]);
        let { minValue: minValue, maxValue: maxValue, isDateUnavailable: isDateUnavailable } = props;
        let builtinValidation = (0, wp.element.useMemo)(()=>($35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
            value,
            minValue,
            maxValue,
            isDateUnavailable,
            formatOpts
        ]);
        let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: value,
            builtinValidation: builtinValidation
        });
        let isValueInvalid = validation.displayValidation.isInvalid;
        let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);
        let commitValue = (date, time)=>{
            setValue('timeZone' in time ? time.set(($11d87f3f76e88657$export$93522d1a439f3617)(date)) : ($11d87f3f76e88657$export$b21e0b124e224484)(date, time));
            setSelectedDate(null);
            setSelectedTime(null);
            validation.commitValidation();
        };
        // Intercept setValue to make sure the Time section is not changed by date selection in Calendar
        let selectDate = (newValue)=>{
            let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;
            if (hasTime) {
                if (selectedTime || shouldClose) commitValue(newValue, selectedTime || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));
                else setSelectedDate(newValue);
            } else {
                setValue(newValue);
                validation.commitValidation();
            }
            if (shouldClose) overlayState.setOpen(false);
        };
        let selectTime = (newValue)=>{
            if (selectedDate && newValue) commitValue(selectedDate, newValue);
            else setSelectedTime(newValue);
        };
        return {
            ...validation,
            value: value,
            setValue: setValue,
            dateValue: selectedDate,
            timeValue: selectedTime,
            setDateValue: selectDate,
            setTimeValue: selectTime,
            granularity: granularity,
            hasTime: hasTime,
            ...overlayState,
            setOpen (isOpen) {
                // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.
                // If only the time was set and not the date, don't commit. The state will be preserved until
                // the user opens the popover again.
                if (!isOpen && !value && selectedDate && hasTime) commitValue(selectedDate, selectedTime || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));
                overlayState.setOpen(isOpen);
            },
            validationState: validationState,
            isInvalid: isValueInvalid,
            formatValue (locale, fieldOptions) {
                if (!dateValue) return '';
                let formatOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);
                let formatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, formatOptions);
                return formatter.format(dateValue);
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 
    // These placeholders are based on the strings used by the <input type="date">
    // implementations in Chrome and Firefox. Additional languages are supported
    // here than React Spectrum's typical translations.
    const $3e3ed55ab2966714$var$placeholders = new ($5b160d28a433310d$export$c17fa47878dc55b6)({
        ach: {
            year: 'mwaka',
            month: 'dwe',
            day: 'nino'
        },
        af: {
            year: 'jjjj',
            month: 'mm',
            day: 'dd'
        },
        am: {
            year: "\u12D3\u12D3\u12D3\u12D3",
            month: "\u121A\u121C",
            day: "\u1240\u1240"
        },
        an: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        ar: {
            year: "\u0633\u0646\u0629",
            month: "\u0634\u0647\u0631",
            day: "\u064A\u0648\u0645"
        },
        ast: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        az: {
            year: 'iiii',
            month: 'aa',
            day: 'gg'
        },
        be: {
            year: "\u0433\u0433\u0433\u0433",
            month: "\u043C\u043C",
            day: "\u0434\u0434"
        },
        bg: {
            year: "\u0433\u0433\u0433\u0433",
            month: "\u043C\u043C",
            day: "\u0434\u0434"
        },
        bn: {
            year: 'yyyy',
            month: "\u09AE\u09BF\u09AE\u09BF",
            day: 'dd'
        },
        br: {
            year: 'bbbb',
            month: 'mm',
            day: 'dd'
        },
        bs: {
            year: 'gggg',
            month: 'mm',
            day: 'dd'
        },
        ca: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        cak: {
            year: 'jjjj',
            month: 'ii',
            day: "q'q'"
        },
        ckb: {
            year: "\u0633\u0627\u06B5",
            month: "\u0645\u0627\u0646\u06AF",
            day: "\u0695\u06C6\u0698"
        },
        cs: {
            year: 'rrrr',
            month: 'mm',
            day: 'dd'
        },
        cy: {
            year: 'bbbb',
            month: 'mm',
            day: 'dd'
        },
        da: {
            year: "\xe5\xe5\xe5\xe5",
            month: 'mm',
            day: 'dd'
        },
        de: {
            year: 'jjjj',
            month: 'mm',
            day: 'tt'
        },
        dsb: {
            year: 'llll',
            month: 'mm',
            day: "\u017A\u017A"
        },
        el: {
            year: "\u03B5\u03B5\u03B5\u03B5",
            month: "\u03BC\u03BC",
            day: "\u03B7\u03B7"
        },
        en: {
            year: 'yyyy',
            month: 'mm',
            day: 'dd'
        },
        eo: {
            year: 'jjjj',
            month: 'mm',
            day: 'tt'
        },
        es: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        et: {
            year: 'aaaa',
            month: 'kk',
            day: 'pp'
        },
        eu: {
            year: 'uuuu',
            month: 'hh',
            day: 'ee'
        },
        fa: {
            year: "\u0633\u0627\u0644",
            month: "\u0645\u0627\u0647",
            day: "\u0631\u0648\u0632"
        },
        ff: {
            year: 'hhhh',
            month: 'll',
            day: "\xf1\xf1"
        },
        fi: {
            year: 'vvvv',
            month: 'kk',
            day: 'pp'
        },
        fr: {
            year: 'aaaa',
            month: 'mm',
            day: 'jj'
        },
        fy: {
            year: 'jjjj',
            month: 'mm',
            day: 'dd'
        },
        ga: {
            year: 'bbbb',
            month: 'mm',
            day: 'll'
        },
        gd: {
            year: 'bbbb',
            month: 'mm',
            day: 'll'
        },
        gl: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        he: {
            year: "\u05E9\u05E0\u05D4",
            month: "\u05D7\u05D5\u05D3\u05E9",
            day: "\u05D9\u05D5\u05DD"
        },
        hr: {
            year: 'gggg',
            month: 'mm',
            day: 'dd'
        },
        hsb: {
            year: 'llll',
            month: 'mm',
            day: 'dd'
        },
        hu: {
            year: "\xe9\xe9\xe9\xe9",
            month: 'hh',
            day: 'nn'
        },
        ia: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        id: {
            year: 'tttt',
            month: 'bb',
            day: 'hh'
        },
        it: {
            year: 'aaaa',
            month: 'mm',
            day: 'gg'
        },
        ja: {
            year: " \u5E74 ",
            month: "\u6708",
            day: "\u65E5"
        },
        ka: {
            year: "\u10EC\u10EC\u10EC\u10EC",
            month: "\u10D7\u10D7",
            day: "\u10E0\u10E0"
        },
        kk: {
            year: "\u0436\u0436\u0436\u0436",
            month: "\u0430\u0430",
            day: "\u043A\u043A"
        },
        kn: {
            year: "\u0CB5\u0CB5\u0CB5\u0CB5",
            month: "\u0CAE\u0CBF\u0CAE\u0CC0",
            day: "\u0CA6\u0CBF\u0CA6\u0CBF"
        },
        ko: {
            year: "\uC5F0\uB3C4",
            month: "\uC6D4",
            day: "\uC77C"
        },
        lb: {
            year: 'jjjj',
            month: 'mm',
            day: 'dd'
        },
        lo: {
            year: "\u0E9B\u0E9B\u0E9B\u0E9B",
            month: "\u0E94\u0E94",
            day: "\u0EA7\u0EA7"
        },
        lt: {
            year: 'mmmm',
            month: 'mm',
            day: 'dd'
        },
        lv: {
            year: 'gggg',
            month: 'mm',
            day: 'dd'
        },
        meh: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        ml: {
            year: "\u0D35\u0D7C\u0D37\u0D02",
            month: "\u0D2E\u0D3E\u0D38\u0D02",
            day: "\u0D24\u0D40\u0D2F\u0D24\u0D3F"
        },
        ms: {
            year: 'tttt',
            month: 'mm',
            day: 'hh'
        },
        nl: {
            year: 'jjjj',
            month: 'mm',
            day: 'dd'
        },
        nn: {
            year: "\xe5\xe5\xe5\xe5",
            month: 'mm',
            day: 'dd'
        },
        no: {
            year: "\xe5\xe5\xe5\xe5",
            month: 'mm',
            day: 'dd'
        },
        oc: {
            year: 'aaaa',
            month: 'mm',
            day: 'jj'
        },
        pl: {
            year: 'rrrr',
            month: 'mm',
            day: 'dd'
        },
        pt: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        rm: {
            year: 'oooo',
            month: 'mm',
            day: 'dd'
        },
        ro: {
            year: 'aaaa',
            month: 'll',
            day: 'zz'
        },
        ru: {
            year: "\u0433\u0433\u0433\u0433",
            month: "\u043C\u043C",
            day: "\u0434\u0434"
        },
        sc: {
            year: 'aaaa',
            month: 'mm',
            day: 'dd'
        },
        scn: {
            year: 'aaaa',
            month: 'mm',
            day: 'jj'
        },
        sk: {
            year: 'rrrr',
            month: 'mm',
            day: 'dd'
        },
        sl: {
            year: 'llll',
            month: 'mm',
            day: 'dd'
        },
        sr: {
            year: "\u0433\u0433\u0433\u0433",
            month: "\u043C\u043C",
            day: "\u0434\u0434"
        },
        sv: {
            year: "\xe5\xe5\xe5\xe5",
            month: 'mm',
            day: 'dd'
        },
        szl: {
            year: 'rrrr',
            month: 'mm',
            day: 'dd'
        },
        tg: {
            year: "\u0441\u0441\u0441\u0441",
            month: "\u043C\u043C",
            day: "\u0440\u0440"
        },
        th: {
            year: "\u0E1B\u0E1B\u0E1B\u0E1B",
            month: "\u0E14\u0E14",
            day: "\u0E27\u0E27"
        },
        tr: {
            year: 'yyyy',
            month: 'aa',
            day: 'gg'
        },
        uk: {
            year: "\u0440\u0440\u0440\u0440",
            month: "\u043C\u043C",
            day: "\u0434\u0434"
        },
        'zh-CN': {
            year: "\u5E74",
            month: "\u6708",
            day: "\u65E5"
        },
        'zh-TW': {
            year: "\u5E74",
            month: "\u6708",
            day: "\u65E5"
        }
    }, 'en');
    function $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {
        // Use the actual placeholder value for the era and day period fields.
        if (field === 'era' || field === 'dayPeriod') return value;
        if (field === 'year' || field === 'month' || field === 'day') return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale);
        // For time fields (e.g. hour, minute, etc.), use two dashes as the placeholder.
        return "\u2013\u2013";
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    const $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true,
        dayPeriod: true,
        era: true
    };
    const $3c0fc76039f1c516$var$PAGE_STEP = {
        year: 5,
        month: 2,
        day: 7,
        hour: 2,
        minute: 15,
        second: 15
    };
    // Node seems to convert everything to lowercase...
    const $3c0fc76039f1c516$var$TYPE_MAPPING = {
        dayperiod: 'dayPeriod'
    };
    function $3c0fc76039f1c516$export$60e84778edff6d26(props) {
        let { locale: locale, createCalendar: createCalendar, hideTimeZone: hideTimeZone, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, minValue: minValue, maxValue: maxValue, isDateUnavailable: isDateUnavailable } = props;
        let v = props.value || props.defaultValue || props.placeholderValue;
        let [granularity, defaultTimeZone] = ($35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
        let timeZone = defaultTimeZone || 'UTC';
        // props.granularity must actually exist in the value if one is provided.
        if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());
        let defaultFormatter = (0, wp.element.useMemo)(()=>new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale), [
            locale
        ]);
        let calendar = (0, wp.element.useMemo)(()=>createCalendar(defaultFormatter.resolvedOptions().calendar), [
            createCalendar,
            defaultFormatter
        ]);
        let [value, setDate] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
        let calendarValue = (0, wp.element.useMemo)(()=>($35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [
            value,
            calendar
        ]);
        // We keep track of the placeholder date separately in state so that onChange is not called
        // until all segments are set. If the value === null (not undefined), then assume the component
        // is controlled, so use the placeholder as the value until all segments are entered so it doesn't
        // change from uncontrolled to controlled and emit a warning.
        let [placeholderDate, setPlaceholderDate] = (0, wp.element.useState)(()=>($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
        let val = calendarValue || placeholderDate;
        let showEra = calendar.identifier === 'gregory' && val.era === 'BC';
        let formatOpts = (0, wp.element.useMemo)(()=>{
            var _props_maxGranularity;
            return {
                granularity: granularity,
                maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : 'year',
                timeZone: defaultTimeZone,
                hideTimeZone: hideTimeZone,
                hourCycle: props.hourCycle,
                showEra: showEra,
                shouldForceLeadingZeros: props.shouldForceLeadingZeros
            };
        }, [
            props.maxGranularity,
            granularity,
            props.hourCycle,
            props.shouldForceLeadingZeros,
            defaultTimeZone,
            hideTimeZone,
            showEra
        ]);
        let opts = (0, wp.element.useMemo)(()=>($35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [
            formatOpts
        ]);
        let dateFormatter = (0, wp.element.useMemo)(()=>new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, opts), [
            locale,
            opts
        ]);
        let resolvedOptions = (0, wp.element.useMemo)(()=>dateFormatter.resolvedOptions(), [
            dateFormatter
        ]);
        // Determine how many editable segments there are for validation purposes.
        // The result is cached for performance.
        let allSegments = (0, wp.element.useMemo)(()=>dateFormatter.formatToParts(new Date()).filter((seg)=>$3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg)=>(p[seg.type] = true, p), {}), [
            dateFormatter
        ]);
        let [validSegments, setValidSegments] = (0, wp.element.useState)(()=>props.value || props.defaultValue ? {
                ...allSegments
            } : {});
        let clearedSegment = (0, wp.element.useRef)();
        // Reset placeholder when calendar changes
        let lastCalendarIdentifier = (0, wp.element.useRef)(calendar.identifier);
        (0, wp.element.useEffect)(()=>{
            if (calendar.identifier !== lastCalendarIdentifier.current) {
                lastCalendarIdentifier.current = calendar.identifier;
                setPlaceholderDate((placeholder)=>Object.keys(validSegments).length > 0 ? ($11d87f3f76e88657$export$b4a036af3fc0b032)(placeholder, calendar) : ($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
            }
        }, [
            calendar,
            granularity,
            validSegments,
            defaultTimeZone,
            props.placeholderValue
        ]);
        // If there is a value prop, and some segments were previously placeholders, mark them all as valid.
        if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {
            validSegments = {
                ...allSegments
            };
            setValidSegments(validSegments);
        }
        // If the value is set to null and all segments are valid, reset the placeholder.
        if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {
            validSegments = {};
            setValidSegments(validSegments);
            setPlaceholderDate(($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
        }
        // If all segments are valid, use the date from state, otherwise use the placeholder date.
        let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;
        let setValue = (newValue)=>{
            if (props.isDisabled || props.isReadOnly) return;
            let validKeys = Object.keys(validSegments);
            let allKeys = Object.keys(allSegments);
            // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared
            if (newValue == null) {
                setDate(null);
                setPlaceholderDate(($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
                setValidSegments({});
            } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== 'dayPeriod') {
                // The display calendar should not have any effect on the emitted value.
                // Emit dates in the same calendar as the original value, if any, otherwise gregorian.
                newValue = ($11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
                setDate(newValue);
            } else setPlaceholderDate(newValue);
            clearedSegment.current = null;
        };
        let dateValue = (0, wp.element.useMemo)(()=>displayValue.toDate(timeZone), [
            displayValue,
            timeZone
        ]);
        let segments = (0, wp.element.useMemo)(()=>dateFormatter.formatToParts(dateValue).map((segment)=>{
                let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];
                if (segment.type === 'era' && calendar.getEras().length === 1) isEditable = false;
                let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];
                let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? ($3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;
                return {
                    type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,
                    text: isPlaceholder ? placeholder : segment.value,
                    ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),
                    isPlaceholder: isPlaceholder,
                    placeholder: placeholder,
                    isEditable: isEditable
                };
            }), [
            dateValue,
            validSegments,
            dateFormatter,
            resolvedOptions,
            displayValue,
            calendar,
            locale
        ]);
        // When the era field appears, mark it valid if the year field is already valid.
        // If the era field disappears, remove it from the valid segments.
        if (allSegments.era && validSegments.year && !validSegments.era) {
            validSegments.era = true;
            setValidSegments({
                ...validSegments
            });
        } else if (!allSegments.era && validSegments.era) {
            delete validSegments.era;
            setValidSegments({
                ...validSegments
            });
        }
        let markValid = (part)=>{
            validSegments[part] = true;
            if (part === 'year' && allSegments.era) validSegments.era = true;
            setValidSegments({
                ...validSegments
            });
        };
        let adjustSegment = (type, amount)=>{
            if (!validSegments[type]) {
                markValid(type);
                let validKeys = Object.keys(validSegments);
                let allKeys = Object.keys(allSegments);
                if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);
            } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));
        };
        let builtinValidation = (0, wp.element.useMemo)(()=>($35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
            value,
            minValue,
            maxValue,
            isDateUnavailable,
            formatOpts
        ]);
        let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: value,
            builtinValidation: builtinValidation
        });
        let isValueInvalid = validation.displayValidation.isInvalid;
        let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);
        var _props_maxGranularity;
        return {
            ...validation,
            value: calendarValue,
            dateValue: dateValue,
            calendar: calendar,
            setValue: setValue,
            segments: segments,
            dateFormatter: dateFormatter,
            validationState: validationState,
            isInvalid: isValueInvalid,
            granularity: granularity,
            maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : 'year',
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isRequired: isRequired,
            increment (part) {
                adjustSegment(part, 1);
            },
            decrement (part) {
                adjustSegment(part, -1);
            },
            incrementPage (part) {
                adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);
            },
            decrementPage (part) {
                adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));
            },
            setSegment (part, v) {
                markValid(part);
                setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));
            },
            confirmPlaceholder () {
                if (props.isDisabled || props.isReadOnly) return;
                // Confirm the placeholder if only the day period is not filled in.
                let validKeys = Object.keys(validSegments);
                let allKeys = Object.keys(allSegments);
                if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {
                    validSegments = {
                        ...allSegments
                    };
                    setValidSegments(validSegments);
                    setValue(displayValue.copy());
                }
            },
            clearSegment (part) {
                delete validSegments[part];
                clearedSegment.current = part;
                setValidSegments({
                    ...validSegments
                });
                let placeholder = ($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);
                let value = displayValue;
                // Reset day period to default without changing the hour.
                if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {
                    let isPM = displayValue.hour >= 12;
                    let shouldBePM = placeholder.hour >= 12;
                    if (isPM && !shouldBePM) value = displayValue.set({
                        hour: displayValue.hour - 12
                    });
                    else if (!isPM && shouldBePM) value = displayValue.set({
                        hour: displayValue.hour + 12
                    });
                } else if (part in displayValue) value = displayValue.set({
                    [part]: placeholder[part]
                });
                setDate(null);
                setValue(value);
            },
            formatValue (fieldOptions) {
                if (!calendarValue) return '';
                let formatOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);
                let formatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, formatOptions);
                return formatter.format(dateValue);
            }
        };
    }
    function $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {
        switch(type){
            case 'era':
                {
                    let eras = date.calendar.getEras();
                    return {
                        value: eras.indexOf(date.era),
                        minValue: 0,
                        maxValue: eras.length - 1
                    };
                }
            case 'year':
                return {
                    value: date.year,
                    minValue: 1,
                    maxValue: date.calendar.getYearsInEra(date)
                };
            case 'month':
                return {
                    value: date.month,
                    minValue: ($14e0f24ef4ac5c92$export$5412ac11713b72ad)(date),
                    maxValue: date.calendar.getMonthsInYear(date)
                };
            case 'day':
                return {
                    value: date.day,
                    minValue: ($14e0f24ef4ac5c92$export$b2f4953d301981d5)(date),
                    maxValue: date.calendar.getDaysInMonth(date)
                };
        }
        if ('hour' in date) switch(type){
            case 'dayPeriod':
                return {
                    value: date.hour >= 12 ? 12 : 0,
                    minValue: 0,
                    maxValue: 12
                };
            case 'hour':
                if (options.hour12) {
                    let isPM = date.hour >= 12;
                    return {
                        value: date.hour,
                        minValue: isPM ? 12 : 0,
                        maxValue: isPM ? 23 : 11
                    };
                }
                return {
                    value: date.hour,
                    minValue: 0,
                    maxValue: 23
                };
            case 'minute':
                return {
                    value: date.minute,
                    minValue: 0,
                    maxValue: 59
                };
            case 'second':
                return {
                    value: date.second,
                    minValue: 0,
                    maxValue: 59
                };
        }
        return {};
    }
    function $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {
        switch(part){
            case 'era':
            case 'year':
            case 'month':
            case 'day':
                return value.cycle(part, amount, {
                    round: part === 'year'
                });
        }
        if ('hour' in value) switch(part){
            case 'dayPeriod':
                {
                    let hours = value.hour;
                    let isPM = hours >= 12;
                    return value.set({
                        hour: isPM ? hours - 12 : hours + 12
                    });
                }
            case 'hour':
            case 'minute':
            case 'second':
                return value.cycle(part, amount, {
                    round: part !== 'hour',
                    hourCycle: options.hour12 ? 12 : 24
                });
        }
    }
    function $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {
        switch(part){
            case 'day':
            case 'month':
            case 'year':
            case 'era':
                return value.set({
                    [part]: segmentValue
                });
        }
        if ('hour' in value) switch(part){
            case 'dayPeriod':
                {
                    let hours = value.hour;
                    let wasPM = hours >= 12;
                    let isPM = segmentValue >= 12;
                    if (isPM === wasPM) return value;
                    return value.set({
                        hour: wasPM ? hours - 12 : hours + 12
                    });
                }
            case 'hour':
                // In 12 hour time, ensure that AM/PM does not change
                if (options.hour12) {
                    let hours = value.hour;
                    let wasPM = hours >= 12;
                    if (!wasPM && segmentValue === 12) segmentValue = 0;
                    if (wasPM && segmentValue < 12) segmentValue += 12;
                }
            // fallthrough
            case 'minute':
            case 'second':
                return value.set({
                    [part]: segmentValue
                });
        }
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $93c38a5e28be6249$export$e50a61c1de9f574(props) {
        var _value_start, _value_end;
        let overlayState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
        let [controlledValue, setControlledValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || null, props.onChange);
        let [placeholderValue, setPlaceholderValue] = (0, wp.element.useState)(()=>controlledValue || {
                start: null,
                end: null
            });
        // Reset the placeholder if the value prop is set to null.
        if (controlledValue == null && placeholderValue.start && placeholderValue.end) {
            placeholderValue = {
                start: null,
                end: null
            };
            setPlaceholderValue(placeholderValue);
        }
        let value = controlledValue || placeholderValue;
        let setValue = (value)=>{
            setPlaceholderValue(value || {
                start: null,
                end: null
            });
            if ((value === null || value === void 0 ? void 0 : value.start) && value.end) setControlledValue(value);
            else setControlledValue(null);
        };
        let v = (value === null || value === void 0 ? void 0 : value.start) || (value === null || value === void 0 ? void 0 : value.end) || props.placeholderValue;
        let [granularity, defaultTimeZone] = ($35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
        let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';
        var _props_shouldCloseOnSelect;
        let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
        let [dateRange, setSelectedDateRange] = (0, wp.element.useState)(null);
        let [timeRange, setSelectedTimeRange] = (0, wp.element.useState)(null);
        if (value && value.start && value.end) {
            dateRange = value;
            if ('hour' in value.start) timeRange = value;
        }
        let commitValue = (dateRange, timeRange)=>{
            setValue({
                start: 'timeZone' in timeRange.start ? timeRange.start.set(($11d87f3f76e88657$export$93522d1a439f3617)(dateRange.start)) : ($11d87f3f76e88657$export$b21e0b124e224484)(dateRange.start, timeRange.start),
                end: 'timeZone' in timeRange.end ? timeRange.end.set(($11d87f3f76e88657$export$93522d1a439f3617)(dateRange.end)) : ($11d87f3f76e88657$export$b21e0b124e224484)(dateRange.end, timeRange.end)
            });
            setSelectedDateRange(null);
            setSelectedTimeRange(null);
            validation.commitValidation();
        };
        // Intercept setValue to make sure the Time section is not changed by date selection in Calendar
        let setDateRange = (range)=>{
            let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;
            if (hasTime) {
                if (shouldClose || range.start && range.end && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end)) commitValue(range, {
                    start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),
                    end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)
                });
                else setSelectedDateRange(range);
            } else if (range.start && range.end) {
                setValue(range);
                validation.commitValidation();
            } else setSelectedDateRange(range);
            if (shouldClose) overlayState.setOpen(false);
        };
        let setTimeRange = (range)=>{
            if ((dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && range.start && range.end) commitValue(dateRange, range);
            else setSelectedTimeRange(range);
        };
        let showEra = (value === null || value === void 0 ? void 0 : (_value_start = value.start) === null || _value_start === void 0 ? void 0 : _value_start.calendar.identifier) === 'gregory' && value.start.era === 'BC' || (value === null || value === void 0 ? void 0 : (_value_end = value.end) === null || _value_end === void 0 ? void 0 : _value_end.calendar.identifier) === 'gregory' && value.end.era === 'BC';
        let formatOpts = (0, wp.element.useMemo)(()=>({
                granularity: granularity,
                timeZone: defaultTimeZone,
                hideTimeZone: props.hideTimeZone,
                hourCycle: props.hourCycle,
                shouldForceLeadingZeros: props.shouldForceLeadingZeros,
                showEra: showEra
            }), [
            granularity,
            props.hourCycle,
            props.shouldForceLeadingZeros,
            defaultTimeZone,
            props.hideTimeZone,
            showEra
        ]);
        let { minValue: minValue, maxValue: maxValue, isDateUnavailable: isDateUnavailable } = props;
        let builtinValidation = (0, wp.element.useMemo)(()=>($35a22f14a1f04b11$export$80ff8fc0ae339c13)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
            value,
            minValue,
            maxValue,
            isDateUnavailable,
            formatOpts
        ]);
        let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: controlledValue,
            name: (0, wp.element.useMemo)(()=>[
                    props.startName,
                    props.endName
                ], [
                props.startName,
                props.endName
            ]),
            builtinValidation: builtinValidation
        });
        let isValueInvalid = validation.displayValidation.isInvalid;
        let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);
        return {
            ...validation,
            value: value,
            setValue: setValue,
            dateRange: dateRange,
            timeRange: timeRange,
            granularity: granularity,
            hasTime: hasTime,
            setDate (part, date) {
                setDateRange({
                    ...dateRange,
                    [part]: date
                });
            },
            setTime (part, time) {
                setTimeRange({
                    ...timeRange,
                    [part]: time
                });
            },
            setDateTime (part, dateTime) {
                setValue({
                    ...value,
                    [part]: dateTime
                });
            },
            setDateRange: setDateRange,
            setTimeRange: setTimeRange,
            ...overlayState,
            setOpen (isOpen) {
                // Commit the selected date range when the calendar is closed. Use a placeholder time if one wasn't set.
                // If only the time range was set and not the date range, don't commit. The state will be preserved until
                // the user opens the popover again.
                if (!isOpen && !((value === null || value === void 0 ? void 0 : value.start) && (value === null || value === void 0 ? void 0 : value.end)) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && hasTime) commitValue(dateRange, {
                    start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),
                    end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)
                });
                overlayState.setOpen(isOpen);
            },
            validationState: validationState,
            isInvalid: isValueInvalid,
            formatValue (locale, fieldOptions) {
                if (!value || !value.start || !value.end) return null;
                let startTimeZone = 'timeZone' in value.start ? value.start.timeZone : undefined;
                let startGranularity = props.granularity || (value.start && 'minute' in value.start ? 'minute' : 'day');
                let endTimeZone = 'timeZone' in value.end ? value.end.timeZone : undefined;
                let endGranularity = props.granularity || (value.end && 'minute' in value.end ? 'minute' : 'day');
                let startOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {
                    granularity: startGranularity,
                    timeZone: startTimeZone,
                    hideTimeZone: props.hideTimeZone,
                    hourCycle: props.hourCycle,
                    showEra: value.start.calendar.identifier === 'gregory' && value.start.era === 'BC' || value.end.calendar.identifier === 'gregory' && value.end.era === 'BC'
                });
                let startDate = value.start.toDate(startTimeZone || 'UTC');
                let endDate = value.end.toDate(endTimeZone || 'UTC');
                let startFormatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, startOptions);
                let endFormatter;
                if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {
                    // Use formatRange, as it results in shorter output when some of the fields
                    // are shared between the start and end dates (e.g. the same month).
                    // Formatting will fail if the end date is before the start date. Fall back below when that happens.
                    try {
                        let parts = startFormatter.formatRangeToParts(startDate, endDate);
                        // Find the separator between the start and end date. This is determined
                        // by finding the last shared literal before the end range.
                        let separatorIndex = -1;
                        for(let i = 0; i < parts.length; i++){
                            let part = parts[i];
                            if (part.source === 'shared' && part.type === 'literal') separatorIndex = i;
                            else if (part.source === 'endRange') break;
                        }
                        // Now we can combine the parts into start and end strings.
                        let start = '';
                        let end = '';
                        for(let i = 0; i < parts.length; i++){
                            if (i < separatorIndex) start += parts[i].value;
                            else if (i > separatorIndex) end += parts[i].value;
                        }
                        return {
                            start: start,
                            end: end
                        };
                    } catch (e) {
                    // ignore
                    }
                    endFormatter = startFormatter;
                } else {
                    let endOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {
                        granularity: endGranularity,
                        timeZone: endTimeZone,
                        hideTimeZone: props.hideTimeZone,
                        hourCycle: props.hourCycle
                    });
                    endFormatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, endOptions);
                }
                return {
                    start: startFormatter.format(startDate),
                    end: endFormatter.format(endDate)
                };
            }
        };
    }

    function $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(opts, dispatch) {
        let { cursor: cursor, getKey: getKey } = opts;
        return {
            setSelectedKeys (selectedKeys) {
                dispatch((state)=>({
                        ...state,
                        selectedKeys: selectedKeys
                    }));
            },
            setFilterText (filterText) {
                dispatch((state)=>({
                        ...state,
                        filterText: filterText
                    }));
            },
            insert (index, ...values) {
                dispatch((state)=>$0d86e9c8f07f9a7b$var$insert(state, index, ...values));
            },
            insertBefore (key, ...values) {
                dispatch((state)=>{
                    let index = state.items.findIndex((item)=>getKey(item) === key);
                    if (index === -1) {
                        if (state.items.length === 0) index = 0;
                        else return state;
                    }
                    return $0d86e9c8f07f9a7b$var$insert(state, index, ...values);
                });
            },
            insertAfter (key, ...values) {
                dispatch((state)=>{
                    let index = state.items.findIndex((item)=>getKey(item) === key);
                    if (index === -1) {
                        if (state.items.length === 0) index = 0;
                        else return state;
                    }
                    return $0d86e9c8f07f9a7b$var$insert(state, index + 1, ...values);
                });
            },
            prepend (...values) {
                dispatch((state)=>$0d86e9c8f07f9a7b$var$insert(state, 0, ...values));
            },
            append (...values) {
                dispatch((state)=>$0d86e9c8f07f9a7b$var$insert(state, state.items.length, ...values));
            },
            remove (...keys) {
                dispatch((state)=>{
                    let keySet = new Set(keys);
                    let items = state.items.filter((item)=>!keySet.has(getKey(item)));
                    let selection = 'all';
                    if (state.selectedKeys !== 'all') {
                        selection = new Set(state.selectedKeys);
                        for (let key of keys)selection.delete(key);
                    }
                    if (cursor == null && items.length === 0) selection = new Set();
                    return {
                        ...state,
                        items: items,
                        selectedKeys: selection
                    };
                });
            },
            removeSelectedItems () {
                dispatch((state)=>{
                    if (state.selectedKeys === 'all') return {
                        ...state,
                        items: [],
                        selectedKeys: new Set()
                    };
                    let selectedKeys = state.selectedKeys;
                    let items = state.items.filter((item)=>!selectedKeys.has(getKey(item)));
                    return {
                        ...state,
                        items: items,
                        selectedKeys: new Set()
                    };
                });
            },
            move (key, toIndex) {
                dispatch((state)=>{
                    let index = state.items.findIndex((item)=>getKey(item) === key);
                    if (index === -1) return state;
                    let copy = state.items.slice();
                    let [item] = copy.splice(index, 1);
                    copy.splice(toIndex, 0, item);
                    return {
                        ...state,
                        items: copy
                    };
                });
            },
            moveBefore (key, keys) {
                dispatch((state)=>{
                    let toIndex = state.items.findIndex((item)=>getKey(item) === key);
                    if (toIndex === -1) return state;
                    // Find indices of keys to move. Sort them so that the order in the list is retained.
                    let keyArray = Array.isArray(keys) ? keys : [
                        ...keys
                    ];
                    let indices = keyArray.map((key)=>state.items.findIndex((item)=>getKey(item) === key)).sort((a, b)=>a - b);
                    return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex);
                });
            },
            moveAfter (key, keys) {
                dispatch((state)=>{
                    let toIndex = state.items.findIndex((item)=>getKey(item) === key);
                    if (toIndex === -1) return state;
                    let keyArray = Array.isArray(keys) ? keys : [
                        ...keys
                    ];
                    let indices = keyArray.map((key)=>state.items.findIndex((item)=>getKey(item) === key)).sort((a, b)=>a - b);
                    return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex + 1);
                });
            },
            update (key, newValue) {
                dispatch((state)=>{
                    let index = state.items.findIndex((item)=>getKey(item) === key);
                    if (index === -1) return state;
                    return {
                        ...state,
                        items: [
                            ...state.items.slice(0, index),
                            newValue,
                            ...state.items.slice(index + 1)
                        ]
                    };
                });
            }
        };
    }
    function $0d86e9c8f07f9a7b$var$insert(state, index, ...values) {
        return {
            ...state,
            items: [
                ...state.items.slice(0, index),
                ...values,
                ...state.items.slice(index)
            ]
        };
    }
    function $0d86e9c8f07f9a7b$var$move(state, indices, toIndex) {
        // Shift the target down by the number of items being moved from before the target
        toIndex -= indices.filter((index)=>index < toIndex).length;
        let moves = indices.map((from)=>({
                from: from,
                to: toIndex++
            }));
        // Shift later from indices down if they have a larger index
        for(let i = 0; i < moves.length; i++){
            let a = moves[i].from;
            for(let j = i; j < moves.length; j++){
                let b = moves[j].from;
                if (b > a) moves[j].from--;
            }
        }
        // Interleave the moves so they can be applied one by one rather than all at once
        for(let i = 0; i < moves.length; i++){
            let a = moves[i];
            for(let j = moves.length - 1; j > i; j--){
                let b = moves[j];
                if (b.from < a.to) a.to++;
                else b.from++;
            }
        }
        let copy = state.items.slice();
        for (let move of moves){
            let [item] = copy.splice(move.from, 1);
            copy.splice(move.to, 0, item);
        }
        return {
            ...state,
            items: copy
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $f86e6c1ec7da6ebb$var$reducer(data, action) {
        let selectedKeys;
        switch(data.state){
            case 'idle':
            case 'error':
                switch(action.type){
                    case 'loading':
                    case 'loadingMore':
                    case 'sorting':
                    case 'filtering':
                        var _action_filterText, _action_sortDescriptor;
                        return {
                            ...data,
                            filterText: (_action_filterText = action.filterText) !== null && _action_filterText !== void 0 ? _action_filterText : data.filterText,
                            state: action.type,
                            // Reset items to an empty list if loading, but not when sorting.
                            items: action.type === 'loading' ? [] : data.items,
                            sortDescriptor: (_action_sortDescriptor = action.sortDescriptor) !== null && _action_sortDescriptor !== void 0 ? _action_sortDescriptor : data.sortDescriptor,
                            abortController: action.abortController
                        };
                    case 'update':
                        return {
                            ...data,
                            ...action.updater(data)
                        };
                    case 'success':
                    case 'error':
                        return data;
                    default:
                        throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
                }
            case 'loading':
            case 'sorting':
            case 'filtering':
                switch(action.type){
                    case 'success':
                        // Ignore if there is a newer abortcontroller in state.
                        // This means that multiple requests were going at once.
                        // We want to take only the latest result.
                        if (action.abortController !== data.abortController) return data;
                        var _action_selectedKeys;
                        selectedKeys = (_action_selectedKeys = action.selectedKeys) !== null && _action_selectedKeys !== void 0 ? _action_selectedKeys : data.selectedKeys;
                        var _action_filterText1, _action_sortDescriptor1;
                        return {
                            ...data,
                            filterText: (_action_filterText1 = action.filterText) !== null && _action_filterText1 !== void 0 ? _action_filterText1 : data.filterText,
                            state: 'idle',
                            items: [
                                ...action.items
                            ],
                            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),
                            sortDescriptor: (_action_sortDescriptor1 = action.sortDescriptor) !== null && _action_sortDescriptor1 !== void 0 ? _action_sortDescriptor1 : data.sortDescriptor,
                            abortController: null,
                            cursor: action.cursor
                        };
                    case 'error':
                        if (action.abortController !== data.abortController) return data;
                        return {
                            ...data,
                            state: 'error',
                            error: action.error,
                            abortController: null
                        };
                    case 'loading':
                    case 'loadingMore':
                    case 'sorting':
                    case 'filtering':
                        // We're already loading, and another load was triggered at the same time.
                        // We need to abort the previous load and start a new one.
                        data.abortController.abort();
                        var _action_filterText2;
                        return {
                            ...data,
                            filterText: (_action_filterText2 = action.filterText) !== null && _action_filterText2 !== void 0 ? _action_filterText2 : data.filterText,
                            state: action.type,
                            // Reset items to an empty list if loading, but not when sorting.
                            items: action.type === 'loading' ? [] : data.items,
                            abortController: action.abortController
                        };
                    case 'update':
                        // We're already loading, and an update happened at the same time (e.g. selectedKey changed).
                        // Update data but don't abort previous load.
                        return {
                            ...data,
                            ...action.updater(data)
                        };
                    default:
                        throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
                }
            case 'loadingMore':
                switch(action.type){
                    case 'success':
                        var _action_selectedKeys1;
                        selectedKeys = data.selectedKeys === 'all' || action.selectedKeys === 'all' ? 'all' : new Set([
                            ...data.selectedKeys,
                            ...(_action_selectedKeys1 = action.selectedKeys) !== null && _action_selectedKeys1 !== void 0 ? _action_selectedKeys1 : []
                        ]);
                        var _action_sortDescriptor2;
                        // Append the new items
                        return {
                            ...data,
                            state: 'idle',
                            items: [
                                ...data.items,
                                ...action.items
                            ],
                            selectedKeys: selectedKeys,
                            sortDescriptor: (_action_sortDescriptor2 = action.sortDescriptor) !== null && _action_sortDescriptor2 !== void 0 ? _action_sortDescriptor2 : data.sortDescriptor,
                            abortController: null,
                            cursor: action.cursor
                        };
                    case 'error':
                        if (action.abortController !== data.abortController) return data;
                        return {
                            ...data,
                            state: 'error',
                            error: action.error
                        };
                    case 'loading':
                    case 'sorting':
                    case 'filtering':
                        // We're already loading more, and another load was triggered at the same time.
                        // We need to abort the previous load more and start a new one.
                        data.abortController.abort();
                        var _action_filterText3;
                        return {
                            ...data,
                            filterText: (_action_filterText3 = action.filterText) !== null && _action_filterText3 !== void 0 ? _action_filterText3 : data.filterText,
                            state: action.type,
                            // Reset items to an empty list if loading, but not when sorting.
                            items: action.type === 'loading' ? [] : data.items,
                            abortController: action.abortController
                        };
                    case 'loadingMore':
                        // If already loading more and another loading more is triggered, abort the new load more since
                        // it is a duplicate request since the cursor hasn't been updated.
                        // Do not overwrite the data.abortController
                        action.abortController.abort();
                        return data;
                    case 'update':
                        // We're already loading, and an update happened at the same time (e.g. selectedKey changed).
                        // Update data but don't abort previous load.
                        return {
                            ...data,
                            ...action.updater(data)
                        };
                    default:
                        throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
                }
            default:
                throw new Error(`Invalid state "${data.state}"`);
        }
    }
    function $f86e6c1ec7da6ebb$export$bc3384a35de93d66(options) {
        const { load: load, sort: sort, initialSelectedKeys: initialSelectedKeys, initialSortDescriptor: initialSortDescriptor, getKey: getKey = (item)=>item.id || item.key, initialFilterText: initialFilterText = '' } = options;
        let [data, dispatch] = (0, wp.element.useReducer)($f86e6c1ec7da6ebb$var$reducer, {
            state: 'idle',
            error: null,
            items: [],
            selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),
            sortDescriptor: initialSortDescriptor,
            filterText: initialFilterText
        });
        const dispatchFetch = async (action, fn)=>{
            let abortController = new AbortController();
            try {
                dispatch({
                    ...action,
                    abortController: abortController
                });
                var _action_filterText;
                let previousFilterText = (_action_filterText = action.filterText) !== null && _action_filterText !== void 0 ? _action_filterText : data.filterText;
                var _action_sortDescriptor;
                let response = await fn({
                    items: data.items.slice(),
                    selectedKeys: data.selectedKeys,
                    sortDescriptor: (_action_sortDescriptor = action.sortDescriptor) !== null && _action_sortDescriptor !== void 0 ? _action_sortDescriptor : data.sortDescriptor,
                    signal: abortController.signal,
                    cursor: action.type === 'loadingMore' ? data.cursor : null,
                    filterText: previousFilterText
                });
                var _response_filterText;
                let filterText = (_response_filterText = response.filterText) !== null && _response_filterText !== void 0 ? _response_filterText : previousFilterText;
                dispatch({
                    type: 'success',
                    ...response,
                    abortController: abortController
                });
                // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText
                // Only do this if not aborted (e.g. user triggers another filter action before load completes)
                if (filterText && filterText !== previousFilterText && !abortController.signal.aborted) dispatchFetch({
                    type: 'filtering',
                    filterText: filterText
                }, load);
            } catch (e) {
                dispatch({
                    type: 'error',
                    error: e,
                    abortController: abortController
                });
            }
        };
        let didDispatchInitialFetch = (0, wp.element.useRef)(false);
        (0, wp.element.useEffect)(()=>{
            if (!didDispatchInitialFetch.current) {
                dispatchFetch({
                    type: 'loading'
                }, load);
                didDispatchInitialFetch.current = true;
            }
        // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
        return {
            items: data.items,
            selectedKeys: data.selectedKeys,
            sortDescriptor: data.sortDescriptor,
            isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',
            loadingState: data.state,
            error: data.error,
            filterText: data.filterText,
            getItem (key) {
                return data.items.find((item)=>getKey(item) === key);
            },
            reload () {
                dispatchFetch({
                    type: 'loading'
                }, load);
            },
            loadMore () {
                // Ignore if already loading more or if performing server side filtering.
                if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) return;
                dispatchFetch({
                    type: 'loadingMore'
                }, load);
            },
            sort (sortDescriptor) {
                dispatchFetch({
                    type: 'sorting',
                    sortDescriptor: sortDescriptor
                }, sort || load);
            },
            ...($0d86e9c8f07f9a7b$export$79c0c687a5963b0a)({
                ...options,
                getKey: getKey,
                cursor: data.cursor
            }, (fn)=>{
                dispatch({
                    type: 'update',
                    updater: fn
                });
            }),
            setFilterText (filterText) {
                dispatchFetch({
                    type: 'filtering',
                    filterText: filterText
                }, load);
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $de67e98908f0c6ee$export$7f629e9dc1ecf37c(props) {
        let { minValue: minValue, maxValue: maxValue, step: step, formatOptions: formatOptions, value: value, defaultValue: defaultValue = NaN, onChange: onChange, locale: locale, isDisabled: isDisabled, isReadOnly: isReadOnly } = props;
        if (value === null) value = NaN;
        if (value !== undefined && !isNaN(value)) {
            if (step !== undefined && !isNaN(step)) value = ($9446cca9a3875146$export$cb6e0bb50bc19463)(value, minValue, maxValue, step);
            else value = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
        }
        if (!isNaN(defaultValue)) {
            if (step !== undefined && !isNaN(step)) defaultValue = ($9446cca9a3875146$export$cb6e0bb50bc19463)(defaultValue, minValue, maxValue, step);
            else defaultValue = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(defaultValue, minValue, maxValue);
        }
        let [numberValue, setNumberValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, isNaN(defaultValue) ? NaN : defaultValue, onChange);
        let [inputValue, setInputValue] = (0, wp.element.useState)(()=>isNaN(numberValue) ? '' : new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, formatOptions).format(numberValue));
        let numberParser = (0, wp.element.useMemo)(()=>new ($6c7bd7858deea686$export$cd11ab140839f11d)(locale, formatOptions), [
            locale,
            formatOptions
        ]);
        let numberingSystem = (0, wp.element.useMemo)(()=>numberParser.getNumberingSystem(inputValue), [
            numberParser,
            inputValue
        ]);
        let formatter = (0, wp.element.useMemo)(()=>new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, {
                ...formatOptions,
                numberingSystem: numberingSystem
            }), [
            locale,
            formatOptions,
            numberingSystem
        ]);
        let intlOptions = (0, wp.element.useMemo)(()=>formatter.resolvedOptions(), [
            formatter
        ]);
        let format = (0, wp.element.useCallback)((value)=>isNaN(value) || value === null ? '' : formatter.format(value), [
            formatter
        ]);
        let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: numberValue
        });
        let clampStep = step !== undefined && !isNaN(step) ? step : 1;
        if (intlOptions.style === 'percent' && (step === undefined || isNaN(step))) clampStep = 0.01;
        // Update the input value when the number value or format options change. This is done
        // in a useEffect so that the controlled behavior is correct and we only update the
        // textfield after prop changes.
        let [prevValue, setPrevValue] = (0, wp.element.useState)(numberValue);
        let [prevLocale, setPrevLocale] = (0, wp.element.useState)(locale);
        let [prevFormatOptions, setPrevFormatOptions] = (0, wp.element.useState)(formatOptions);
        if (!Object.is(numberValue, prevValue) || locale !== prevLocale || formatOptions !== prevFormatOptions) {
            setInputValue(format(numberValue));
            setPrevValue(numberValue);
            setPrevLocale(locale);
            setPrevFormatOptions(formatOptions);
        }
        let parsedValue = (0, wp.element.useMemo)(()=>numberParser.parse(inputValue), [
            numberParser,
            inputValue
        ]);
        let commit = ()=>{
            // Set to empty state if input value is empty
            if (!inputValue.length) {
                setNumberValue(NaN);
                setInputValue(value === undefined ? '' : format(numberValue));
                return;
            }
            // if it failed to parse, then reset input to formatted version of current number
            if (isNaN(parsedValue)) {
                setInputValue(format(numberValue));
                return;
            }
            // Clamp to min and max, round to the nearest step, and round to specified number of digits
            let clampedValue;
            if (step === undefined || isNaN(step)) clampedValue = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(parsedValue, minValue, maxValue);
            else clampedValue = ($9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, step);
            clampedValue = numberParser.parse(format(clampedValue));
            setNumberValue(clampedValue);
            // in a controlled state, the numberValue won't change, so we won't go back to our old input without help
            setInputValue(format(value === undefined ? clampedValue : numberValue));
        };
        let safeNextStep = (operation, minMax = 0)=>{
            let prev = parsedValue;
            if (isNaN(prev)) {
                // if the input is empty, start from the min/max value when incrementing/decrementing,
                // or zero if there is no min/max value defined.
                let newValue = isNaN(minMax) ? 0 : minMax;
                return ($9446cca9a3875146$export$cb6e0bb50bc19463)(newValue, minValue, maxValue, clampStep);
            } else {
                // otherwise, first snap the current value to the nearest step. if it moves in the direction
                // we're going, use that value, otherwise add the step and snap that value.
                let newValue = ($9446cca9a3875146$export$cb6e0bb50bc19463)(prev, minValue, maxValue, clampStep);
                if (operation === '+' && newValue > prev || operation === '-' && newValue < prev) return newValue;
                return ($9446cca9a3875146$export$cb6e0bb50bc19463)($de67e98908f0c6ee$var$handleDecimalOperation(operation, prev, clampStep), minValue, maxValue, clampStep);
            }
        };
        let increment = ()=>{
            let newValue = safeNextStep('+', minValue);
            // if we've arrived at the same value that was previously in the state, the
            // input value should be updated to match
            // ex type 4, press increment, highlight the number in the input, type 4 again, press increment
            // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input
            if (newValue === numberValue) setInputValue(format(newValue));
            setNumberValue(newValue);
            validation.commitValidation();
        };
        let decrement = ()=>{
            let newValue = safeNextStep('-', maxValue);
            if (newValue === numberValue) setInputValue(format(newValue));
            setNumberValue(newValue);
            validation.commitValidation();
        };
        let incrementToMax = ()=>{
            if (maxValue != null) {
                setNumberValue(($9446cca9a3875146$export$cb6e0bb50bc19463)(maxValue, minValue, maxValue, clampStep));
                validation.commitValidation();
            }
        };
        let decrementToMin = ()=>{
            if (minValue != null) {
                setNumberValue(minValue);
                validation.commitValidation();
            }
        };
        let canIncrement = (0, wp.element.useMemo)(()=>!isDisabled && !isReadOnly && (isNaN(parsedValue) || maxValue === undefined || isNaN(maxValue) || ($9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, clampStep) > parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation('+', parsedValue, clampStep) <= maxValue), [
            isDisabled,
            isReadOnly,
            minValue,
            maxValue,
            clampStep,
            parsedValue
        ]);
        let canDecrement = (0, wp.element.useMemo)(()=>!isDisabled && !isReadOnly && (isNaN(parsedValue) || minValue === undefined || isNaN(minValue) || ($9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, clampStep) < parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation('-', parsedValue, clampStep) >= minValue), [
            isDisabled,
            isReadOnly,
            minValue,
            maxValue,
            clampStep,
            parsedValue
        ]);
        let validate = (value)=>numberParser.isValidPartialNumber(value, minValue, maxValue);
        return {
            ...validation,
            validate: validate,
            increment: increment,
            incrementToMax: incrementToMax,
            decrement: decrement,
            decrementToMin: decrementToMin,
            canIncrement: canIncrement,
            canDecrement: canDecrement,
            minValue: minValue,
            maxValue: maxValue,
            numberValue: parsedValue,
            setNumberValue: setNumberValue,
            setInputValue: setInputValue,
            inputValue: inputValue,
            commit: commit
        };
    }
    function $de67e98908f0c6ee$var$handleDecimalOperation(operator, value1, value2) {
        let result = operator === '+' ? value1 + value2 : value1 - value2;
        // Check if we have decimals
        if (value1 % 1 !== 0 || value2 % 1 !== 0) {
            const value1Decimal = value1.toString().split('.');
            const value2Decimal = value2.toString().split('.');
            const value1DecimalLength = value1Decimal[1] && value1Decimal[1].length || 0;
            const value2DecimalLength = value2Decimal[1] && value2Decimal[1].length || 0;
            const multiplier = Math.pow(10, Math.max(value1DecimalLength, value2DecimalLength));
            // Transform the decimals to integers based on the precision
            value1 = Math.round(value1 * multiplier);
            value2 = Math.round(value2 * multiplier);
            // Perform the operation on integers values to make sure we don't get a fancy decimal value
            result = operator === '+' ? value1 + value2 : value1 - value2;
            // Transform the integer result back to decimal
            result /= multiplier;
        }
        return result;
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    let $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 10000000000);
    let $a54cdc5c1942b639$var$i = 0;
    function $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {
        // Preserved here for backward compatibility. React Aria now generates the name instead of stately.
        let name = (0, wp.element.useMemo)(()=>props.name || `radio-group-${$a54cdc5c1942b639$var$instance}-${++$a54cdc5c1942b639$var$i}`, [
            props.name
        ]);
        var _props_defaultValue;
        let [selectedValue, setSelected] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : null, props.onChange);
        let [lastFocusedValue, setLastFocusedValue] = (0, wp.element.useState)(null);
        let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: selectedValue
        });
        let setSelectedValue = (value)=>{
            if (!props.isReadOnly && !props.isDisabled) {
                setSelected(value);
                validation.commitValidation();
            }
        };
        let isInvalid = validation.displayValidation.isInvalid;
        return {
            ...validation,
            name: name,
            selectedValue: selectedValue,
            setSelectedValue: setSelectedValue,
            lastFocusedValue: lastFocusedValue,
            setLastFocusedValue: setLastFocusedValue,
            isDisabled: props.isDisabled || false,
            isReadOnly: props.isReadOnly || false,
            isRequired: props.isRequired || false,
            validationState: props.validationState || (isInvalid ? 'invalid' : null),
            isInvalid: isInvalid
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props) {
        let triggerState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
        let [focusStrategy, setFocusStrategy] = (0, wp.element.useState)(null);
        let listState = ($a0d645289fe9b86b$export$e7f05e985daf4b5f)({
            ...props,
            onSelectionChange: (key)=>{
                if (props.onSelectionChange != null) props.onSelectionChange(key);
                triggerState.close();
                validationState.commitValidation();
            }
        });
        let validationState = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: listState.selectedKey
        });
        let [isFocused, setFocused] = (0, wp.element.useState)(false);
        return {
            ...validationState,
            ...listState,
            ...triggerState,
            focusStrategy: focusStrategy,
            open (focusStrategy = null) {
                // Don't open if the collection is empty.
                if (listState.collection.size !== 0) {
                    setFocusStrategy(focusStrategy);
                    triggerState.open();
                }
            },
            toggle (focusStrategy = null) {
                if (listState.collection.size !== 0) {
                    setFocusStrategy(focusStrategy);
                    triggerState.toggle();
                }
            },
            isFocused: isFocused,
            setFocused: setFocused
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    const $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;
    const $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;
    const $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;
    function $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {
        const { isDisabled: isDisabled = false, minValue: minValue = $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE, maxValue: maxValue = $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE, numberFormatter: formatter, step: step = $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE, orientation: orientation = 'horizontal' } = props;
        // Page step should be at least equal to step and always a multiple of the step.
        let pageSize = (0, wp.element.useMemo)(()=>{
            let calcPageSize = (maxValue - minValue) / 10;
            calcPageSize = ($9446cca9a3875146$export$cb6e0bb50bc19463)(calcPageSize, 0, calcPageSize + step, step);
            return Math.max(calcPageSize, step);
        }, [
            step,
            maxValue,
            minValue
        ]);
        let restrictValues = (0, wp.element.useCallback)((values)=>values === null || values === void 0 ? void 0 : values.map((val, idx)=>{
                let min = idx === 0 ? minValue : val[idx - 1];
                let max = idx === values.length - 1 ? maxValue : val[idx + 1];
                return ($9446cca9a3875146$export$cb6e0bb50bc19463)(val, min, max, step);
            }), [
            minValue,
            maxValue,
            step
        ]);
        let value = (0, wp.element.useMemo)(()=>restrictValues($28f99e3e86e6ec45$var$convertValue(props.value)), [
            props.value
        ]);
        let defaultValue = (0, wp.element.useMemo)(()=>{
            var _convertValue;
            return restrictValues((_convertValue = $28f99e3e86e6ec45$var$convertValue(props.defaultValue)) !== null && _convertValue !== void 0 ? _convertValue : [
                minValue
            ]);
        }, [
            props.defaultValue,
            minValue
        ]);
        let onChange = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChange);
        let onChangeEnd = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChangeEnd);
        const [values, setValuesState] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, defaultValue, onChange);
        const [isDraggings, setDraggingsState] = (0, wp.element.useState)(new Array(values.length).fill(false));
        const isEditablesRef = (0, wp.element.useRef)(new Array(values.length).fill(true));
        const [focusedIndex, setFocusedIndex] = (0, wp.element.useState)(undefined);
        const valuesRef = (0, wp.element.useRef)(values);
        const isDraggingsRef = (0, wp.element.useRef)(isDraggings);
        let setValues = (values)=>{
            valuesRef.current = values;
            setValuesState(values);
        };
        let setDraggings = (draggings)=>{
            isDraggingsRef.current = draggings;
            setDraggingsState(draggings);
        };
        function getValuePercent(value) {
            return (value - minValue) / (maxValue - minValue);
        }
        function getThumbMinValue(index) {
            return index === 0 ? minValue : values[index - 1];
        }
        function getThumbMaxValue(index) {
            return index === values.length - 1 ? maxValue : values[index + 1];
        }
        function isThumbEditable(index) {
            return isEditablesRef.current[index];
        }
        function setThumbEditable(index, editable) {
            isEditablesRef.current[index] = editable;
        }
        function updateValue(index, value) {
            if (isDisabled || !isThumbEditable(index)) return;
            const thisMin = getThumbMinValue(index);
            const thisMax = getThumbMaxValue(index);
            // Round value to multiple of step, clamp value between min and max
            value = ($9446cca9a3875146$export$cb6e0bb50bc19463)(value, thisMin, thisMax, step);
            let newValues = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index, value);
            setValues(newValues);
        }
        function updateDragging(index, dragging) {
            if (isDisabled || !isThumbEditable(index)) return;
            if (dragging) valuesRef.current = values;
            const wasDragging = isDraggingsRef.current[index];
            isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index, dragging);
            setDraggings(isDraggingsRef.current);
            // Call onChangeEnd if no handles are dragging.
            if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) onChangeEnd(valuesRef.current);
        }
        function getFormattedValue(value) {
            return formatter.format(value);
        }
        function setThumbPercent(index, percent) {
            updateValue(index, getPercentValue(percent));
        }
        function getRoundedValue(value) {
            return Math.round((value - minValue) / step) * step + minValue;
        }
        function getPercentValue(percent) {
            const val = percent * (maxValue - minValue) + minValue;
            return ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(getRoundedValue(val), minValue, maxValue);
        }
        function incrementThumb(index, stepSize = 1) {
            let s = Math.max(stepSize, step);
            updateValue(index, ($9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] + s, minValue, maxValue, step));
        }
        function decrementThumb(index, stepSize = 1) {
            let s = Math.max(stepSize, step);
            updateValue(index, ($9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] - s, minValue, maxValue, step));
        }
        return {
            values: values,
            getThumbValue: (index)=>values[index],
            setThumbValue: updateValue,
            setThumbPercent: setThumbPercent,
            isThumbDragging: (index)=>isDraggings[index],
            setThumbDragging: updateDragging,
            focusedThumb: focusedIndex,
            setFocusedThumb: setFocusedIndex,
            getThumbPercent: (index)=>getValuePercent(values[index]),
            getValuePercent: getValuePercent,
            getThumbValueLabel: (index)=>getFormattedValue(values[index]),
            getFormattedValue: getFormattedValue,
            getThumbMinValue: getThumbMinValue,
            getThumbMaxValue: getThumbMaxValue,
            getPercentValue: getPercentValue,
            isThumbEditable: isThumbEditable,
            setThumbEditable: setThumbEditable,
            incrementThumb: incrementThumb,
            decrementThumb: decrementThumb,
            step: step,
            pageSize: pageSize,
            orientation: orientation,
            isDisabled: isDisabled
        };
    }
    function $28f99e3e86e6ec45$var$replaceIndex(array, index, value) {
        if (array[index] === value) return array;
        return [
            ...array.slice(0, index),
            value,
            ...array.slice(index + 1)
        ];
    }
    function $28f99e3e86e6ec45$var$convertValue(value) {
        if (value == null) return undefined;
        return Array.isArray(value) ? value : [
            value
        ];
    }
    function $28f99e3e86e6ec45$var$createOnChange(value, defaultValue, onChange) {
        return (newValue)=>{
            if (typeof value === 'number' || typeof defaultValue === 'number') onChange === null || onChange === void 0 ? void 0 : onChange(newValue[0]);
            else onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
        };
    }

    var __defProp$1l = Object.defineProperty;
    var __name$1l = (target, value) => __defProp$1l(target, "name", { value, configurable: true });
    const ModalTrigger = /* @__PURE__ */ __name$1l((props) => {
      const content = props.content ?? props.children;
      const state = $fc909762b330b746$export$61c6a8c84e605fb6(props);
      const { triggerProps, overlayProps } = $628037886ba31236$export$f9d5c8beee7d008d(
        { type: "dialog" },
        state
      );
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          ...triggerProps,
          type: "action",
          isDisabled: props.isDisabled,
          ...props.buttonProps ?? {}
        },
        props.label ?? "Open modal"
      ), state.isOpen && /* @__PURE__ */ wp.element.createElement(Modal, { className: "tf-modal", state }, /* @__PURE__ */ wp.element.createElement(Dialog, { title: props.title, ...overlayProps }, content, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-modal-actions" }, /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "danger",
          onPress: () => {
            state.close();
            if (props.onValidate)
              props.onValidate();
          }
        },
        props.confirmText ?? props.label
      ), /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "action",
          onPress: () => {
            state.close();
            if (props.onCancel)
              props.onCancel();
          }
        },
        props.cancelText ?? "Cancel"
      )))));
    }, "ModalTrigger");

    var __defProp$1k = Object.defineProperty;
    var __name$1k = (target, value) => __defProp$1k(target, "name", { value, configurable: true });
    function Notice({ message, type, onDismiss }) {
      return /* @__PURE__ */ wp.element.createElement("div", { className: `tf-notice ${type} tf-is-dismissible` }, /* @__PURE__ */ wp.element.createElement("p", null, message), /* @__PURE__ */ wp.element.createElement("button", { type: "button", className: "tf-notice-dismiss", onClick: onDismiss }));
    }
    __name$1k(Notice, "Notice");

    var __defProp$1j = Object.defineProperty;
    var __name$1j = (target, value) => __defProp$1j(target, "name", { value, configurable: true });
    function Popover({
      children,
      state,
      style,
      className = "",
      ...props
    }) {
      const popoverRef = wp.element.useRef(null);
      const { popoverProps, underlayProps } = $f2f8a6077418541e$export$542a6fd13ac93354({
        ...props,
        popoverRef
      }, state);
      const { ControlContext } = tangibleFields;
      const control = wp.element.useContext(ControlContext);
      return /* @__PURE__ */ wp.element.createElement($337b884510726a0d$export$c6fdb837b070b4ff, { portalContainer: control.portalContainer }, /* @__PURE__ */ wp.element.createElement("div", { className: control.wrapper }, !props.isNonModal && /* @__PURE__ */ wp.element.createElement("div", { ...underlayProps, className: "tf-underlay" }), /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          ...popoverProps,
          ref: popoverRef,
          style: {
            ...popoverProps.style,
            ...style,
            zIndex: 1e6,
            boxSizing: "border-box"
          },
          className: `tf-popover ${className}`
        },
        children,
        /* @__PURE__ */ wp.element.createElement($86ea4cb521eb2e37$export$2317d149ed6f78c4, { onDismiss: state.close })
      )));
    }
    __name$1j(Popover, "Popover");

    var __defProp$1i = Object.defineProperty;
    var __name$1i = (target, value) => __defProp$1i(target, "name", { value, configurable: true });
    const RenderChoices = /* @__PURE__ */ __name$1i((item) => item.choices ? /* @__PURE__ */ wp.element.createElement($9fc4852771d079eb$export$6e2c8f0811a474ce, { key: item.key ?? item.name, title: item.label ?? "", items: item.choices ?? [] }, (item2) => /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: item2.value ?? "" }, item2.label ?? "")) : /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: item.value ?? "" }, item.label ?? ""), "RenderChoices");

    var __defProp$1h = Object.defineProperty;
    var __name$1h = (target, value) => __defProp$1h(target, "name", { value, configurable: true });
    const Title = /* @__PURE__ */ __name$1h((props) => {
      const Level = `h${props.level}`;
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-title" }, /* @__PURE__ */ wp.element.createElement(Level, { className: props.className }, props.children));
    }, "Title");

    var __defProp$1g = Object.defineProperty;
    var __name$1g = (target, value) => __defProp$1g(target, "name", { value, configurable: true });
    const Wrapper = /* @__PURE__ */ __name$1g(({
      content,
      children
    }) => /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, content ?? children), "Wrapper");

    var __defProp$1f = Object.defineProperty;
    var __name$1f = (target, value) => __defProp$1f(target, "name", { value, configurable: true });
    const Advanced = /* @__PURE__ */ __name$1f(({
      items,
      fields,
      rowFields,
      renderItem,
      maxLength,
      dispatch,
      headerFields = false,
      beforeRow = false,
      afterRow = false
    }) => {
      const [openSection, setOpenSection] = wp.element.useState(false);
      const headerColumns = headerFields ? fields.filter((field) => headerFields.includes(field.name) || headerFields.includes(field.name + ".label")) : fields;
      const formatHeaderFieldsObject = /* @__PURE__ */ __name$1f((item, columnName) => {
        return item[columnName].label === "" ? JSON.stringify(item[columnName]) : item[columnName].label;
      }, "formatHeaderFieldsObject");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-advanced" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-advanced-header tf-repeater-advanced-label-row" }, /* @__PURE__ */ wp.element.createElement("div", { key: "index", className: "tf-repeater-advanced-label-row-index" }), headerColumns.map((column, h) => /* @__PURE__ */ wp.element.createElement("div", { key: h, className: "tf-repeater-advanced-header-item tf-repeater-advanced-label-row-item" }, column.label ?? "")), /* @__PURE__ */ wp.element.createElement("div", { key: "arrow", className: "tf-repeater-advanced-label-row-arrow" })), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-items tf-repeater-advanced-items" }, items && items.slice(0, maxLength).map((item, i) => /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          key: item.key ?? i,
          className: "tf-repeater-advanced-item",
          "data-open": openSection === i ? "true" : "false"
        },
        /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-advanced-overview tf-repeater-advanced-label-row" }, /* @__PURE__ */ wp.element.createElement("div", { key: "index", className: "tf-repeater-advanced-label-row-index" }, i + 1), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-advanced-overview-item-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-advanced-overview-item-fields" }, headerColumns.map((column, h) => /* @__PURE__ */ wp.element.createElement("div", { key: h, className: "tf-repeater-advanced-overview-item tf-repeater-advanced-label-row-item" }, item[column.name] && item[column.name] !== "" ? typeof item[column.name] === "object" ? formatHeaderFieldsObject(item, column.name) : item[column.name] : /* @__PURE__ */ wp.element.createElement("i", null, "Empty")))), maxLength !== void 0 && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-advanced-overview-item-actions" }, /* @__PURE__ */ wp.element.createElement(Button, { type: "text-primary", onPress: () => setOpenSection(openSection === i ? false : i) }, openSection === i ? "Close" : "Edit"), /* @__PURE__ */ wp.element.createElement(
          Button,
          {
            type: "text-primary",
            isDisabled: maxLength <= items.length,
            onPress: () => dispatch({
              type: "clone",
              item
            })
          },
          "Duplicate"
        ), /* @__PURE__ */ wp.element.createElement(
          ModalTrigger,
          {
            label: "Delete",
            title: "Confirmation",
            onValidate: () => dispatch({ type: "remove", item: i }),
            buttonProps: { type: "text-danger" }
          },
          "Are you sure you want to remove item ",
          i + 1,
          "?"
        ))), /* @__PURE__ */ wp.element.createElement(
          Button,
          {
            key: "arrow",
            type: "repeater-overview-open",
            onPress: () => setOpenSection(openSection === i ? false : i),
            changeTag: "span",
            className: "tf-repeater-advanced-label-row-arrow"
          },
          /* @__PURE__ */ wp.element.createElement("div", null)
        )),
        openSection === i && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-advanced-row" }, beforeRow && beforeRow(item, i, dispatch), rowFields.map((control) => /* @__PURE__ */ wp.element.createElement("div", { key: control.name ?? i, className: "tf-repeater-advanced-item-field" }, renderItem(control, item, i))), afterRow && afterRow(item, i, dispatch))
      ))));
    }, "Advanced");

    var __defProp$1e = Object.defineProperty;
    var __name$1e = (target, value) => __defProp$1e(target, "name", { value, configurable: true });
    const Bare = /* @__PURE__ */ __name$1e(({
      items,
      rowFields,
      renderItem,
      maxLength,
      dispatch,
      beforeRow = false,
      afterRow = false
    }) => /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-items tf-repeater-bare-items" }, items && items.slice(0, maxLength).map((item, i) => /* @__PURE__ */ wp.element.createElement("div", { key: item.key ?? i, className: "tf-repeater-bare-row" }, beforeRow && beforeRow(item, i, dispatch), rowFields.map((control) => /* @__PURE__ */ wp.element.createElement("div", { key: control.name ?? i, className: "tf-repeater-bare-item-field" }, renderItem(control, item, i))), maxLength !== void 0 && /* @__PURE__ */ wp.element.createElement(
      ModalTrigger,
      {
        label: "Remove",
        title: "Confirmation",
        onValidate: () => dispatch({ type: "remove", item: i })
      },
      "Are you sure you want to remove item ",
      i + 1,
      "?"
    ), afterRow && afterRow(item, i, dispatch)))), "Bare");

    var __defProp$1d = Object.defineProperty;
    var __name$1d = (target, value) => __defProp$1d(target, "name", { value, configurable: true });
    const Accordion = /* @__PURE__ */ __name$1d((props) => {
      const [value, setValue] = wp.element.useState(initJSON(props.value));
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      const isEnabled = /* @__PURE__ */ __name$1d((isEnabled2) => {
        setValue({
          ...value,
          enabled: isEnabled2 === true || isEnabled2 === "on" ? "on" : "off"
        });
      }, "isEnabled");
      const headerLeft = props.useSwitch ? /* @__PURE__ */ wp.element.createElement("div", { onClick: (e) => e.stopPropagation() }, /* @__PURE__ */ wp.element.createElement(
        Switch,
        {
          value: value.enabled ?? "off",
          onChange: isEnabled,
          label: "Toggle accordion",
          labelVisuallyHidden: true
        }
      )) : null;
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-accordion" }, /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: JSON.stringify(value) }), /* @__PURE__ */ wp.element.createElement(
        ExpandablePanel,
        {
          title: props.title ?? false,
          headerLeft,
          behavior: "hide"
        },
        /* @__PURE__ */ wp.element.createElement(
          FieldGroup,
          {
            ...props,
            name: null,
            fields: props.fields,
            value,
            onChange: setValue
          }
        )
      ));
    }, "Accordion");

    var __defProp$1c = Object.defineProperty;
    var __name$1c = (target, value) => __defProp$1c(target, "name", { value, configurable: true });
    const RadioContext = wp.element.createContext(null);
    const RadioGroup = /* @__PURE__ */ __name$1c((props) => {
      const state = $a54cdc5c1942b639$export$bca9d026f8e704eb(props);
      const {
        radioGroupProps,
        labelProps,
        descriptionProps
      } = $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state);
      wp.element.useEffect(() => {
        props.onChange && props.onChange(state.selectedValue);
      }, [state.selectedValue]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-radio-group" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-radio-group-container", ...radioGroupProps }, /* @__PURE__ */ wp.element.createElement(RadioContext.Provider, { value: state }, props.children)), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "RadioGroup");

    var __defProp$1b = Object.defineProperty;
    var __name$1b = (target, value) => __defProp$1b(target, "name", { value, configurable: true });
    const Radio$1 = /* @__PURE__ */ __name$1b((props) => {
      const state = wp.element.useContext(RadioContext);
      const ref = wp.element.useRef(null);
      const { inputProps } = $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref);
      return /* @__PURE__ */ wp.element.createElement("label", { className: "tf-radio" }, /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, ref }), props.children);
    }, "Radio");

    var __defProp$1a = Object.defineProperty;
    var __name$1a = (target, value) => __defProp$1a(target, "name", { value, configurable: true });

    const AlignmentMatrix = /* @__PURE__ */ __name$1a((props) => {
      const [value, setValue] = wp.element.useState(props.value ?? "");
      const options = [
        "top left",
        "top center",
        "top right",
        "center left",
        "center center",
        "center right",
        "bottom left",
        "bottom center",
        "bottom right"
      ];
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-alignment-matrix" }, /* @__PURE__ */ wp.element.createElement(RadioGroup, { ...props, onChange: setValue }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-alignment-matrix-container" }, options.map((option) => /* @__PURE__ */ wp.element.createElement(
        Radio$1,
        {
          key: option,
          id: option,
          value: option
        },
        /* @__PURE__ */ wp.element.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, option)
      )))));
    }, "AlignmentMatrix");

    var __defProp$19 = Object.defineProperty;
    var __name$19 = (target, value) => __defProp$19(target, "name", { value, configurable: true });
    const BaseWrapper = /* @__PURE__ */ __name$19((props) => {
      if (props.config === false) {
        return props.children;
      }
      const { dynamics } = TangibleFields;
      const triggerRef = wp.element.useRef();
      const overlayRef = wp.element.useRef();
      const [value, setValue] = wp.element.useState(false);
      const [settingsForm, setSettingsForm] = wp.element.useState(false);
      const [settings, setSettings] = wp.element.useState({});
      const [valueChange, setValueChange] = wp.element.useState(false);
      const state = $fc909762b330b746$export$61c6a8c84e605fb6({});
      const { triggerProps, overlayProps } = $628037886ba31236$export$f9d5c8beee7d008d(
        { type: "dialog" },
        state,
        triggerRef
      );
      wp.element.useEffect(() => {
        props.isOpen ? state.open() : state.close();
      }, [props.isOpen]);
      wp.element.useEffect(() => {
        if (valueChange !== false) {
          props?.onValueSelection(valueChange);
          setValueChange(false);
        }
      }, [valueChange]);
      const saveDynamicValue = /* @__PURE__ */ __name$19((valueName) => {
        if (!valueName)
          return;
        const args = dynamics.values[valueName]?.fields;
        setValue(valueName);
        if (!Array.isArray(args) || args.length === 0) {
          return selectAndClose(valueName);
        }
        setSettingsForm(args);
      }, "saveDynamicValue");
      const selectAndClose = /* @__PURE__ */ __name$19((value2) => {
        setValueChange(
          props.config.stringify(value2, settings ?? false)
        );
        resetAndClose();
      }, "selectAndClose");
      const resetAndClose = /* @__PURE__ */ __name$19(() => {
        setValue(false);
        setSettingsForm(false);
        setSettings(false);
        state.close();
      }, "resetAndClose");
      const choices = wp.element.useMemo(() => {
        const allowedTypes = props.config.getTypes();
        const categoryKeys = props.config.getCategories() ?? Object.keys(dynamics.categories);
        const categories = categoryKeys.map((categoryKey) => {
          const category = dynamics.categories[categoryKey];
          const categoryChoices = Object.keys(dynamics.values).filter((value2) => category.values.includes(value2) && allowedTypes.includes(dynamics.values[value2]?.type)).reduce((choices2, key) => ({
            ...choices2,
            [key]: dynamics.values[key].label ?? key
          }), {});
          return {
            name: category.label,
            choices: categoryChoices
          };
        });
        return categories.filter((category) => Object.keys(category.choices).length !== 0);
      }, []);
      const settingsRef = wp.element.useRef(settings);
      const updateSettings = /* @__PURE__ */ __name$19((name, settingValue) => {
        setSettings(
          settingsRef.current = {
            ...settings,
            [name]: settingValue
          }
        );
      }, "updateSettings");
      const buttonType = props.buttonType ?? "outside";
      const hasInsert = !(props.readOnly || props.inputMasking) && (buttonType === "outside" || (!props.remove || props.remove.isDisabled));
      const hasClear = !(props.readOnly || props.inputMasking) && (buttonType === "outside" || props.remove && props.remove.isDisabled === false);
      const classes = `tf-dynamic-wrapper tf-dynamic-wrapper-buttons-${buttonType} ${props.className ?? ""}`;
      return /* @__PURE__ */ wp.element.createElement("div", { className: classes, "data-dynamic": "true" }, props.children, hasInsert && /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: buttonType === "outside" ? "action" : "icon",
          className: "tf-dynamic-wrapper-insert",
          ref: triggerRef,
          contentVisuallyHidden: buttonType === "inside",
          ...triggerProps
        },
        "Insert"
      ), hasClear && /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: buttonType === "outside" ? "action" : "icon",
          className: "tf-dynamic-wrapper-clear",
          contentVisuallyHidden: buttonType === "inside",
          ...props.remove
        },
        "Clear"
      ), state.isOpen && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dynamic-wrapper-popover", ref: overlayRef, ...overlayProps }, settingsForm ? /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dynamic-wrapper-popover-form" }, /* @__PURE__ */ wp.element.createElement(Title, { level: 4 }, "Dynamic value settings"), dynamics.values[value].description && /* @__PURE__ */ wp.element.createElement("i", null, dynamics.values[value].description), settingsForm.map((field) => /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dynamic-wrapper-popover-field" }, /* @__PURE__ */ wp.element.createElement(
        Control,
        {
          ...field,
          value: settings[field.name] ?? "",
          onChange: (settingValue) => updateSettings(field.name, settingValue),
          visibility: {
            condition: field.condition?.condition ?? false,
            action: field.condition?.action ?? "show"
          },
          data: {
            getValue: (name) => settingsRef.current[name] ?? ""
          }
        }
      ))), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dynamic-wrapper-popover-buttons" }, /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: () => selectAndClose(value) }, "Add"), /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: resetAndClose }, "Close"))) : /* @__PURE__ */ wp.element.createElement(
        ComboBox,
        {
          choices,
          label: "Select dynamic value to insert",
          labelVisuallyHidden: true,
          autoFocus: true,
          showButton: false,
          onChange: saveDynamicValue,
          onFocusChange: (isFocus) => isFocus ? !state.isOpen && state.open() : state.close()
        }
      ), /* @__PURE__ */ wp.element.createElement($86ea4cb521eb2e37$export$2317d149ed6f78c4, { onDismiss: state.close })));
    }, "BaseWrapper");

    var __defProp$18 = Object.defineProperty;
    var __name$18 = (target, value) => __defProp$18(target, "name", { value, configurable: true });
    const FieldWrapper = wp.element.forwardRef(({
      inputProps = {},
      ...props
    }, ref) => {
      const [isDynamic, setIsDynamic] = wp.element.useState(
        props.dynamic ? props.dynamic.hasValues() : false
      );
      const getLabel = /* @__PURE__ */ __name$18((string) => {
        const value = props.dynamic.parse(string);
        return value && value.type ? props.dynamic.getLabel(value.type) : "";
      }, "getLabel");
      return /* @__PURE__ */ wp.element.createElement(
        BaseWrapper,
        {
          className: "tf-dynamic-field-wrapper",
          config: props.dynamic ?? false,
          onValueSelection: (dynamicValue) => {
            setIsDynamic(true);
            props.onValueSelection(dynamicValue);
          },
          remove: {
            isDisabled: isDynamic === false,
            onPress: () => {
              setIsDynamic(false);
              if (props.onValueRemove)
                props.onValueRemove();
            }
          },
          buttonType: props.buttonType ?? "outside",
          readOnly: props.readOnly ?? false
        },
        isDynamic ? /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          "input",
          {
            type: "text",
            className: "tf-dynamic-value-input",
            value: getLabel(props.value),
            disabled: true
          }
        ), /* @__PURE__ */ wp.element.createElement(
          "input",
          {
            ...inputProps,
            name: props.name ?? "",
            value: props.value ?? "",
            type: "hidden",
            ref
          }
        )) : props.children
      );
    });

    /**
    The data structure for documents. @nonabstract
    */
    class Text {
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from, to, text) {
            [from, to] = clip(this, from, to);
            let parts = [];
            this.decompose(0, from, parts, 2 /* Open.To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
            this.decompose(to, this.length, parts, 1 /* Open.From */);
            return TextNode$1.from(parts, this.length - (to - from) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from, to = this.length) {
            [from, to] = clip(this, from, to);
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode$1.from(parts, to - from);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (let skip = start, pos = start;;) {
                a.next(skip);
                b.next(skip);
                skip = 0;
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                pos += a.value.length;
                if (a.done || pos >= end)
                    return true;
            }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings.
        */
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.
        
        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from, to) {
            let inner;
            if (from == null) {
                inner = this.iter();
            }
            else {
                if (to == null)
                    to = this.lines + 1;
                let start = this.line(from).from;
                inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }
            return new LineCursor(inner);
        }
        /**
        Return the document as a string, using newline characters to
        separate lines.
        */
        toString() { return this.sliceString(0); }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
        */
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /**
        @internal
        */
        constructor() { }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode$1.from(TextLeaf.split(text, []));
        }
    }
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* Open.From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            [from, to] = clip(this, from, to);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Tree.Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode$1.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            [from, to] = clip(this, from, to);
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        scanIdentical() { return 0; }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    let TextNode$1 = class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            [from, to] = clip(this, from, to);
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            [from, to] = clip(this, from, to);
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        scanIdentical(other, dir) {
            if (!(other instanceof TextNode))
                return 0;
            let length = 0;
            let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
                : [this.children.length - 1, other.children.length - 1, -1, -1];
            for (;; iA += dir, iB += dir) {
                if (iA == eA || iB == eB)
                    return length;
                let chA = this.children[iA], chB = other.children[iB];
                if (chA != chB)
                    return length + chA.scanIdentical(chB, dir);
                length += chA.length + 1;
            }
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Tree.Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Tree.Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    };
    Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
            this.done = this.lineBreak = false;
            for (;;) {
                let last = this.nodes.length - 1;
                let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (dir > 0 ? size : 0)) {
                    if (last == 0) {
                        this.done = true;
                        this.value = "";
                        return this;
                    }
                    if (dir > 0)
                        this.offsets[last - 1]++;
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                    this.offsets[last] += dir;
                    if (skip == 0) {
                        this.lineBreak = true;
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset + (dir < 0 ? -1 : 0)];
                    this.offsets[last] += dir;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[offset + (dir < 0 ? -1 : 0)];
                    if (skip > next.length) {
                        skip -= next.length;
                        this.offsets[last] += dir;
                    }
                    else {
                        if (dir < 0)
                            this.offsets[last]--;
                        this.nodes.push(next);
                        this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                    }
                }
            }
        }
        next(skip = 0) {
            if (skip < 0) {
                this.nextInner(-skip, (-this.dir));
                skip = this.value.length;
            }
            return this.nextInner(skip, this.dir);
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.done = false;
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            this.pos = start > end ? text.length : 0;
            this.from = Math.min(start, end);
            this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
                this.value = "";
                this.done = true;
                return this;
            }
            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit)
                skip = limit;
            limit -= skip;
            let { value } = this.cursor.next(skip);
            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
        }
        next(skip = 0) {
            if (skip < 0)
                skip = Math.max(skip, this.from - this.pos);
            else if (skip > 0)
                skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
    }
    class LineCursor {
        constructor(inner) {
            this.inner = inner;
            this.afterBreak = true;
            this.value = "";
            this.done = false;
        }
        next(skip = 0) {
            let { done, lineBreak, value } = this.inner.next(skip);
            if (done && this.afterBreak) {
                this.value = "";
                this.afterBreak = false;
            }
            else if (done) {
                this.done = true;
                this.value = "";
            }
            else if (lineBreak) {
                if (this.afterBreak) {
                    this.value = "";
                }
                else {
                    this.afterBreak = true;
                    this.next();
                }
            }
            else {
                this.value = value;
                this.afterBreak = false;
            }
            return this;
        }
        get lineBreak() { return false; }
    }
    if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
            LineCursor.prototype[Symbol.iterator] = function () { return this; };
    }
    /**
    This type describes a line in the document. It is created
    on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
    */
    class Line {
        /**
        @internal
        */
        constructor(
        /**
        The position of the start of the line.
        */
        from, 
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to, 
        /**
        This line's line number (1-based).
        */
        number, 
        /**
        The line's content.
        */
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() { return this.to - this.from; }
    }
    function clip(text, from, to) {
        from = Math.max(0, Math.min(text.length, from));
        return [from, Math.max(from, Math.min(text.length, to))];
    }

    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    // Convert offsets into absolute values
    for (let i = 1; i < extend.length; i++)
        extend[i] += extend[i - 1];
    function isExtendingChar(code) {
        for (let i = 1; i < extend.length; i += 2)
            if (extend[i] > code)
                return extend[i - 1] <= code;
        return false;
    }
    function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
    }
    const ZWJ = 0x200d;
    /**
    Returns a next grapheme cluster break _after_ (not equal to)
    `pos`, if `forward` is true, or before otherwise. Returns `pos`
    itself if no further cluster break is available in the string.
    Moves across surrogate pairs, extending characters (when
    `includeExtending` is true), characters joined with zero-width
    joiners, and flag emoji.
    */
    function findClusterBreak(str, pos, forward = true, includeExtending = true) {
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
    }
    function nextClusterBreak(str, pos, includeExtending) {
        if (pos == str.length)
            return pos;
        // If pos is in the middle of a surrogate pair, move to its start
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
            pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
            let next = codePointAt(str, pos);
            if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
                pos += codePointSize(next);
                prev = next;
            }
            else if (isRegionalIndicator(next)) {
                let countBefore = 0, i = pos - 2;
                while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                    countBefore++;
                    i -= 2;
                }
                if (countBefore % 2 == 0)
                    break;
                else
                    pos += 2;
            }
            else {
                break;
            }
        }
        return pos;
    }
    function prevClusterBreak(str, pos, includeExtending) {
        while (pos > 0) {
            let found = nextClusterBreak(str, pos - 2, includeExtending);
            if (found < pos)
                return found;
            pos--;
        }
        return 0;
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /**
    Find the code point at the given position in a string (like the
    [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    string method).
    */
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /**
    The amount of positions a character takes up a JavaScript string.
    */
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode = /*@__PURE__*/(function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode})(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes. `posA`
        provides the position of the range in the old document, `posB`
        the new position in the changed document.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        `fromA`/`toA` provides the extent of the change in the starting
        document, `fromB`/`toB` the extent of the replacement in the
        changed document.
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `other` happened before the ones in `this`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
        /**
        @internal
        */
        static create(sections) { return new ChangeDesc(sections); }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        constructor(sections, 
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each, with the range in the original document (`fromA`-`toA`)
        and the range that replaces it in the new document
        (`fromB`-`toB`).
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return ChangeDesc.create(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: ChangeDesc.create(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        @internal
        */
        static createSet(sections, inserted) {
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        // Produce a copy of setA that applies to the document after setB
        // has been applied (assuming both start at the same document).
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        // Iterate over both sets in parallel. inserted tracks, for changes
        // in A that have to be processed piece-by-piece, whether their
        // content has been inserted already, and refers to the section
        // index.
        for (let inserted = -1;;) {
            if (a.ins == -1 && b.ins == -1) {
                // Move across ranges skipped by both sets.
                let len = Math.min(a.len, b.len);
                addSection(sections, len, -1);
                a.forward(len);
                b.forward(len);
            }
            else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
                // If there's a change in B that comes before the next change in
                // A (ordered by start pos, then len, then before flag), skip
                // that (and process any changes in A it covers).
                let len = b.len;
                addSection(sections, b.ins, -1);
                while (len) {
                    let piece = Math.min(a.len, len);
                    if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                        addSection(sections, 0, a.ins);
                        if (insert)
                            addInsert(insert, sections, a.text);
                        inserted = a.i;
                    }
                    a.forward(piece);
                    len -= piece;
                }
                b.next();
            }
            else if (a.ins >= 0) {
                // Process the part of a change in A up to the start of the next
                // non-deletion change in B (if overlapping).
                let len = 0, left = a.len;
                while (left) {
                    if (b.ins == -1) {
                        let piece = Math.min(left, b.len);
                        len += piece;
                        left -= piece;
                        b.forward(piece);
                    }
                    else if (b.ins == 0 && b.len < left) {
                        left -= b.len;
                        b.next();
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, inserted < a.i ? a.ins : 0);
                if (insert && inserted < a.i)
                    addInsert(insert, sections, a.text);
                inserted = a.i;
                a.forward(a.len - left);
            }
            else if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }

    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    let SelectionRange$1 = class SelectionRange {
        constructor(
        /**
        The lower boundary of the range.
        */
        from, 
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
            return level == 7 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
            return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from, to;
            if (this.empty) {
                from = to = change.mapPos(this.from, assoc);
            }
            else {
                from = change.mapPos(this.from, 1);
                to = change.mapPos(this.to, -1);
            }
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other, includeAssoc = false) {
            return this.anchor == other.anchor && this.head == other.head &&
                (!includeAssoc || !this.empty || this.assoc == other.assoc);
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
        /**
        @internal
        */
        static create(from, to, flags) {
            return new SelectionRange(from, to, flags);
        }
    };
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges, 
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection. By default, ranges
        are compared only by position. When `includeAssoc` is true,
        cursor ranges must also have the same
        [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
        */
        eq(other, includeAssoc = false) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange$1.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return EditorSelection.normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return SelectionRange$1.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |
                (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn, bidiLevel) {
            let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |
                (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
            return head < anchor ? SelectionRange$1.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)
                : SelectionRange$1.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
        }
        /**
        @internal
        */
        static normalized(ranges, mainIndex = 0) {
            let main = ranges[mainIndex];
            ranges.sort((a, b) => a.from - b.from);
            mainIndex = ranges.indexOf(main);
            for (let i = 1; i < ranges.length; i++) {
                let range = ranges[i], prev = ranges[i - 1];
                if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                    let from = prev.from, to = Math.max(range.to, prev.to);
                    if (i <= mainIndex)
                        mainIndex--;
                    ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
                }
            }
            return new EditorSelection(ranges, mainIndex);
        }
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }

    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.

    Examples of uses of facets are the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
    attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
    listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).

    Note that `Facet` instances can be used anywhere where
    [`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine, 
        /**
        @internal
        */
        compareInput, 
        /**
        @internal
        */
        compare, isStatic, enables) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
            this.extensions = typeof enables == "function" ? enables(this) : enables;
        }
        /**
        Returns a facet reader for this facet, which can be used to
        [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
        */
        get reader() { return this; }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value to this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Provider.Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In cases where your value depends only on a single field, you'll
        want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return {
                create(state) {
                    state.values[idx] = getter(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update(state, tr) {
                    if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                        let newVal = getter(state);
                        if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                            state.values[idx] = newVal;
                            return 1 /* SlotStatus.Changed */;
                        }
                    }
                    return 0;
                },
                reconfigure: (state, oldState) => {
                    let newVal, oldAddr = oldState.config.address[id];
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (this.dependencies.every(dep => {
                            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                                dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                        }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                            state.values[idx] = oldVal;
                            return 0;
                        }
                    }
                    else {
                        newVal = getter(state);
                    }
                    state.values[idx] = newVal;
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function ensureAll(state, addrs) {
        let changed = false;
        for (let addr of addrs)
            if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
                changed = true;
        return changed;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        function get(state) {
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Provider.Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            return facet.combine(values);
        }
        return {
            create(state) {
                for (let addr of providerAddrs)
                    ensureAddr(state, addr);
                state.values[idx] = get(state);
                return 1 /* SlotStatus.Changed */;
            },
            update(state, tr) {
                if (!ensureAll(state, dynamic))
                    return 0;
                let value = get(state);
                if (facet.compare(value, state.values[idx]))
                    return 0;
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            },
            reconfigure(state, oldState) {
                let depChanged = ensureAll(state, providerAddrs);
                let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
                if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                let value = get(state);
                if (facet.compare(value, oldValue)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            }
        };
    }
    const initField = /*@__PURE__*/Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF, 
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return {
                create: (state) => {
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update: (state, tr) => {
                    let oldVal = state.values[idx];
                    let value = this.updateF(oldVal, tr);
                    if (this.compareF(oldVal, value))
                        return 0;
                    state.values[idx] = value;
                    return 1 /* SlotStatus.Changed */;
                },
                reconfigure: (state, oldState) => {
                    if (oldState.config.address[this.id] != null) {
                        state.values[idx] = oldState.field(this);
                        return 0;
                    }
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    function prec(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /*@__PURE__*/prec(Prec_.highest),
        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /*@__PURE__*/prec(Prec_.high),
        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        default: /*@__PURE__*/prec(Prec_.default),
        /**
        A lower-than-default precedence.
        */
        low: /*@__PURE__*/prec(Prec_.low),
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /*@__PURE__*/prec(Prec_.lowest)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    let Configuration$1 = class Configuration {
        constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.facets = facets;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                let oldProviders = oldFacets && oldFacets[id] || [];
                if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    if (sameArray(oldProviders, providers)) {
                        staticValues.push(oldState.facet(facet));
                    }
                    else {
                        let value = facet.combine(providers.map(p => p.value));
                        staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                    }
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Provider.Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            let dynamic = dynamicSlots.map(f => f(address));
            return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
        }
    };
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known <= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, Prec_.default);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* SlotStatus.Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* SlotStatus.Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* SlotStatus.Computed */)
            return status;
        state.status[idx] = 4 /* SlotStatus.Computing */;
        let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
        return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }

    const languageData = /*@__PURE__*/Facet.define();
    const allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = /*@__PURE__*/Facet.define();
    const transactionFilter = /*@__PURE__*/Facet.define();
    const transactionExtender = /*@__PURE__*/Facet.define();
    const readOnly = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : false
    });

    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type, 
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type, 
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds. It should be a type that
        doesn't include `undefined`, since that is used in
        [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
        removed.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
    dispatch one by calling
    [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
    */
    let Transaction$1 = class Transaction {
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState, 
        /**
        The document changes made by this transaction.
        */
        changes, 
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection, 
        /**
        The effects added to the transaction.
        */
        effects, 
        /**
        @internal
        */
        annotations, 
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        @internal
        */
        static create(startState, changes, selection, effects, annotations, scrollIntoView) {
            return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so it is recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
            let e = this.annotation(Transaction.userEvent);
            return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
    };
    /**
    Annotation used to store transaction timestamps. Automatically
    added to every transaction, holding `Date.now()`.
    */
    Transaction$1.time = /*@__PURE__*/Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. Holds a string identifying the event, using a
    dot-separated format to support attaching more specific
    information. The events used by the core libraries are:

     - `"input"` when content is entered
       - `"input.type"` for typed input
         - `"input.type.compose"` for composition
       - `"input.paste"` for pasted input
       - `"input.drop"` when adding content with drag-and-drop
       - `"input.complete"` when autocompleting
     - `"delete"` when the user deletes content
       - `"delete.selection"` when deleting the selection
       - `"delete.forward"` when deleting forward from the selection
       - `"delete.backward"` when deleting backward from the selection
       - `"delete.cut"` when cutting to the clipboard
     - `"move"` when content is moved
       - `"move.drop"` when content is moved within the editor through drag-and-drop
     - `"select"` when explicitly changing the selection
       - `"select.pointer"` when selecting with a mouse or other pointing device
     - `"undo"` and `"redo"` for history actions

    Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
    whether the annotation matches a given event.
    */
    Transaction$1.userEvent = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction$1.addToHistory = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating (when present and true) that a transaction
    represents a change made by some other actor, not the user. This
    is used, for example, to tag other people's changes in
    collaborative editing.
    */
    Transaction$1.remote = /*@__PURE__*/Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray(spec.annotations);
        if (spec.userEvent)
            annotations = annotations.concat(Transaction$1.userEvent.of(spec.userEvent));
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray(spec.effects),
            annotations,
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = Transaction$1.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
            }
            tr = Transaction$1.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction$1)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction$1)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : Transaction$1.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$1 = [];
    function asArray(value) {
        return value == null ? none$1 : Array.isArray(value) ? value : [value];
    }

    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory = /*@__PURE__*/(function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory})(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }

    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.

    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    let EditorState$1 = class EditorState {
        constructor(
        /**
        @internal
        */
        config, 
        /**
        The current document.
        */
        doc, 
        /**
        The current selection.
        */
        selection, 
        /**
        @internal
        */
        values, computeSlot, tr) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            this.values = values;
            this.status = config.statusTemplate.slice();
            this.computeSlot = computeSlot;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.computeSlot = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray(base).concat(effect.value);
                }
            }
            let startValues;
            if (!conf) {
                conf = Configuration$1.resolve(base, compartments, this);
                let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
                startValues = intermediateState.values;
            }
            else {
                startValues = tr.startState.values.slice();
            }
            let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
            new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
        */
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField && this.config.address[value.id] != null)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    if (Object.prototype.hasOwnProperty.call(json, prop)) {
                        let field = fields[prop], value = json[prop];
                        fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                    }
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration$1.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() { return this.facet(readOnly); }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        
        If additional arguments are passed, they will be inserted in
        place of markers like `$1` (for the first value) and `$2`, etc.
        A single `$` is equivalent to `$1`, and `$$` will produce a
        literal dollar sign.
        */
        phrase(phrase, ...insert) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                    phrase = map[phrase];
                    break;
                }
            if (insert.length)
                phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                    if (i == "$")
                        return "$";
                    let n = +(i || 1);
                    return !n || n > insert.length ? m : insert[n - 1];
                });
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        
        Examples of language data fields are...
        
        - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
          comment syntax.
        - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
          for providing language-specific completion sources.
        - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
          characters that should be considered part of words in this
          language.
        - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
          bracket closing behavior.
        */
        languageDataAt(name, pos, side = -1) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos, side)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
            let { text, from, length } = this.doc.lineAt(pos);
            let cat = this.charCategorizer(pos);
            let start = pos - from, end = pos - from;
            while (start > 0) {
                let prev = findClusterBreak(text, start, false);
                if (cat(text.slice(prev, start)) != CharCategory.Word)
                    break;
                start = prev;
            }
            while (end < length) {
                let next = findClusterBreak(text, end);
                if (cat(text.slice(end, next)) != CharCategory.Word)
                    break;
                end = next;
            }
            return start == end ? null : EditorSelection.range(start + from, end + from);
        }
    };
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState$1.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState$1.tabSize = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.

    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState$1.lineSeparator = lineSeparator;
    /**
    This facet controls the value of the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
    consulted by commands and extensions that implement editing
    functionality to determine whether they should apply. It
    defaults to false, but when its highest-precedence value is
    `true`, such functionality disables itself.

    Not to be confused with
    [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
    controls whether the editor's DOM is set to be editable (and
    thus focusable).
    */
    EditorState$1.readOnly = readOnly;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState$1.phrases = /*@__PURE__*/Facet.define({
        compare(a, b) {
            let kA = Object.keys(a), kB = Object.keys(b);
            return kA.length == kB.length && kA.every(k => a[k] == b[k]);
        }
    });
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState$1.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.

    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two numbers indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState$1.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single transaction spec (possibly the input
    transaction), or an array of specs (which will be combined in
    the same way as the arguments to
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.

    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState$1.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even if the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.

    Extenders run _after_ filters, when both are present.
    */
    EditorState$1.transactionExtender = transactionExtender;
    Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

    /**
    Each range is associated with a value, which must inherit from
    this class.
    */
    class RangeValue {
        /**
        Compare this value with another value. Used when comparing
        rangesets. The default implementation compares by identity.
        Unless you are only creating a fixed number of unique instances
        of your value type, it is a good idea to implement this
        properly.
        */
        eq(other) { return this == other; }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
        */
        range(from, to = from) { return Range.create(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /**
    A range associates a value with a range of positions.
    */
    class Range {
        constructor(
        /**
        The range's start position.
        */
        from, 
        /**
        Its end position.
        */
        to, 
        /**
        The value associated with this range.
        */
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
        /**
        @internal
        */
        static create(from, to, value) {
            return new Range(from, to, value);
        }
    }
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end, startAt = 0) {
            let arr = end ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                    if (val.startSide != val.endSide) {
                        newTo = changes.mapPos(curFrom, val.endSide);
                        if (newTo < newFrom)
                            continue;
                    }
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /**
    A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
    way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
    [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
    structure.
    */
    class RangeSet {
        constructor(
        /**
        @internal
        */
        chunkPos, 
        /**
        @internal
        */
        chunk, 
        /**
        @internal
        */
        nextLayer, 
        /**
        @internal
        */
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        static create(chunkPos, chunk, nextLayer, maxPoint) {
            return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
        }
        /**
        @internal
        */
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
            if (this.isEmpty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.
        
        (Note: The type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add = add.slice().sort(cmpRange);
            if (this.isEmpty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(Range.create(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
            if (changes.empty || this.isEmpty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from, to, f) {
            if (this.isEmpty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /**
        @internal
        */
        get isEmpty() { return this.nextLayer == this; }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets, 
        /**
        This indicates how the underlying data changed between these
        ranges, and is needed to synchronize the iteration.
        */
        textDiff, comparator, 
        /**
        Can be used to ignore all non-point ranges, and points below
        the given size. When -1, all ranges are compared.
        */
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b, textDiff);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from = 0, to) {
            if (to == null)
                to = 1000000000 /* C.Far */ - 1;
            let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
            let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
            if (a.length != b.length)
                return false;
            if (!a.length)
                return true;
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
            for (;;) {
                if (sideA.to != sideB.to ||
                    !sameValues(sideA.active, sideB.active) ||
                    sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                    return false;
                if (sideA.to > to)
                    return true;
                sideA.next();
                sideB.next();
            }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from, to, iterator, 
        /**
        When given and greater than -1, only points of at least this
        size are taken into account.
        */
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let openRanges = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    let active = cursor.activeForPoint(cursor.to);
                    let openCount = cursor.pointFrom < from ? active.length + 1
                        : cursor.point.startSide < 0 ? active.length
                            : Math.min(active.length, openRanges);
                    iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                    openRanges = Math.min(cursor.openEnd(curTo), active.length);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, openRanges);
                    openRanges = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
                pos = cursor.to;
                cursor.next();
            }
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
        /**
        Join an array of range sets into a single set.
        */
        static join(sets) {
            if (!sets.length)
                return RangeSet.empty;
            let result = sets[sets.length - 1];
            for (let i = sets.length - 2; i >= 0; i--) {
                for (let layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer)
                    result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
            }
            return result;
        }
    }
    /**
    The empty set of ranges.
    */
    RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
    function lazySort(ranges) {
        if (ranges.length > 1)
            for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
                let cur = ranges[i];
                if (cmpRange(prev, cur) > 0)
                    return ranges.slice().sort(cmpRange);
                prev = cur;
            }
        return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    /**
    A range set builder is a data structure that helps build up a
    [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
    an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
    */
    class RangeSetBuilder {
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /**
        Create an empty builder.
        */
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1000000000 /* C.Far */;
            this.lastTo = -1000000000 /* C.Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /**
        @internal
        */
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* C.ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /**
        @internal
        */
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() { return this.finishInner(RangeSet.empty); }
        /**
        @internal
        */
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b, textDiff) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint <= 0)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++) {
                let known = inA.get(set.chunk[i]);
                if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                    !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                    shared.add(set.chunk[i]);
            }
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1000000000 /* C.Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            if (this.chunkIndex < this.layer.chunk.length) {
                let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
                if (!forward || this.rangeIndex < rangeIndex)
                    this.setRangeIndex(rangeIndex);
            }
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* C.Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    this.setRangeIndex(this.rangeIndex + 1);
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
                this.chunkIndex++;
                if (this.skip) {
                    while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                        this.chunkIndex++;
                }
                this.rangeIndex = 0;
            }
            else {
                this.rangeIndex = index;
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
                this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1000000000 /* C.Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* C.Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1000000000 /* C.Far */;
            this.endSide = 0;
            // The amount of open active ranges at the start of the iterator.
            // Not including points.
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1000000000 /* C.Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            // Organize active marks by rank first, then by size
            while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to, wasPoint = this.point;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* C.Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                        // Ignore any non-empty points that end precisely at the end of the prev point
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        this.cursor.next();
                        this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                this.openStart = 0;
                for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                    this.openStart++;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = this.active.length - 1; i >= 0; i--) {
                if (this.activeRank[i] < this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                    active.push(this.active[i]);
            }
            return active.reverse();
        }
        openEnd(to) {
            let open = 0;
            for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                    sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* C.Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }
    /**
    Find the offset that corresponds to the given column position in a
    string, taking extending characters and tab size into account. By
    default, the string length is returned when it is too short to
    reach the column. Pass `strict` true to make it return -1 in that
    situation.
    */
    function findColumn(string, col, tabSize, strict) {
        for (let i = 0, n = 0;;) {
            if (n >= col)
                return i;
            if (i == string.length)
                break;
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return strict === true ? -1 : string.length;
    }

    const C = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};

        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }

        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }

        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }

      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }

      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36)
      }

      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      //
      // If a Content Security Policy nonce is provided, it is added to
      // the `<style>` tag generated by the library.
      static mount(root, modules, options) {
        let set = root[SET], nonce = options && options.nonce;
        if (!set) set = new StyleSet(root, nonce);
        else if (nonce) set.setNonce(nonce);
        set.mount(Array.isArray(modules) ? modules : [modules], root);
      }
    }

    let adoptedSet = new Map; //<Document, StyleSet>

    class StyleSet {
      constructor(root, nonce) {
        let doc = root.ownerDocument || root, win = doc.defaultView;
        if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
          let adopted = adoptedSet.get(doc);
          if (adopted) return root[SET] = adopted
          this.sheet = new win.CSSStyleSheet;
          adoptedSet.set(doc, this);
        } else {
          this.styleTag = doc.createElement("style");
          if (nonce) this.styleTag.setAttribute("nonce", nonce);
        }
        this.modules = [];
        root[SET] = this;
      }

      mount(modules, root) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }

        if (sheet) {
          if (root.adoptedStyleSheets.indexOf(this.sheet) < 0)
            root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
        } else {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
          let target = root.head || root;
          if (this.styleTag.parentNode != target)
            target.insertBefore(this.styleTag, target.firstChild);
        }
      }

      setNonce(nonce) {
        if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
          this.styleTag.setAttribute("nonce", nonce);
      }
    }

    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.

    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };

    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\""
    };

    var mac$4 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$2 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

    // Fill in the digit keys
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

    // The function keys
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

    // And the alphabetic keys
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }

    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

    function keyName(event) {
      // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
      // On IE, shift effect is never included in `.key`.
      var ignoreKey = mac$4 && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
          ie$2 && event.shiftKey && event.key && event.key.length == 1 ||
          event.key == "Unidentified";
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }

    function getSelection$1(root) {
        let target;
        // Browsers differ on whether shadow roots have a getSelection
        // method. If it exists, use that, otherwise, call it on the
        // document.
        if (root.nodeType == 11) { // Shadow root
            target = root.getSelection ? root : root.ownerDocument;
        }
        else {
            target = root;
        }
        return target.getSelection();
    }
    function contains(dom, node) {
        return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function deepActiveElement$1(doc) {
        let elt = doc.activeElement;
        while (elt && elt.shadowRoot)
            elt = elt.shadowRoot.activeElement;
        return elt;
    }
    function hasSelection$1(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return contains(dom, selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange$1(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition$1(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor$1(node, off, targetNode, targetOff, -1) ||
            scanFor$1(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex$1(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    function scanFor$1(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex$1(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.nodeType == 1 && node.contentEditable == "false")
                    return false;
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect$1(win) {
        let vp = win.visualViewport;
        if (vp)
            return {
                left: 0, right: vp.width,
                top: 0, bottom: vp.height
            };
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    function getScale(elt, rect) {
        let scaleX = rect.width / elt.offsetWidth;
        let scaleY = rect.height / elt.offsetHeight;
        if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
            scaleX = 1;
        if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
            scaleY = 1;
        return { scaleX, scaleY };
    }
    function scrollRectIntoView$1(dom, rect, side, x, y, xMargin, yMargin, ltr) {
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        for (let cur = dom, stop = false; cur && !stop;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == doc.body;
                let scaleX = 1, scaleY = 1;
                if (top) {
                    bounding = windowRect$1(win);
                }
                else {
                    if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
                        stop = true;
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.assignedSlot || cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    ({ scaleX, scaleY } = getScale(cur, rect));
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
                        top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
                }
                let moveX = 0, moveY = 0;
                if (y == "nearest") {
                    if (rect.top < bounding.top) {
                        moveY = -(bounding.top - rect.top + yMargin);
                        if (side > 0 && rect.bottom > bounding.bottom + moveY)
                            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                    }
                    else if (rect.bottom > bounding.bottom) {
                        moveY = rect.bottom - bounding.bottom + yMargin;
                        if (side < 0 && (rect.top - moveY) < bounding.top)
                            moveY = -(bounding.top + moveY - rect.top + yMargin);
                    }
                }
                else {
                    let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                    let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                        y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                            rect.bottom - boundingHeight + yMargin;
                    moveY = targetTop - bounding.top;
                }
                if (x == "nearest") {
                    if (rect.left < bounding.left) {
                        moveX = -(bounding.left - rect.left + xMargin);
                        if (side > 0 && rect.right > bounding.right + moveX)
                            moveX = rect.right - bounding.right + moveX + xMargin;
                    }
                    else if (rect.right > bounding.right) {
                        moveX = rect.right - bounding.right + xMargin;
                        if (side < 0 && rect.left < bounding.left + moveX)
                            moveX = -(bounding.left + moveX - rect.left + xMargin);
                    }
                }
                else {
                    let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                        (x == "start") == ltr ? rect.left - xMargin :
                            rect.right - (bounding.right - bounding.left) + xMargin;
                    moveX = targetLeft - bounding.left;
                }
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        let movedX = 0, movedY = 0;
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY / scaleY;
                            movedY = (cur.scrollTop - start) * scaleY;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX / scaleX;
                            movedX = (cur.scrollLeft - start) * scaleX;
                        }
                        rect = { left: rect.left - movedX, top: rect.top - movedY,
                            right: rect.right - movedX, bottom: rect.bottom - movedY };
                        if (movedX && Math.abs(movedX - moveX) < 1)
                            x = "nearest";
                        if (movedY && Math.abs(movedY - moveY) < 1)
                            y = "nearest";
                    }
                }
                if (top)
                    break;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    function scrollableParent(dom) {
        let doc = dom.ownerDocument;
        for (let cur = dom.parentNode; cur;) {
            if (cur == doc.body) {
                break;
            }
            else if (cur.nodeType == 1) {
                if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)
                    return cur;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) {
                cur = cur.host;
            }
            else {
                break;
            }
        }
        return null;
    }
    class DOMSelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
            let { anchorNode, focusNode } = range;
            // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
            this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
            this.anchorNode = anchorNode;
            this.anchorOffset = anchorOffset;
            this.focusNode = focusNode;
            this.focusOffset = focusOffset;
        }
    }
    let preventScrollSupported$1 = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll$1(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported$1)
            return dom.focus(preventScrollSupported$1);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported$1 == null ? {
            get preventScroll() {
                preventScrollSupported$1 = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported$1) {
            preventScrollSupported$1 = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange$1(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }
    function dispatchKey(elt, name, code, mods) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        if (mods)
            ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }
    function getRoot(node) {
        while (node) {
            if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
                return node;
            node = node.assignedSlot || node.parentNode;
        }
        return null;
    }
    function clearAttributes(node) {
        while (node.attributes.length)
            node.removeAttributeNode(node.attributes[0]);
    }
    function atElementStart(doc, selection) {
        let node = selection.focusNode, offset = selection.focusOffset;
        if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
            return false;
        // Safari can report bogus offsets (#1152)
        offset = Math.min(offset, maxOffset(node));
        for (;;) {
            if (offset) {
                if (node.nodeType != 1)
                    return false;
                let prev = node.childNodes[offset - 1];
                if (prev.contentEditable == "false")
                    offset--;
                else {
                    node = prev;
                    offset = maxOffset(node);
                }
            }
            else if (node == doc) {
                return true;
            }
            else {
                offset = domIndex$1(node);
                node = node.parentNode;
            }
        }
    }
    function isScrolledToBottom(elt) {
        return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
    }
    function textNodeBefore$2(startNode, startOffset) {
        for (let node = startNode, offset = startOffset;;) {
            if (node.nodeType == 3 && offset > 0) {
                return { node: node, offset: offset };
            }
            else if (node.nodeType == 1 && offset > 0) {
                if (node.contentEditable == "false")
                    return null;
                node = node.childNodes[offset - 1];
                offset = maxOffset(node);
            }
            else if (node.parentNode && !isBlockElement(node)) {
                offset = domIndex$1(node);
                node = node.parentNode;
            }
            else {
                return null;
            }
        }
    }
    function textNodeAfter$2(startNode, startOffset) {
        for (let node = startNode, offset = startOffset;;) {
            if (node.nodeType == 3 && offset < node.nodeValue.length) {
                return { node: node, offset: offset };
            }
            else if (node.nodeType == 1 && offset < node.childNodes.length) {
                if (node.contentEditable == "false")
                    return null;
                node = node.childNodes[offset];
                offset = 0;
            }
            else if (node.parentNode && !isBlockElement(node)) {
                offset = domIndex$1(node) + 1;
                node = node.parentNode;
            }
            else {
                return null;
            }
        }
    }

    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex$1(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex$1(dom) + 1, precise); }
    }
    const noChildren = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.flags = 2 /* ViewFlag.NodeDirty */;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        sync(view, track) {
            if (this.flags & 2 /* ViewFlag.NodeDirty */) {
                let parent = this.dom;
                let prev = null, next;
                for (let child of this.children) {
                    if (child.flags & 7 /* ViewFlag.Dirty */) {
                        if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                            let contentView = ContentView.get(next);
                            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                                child.reuseDOM(next);
                        }
                        child.sync(view, track);
                        child.flags &= ~7 /* ViewFlag.Dirty */;
                    }
                    next = prev ? prev.nextSibling : parent.firstChild;
                    if (track && !track.written && track.node == parent && next != child.dom)
                        track.written = true;
                    if (child.dom.parentNode == parent) {
                        while (next && next != child.dom)
                            next = rm$1(next);
                    }
                    else {
                        parent.insertBefore(child.dom, next);
                    }
                    prev = child.dom;
                }
                next = prev ? prev.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
                for (let child of this.children)
                    if (child.flags & 7 /* ViewFlag.Dirty */) {
                        child.sync(view, track);
                        child.flags &= ~7 /* ViewFlag.Dirty */;
                    }
            }
        }
        reuseDOM(_dom) { }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (pos > to && child.dom.parentNode == this.dom) {
                    toI = i;
                    toEnd = prevEnd;
                    break;
                }
                prevEnd = end;
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
                startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
                endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
        }
        markDirty(andParent = false) {
            this.flags |= 2 /* ViewFlag.NodeDirty */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.flags |= 2 /* ViewFlag.NodeDirty */;
                if (parent.flags & 1 /* ViewFlag.ChildDirty */)
                    return;
                parent.flags |= 1 /* ViewFlag.ChildDirty */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.flags & 7 /* ViewFlag.Dirty */)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            if (this.dom == dom)
                return;
            if (this.dom)
                this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = noChildren) {
            this.markDirty();
            for (let i = from; i < to; i++) {
                let child = this.children[i];
                if (child.parent == this && children.indexOf(child) < 0)
                    child.destroy();
            }
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
        get isEditable() { return true; }
        get isWidget() { return false; }
        get isHidden() { return false; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            return false;
        }
        become(other) { return false; }
        canReuseDOM(other) {
            return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
        }
        // When this is a zero-length view with a side, this should return a
        // number <= 0 to indicate it is before its position, or a
        // number > 0 when after its position.
        getSide() { return 0; }
        destroy() {
            for (let child of this.children)
                if (child.parent == this)
                    child.destroy();
            this.parent = null;
        }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }
    function replaceRange$1(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        let { children } = parent;
        let before = children.length ? children[fromI] : null;
        let last = insert.length ? insert[insert.length - 1] : null;
        let breakAtEnd = last ? last.breakAfter : breakAtStart;
        // Change within a single child
        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
            before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
            return;
        if (toI < children.length) {
            let after = children[toI];
            // Make sure the end of the child after the update is preserved in `after`
            if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
                // If we're splitting a child, separate part of it to avoid that
                // being mangled when updating the child before the update.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    insert[insert.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff || after.children.length && !after.children[0].length)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    insert.push(after);
                }
            }
            else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
        }
        if (before) {
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                    before.breakAfter = insert.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
        }
        // Try to merge widgets on the boundaries of the replacement
        while (fromI < toI && insert.length) {
            if (children[toI - 1].become(insert[insert.length - 1])) {
                toI--;
                insert.pop();
                openEnd = insert.length ? 0 : openStart;
            }
            else if (children[fromI].become(insert[0])) {
                fromI++;
                insert.shift();
                openStart = insert.length ? 0 : openEnd;
            }
            else {
                break;
            }
        }
        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
            children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
            fromI--;
        if (fromI < toI || insert.length)
            parent.replaceChildren(fromI, toI, insert);
    }
    function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of insert)
            dLen += view.length;
        parent.length += dLen;
        replaceRange$1(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
    }

    let nav$1 = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    let doc$2 = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    const ie_edge$1 = /*@__PURE__*//Edge\/(\d+)/.exec(nav$1.userAgent);
    const ie_upto10$1 = /*@__PURE__*//MSIE \d/.test(nav$1.userAgent);
    const ie_11up$1 = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav$1.userAgent);
    const ie$1 = !!(ie_upto10$1 || ie_11up$1 || ie_edge$1);
    const gecko$1 = !ie$1 && /*@__PURE__*//gecko\/(\d+)/i.test(nav$1.userAgent);
    const chrome$1 = !ie$1 && /*@__PURE__*//Chrome\/(\d+)/.exec(nav$1.userAgent);
    const webkit$1 = "webkitFontSmoothing" in doc$2.documentElement.style;
    const safari$1 = !ie$1 && /*@__PURE__*//Apple Computer/.test(nav$1.vendor);
    const ios$1 = safari$1 && (/*@__PURE__*//Mobile\/\w+/.test(nav$1.userAgent) || nav$1.maxTouchPoints > 2);
    var browser = {
        mac: ios$1 || /*@__PURE__*//Mac/.test(nav$1.platform),
        windows: /*@__PURE__*//Win/.test(nav$1.platform),
        linux: /*@__PURE__*//Linux|X11/.test(nav$1.platform),
        ie: ie$1,
        ie_version: ie_upto10$1 ? doc$2.documentMode || 6 : ie_11up$1 ? +ie_11up$1[1] : ie_edge$1 ? +ie_edge$1[1] : 0,
        gecko: gecko$1,
        gecko_version: gecko$1 ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav$1.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome$1,
        chrome_version: chrome$1 ? +chrome$1[1] : 0,
        ios: ios$1,
        android: /*@__PURE__*//Android\b/.test(nav$1.userAgent),
        webkit: webkit$1,
        safari: safari$1,
        webkit_version: webkit$1 ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc$2.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };

    const MaxJoinLen = 256;
    class TextView extends ContentView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(view, track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType == 3)
                this.createDOM(dom);
        }
        merge(from, to, source) {
            if ((this.flags & 8 /* ViewFlag.Composition */) ||
                source && (!(source instanceof TextView) ||
                    this.length - (to - from) + source.length > MaxJoinLen ||
                    (source.flags & 8 /* ViewFlag.Composition */)))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            this.markDirty();
            result.flags |= this.flags & 8 /* ViewFlag.Composition */;
            return result;
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends ContentView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        setAttrs(dom) {
            clearAttributes(dom);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            return dom;
        }
        canReuseDOM(other) {
            return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
        }
        reuseDOM(node) {
            if (node.nodeName == this.mark.tagName.toUpperCase()) {
                this.setDOM(node);
                this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
            }
        }
        sync(view, track) {
            if (!this.dom)
                this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
            else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
                this.setAttrs(this.dom);
            super.sync(view, track);
        }
        merge(from, to, source, _hasStart, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = [], off = 0, detachFrom = -1, i = 0;
            for (let elt of this.children) {
                let end = off + elt.length;
                if (end > from)
                    result.push(off < from ? elt.split(from - off) : elt);
                if (detachFrom < 0 && off >= from)
                    detachFrom = i;
                off = end;
                i++;
            }
            let length = this.length - from;
            this.length = from;
            if (detachFrom > -1) {
                this.children.length = detachFrom;
                this.markDirty();
            }
            return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else if (to < length) {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else if (to < length)
                to++;
        }
        let rects = textRange$1(text, from, to).getClientRects();
        if (!rects.length)
            return null;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends ContentView {
        static create(widget, length, side) {
            return new WidgetView(widget, length, side);
        }
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
            this.prevWidget = null;
        }
        split(from) {
            let result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
        }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                if (!this.widget.editable)
                    this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other instanceof WidgetView && other.side == this.side &&
                this.widget.constructor == other.widget.constructor) {
                if (!this.widget.compare(other.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let { view } = top, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return (this.length ? pos == 0 : this.side > 0)
                ? DOMPos.before(this.dom)
                : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let custom = this.widget.coordsAt(this.dom, pos, side);
            if (custom)
                return custom;
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return null;
            let fromBack = this.side ? this.side < 0 : pos > 0;
            for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return flattenRect(rect, !fromBack);
        }
        get isEditable() { return false; }
        get isWidget() { return true; }
        get isHidden() { return this.widget.isHidden; }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }
    // These are drawn around uneditable widgets to avoid a number of
    // browser bugs that show up when the cursor is directly next to
    // uneditable inline content.
    class WidgetBufferView extends ContentView {
        constructor(side) {
            super();
            this.side = side;
        }
        get length() { return 0; }
        merge() { return false; }
        become(other) {
            return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() { return new WidgetBufferView(this.side); }
        sync() {
            if (!this.dom) {
                let dom = document.createElement("img");
                dom.className = "cm-widgetBuffer";
                dom.setAttribute("aria-hidden", "true");
                this.setDOM(dom);
            }
        }
        getSide() { return this.side; }
        domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
        localPosFromDOM() { return 0; }
        domBoundsAround() { return null; }
        coordsAt(pos) {
            return this.dom.getBoundingClientRect();
        }
        get overrideDOMText() {
            return Text.empty;
        }
        get isHidden() { return true; }
    }
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    function inlineDOMAtPos(parent, pos) {
        let dom = parent.dom, { children } = parent, i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (let j = i; j > 0; j--) {
            let prev = children[j - 1];
            if (prev.dom.parentNode == dom)
                return prev.domAtPos(prev.length);
        }
        for (let j = i; j < children.length; j++) {
            let next = children[j];
            if (next.dom.parentNode == dom)
                return next.domAtPos(0);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        let before = null, beforePos = -1, after = null, afterPos = -1;
        function scan(view, pos) {
            for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
                let child = view.children[i], end = off + child.length;
                if (end >= pos) {
                    if (child.children.length) {
                        scan(child, pos - off);
                    }
                    else if ((!after || after.isHidden && side > 0) &&
                        (end > pos || off == end && child.getSide() > 0)) {
                        after = child;
                        afterPos = pos - off;
                    }
                    else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
                        before = child;
                        beforePos = pos - off;
                    }
                }
                off = end;
            }
        }
        scan(view, pos);
        let target = (side < 0 ? before : after) || before || after;
        if (target)
            return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
        return fallbackRect(view);
    }
    function fallbackRect(view) {
        let last = view.dom.lastChild;
        if (!last)
            return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
    }

    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    const noAttrs = /*@__PURE__*/Object.create(null);
    function attrsEq(a, b, ignore) {
        if (a == b)
            return true;
        if (!a)
            a = noAttrs;
        if (!b)
            b = noAttrs;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
            keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
            return false;
        for (let key of keysA) {
            if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        let changed = false;
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs)) {
                    changed = true;
                    if (name == "style")
                        dom.style.cssText = "";
                    else
                        dom.removeAttribute(name);
                }
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name])) {
                    changed = true;
                    if (name == "style")
                        dom.style.cssText = attrs[name];
                    else
                        dom.setAttribute(name, attrs[name]);
                }
        return changed;
    }
    function getAttrs(dom) {
        let attrs = Object.create(null);
        for (let i = 0; i < dom.attributes.length; i++) {
            let attr = dom.attributes[i];
            attrs[attr.name] = attr.value;
        }
        return attrs;
    }

    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (hasStart)
                this.setDeco(source ? source.attrs : null);
            mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].split(off), 0);
                this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0)
                this.children[--i].destroy();
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            this.markDirty();
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes, cls = deco.spec.class;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
            if (cls)
                this.attrs = combineAttrs({ class: cls }, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        reuseDOM(node) {
            if (node.nodeName == "DIV") {
                this.setDOM(node);
                this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
            }
        }
        sync(view, track) {
            var _a;
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
                clearAttributes(this.dom);
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(view, track);
            let last = this.dom.lastChild;
            while (last && ContentView.get(last) instanceof MarkView)
                last = last.lastChild;
            if (!last || !this.length ||
                last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                    (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0, textHeight;
            for (let child of this.children) {
                if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
                textHeight = rects[0].height;
            }
            return !totalWidth ? null : {
                lineHeight: this.dom.getBoundingClientRect().height,
                charWidth: totalWidth / this.length,
                textHeight
            };
        }
        coordsAt(pos, side) {
            let rect = coordsInChildren(this, pos, side);
            // Correct rectangle height for empty lines when the returned
            // height is larger than the text height.
            if (!this.children.length && rect && this.parent) {
                let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
                if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                    let dist = (height - heightOracle.textHeight) / 2;
                    return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
                }
            }
            return rect;
        }
        become(_other) { return false; }
        covers() { return true; }
        static find(docView, pos) {
            for (let i = 0, off = 0; i < docView.children.length; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (end > pos)
                        break;
                }
                off = end + block.breakAfter;
            }
            return null;
        }
    }
    class BlockWidgetView extends ContentView {
        constructor(widget, length, deco) {
            super();
            this.widget = widget;
            this.length = length;
            this.deco = deco;
            this.breakAfter = 0;
            this.prevWidget = null;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            let end = new BlockWidgetView(this.widget, len, this.deco);
            end.breakAfter = this.breakAfter;
            return end;
        }
        get children() { return noChildren; }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                if (!this.widget.editable)
                    this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        become(other) {
            if (other instanceof BlockWidgetView &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.compare(this.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                this.deco = other.deco;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get isEditable() { return false; }
        get isWidget() { return true; }
        coordsAt(pos, side) {
            return this.widget.coordsAt(this.dom, pos, side);
        }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
        covers(side) {
            let { startSide, endSide } = this.deco;
            return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
        }
    }

    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even if the decorations
    that define them are recreated.
    */
    let WidgetType$1 = class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(dom, view) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        For inline widgets that are displayed inline (as opposed to
        `inline-block`) and introduce line breaks (through `<br>` tags
        or textual newlines), this must indicate the amount of line
        breaks they introduce. Defaults to 0.
        */
        get lineBreaks() { return 0; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(event) { return true; }
        /**
        Override the way screen coordinates for positions at/in the
        widget are found. `pos` will be the offset into the widget, and
        `side` the side of the position that is being queried—less than
        zero for before, greater than zero for after, and zero for
        directly at that position.
        */
        coordsAt(dom, pos, side) { return null; }
        /**
        @internal
        */
        get isHidden() { return false; }
        /**
        @internal
        */
        get editable() { return false; }
        /**
        This is called when the an instance of the widget is removed
        from the editor view.
        */
        destroy(dom) { }
    };
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType = /*@__PURE__*/(function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType})(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
    @nonabstract
    */
    let Decoration$1 = class Decoration extends RangeValue {
        constructor(
        /**
        @internal
        */
        startSide, 
        /**
        @internal
        */
        endSide, 
        /**
        @internal
        */
        widget, 
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
        the higher-precedence decorations creating the inner DOM nodes.
        Such elements are split on line boundaries and on the boundaries
        of lower-precedence decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which displays a DOM element at the
        given position.
        */
        static widget(spec) {
            let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;
            side += (block && !spec.inlineOrder)
                ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */)
                : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
            return new PointDecoration(spec, side, side, block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block, startSide, endSide;
            if (spec.isBlockGap) {
                startSide = -500000000 /* Side.GapStart */;
                endSide = 400000000 /* Side.GapEnd */;
            }
            else {
                let { start, end } = getInclusive(spec, block);
                startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
                endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
            }
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    };
    /**
    The empty set of decorations.
    */
    Decoration$1.none = RangeSet.empty;
    class MarkDecoration extends Decoration$1 {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            var _a, _b;
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
                    attrsEq(this.attrs, other.attrs, "class");
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration$1 {
        constructor(spec) {
            super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration &&
                this.spec.class == other.spec.class &&
                attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration$1 {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide != this.endSide ? BlockType.WidgetRange
                : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() {
            return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
        }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec, block = false) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange$1(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin >= from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }

    class ContentBuilder {
        constructor(doc, pos, end, disallowBlockEffectsFor) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.disallowBlockEffectsFor = disallowBlockEffectsFor;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.pendingBuffer = 0 /* Buf.No */;
            this.bufferMarks = [];
            // Set to false directly after a widget that covers the position after it
            this.atCursorPos = true;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
        }
        getLine() {
            if (!this.curLine) {
                this.content.push(this.curLine = new LineView);
                this.atCursorPos = true;
            }
            return this.curLine;
        }
        flushBuffer(active = this.bufferMarks) {
            if (this.pendingBuffer) {
                this.curLine.append(wrapMarks$1(new WidgetBufferView(-1), active), active.length);
                this.pendingBuffer = 0 /* Buf.No */;
            }
        }
        addBlockWidget(view) {
            this.flushBuffer();
            this.curLine = null;
            this.content.push(view);
        }
        finish(openEnd) {
            if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
                this.flushBuffer();
            else
                this.pendingBuffer = 0 /* Buf.No */;
            if (!this.posCovered() &&
                !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
                this.getLine();
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.flushBuffer();
                        this.curLine = null;
                        this.atCursorPos = true;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
                this.flushBuffer(active.slice(active.length - openStart));
                this.getLine().append(wrapMarks$1(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.atCursorPos = true;
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart, index) {
            if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
                if (deco.block)
                    throw new RangeError("Block decorations may not be specified via plugins");
                if (to > this.doc.lineAt(this.pos).to)
                    throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
            }
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    if (deco.startSide > 0 && !this.posCovered())
                        this.getLine();
                    this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
                }
                else {
                    let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
                    let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                        (from < to || deco.startSide > 0);
                    let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                    let line = this.getLine();
                    if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                        this.pendingBuffer = 0 /* Buf.No */;
                    this.flushBuffer(active);
                    if (cursorBefore) {
                        line.append(wrapMarks$1(new WidgetBufferView(1), active), openStart);
                        openStart = active.length + Math.max(0, openStart - active.length);
                    }
                    line.append(wrapMarks$1(view, active), openStart);
                    this.atCursorPos = cursorAfter;
                    this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                    if (this.pendingBuffer)
                        this.bufferMarks = active.slice();
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations, dynamicDecorationMap) {
            let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish(builder.openEnd);
            return builder;
        }
    }
    function wrapMarks$1(view, active) {
        for (let mark of active)
            view = new MarkView(mark, [view], view.length);
        return view;
    }
    class NullWidget extends WidgetType$1 {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
        get isHidden() { return true; }
    }
    NullWidget.inline = /*@__PURE__*/new NullWidget("span");
    NullWidget.block = /*@__PURE__*/new NullWidget("div");

    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction = /*@__PURE__*/(function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    return Direction})(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
    // There's a lot more in
    // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
    // which are left out to keep code size down.
    for (let p of ["()", "[]", "{}"]) {
        let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
    }
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                        0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :
                            0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from, 
        /**
        The end of the span.
        */
        to, 
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        forward(forward, dir) { return forward == (this.dir == dir); }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    function isolatesEq(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++) {
            let iA = a[i], iB = b[i];
            if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
                return false;
        }
        return true;
    }
    // Reused array of character types
    const types$1 = [];
    // Fill in the character types (in `types`) from `from` to `to` and
    // apply W normalization rules.
    function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
        for (let iI = 0; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            let prevType = iI ? 256 /* T.NI */ : outerType;
            // W1. Examine each non-spacing mark (NSM) in the level run, and
            // change the type of the NSM to the type of the previous
            // character. If the NSM is at the start of the level run, it will
            // get the type of sor.
            // W2. Search backwards from each instance of a European number
            // until the first strong type (R, L, AL, or sor) is found. If an
            // AL is found, change the type of the European number to Arabic
            // number.
            // W3. Change all ALs to R.
            // (Left after this: L, R, EN, AN, ET, CS, NI)
            for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
                let type = charType(line.charCodeAt(i));
                if (type == 512 /* T.NSM */)
                    type = prev;
                else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
                    type = 16 /* T.AN */;
                types$1[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
                if (type & 7 /* T.Strong */)
                    prevStrong = type;
                prev = type;
            }
            // W5. A sequence of European terminators adjacent to European
            // numbers changes to all European numbers.
            // W6. Otherwise, separators and terminators change to Other
            // Neutral.
            // W7. Search backwards from each instance of a European number
            // until the first strong type (R, L, or sor) is found. If an L is
            // found, then change the type of the European number to L.
            // (Left after this: L, R, EN+AN, NI)
            for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
                let type = types$1[i];
                if (type == 128 /* T.CS */) {
                    if (i < to - 1 && prev == types$1[i + 1] && (prev & 24 /* T.Num */))
                        type = types$1[i] = prev;
                    else
                        types$1[i] = 256 /* T.NI */;
                }
                else if (type == 64 /* T.ET */) {
                    let end = i + 1;
                    while (end < to && types$1[end] == 64 /* T.ET */)
                        end++;
                    let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types$1[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
                    for (let j = i; j < end; j++)
                        types$1[j] = replace;
                    i = end - 1;
                }
                else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
                    types$1[i] = 1 /* T.L */;
                }
                prev = type;
                if (type & 7 /* T.Strong */)
                    prevStrong = type;
            }
        }
    }
    // Process brackets throughout a run sequence.
    function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
        let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
        for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            // N0. Process bracket pairs in an isolating run sequence
            // sequentially in the logical order of the text positions of the
            // opening paired brackets using the logic given below. Within this
            // scope, bidirectional types EN and AN are treated as R.
            for (let i = from, ch, br, type; i < to; i++) {
                // Keeps [startIndex, type, strongSeen] triples for each open
                // bracket on BracketStack.
                if (br = Brackets[ch = line.charCodeAt(i)]) {
                    if (br < 0) { // Closing bracket
                        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                            if (BracketStack[sJ + 1] == -br) {
                                let flags = BracketStack[sJ + 2];
                                let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                                    !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                        (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                                if (type)
                                    types$1[i] = types$1[BracketStack[sJ]] = type;
                                sI = sJ;
                                break;
                            }
                        }
                    }
                    else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                        break;
                    }
                    else {
                        BracketStack[sI++] = i;
                        BracketStack[sI++] = ch;
                        BracketStack[sI++] = context;
                    }
                }
                else if ((type = types$1[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
                    let embed = type == outerType;
                    context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                        let cur = BracketStack[sJ + 2];
                        if (cur & 2 /* Bracketed.EmbedInside */)
                            break;
                        if (embed) {
                            BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                        }
                        else {
                            if (cur & 4 /* Bracketed.OppositeInside */)
                                break;
                            BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                        }
                    }
                }
            }
        }
    }
    function processNeutrals(rFrom, rTo, isolates, outerType) {
        for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            // N1. A sequence of neutrals takes the direction of the
            // surrounding strong text if the text on both sides has the same
            // direction. European and Arabic numbers act as if they were R in
            // terms of their influence on neutrals. Start-of-level-run (sor)
            // and end-of-level-run (eor) are used at level run boundaries.
            // N2. Any remaining neutrals take the embedding direction.
            // (Left after this: L, R, EN+AN)
            for (let i = from; i < to;) {
                let type = types$1[i];
                if (type == 256 /* T.NI */) {
                    let end = i + 1;
                    for (;;) {
                        if (end == to) {
                            if (iI == isolates.length)
                                break;
                            end = isolates[iI++].to;
                            to = iI < isolates.length ? isolates[iI].from : rTo;
                        }
                        else if (types$1[end] == 256 /* T.NI */) {
                            end++;
                        }
                        else {
                            break;
                        }
                    }
                    let beforeL = prev == 1 /* T.L */;
                    let afterL = (end < rTo ? types$1[end] : outerType) == 1 /* T.L */;
                    let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
                    for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
                        if (j == fromJ) {
                            j = isolates[--jI].from;
                            fromJ = jI ? isolates[jI - 1].to : rFrom;
                        }
                        types$1[--j] = replace;
                    }
                    i = end;
                }
                else {
                    prev = type;
                    i++;
                }
            }
        }
    }
    // Find the contiguous ranges of character types in a given range, and
    // emit spans for them. Flip the order of the spans as appropriate
    // based on the level, and call through to compute the spans for
    // isolates at the proper point.
    function emitSpans(line, from, to, level, baseLevel, isolates, order) {
        let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
        if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
            for (let iCh = from, iI = 0; iCh < to;) {
                // Scan a section of characters in direction ourType, unless
                // there's another type of char right after iCh, in which case
                // we scan a section of other characters (which, if ourType ==
                // T.L, may contain both T.R and T.AN chars).
                let sameDir = true, isNum = false;
                if (iI == isolates.length || iCh < isolates[iI].from) {
                    let next = types$1[iCh];
                    if (next != ourType) {
                        sameDir = false;
                        isNum = next == 16 /* T.AN */;
                    }
                }
                // Holds an array of isolates to pass to a recursive call if we
                // must recurse (to distinguish T.AN inside an RTL section in
                // LTR text), null if we can emit directly
                let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
                let localLevel = sameDir ? level : level + 1;
                let iScan = iCh;
                run: for (;;) {
                    if (iI < isolates.length && iScan == isolates[iI].from) {
                        if (isNum)
                            break run;
                        let iso = isolates[iI];
                        // Scan ahead to verify that there is another char in this dir after the isolate(s)
                        if (!sameDir)
                            for (let upto = iso.to, jI = iI + 1;;) {
                                if (upto == to)
                                    break run;
                                if (jI < isolates.length && isolates[jI].from == upto)
                                    upto = isolates[jI++].to;
                                else if (types$1[upto] == ourType)
                                    break run;
                                else
                                    break;
                            }
                        iI++;
                        if (recurse) {
                            recurse.push(iso);
                        }
                        else {
                            if (iso.from > iCh)
                                order.push(new BidiSpan(iCh, iso.from, localLevel));
                            let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                            iCh = iso.to;
                        }
                        iScan = iso.to;
                    }
                    else if (iScan == to || (sameDir ? types$1[iScan] != ourType : types$1[iScan] == ourType)) {
                        break;
                    }
                    else {
                        iScan++;
                    }
                }
                if (recurse)
                    emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
                else if (iCh < iScan)
                    order.push(new BidiSpan(iCh, iScan, localLevel));
                iCh = iScan;
            }
        }
        else {
            // Iterate in reverse to flip the span order. Same code again, but
            // going from the back of the section to the front
            for (let iCh = to, iI = isolates.length; iCh > from;) {
                let sameDir = true, isNum = false;
                if (!iI || iCh > isolates[iI - 1].to) {
                    let next = types$1[iCh - 1];
                    if (next != ourType) {
                        sameDir = false;
                        isNum = next == 16 /* T.AN */;
                    }
                }
                let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
                let localLevel = sameDir ? level : level + 1;
                let iScan = iCh;
                run: for (;;) {
                    if (iI && iScan == isolates[iI - 1].to) {
                        if (isNum)
                            break run;
                        let iso = isolates[--iI];
                        // Scan ahead to verify that there is another char in this dir after the isolate(s)
                        if (!sameDir)
                            for (let upto = iso.from, jI = iI;;) {
                                if (upto == from)
                                    break run;
                                if (jI && isolates[jI - 1].to == upto)
                                    upto = isolates[--jI].from;
                                else if (types$1[upto - 1] == ourType)
                                    break run;
                                else
                                    break;
                            }
                        if (recurse) {
                            recurse.push(iso);
                        }
                        else {
                            if (iso.to < iCh)
                                order.push(new BidiSpan(iso.to, iCh, localLevel));
                            let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                            iCh = iso.from;
                        }
                        iScan = iso.from;
                    }
                    else if (iScan == from || (sameDir ? types$1[iScan - 1] != ourType : types$1[iScan - 1] == ourType)) {
                        break;
                    }
                    else {
                        iScan--;
                    }
                }
                if (recurse)
                    emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
                else if (iScan < iCh)
                    order.push(new BidiSpan(iScan, iCh, localLevel));
                iCh = iScan;
            }
        }
    }
    function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
        let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
        computeCharTypes(line, from, to, isolates, outerType);
        processBracketPairs(line, from, to, isolates, outerType);
        processNeutrals(from, to, isolates, outerType);
        emitSpans(line, from, to, level, baseLevel, isolates, order);
    }
    function computeOrder(line, direction, isolates) {
        if (!line)
            return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
        if (direction == LTR && !isolates.length && !BidiRE.test(line))
            return trivialOrder(line.length);
        if (isolates.length)
            while (line.length > types$1.length)
                types$1[types$1.length] = 256 /* T.NI */; // Make sure types array has no gaps
        let order = [], level = direction == LTR ? 0 : 1;
        computeSectionOrder(line, level, level, isolates, 0, line.length, order);
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    // This implementation moves strictly visually, without concern for a
    // traversal visiting every logical position in the string. It will
    // still do so for simple input, but situations like multiple isolates
    // with the same level next to each other, or text going against the
    // main dir at the end of the line, will make some positions
    // unreachable with this motion. Each visible cursor position will
    // correspond to the lower-level bidi span that touches it.
    //
    // The alternative would be to solve an order globally for a given
    // line, making sure that it includes every position, but that would
    // require associating non-canonical (higher bidi span level)
    // positions with a given visual position, which is likely to confuse
    // people. (And would generally be a lot more complicated.)
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from;
        let spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI], spanEnd = span.side(forward, dir);
        // End of span
        if (startIndex == spanEnd) {
            let nextI = spanI += forward ? 1 : -1;
            if (nextI < 0 || nextI >= order.length)
                return null;
            span = order[spanI = nextI];
            startIndex = span.side(!forward, dir);
            spanEnd = span.side(forward, dir);
        }
        let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
        if (nextIndex < span.from || nextIndex > span.to)
            nextIndex = spanEnd;
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
    }
    function autoDirection(text, from, to) {
        for (let i = from; i < to; i++) {
            let type = charType(text.charCodeAt(i));
            if (type == 1 /* T.L */)
                return LTR;
            if (type == 2 /* T.R */ || type == 4 /* T.AL */)
                return RTL;
        }
        return LTR;
    }

    const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
    const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
    const mouseSelectionStyle = /*@__PURE__*/Facet.define();
    const exceptionSink = /*@__PURE__*/Facet.define();
    const updateListener = /*@__PURE__*/Facet.define();
    const inputHandler = /*@__PURE__*/Facet.define();
    const focusChangeEffect = /*@__PURE__*/Facet.define();
    const perLineTextDirection = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    const nativeSelectionHidden = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    const scrollHandler = /*@__PURE__*/Facet.define();
    class ScrollTarget {
        constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, 
        // This data structure is abused to also store precise scroll
        // snapshots, instead of a `scrollIntoView` request. When this
        // flag is `true`, `range` points at a position in the reference
        // line, `yMargin` holds the difference between the top of that
        // line and the top of the editor, and `xMargin` holds the
        // editor's `scrollLeft`.
        isSnapshot = false) {
            this.range = range;
            this.y = y;
            this.x = x;
            this.yMargin = yMargin;
            this.xMargin = xMargin;
            this.isSnapshot = isSnapshot;
        }
        map(changes) {
            return changes.empty ? this :
                new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
        }
        clip(state) {
            return this.range.to <= state.doc.length ? this :
                new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
        }
    }
    const scrollIntoView = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).

    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
    let nextPluginID = 0;
    const viewPlugin = /*@__PURE__*/Facet.define();
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id, 
        /**
        @internal
        */
        create, 
        /**
        @internal
        */
        domEventHandlers, 
        /**
        @internal
        */
        domEventObservers, buildExtensions) {
            this.id = id;
            this.create = create;
            this.domEventHandlers = domEventHandlers;
            this.domEventObservers = domEventObservers;
            this.extension = buildExtensions(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
            return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {
                let ext = [viewPlugin.of(plugin)];
                if (deco)
                    ext.push(decorations.of(view => {
                        let pluginInst = view.plugin(plugin);
                        return pluginInst ? deco(pluginInst) : Decoration$1.none;
                    }));
                if (provide)
                    ext.push(provide(plugin));
                return ext;
            });
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `false`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        update(view) {
            if (!this.value) {
                if (this.spec) {
                    try {
                        this.value = this.spec.create(view);
                    }
                    catch (e) {
                        logException(view.state, e, "CodeMirror plugin crashed");
                        this.deactivate();
                    }
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (this.value.update) {
                    try {
                        this.value.update(update);
                    }
                    catch (e) {
                        logException(update.state, e, "CodeMirror plugin crashed");
                        if (this.value.destroy)
                            try {
                                this.value.destroy();
                            }
                            catch (_) { }
                        this.deactivate();
                    }
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
        deactivate() {
            this.spec = this.value = null;
        }
    }
    const editorAttributes = /*@__PURE__*/Facet.define();
    const contentAttributes = /*@__PURE__*/Facet.define();
    // Provide decorations
    const decorations = /*@__PURE__*/Facet.define();
    const outerDecorations = /*@__PURE__*/Facet.define();
    const atomicRanges = /*@__PURE__*/Facet.define();
    const bidiIsolatedRanges = /*@__PURE__*/Facet.define();
    function getIsolatedRanges(view, line) {
        let isolates = view.state.facet(bidiIsolatedRanges);
        if (!isolates.length)
            return isolates;
        let sets = isolates.map(i => i instanceof Function ? i(view) : i);
        let result = [];
        RangeSet.spans(sets, line.from, line.to, {
            point() { },
            span(fromDoc, toDoc, active, open) {
                let from = fromDoc - line.from, to = toDoc - line.from;
                let level = result;
                for (let i = active.length - 1; i >= 0; i--, open--) {
                    let direction = active[i].spec.bidiIsolate, update;
                    if (direction == null)
                        direction = autoDirection(line.text, from, to);
                    if (open > 0 && level.length &&
                        (update = level[level.length - 1]).to == from && update.direction == direction) {
                        update.to = to;
                        level = update.inner;
                    }
                    else {
                        let add = { from, to, direction, inner: [] };
                        level.push(add);
                        level = add.inner;
                    }
                }
            }
        });
        return result;
    }
    const scrollMargins = /*@__PURE__*/Facet.define();
    function getScrollMargins(view) {
        let left = 0, right = 0, top = 0, bottom = 0;
        for (let source of view.state.facet(scrollMargins)) {
            let m = source(view);
            if (m) {
                if (m.left != null)
                    left = Math.max(left, m.left);
                if (m.right != null)
                    right = Math.max(right, m.right);
                if (m.top != null)
                    top = Math.max(top, m.top);
                if (m.bottom != null)
                    bottom = Math.max(bottom, m.bottom);
            }
        }
        return { left, right, top, bottom };
    }
    const styleModule = /*@__PURE__*/Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view, 
        /**
        The new editor state.
        */
        state, 
        /**
        The transactions involved in the update. May be empty.
        */
        transactions) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
        }
        /**
        @internal
        */
        static create(view, state, transactions) {
            return new ViewUpdate(view, state, transactions);
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
        }
        /**
        Indicates whether the height of a block element in the editor
        changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* UpdateFlag.Height */) > 0;
        }
        /**
        Returns true when the document was modified or the size of the
        editor, or elements within the editor, changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return !this.changes.empty;
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }

    class DocView extends ContentView {
        get length() { return this.view.state.doc.length; }
        constructor(view) {
            super();
            this.view = view;
            this.decorations = [];
            this.dynamicDecorationMap = [];
            this.domChanged = null;
            this.hasComposition = null;
            this.markedForComposition = new Set;
            this.lastCompositionAfterCursor = false;
            // Track a minimum width for the editor. When measuring sizes in
            // measureVisibleLineHeights, this is updated to point at the width
            // of a given element and its extent in the document. When a change
            // happens in that range, these are reset. That way, once we've seen
            // a line/element of a given length, we keep the editor wide enough
            // to fit at least that element, until it is changed, at which point
            // we forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.forceSelection = false;
            // Used by the resize observer to ignore resizes that we caused
            // ourselves
            this.lastUpdate = Date.now();
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateDeco();
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
        }
        // Update the document view to a given state.
        update(update) {
            var _a;
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            let readCompositionAt = -1;
            if (this.view.inputState.composing >= 0) {
                if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)
                    readCompositionAt = this.domChanged.newSel.head;
                else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
                    readCompositionAt = update.state.selection.main.head;
            }
            let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
            this.domChanged = null;
            if (this.hasComposition) {
                this.markedForComposition.clear();
                let { from, to } = this.hasComposition;
                changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
                    .addToSet(changedRanges.slice());
            }
            this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            if ((browser.ie || browser.chrome) && !composition && update &&
                update.state.doc.lines != update.startState.doc.lines)
                this.forceSelection = true;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
                return false;
            }
            else {
                this.updateInner(changedRanges, update.startState.doc.length, composition);
                if (update.transactions.length)
                    this.lastUpdate = Date.now();
                return true;
            }
        }
        // Used by update and the constructor do perform the actual DOM
        // update
        updateInner(changes, oldLength, composition) {
            this.view.viewState.mustMeasureContent = true;
            this.updateChildren(changes, oldLength, composition);
            let { observer } = this.view;
            observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
                this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
                this.sync(this.view, track);
                this.flags &= ~7 /* ViewFlag.Dirty */;
                if (track && (track.written || observer.selectionRange.focusNode != track.node))
                    this.forceSelection = true;
                this.dom.style.height = "";
            });
            this.markedForComposition.forEach(cView => cView.flags &= ~8 /* ViewFlag.Composition */);
            let gaps = [];
            if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
                for (let child of this.children)
                    if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                        gaps.push(child.dom);
            observer.updateGaps(gaps);
        }
        updateChildren(changes, oldLength, composition) {
            let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
            let cursor = this.childCursor(oldLength);
            for (let i = ranges.length - 1;; i--) {
                let next = i >= 0 ? ranges[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
                if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
                    let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
                    let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
                    breakAtStart = before.breakAtStart;
                    openStart = before.openStart;
                    openEnd = after.openEnd;
                    let compLine = this.compositionView(composition);
                    if (after.breakAtStart) {
                        compLine.breakAfter = 1;
                    }
                    else if (after.content.length &&
                        compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
                        compLine.breakAfter = after.content[0].breakAfter;
                        after.content.shift();
                    }
                    if (before.content.length &&
                        compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
                        before.content.pop();
                    }
                    content = before.content.concat(compLine).concat(after.content);
                }
                else {
                    ({ content, breakAtStart, openStart, openEnd } =
                        ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
                }
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                replaceRange$1(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
            if (composition)
                this.fixCompositionDOM(composition);
        }
        compositionView(composition) {
            let cur = new TextView(composition.text.nodeValue);
            cur.flags |= 8 /* ViewFlag.Composition */;
            for (let { deco } of composition.marks)
                cur = new MarkView(deco, [cur], cur.length);
            let line = new LineView;
            line.append(cur, 0);
            return line;
        }
        fixCompositionDOM(composition) {
            let fix = (dom, cView) => {
                cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
                this.markedForComposition.add(cView);
                let prev = ContentView.get(dom);
                if (prev && prev != cView)
                    prev.dom = null;
                cView.setDOM(dom);
            };
            let pos = this.childPos(composition.range.fromB, 1);
            let cView = this.children[pos.i];
            fix(composition.line, cView);
            for (let i = composition.marks.length - 1; i >= -1; i--) {
                pos = cView.childPos(pos.off, 1);
                cView = cView.children[pos.i];
                fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
            }
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(mustRead = false, fromPointer = false) {
            if (mustRead || !this.view.observer.selectionRange.focusNode)
                this.view.observer.readSelectionRange();
            let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
            let selectionNotFocus = !focused &&
                hasSelection$1(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
            if (!(focused || fromPointer || selectionNotFocus))
                return;
            let force = this.forceSelection;
            this.forceSelection = false;
            let main = this.view.state.selection.main;
            let anchor = this.moveToLine(this.domAtPos(main.anchor));
            let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
            // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)
            if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = this.view.observer.selectionRange;
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode || (!isEquivalentPosition$1(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition$1(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
                this.view.observer.ignore(() => {
                    // Chrome Android will hide the virtual keyboard when tapping
                    // inside an uneditable node, and not bring it back when we
                    // move the cursor to its proper position. This tries to
                    // restore the keyboard by cycling focus.
                    if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                        inUneditable(domSel.focusNode, this.dom)) {
                        this.dom.blur();
                        this.dom.focus({ preventScroll: true });
                    }
                    let rawSel = getSelection$1(this.view.root);
                    if (!rawSel) ;
                    else if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                                let text = (nextTo == 1 /* NextTo.Before */ ? textNodeBefore$2 : textNodeAfter$2)(anchor.node, anchor.offset);
                                if (text)
                                    anchor = new DOMPos(text.node, text.offset);
                            }
                        }
                        rawSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)
                            rawSel.caretBidiLevel = main.bidiLevel;
                    }
                    else if (rawSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        rawSel.collapse(anchor.node, anchor.offset);
                        // Safari will ignore the call above when the editor is
                        // hidden, and then raise an error on the call to extend
                        // (#940).
                        try {
                            rawSel.extend(head.node, head.offset);
                        }
                        catch (_) { }
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        rawSel.removeAllRanges();
                        rawSel.addRange(range);
                    }
                    if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                        this.dom.blur();
                        if (activeElt)
                            activeElt.focus();
                    }
                });
                this.view.observer.setSelectionRange(anchor, head);
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        // If a zero-length widget is inserted next to the cursor during
        // composition, avoid moving it across it and disrupting the
        // composition.
        suppressWidgetCursorChange(sel, cursor) {
            return this.hasComposition && cursor.empty &&
                isEquivalentPosition$1(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) &&
                this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
        }
        enforceCursorAssoc() {
            if (this.hasComposition)
                return;
            let { view } = this, cursor = view.state.selection.main;
            let sel = getSelection$1(view.root);
            let { anchorNode, anchorOffset } = view.observer.selectionRange;
            if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head);
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
            // This can go wrong in corner cases like single-character lines,
            // so check and reset if necessary.
            view.observer.readSelectionRange();
            let newRange = view.observer.selectionRange;
            if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
                sel.collapse(anchorNode, anchorOffset);
        }
        // If a position is in/near a block widget, move it to a nearby text
        // line, since we don't want the cursor inside a block widget.
        moveToLine(pos) {
            // Block widgets will return positions before/after them, which
            // are thus directly in the document DOM element.
            let dom = this.dom, newPos;
            if (pos.node != dom)
                return pos;
            for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
                let view = ContentView.get(dom.childNodes[i]);
                if (view instanceof LineView)
                    newPos = view.domAtPos(0);
            }
            for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
                let view = ContentView.get(dom.childNodes[i]);
                if (view instanceof LineView)
                    newPos = view.domAtPos(view.length);
            }
            return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            let best = null, bestPos = 0;
            for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
                let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
                if (end < pos)
                    break;
                if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&
                    (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
                    best = child;
                    bestPos = start;
                }
                off = start;
            }
            return best ? best.coordsAt(pos - bestPos, side) : null;
        }
        coordsForChar(pos) {
            let { i, off } = this.childPos(pos, 1), child = this.children[i];
            if (!(child instanceof LineView))
                return null;
            while (child.children.length) {
                let { i, off: childOff } = child.childPos(off, 1);
                for (;; i++) {
                    if (i == child.children.length)
                        return null;
                    if ((child = child.children[i]).length)
                        break;
                }
                off = childOff;
            }
            if (!(child instanceof TextView))
                return null;
            let end = findClusterBreak(child.text, off);
            if (end == off)
                return null;
            let rects = textRange$1(child.dom, off, end).getClientRects();
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
                    return rect;
            }
            return null;
        }
        measureVisibleLineHeights(viewport) {
            let result = [], { from, to } = viewport;
            let contentWidth = this.view.contentDOM.clientWidth;
            let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            let widest = -1, ltr = this.view.textDirection == Direction.LTR;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    let childRect = child.dom.getBoundingClientRect();
                    result.push(childRect.height);
                    if (isWider) {
                        let last = child.dom.lastChild;
                        let rects = last ? clientRectsFor(last) : [];
                        if (rects.length) {
                            let rect = rects[rects.length - 1];
                            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                            if (width > widest) {
                                widest = width;
                                this.minWidth = contentWidth;
                                this.minWidthFrom = pos;
                                this.minWidthTo = end;
                            }
                        }
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        textDirectionAt(pos) {
            let { i } = this.childPos(pos, 1);
            return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
            dummy.className = "cm-line";
            dummy.style.width = "99999px";
            dummy.style.position = "absolute";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                textHeight = rect ? rect.height : lineHeight;
                dummy.remove();
            });
            return { lineHeight, charWidth, textHeight };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
                    deco.push(Decoration$1.replace({
                        widget: new BlockGapWidget(height),
                        block: true,
                        inclusive: true,
                        isBlockGap: true,
                    }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration$1.set(deco);
        }
        updateDeco() {
            let i = 0;
            let allDeco = this.view.state.facet(decorations).map(d => {
                let dynamic = this.dynamicDecorationMap[i++] = typeof d == "function";
                return dynamic ? d(this.view) : d;
            });
            let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i) => {
                let dynamic = typeof d == "function";
                if (dynamic)
                    dynamicOuter = true;
                return dynamic ? d(this.view) : d;
            });
            if (outerDeco.length) {
                this.dynamicDecorationMap[i++] = dynamicOuter;
                allDeco.push(RangeSet.join(outerDeco));
            }
            this.decorations = [
                ...allDeco,
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco
            ];
            while (i < this.decorations.length)
                this.dynamicDecorationMap[i++] = false;
            return this.decorations;
        }
        scrollIntoView(target) {
            if (target.isSnapshot) {
                let ref = this.view.viewState.lineBlockAt(target.range.head);
                this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
                this.view.scrollDOM.scrollLeft = target.xMargin;
                return;
            }
            for (let handler of this.view.state.facet(scrollHandler)) {
                try {
                    if (handler(this.view, target.range, target))
                        return true;
                }
                catch (e) {
                    logException(this.view.state, e, "scroll handler");
                }
            }
            let { range } = target;
            let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
            if (!rect)
                return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
                rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                    right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
            let margins = getScrollMargins(this.view);
            let targetRect = {
                left: rect.left - margins.left, top: rect.top - margins.top,
                right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
            };
            let { offsetWidth, offsetHeight } = this.view.scrollDOM;
            scrollRectIntoView$1(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    class BlockGapWidget extends WidgetType$1 {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            elt.className = "cm-gap";
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get editable() { return true; }
        get estimatedHeight() { return this.height; }
        ignoreEvent() { return false; }
    }
    function findCompositionNode$1(view, headPos) {
        let sel = view.observer.selectionRange;
        if (!sel.focusNode)
            return null;
        let textBefore = textNodeBefore$2(sel.focusNode, sel.focusOffset);
        let textAfter = textNodeAfter$2(sel.focusNode, sel.focusOffset);
        let textNode = textBefore || textAfter;
        if (textAfter && textBefore && textAfter.node != textBefore.node) {
            let descAfter = ContentView.get(textAfter.node);
            if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
                textNode = textAfter;
            }
            else if (view.docView.lastCompositionAfterCursor) {
                let descBefore = ContentView.get(textBefore.node);
                if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
                    textNode = textAfter;
            }
        }
        view.docView.lastCompositionAfterCursor = textNode != textBefore;
        if (!textNode)
            return null;
        let from = headPos - textNode.offset;
        return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
    }
    function findCompositionRange(view, changes, headPos) {
        let found = findCompositionNode$1(view, headPos);
        if (!found)
            return null;
        let { node: textNode, from, to } = found, text = textNode.nodeValue;
        // Don't try to preserve multi-line compositions
        if (/[\n\r]/.test(text))
            return null;
        if (view.state.doc.sliceString(found.from, found.to) != text)
            return null;
        let inv = changes.invertedDesc;
        let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
        let marks = [];
        for (let parent = textNode.parentNode;; parent = parent.parentNode) {
            let parentView = ContentView.get(parent);
            if (parentView instanceof MarkView)
                marks.push({ node: parent, deco: parentView.mark });
            else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
                return { range, text: textNode, marks, line: parent };
            else if (parent != view.contentDOM)
                marks.push({ node: parent, deco: new MarkDecoration({
                        inclusive: true,
                        attributes: getAttrs(parent),
                        tagName: parent.tagName.toLowerCase()
                    }) });
            else
                return null;
        }
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
    }
    let DecorationComparator$1 = class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange$1(from, to, this.changes); }
        comparePoint(from, to) { addRange$1(from, to, this.changes); }
    };
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    function inUneditable(node, inside) {
        for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
            if (cur.nodeType == 1 && cur.contentEditable == 'false') {
                return true;
            }
        }
        return false;
    }
    function touchesComposition(changes, composition) {
        let touched = false;
        if (composition)
            changes.iterChangedRanges((from, to) => {
                if (from < composition.to && to > composition.from)
                    touched = true;
            });
        return touched;
    }

    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY, closestOverlap = false;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                    let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
                    closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (closestOverlap && closest.contentEditable != "false")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange$1(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange$1(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords$1(view, coords, precise, bias = -1) {
        var _a, _b;
        let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
        let block, { docHeight } = view.viewState;
        let { x, y } = coords, yOffset = y - docTop;
        if (yOffset < 0)
            return 0;
        if (yOffset > docHeight)
            return view.state.doc.length;
        // Scan for a text block near the queried y position
        for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
            block = view.elementAtHeight(yOffset);
            if (block.type == BlockType.Text)
                break;
            for (;;) {
                // Move the y position out of this block
                yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
                if (yOffset >= 0 && yOffset <= docHeight)
                    break;
                // If the document consists entirely of replaced widgets, we
                // won't find a text block, so return 0
                if (bounced)
                    return precise ? null : 0;
                bounced = true;
                bias = -bias;
            }
        }
        y = docTop + yOffset;
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length :
                precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
        let doc = view.dom.ownerDocument;
        let root = view.root.elementFromPoint ? view.root : doc;
        let element = root.elementFromPoint(x, y);
        if (element && !view.contentDOM.contains(element))
            element = null;
        // If the element is unexpected, clip x at the sides of the content area and try again
        if (!element) {
            x = Math.max(content.left + 1, Math.min(content.right - 1, x));
            element = root.elementFromPoint(x, y);
            if (element && !view.contentDOM.contains(element))
                element = null;
        }
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
            if (doc.caretPositionFromPoint) {
                let pos = doc.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (!view.contentDOM.contains(node) ||
                        browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                        browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                        node = undefined;
                }
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            if (!line)
                return yOffset > block.top + block.height / 2 ? block.to : block.from;
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        let nearest = view.docView.nearest(node);
        if (!nearest)
            return null;
        if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
            let rect = nearest.dom.getBoundingClientRect();
            return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
                ? nearest.posAtStart : nearest.posAtEnd;
        }
        else {
            return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
        }
    }
    function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
            let textHeight = view.viewState.heightOracle.textHeight;
            let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
            into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + findColumn(content, into, view.state.tabSize);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousSafariCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (let next = node.nextSibling; next; next = next.nextSibling)
            if (next.nodeType != 1 || next.nodeName != "BR")
                return false;
        return textRange$1(node, len - 1, len).getBoundingClientRect().left > x;
    }
    // Chrome will move positions between lines to the start of the next line
    function isSuspiciousChromeCaretResult(node, offset, x) {
        if (offset != 0)
            return false;
        for (let cur = node;;) {
            let parent = cur.parentNode;
            if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
                return false;
            if (parent.classList.contains("cm-line"))
                break;
            cur = parent;
        }
        let rect = node.nodeType == 1 ? node.getBoundingClientRect()
            : textRange$1(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
        return x - rect.left > 5;
    }
    function blockAt(view, pos) {
        let line = view.lineBlockAt(pos);
        if (Array.isArray(line.type))
            for (let l of line.type) {
                if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                    return l;
            }
        return line;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = blockAt(view, start.head);
        let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let direction = view.textDirectionAt(line.from);
            let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        let direction = view.textDirectionAt(line.from);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = view.visualLineSide(line, !forward);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos, start.assoc);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
        if (startCoords) {
            if (goal == null)
                goal = startCoords.left - rect.left;
            startY = dir < 0 ? startCoords.top : startCoords.bottom;
        }
        else {
            let line = view.viewState.lineBlockAt(startPos);
            if (goal == null)
                goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
            startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
        for (let extra = 0;; extra += 10) {
            let curY = startY + (dist + extra) * dir;
            let pos = posAtCoords$1(view, { x: resolvedGoal, y: curY }, false, dir);
            if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
                let charRect = view.docView.coordsForChar(pos);
                let assoc = !charRect || curY < charRect.top ? -1 : 1;
                return EditorSelection.cursor(pos, assoc, undefined, goal);
            }
        }
    }
    function skipAtomicRanges(atoms, pos, bias) {
        for (;;) {
            let moved = 0;
            for (let set of atoms) {
                set.between(pos - 1, pos + 1, (from, to, value) => {
                    if (pos > from && pos < to) {
                        let side = moved || bias || (pos - from < to - pos ? -1 : 1);
                        pos = side < 0 ? from : to;
                        moved = side;
                    }
                });
            }
            if (!moved)
                return pos;
        }
    }
    function skipAtoms(view, oldPos, pos) {
        let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
        return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
    }

    // This will also be where dragging info and such goes
    let InputState$1 = class InputState {
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        constructor(view) {
            this.view = view;
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.lastTouchTime = 0;
            this.lastFocusTime = 0;
            this.lastScrollTop = 0;
            this.lastScrollLeft = 0;
            // On iOS, some keys need to have their default behavior happen
            // (after which we retroactively handle them and reset the DOM) to
            // avoid messing up the virtual keyboard state.
            this.pendingIOSKey = undefined;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastEscPress = 0;
            this.lastContextMenu = 0;
            this.scrollHandlers = [];
            this.handlers = Object.create(null);
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            // Tracks whether the next change should be marked as starting the
            // composition (null means no composition, true means next is the
            // first, false means first has already been marked for this
            // composition)
            this.compositionFirstChange = null;
            // End time of the previous composition
            this.compositionEndedAt = 0;
            // Used in a kludge to detect when an Enter keypress should be
            // considered part of the composition on Safari, which fires events
            // in the wrong order
            this.compositionPendingKey = false;
            // Used to categorize changes as part of a composition, even when
            // the mutation events fire shortly after the compositionend event
            this.compositionPendingChange = false;
            this.mouseSelection = null;
            // When a drag from the editor is active, this points at the range
            // being dragged.
            this.draggedContent = null;
            this.handleEvent = this.handleEvent.bind(this);
            this.notifiedFocused = view.hasFocus;
            // On Safari adding an input event handler somehow prevents an
            // issue where the composition vanishes when you press enter.
            if (browser.safari)
                view.contentDOM.addEventListener("input", () => null);
            if (browser.gecko)
                firefoxCopyCutHack(view.contentDOM.ownerDocument);
        }
        handleEvent(event) {
            if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
                return;
            if (event.type == "keydown" && this.keydown(event))
                return;
            this.runHandlers(event.type, event);
        }
        runHandlers(type, event) {
            let handlers = this.handlers[type];
            if (handlers) {
                for (let observer of handlers.observers)
                    observer(this.view, event);
                for (let handler of handlers.handlers) {
                    if (event.defaultPrevented)
                        break;
                    if (handler(this.view, event)) {
                        event.preventDefault();
                        break;
                    }
                }
            }
        }
        ensureHandlers(plugins) {
            let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
            for (let type in handlers)
                if (type != "scroll") {
                    let passive = !handlers[type].handlers.length;
                    let exists = prev[type];
                    if (exists && passive != !exists.handlers.length) {
                        dom.removeEventListener(type, this.handleEvent);
                        exists = null;
                    }
                    if (!exists)
                        dom.addEventListener(type, this.handleEvent, { passive });
                }
            for (let type in prev)
                if (type != "scroll" && !handlers[type])
                    dom.removeEventListener(type, this.handleEvent);
            this.handlers = handlers;
        }
        keydown(event) {
            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
                return true;
            if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
                this.view.inputState.lastEscPress = 0;
            // Chrome for Android usually doesn't fire proper key events, but
            // occasionally does, usually surrounded by a bunch of complicated
            // composition changes. When an enter or backspace key event is
            // seen, hold off on handling DOM events for a bit, and then
            // dispatch it.
            if (browser.android && browser.chrome && !event.synthetic &&
                (event.keyCode == 13 || event.keyCode == 8)) {
                this.view.observer.delayAndroidKey(event.key, event.keyCode);
                return true;
            }
            // Preventing the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.
            let pending;
            if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
                ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                    EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
                this.pendingIOSKey = pending || event;
                setTimeout(() => this.flushIOSKey(), 250);
                return true;
            }
            if (event.keyCode != 229)
                this.view.observer.forceFlush();
            return false;
        }
        flushIOSKey(change) {
            let key = this.pendingIOSKey;
            if (!key)
                return false;
            // This looks like an autocorrection before Enter
            if (key.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
                return false;
            this.pendingIOSKey = undefined;
            return dispatchKey(this.view.contentDOM, key.key, key.keyCode, key instanceof KeyboardEvent ? key : undefined);
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
                this.compositionPendingKey = false;
                return true;
            }
            return false;
        }
        startMouseSelection(mouseSelection) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = mouseSelection;
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            if (this.draggedContent && update.docChanged)
                this.draggedContent = this.draggedContent.map(update.changes);
            if (update.transactions.length)
                this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    };
    function bindHandler(plugin, handler) {
        return (view, event) => {
            try {
                return handler.call(plugin, event, view);
            }
            catch (e) {
                logException(view.state, e);
            }
        };
    }
    function computeHandlers(plugins) {
        let result = Object.create(null);
        function record(type) {
            return result[type] || (result[type] = { observers: [], handlers: [] });
        }
        for (let plugin of plugins) {
            let spec = plugin.spec;
            if (spec && spec.domEventHandlers)
                for (let type in spec.domEventHandlers) {
                    let f = spec.domEventHandlers[type];
                    if (f)
                        record(type).handlers.push(bindHandler(plugin.value, f));
                }
            if (spec && spec.domEventObservers)
                for (let type in spec.domEventObservers) {
                    let f = spec.domEventObservers[type];
                    if (f)
                        record(type).observers.push(bindHandler(plugin.value, f));
                }
        }
        for (let type in handlers$1)
            record(type).handlers.push(handlers$1[type]);
        for (let type in observers)
            record(type).observers.push(observers[type]);
        return result;
    }
    const PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    const EmacsyPendingKeys = "dthko";
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    const dragScrollMargin = 6;
    function dragScrollSpeed(dist) {
        return Math.max(0, dist) * 0.7 + 8;
    }
    function dist(a, b) {
        return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
    }
    class MouseSelection {
        constructor(view, startEvent, style, mustSelect) {
            this.view = view;
            this.startEvent = startEvent;
            this.style = style;
            this.mustSelect = mustSelect;
            this.scrollSpeed = { x: 0, y: 0 };
            this.scrolling = -1;
            this.lastEvent = startEvent;
            this.scrollParent = scrollableParent(view.contentDOM);
            this.atoms = view.state.facet(atomicRanges).map(f => f(view));
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState$1.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
        }
        start(event) {
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false)
                this.select(event);
        }
        move(event) {
            var _a;
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
                return;
            this.select(this.lastEvent = event);
            let sx = 0, sy = 0;
            let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())
                || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
            let margins = getScrollMargins(this.view);
            if (event.clientX - margins.left <= rect.left + dragScrollMargin)
                sx = -dragScrollSpeed(rect.left - event.clientX);
            else if (event.clientX + margins.right >= rect.right - dragScrollMargin)
                sx = dragScrollSpeed(event.clientX - rect.right);
            if (event.clientY - margins.top <= rect.top + dragScrollMargin)
                sy = -dragScrollSpeed(rect.top - event.clientY);
            else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)
                sy = dragScrollSpeed(event.clientY - rect.bottom);
            this.setScrollSpeed(sx, sy);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.lastEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            this.setScrollSpeed(0, 0);
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
        }
        setScrollSpeed(sx, sy) {
            this.scrollSpeed = { x: sx, y: sy };
            if (sx || sy) {
                if (this.scrolling < 0)
                    this.scrolling = setInterval(() => this.scroll(), 50);
            }
            else if (this.scrolling > -1) {
                clearInterval(this.scrolling);
                this.scrolling = -1;
            }
        }
        scroll() {
            if (this.scrollParent) {
                this.scrollParent.scrollLeft += this.scrollSpeed.x;
                this.scrollParent.scrollTop += this.scrollSpeed.y;
            }
            else {
                this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
            }
            if (this.dragging === false)
                this.select(this.lastEvent);
        }
        skipAtoms(sel) {
            let ranges = null;
            for (let i = 0; i < sel.ranges.length; i++) {
                let range = sel.ranges[i], updated = null;
                if (range.empty) {
                    let pos = skipAtomicRanges(this.atoms, range.from, 0);
                    if (pos != range.from)
                        updated = EditorSelection.cursor(pos, -1);
                }
                else {
                    let from = skipAtomicRanges(this.atoms, range.from, -1);
                    let to = skipAtomicRanges(this.atoms, range.to, 1);
                    if (from != range.from || to != range.to)
                        updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
                }
                if (updated) {
                    if (!ranges)
                        ranges = sel.ranges.slice();
                    ranges[i] = updated;
                }
            }
            return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
        }
        select(event) {
            let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
            if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
                this.view.dispatch({
                    selection,
                    userEvent: "select.pointer"
                });
            this.mustSelect = false;
        }
        update(update) {
            if (this.style.update(update))
                setTimeout(() => this.select(this.lastEvent), 20);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection$1(view.root);
        if (!sel || sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers$1 = /*@__PURE__*/Object.create(null);
    const observers = /*@__PURE__*/Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI$1 = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste$1(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste$1(view, target.value);
        }, 50);
    }
    function doPaste$1(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            userEvent: "input.paste",
            scrollIntoView: true
        });
    }
    observers.scroll = view => {
        view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
        view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
    };
    handlers$1.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
        if (event.keyCode == 27)
            view.inputState.lastEscPress = Date.now();
        return false;
    };
    observers.touchstart = (view, e) => {
        view.inputState.lastTouchTime = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
    };
    observers.touchmove = view => {
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers$1.mousedown = (view, event) => {
        view.observer.flush();
        if (view.inputState.lastTouchTime > Date.now() - 2000)
            return false; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            let mustFocus = !view.hasFocus;
            view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
            if (mustFocus)
                view.observer.ignore(() => focusPreventScroll$1(view.contentDOM));
            let mouseSel = view.inputState.mouseSelection;
            if (mouseSel) {
                mouseSel.start(event);
                return mouseSel.dragging === false;
            }
        }
        return false;
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY(y, before) ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        return {
            update(update) {
                if (update.docChanged) {
                    start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, extend, multiple) {
                let cur = queryPos(view, event), removed;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                    return removed;
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    function removeRangeAround(sel, pos) {
        for (let i = 0; i < sel.ranges.length; i++) {
            let { from, to } = sel.ranges[i];
            if (from <= pos && to >= pos)
                return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
        }
        return null;
    }
    handlers$1.dragstart = (view, event) => {
        let { selection: { main: range } } = view.state;
        if (event.target.draggable) {
            let cView = view.docView.nearest(event.target);
            if (cView && cView.isWidget) {
                let from = cView.posAtStart, to = from + cView.length;
                if (from >= range.to || to <= range.from)
                    range = EditorSelection.range(from, to);
            }
        }
        let { inputState } = view;
        if (inputState.mouseSelection)
            inputState.mouseSelection.dragging = true;
        inputState.draggedContent = range;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(range.from, range.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
        return false;
    };
    handlers$1.dragend = view => {
        view.inputState.draggedContent = null;
        return false;
    };
    function dropText(view, event, text, direct) {
        if (!text)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        let { draggedContent } = view.inputState;
        let del = direct && draggedContent && dragMovesSelection(view, event)
            ? { from: draggedContent.from, to: draggedContent.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            userEvent: del ? "move.drop" : "input.drop"
        });
        view.inputState.draggedContent = null;
    }
    handlers$1.drop = (view, event) => {
        if (!event.dataTransfer)
            return false;
        if (view.state.readOnly)
            return true;
        let files = event.dataTransfer.files;
        if (files && files.length) { // For a file drop, read the file's text.
            let text = Array(files.length), read = 0;
            let finishFile = () => {
                if (++read == files.length)
                    dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
            };
            for (let i = 0; i < files.length; i++) {
                let reader = new FileReader;
                reader.onerror = finishFile;
                reader.onload = () => {
                    if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                        text[i] = reader.result;
                    finishFile();
                };
                reader.readAsText(files[i]);
            }
            return true;
        }
        else {
            let text = event.dataTransfer.getData("Text");
            if (text) {
                dropText(view, event, text, true);
                return true;
            }
        }
        return false;
    };
    handlers$1.paste = (view, event) => {
        if (view.state.readOnly)
            return true;
        view.observer.flush();
        let data = brokenClipboardAPI$1 ? null : event.clipboardData;
        if (data) {
            doPaste$1(view, data.getData("text/plain") || data.getData("text/uri-list"));
            return true;
        }
        else {
            capturePaste$1(view);
            return false;
        }
    };
    function captureCopy$1(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers$1.copy = handlers$1.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text && !linewise)
            return false;
        lastLinewiseCopy = linewise ? text : null;
        if (event.type == "cut" && !view.state.readOnly)
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                userEvent: "delete.cut"
            });
        let data = brokenClipboardAPI$1 ? null : event.clipboardData;
        if (data) {
            data.clearData();
            data.setData("text/plain", text);
            return true;
        }
        else {
            captureCopy$1(view, text);
            return false;
        }
    };
    const isFocusChange = /*@__PURE__*/Annotation.define();
    function focusChangeTransaction(state, focus) {
        let effects = [];
        for (let getEffect of state.facet(focusChangeEffect)) {
            let effect = getEffect(state, focus);
            if (effect)
                effects.push(effect);
        }
        return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
    }
    function updateForFocusChange(view) {
        setTimeout(() => {
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                let tr = focusChangeTransaction(view.state, focus);
                if (tr)
                    view.dispatch(tr);
                else
                    view.update([]);
            }
        }, 10);
    }
    observers.focus = view => {
        view.inputState.lastFocusTime = Date.now();
        // When focusing reset the scroll position, move it back to where it was
        if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
            view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
            view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
        }
        updateForFocusChange(view);
    };
    observers.blur = view => {
        view.observer.clearSelectionRange();
        updateForFocusChange(view);
    };
    observers.compositionstart = observers.compositionupdate = view => {
        if (view.inputState.compositionFirstChange == null)
            view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
        }
    };
    observers.compositionend = view => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionPendingKey = true;
        view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
        view.inputState.compositionFirstChange = null;
        if (browser.chrome && browser.android) {
            // Delay flushing for a bit on Android because it'll often fire a
            // bunch of contradictory changes in a row at end of compositon
            view.observer.flushSoon();
        }
        else if (view.inputState.compositionPendingChange) {
            // If we found pending records, schedule a flush.
            Promise.resolve().then(() => view.observer.flush());
        }
        else {
            // Otherwise, make sure that, if no changes come in soon, the
            // composition view is cleared.
            setTimeout(() => {
                if (view.inputState.composing < 0 && view.docView.hasComposition)
                    view.update([]);
            }, 50);
        }
    };
    observers.contextmenu = view => {
        view.inputState.lastContextMenu = Date.now();
    };
    handlers$1.beforeinput = (view, event) => {
        var _a;
        // Because Chrome Android doesn't fire useful key events, use
        // beforeinput to detect backspace (and possibly enter and delete,
        // but those usually don't even seem to fire beforeinput events at
        // the moment) and fake a key event for it.
        //
        // (preventDefault on beforeinput, though supported in the spec,
        // seems to do nothing at all on Chrome).
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
            view.observer.delayAndroidKey(pending.key, pending.keyCode);
            if (pending.key == "Backspace" || pending.key == "Delete") {
                let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
                setTimeout(() => {
                    var _a;
                    // Backspacing near uneditable nodes on Chrome Android sometimes
                    // closes the virtual keyboard. This tries to crudely detect
                    // that and refocus to get it back.
                    if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                        view.contentDOM.blur();
                        view.focus();
                    }
                }, 100);
            }
        }
        if (browser.ios && event.inputType == "deleteContentForward") {
            // For some reason, DOM changes (and beforeinput) happen _before_
            // the key event for ctrl-d on iOS when using an external
            // keyboard.
            view.observer.flushSoon();
        }
        // Safari will occasionally forget to fire compositionend at the end of a dead-key composition
        if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
            setTimeout(() => observers.compositionend(view, event), 20);
        }
        return false;
    };
    const appliedFirefoxHack = /*@__PURE__*/new Set;
    // In Firefox, when cut/copy handlers are added to the document, that
    // somehow avoids a bug where those events aren't fired when the
    // selection is empty. See https://github.com/codemirror/dev/issues/1082
    // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
    function firefoxCopyCutHack(doc) {
        if (!appliedFirefoxHack.has(doc)) {
            appliedFirefoxHack.add(doc);
            doc.addEventListener("copy", () => { });
            doc.addEventListener("cut", () => { });
        }
    }

    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    class HeightOracle {
        constructor(lineWrapping) {
            this.lineWrapping = lineWrapping;
            this.doc = Text.empty;
            this.heightSamples = {};
            this.lineHeight = 14; // The height of an entire line (line-height)
            this.charWidth = 7;
            this.textHeight = 14; // The height of the actual font (font-size)
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefreshForWrapping(whiteSpace) {
            return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
        }
        mustRefreshForHeights(lineHeights) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight;
        }
        refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
            this.lineWrapping = lineWrapping;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.textHeight = textHeight;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from, 
        /**
        The length of the element.
        */
        length, 
        /**
        The top position of the element (relative to the top of the
        document).
        */
        top, 
        /**
        Its height.
        */
        height, 
        /**
        @internal Weird packed field that holds an array of children
        for composite blocks, a decoration for block widgets, and a
        number indicating the amount of widget-create line breaks for
        text blocks.
        */
        _content) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this._content = _content;
        }
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        get type() {
            return typeof this._content == "number" ? BlockType.Text :
                Array.isArray(this._content) ? this._content : this._content.type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        If this is a widget block, this will return the widget
        associated with it.
        */
        get widget() {
            return this._content instanceof PointDecoration ? this._content.widget : null;
        }
        /**
        If this is a textblock, this holds the number of line breaks
        that appear in widgets inside the block.
        */
        get widgetLineBreaks() {
            return typeof this._content == "number" ? this._content : 0;
        }
        /**
        @internal
        */
        join(other) {
            let content = (Array.isArray(this._content) ? this._content : [this])
                .concat(Array.isArray(other._content) ? other._content : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
        }
    }
    var QueryType = /*@__PURE__*/(function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType})(QueryType || (QueryType = {}));
    const Epsilon = 1e-3;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Flag.Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this, doc = oracle.doc;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, deco) {
            super(length, height);
            this.deco = deco;
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
        }
        lineAt(_value, _type, oracle, top, offset) {
            return this.blockAt(0, oracle, top, offset);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            if (from <= offset + this.length && to >= offset)
                f(this.blockAt(0, oracle, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, null);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
            this.breaks = 0; // Number of widget-introduced line breaks on the line
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.breaks);
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
                    this.breaks * oracle.lineHeight);
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        heightMetrics(oracle, offset) {
            let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
            let lines = lastLine - firstLine + 1;
            let perLine, perChar = 0;
            if (oracle.lineWrapping) {
                let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
                perLine = totalPerLine / lines;
                if (this.length > lines + 1)
                    perChar = (this.height - totalPerLine) / (this.length - lines - 1);
            }
            else {
                perLine = this.height / lines;
            }
            return { firstLine, lastLine, perLine, perChar };
        }
        blockAt(height, oracle, top, offset) {
            let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            if (oracle.lineWrapping) {
                let guess = offset + (height < oracle.lineHeight ? 0
                    : Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length));
                let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
                let lineTop = Math.max(top, height - lineHeight / 2);
                return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
            }
            else {
                let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
                let { from, length } = oracle.doc.line(firstLine + line);
                return new BlockInfo(from, length, top + perLine * line, perLine, 0);
            }
        }
        lineAt(value, type, oracle, top, offset) {
            if (type == QueryType.ByHeight)
                return this.blockAt(value, oracle, top, offset);
            if (type == QueryType.ByPosNoHeight) {
                let { from, to } = oracle.doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, 0);
            }
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
            let linesAbove = line.number - firstLine;
            let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
            return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            from = Math.max(from, offset);
            to = Math.min(to, offset + this.length);
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            for (let pos = from, lineTop = top; pos <= to;) {
                let line = oracle.doc.lineAt(pos);
                if (pos == from) {
                    let linesAbove = line.number - firstLine;
                    lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
                }
                let lineHeight = perLine + perChar * line.length;
                f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
                lineTop += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let height = measured.heights[measured.index++];
                    if (singleHeight == -1)
                        singleHeight = height;
                    else if (Math.abs(height - singleHeight) >= Epsilon)
                        singleHeight = -2;
                    let line = new HeightMapText(len, height);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                let result = HeightMap.of(nodes);
                if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                    Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
                    oracle.heightChanged = true;
                return result;
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Flag.Break */; }
        blockAt(height, oracle, top, offset) {
            let mid = top + this.left.height;
            return height < mid ? this.left.blockAt(height, oracle, top, offset)
                : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, oracle, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, oracle, top, offset)
                : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, oracle, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? deco.widget.estimatedHeight : 0;
                let breaks = deco.widget ? deco.widget.lineBreaks : 0;
                if (height < 0)
                    height = this.oracle.lineHeight;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco));
                }
                else if (len || breaks || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, breaks, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* Flag.SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            this.enterLine();
            let deco = block.deco;
            if (deco && deco.startSide > 0 && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (deco && deco.endSide > 0)
                this.covering = block;
        }
        addLineDeco(height, breaks, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            line.breaks += breaks;
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange$1(from, to, this.changes, 5);
        }
    }

    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent && parent != doc.body;) {
            if (parent.nodeType == 1) {
                let elt = parent;
                let style = window.getComputedStyle(elt);
                if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                    style.overflow != "visible") {
                    let parentRect = elt.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
                }
                parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: Math.max(left, right) - rect.left,
            top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
    }
    function fullPixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        return { left: 0, right: rect.right - rect.left,
            top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(viewState, wrapping) {
            return Decoration$1.replace({
                widget: new LineGapWidget(this.size * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
            }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType$1 {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0; // Padding above the document, scaled
            this.paddingBottom = 0; // Padding below the document, scaled
            this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
            this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
            this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
            this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
            this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
            this.scrolledToBottom = false;
            // The CSS-transformation scale of the editor (transformed size /
            // concrete size)
            this.scaleX = 1;
            this.scaleY = 1;
            // The vertical position (document-relative) to which to anchor the
            // scroll position. -1 means anchor to the end of the document.
            this.scrollAnchorPos = 0;
            // The height at the anchor position. Set by the DOM update phase.
            // -1 means no height available.
            this.scrollAnchorHeight = -1;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTarget = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            // Flag set when editor content was redrawn, so that the next
            // measure stage knows it must read DOM layout
            this.mustMeasureContent = true;
            this.defaultTextDirection = Direction.LTR;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be significant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
            this.heightOracle = new HeightOracle(guessWrapping);
            this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
            this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.updateViewportLines();
            this.updateForViewport();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration$1.set(this.lineGaps.map(gap => gap.draw(this, false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineBlockAt(pos);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle, this.heightMap, this.viewports);
        }
        updateViewportLines() {
            this.viewportLines = [];
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
                this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
            });
        }
        update(update, scrollTarget = null) {
            this.state = update.state;
            let prevDeco = this.stateDeco;
            this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
            this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= 2 /* UpdateFlag.Height */;
            if (scrollAnchor) {
                this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
                this.scrollAnchorHeight = scrollAnchor.top;
            }
            else {
                this.scrollAnchorPos = -1;
                this.scrollAnchorHeight = this.heightMap.height;
            }
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
                !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTarget);
            let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||
                viewport.from != this.viewport.from || viewport.to != this.viewport.to;
            this.viewport = viewport;
            this.updateForViewport();
            if (updateLines)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            update.flags |= this.computeVisibleRanges();
            if (scrollTarget)
                this.scrollTarget = scrollTarget;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc &&
                !update.state.facet(nativeSelectionHidden))
                this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
            let dom = view.contentDOM, style = window.getComputedStyle(dom);
            let oracle = this.heightOracle;
            let whiteSpace = style.whiteSpace;
            this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
            let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
            let domRect = dom.getBoundingClientRect();
            let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
            this.contentDOMHeight = domRect.height;
            this.mustMeasureContent = false;
            let result = 0, bias = 0;
            if (domRect.width && domRect.height) {
                let { scaleX, scaleY } = getScale(dom, domRect);
                if (scaleX > .005 && Math.abs(this.scaleX - scaleX) > .005 ||
                    scaleY > .005 && Math.abs(this.scaleY - scaleY) > .005) {
                    this.scaleX = scaleX;
                    this.scaleY = scaleY;
                    result |= 8 /* UpdateFlag.Geometry */;
                    refresh = measureContent = true;
                }
            }
            // Vertical padding
            let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
            let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
                this.paddingTop = paddingTop;
                this.paddingBottom = paddingBottom;
                result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
            }
            if (this.editorWidth != view.scrollDOM.clientWidth) {
                if (oracle.lineWrapping)
                    measureContent = true;
                this.editorWidth = view.scrollDOM.clientWidth;
                result |= 8 /* UpdateFlag.Geometry */;
            }
            let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
            if (this.scrollTop != scrollTop) {
                this.scrollAnchorHeight = -1;
                this.scrollTop = scrollTop;
            }
            this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
            // Pixel viewport
            let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (inView != this.inView) {
                this.inView = inView;
                if (inView)
                    measureContent = true;
            }
            if (!this.inView && !this.scrollTarget)
                return 0;
            let contentWidth = domRect.width;
            if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
                this.contentDOMWidth = domRect.width;
                this.editorHeight = view.scrollDOM.clientHeight;
                result |= 8 /* UpdateFlag.Geometry */;
            }
            if (measureContent) {
                let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
                if (oracle.mustRefreshForHeights(lineHeights))
                    refresh = true;
                if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                    refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        view.docView.minWidth = 0;
                        result |= 8 /* UpdateFlag.Geometry */;
                    }
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
                oracle.heightChanged = false;
                for (let vp of this.viewports) {
                    let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                    this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
                }
                if (oracle.heightChanged)
                    result |= 2 /* UpdateFlag.Height */;
            }
            let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                    this.scrollTarget.range.head > this.viewport.to);
            if (viewportChange)
                this.viewport = this.getViewport(bias, this.scrollTarget);
            this.updateForViewport();
            if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
            result |= this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                view.docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
        getViewport(bias, scrollTarget) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
            let map = this.heightMap, oracle = this.heightOracle;
            let { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
            // If scrollTarget is given, make sure the viewport includes that position
            if (scrollTarget) {
                let { head } = scrollTarget.range;
                if (head < viewport.from || head > viewport.to) {
                    let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                    let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
                    if (scrollTarget.y == "center")
                        topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                    else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                        topPos = block.top;
                    else
                        topPos = block.bottom - viewHeight;
                    viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            if (!this.inView)
                return true;
            let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current, mayMeasure) {
            let wrapping = this.heightOracle.lineWrapping;
            let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
            // The non-wrapping logic won't work at all in predominantly right-to-left text.
            if (this.defaultTextDirection != Direction.LTR && !wrapping)
                return [];
            let gaps = [];
            let addGap = (from, to, line, structure) => {
                if (to - from < halfMargin)
                    return;
                let sel = this.state.selection.main, avoid = [sel.from];
                if (!sel.empty)
                    avoid.push(sel.to);
                for (let pos of avoid) {
                    if (pos > from && pos < to) {
                        addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                        addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                        return;
                    }
                }
                let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                    Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                    !avoid.some(pos => gap.from < pos && gap.to > pos));
                if (!gap) {
                    // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                    if (to < line.to && mayMeasure && wrapping &&
                        mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                        let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                        if (lineStart > from)
                            to = lineStart;
                    }
                    gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
                }
                gaps.push(gap);
            };
            for (let line of this.viewportLines) {
                if (line.length < doubleMargin)
                    continue;
                let structure = lineStructure(line.from, line.to, this.stateDeco);
                if (structure.total < doubleMargin)
                    continue;
                let target = this.scrollTarget ? this.scrollTarget.range.head : null;
                let viewFrom, viewTo;
                if (wrapping) {
                    let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                    let top, bot;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                        top = targetFrac - spaceFrac;
                        bot = targetFrac + spaceFrac;
                    }
                    else {
                        top = (this.visibleTop - line.top - marginHeight) / line.height;
                        bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                    }
                    viewFrom = findPosition(structure, top);
                    viewTo = findPosition(structure, bot);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    let marginWidth = margin * this.heightOracle.charWidth;
                    let left, right;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
                        left = targetFrac - spaceFrac;
                        right = targetFrac + spaceFrac;
                    }
                    else {
                        left = (this.pixelViewport.left - marginWidth) / totalWidth;
                        right = (this.pixelViewport.right + marginWidth) / totalWidth;
                    }
                    viewFrom = findPosition(structure, left);
                    viewTo = findPosition(structure, right);
                }
                if (viewFrom > line.from)
                    addGap(line.from, viewFrom, line, structure);
                if (viewTo < line.to)
                    addGap(viewTo, line.to, line, structure);
            }
            return gaps;
        }
        gapSize(line, from, to, structure) {
            let fraction = findFraction(structure, to) - findFraction(structure, from);
            if (this.heightOracle.lineWrapping) {
                return line.height * fraction;
            }
            else {
                return structure.total * this.heightOracle.charWidth * fraction;
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration$1.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
            }
        }
        computeVisibleRanges() {
            let deco = this.stateDeco;
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            let changed = ranges.length != this.visibleRanges.length ||
                this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
            this.visibleRanges = ranges;
            return changed ? 4 /* UpdateFlag.Viewport */ : 0;
        }
        lineBlockAt(pos) {
            return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
                scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
        }
        scrollAnchorAt(scrollTop) {
            let block = this.lineBlockAtHeight(scrollTop + 8);
            return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
        }
        elementAtHeight(height) {
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
        }
        get docHeight() {
            return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
        }
    }
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    function lineStructure(from, to, stateDeco) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(stateDeco, from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(oracle, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
    }
    function scaleBlock(block, scaler) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
    }

    const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // Provide a simple default outline to make sure a focused
                // editor is visually distinct. Can't leave the default behavior
                // because that will apply to the content element, which is
                // inside the scrollable container and doesn't include the
                // gutters. We also can't use an 'auto' outline, since those
                // are, for some reason, drawn behind the element content, which
                // will cause things like the active line background to cover
                // the outline (#297).
                outline: "1px dotted #212121"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            flexShrink: 0,
            display: "block",
            whiteSpace: "pre",
            wordWrap: "normal", // https://github.com/codemirror/dev/issues/456
            boxSizing: "border-box",
            minHeight: "100%",
            padding: "4px 0",
            outline: "none",
            "&[contenteditable=true]": {
                WebkitUserModify: "read-write-plaintext-only",
            }
        },
        ".cm-lineWrapping": {
            whiteSpace_fallback: "pre-wrap", // For IE
            whiteSpace: "break-spaces",
            wordBreak: "break-word", // For Safari, which doesn't support overflow-wrap: anywhere
            overflowWrap: "anywhere",
            flexShrink: 1
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 6px"
        },
        ".cm-layer": {
            position: "absolute",
            left: 0,
            top: 0,
            contain: "size style",
            "& > *": {
                position: "absolute"
            }
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            pointerEvents: "none"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        ".cm-cursor, .cm-dropCursor": {
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
        },
        ".cm-cursor": {
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#444"
        },
        ".cm-dropCursor": {
            position: "absolute"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
            display: "block"
        },
        ".cm-iso": {
            unicodeBidi: "isolate"
        },
        ".cm-announced": {
            position: "fixed",
            top: "-10000px"
        },
        "@media print": {
            ".cm-announced": { display: "none" }
        },
        "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
        "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-gutters": {
            flexShrink: 0,
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            insetInlineStart: 0,
            zIndex: 200
        },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#6c6c6c",
            borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important", // Necessary -- prevents margin collapsing
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            minHeight: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
            backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
            backgroundColor: "#222227"
        },
        ".cm-panels": {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0
        },
        "&light .cm-panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "&light .cm-panels-top": {
            borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
            borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-widgetBuffer": {
            verticalAlign: "text-top",
            height: "1em",
            width: 0,
            display: "inline"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block",
            verticalAlign: "top",
        },
        ".cm-highlightSpace:before": {
            content: "attr(data-display)",
            position: "absolute",
            pointerEvents: "none",
            color: "#888"
        },
        ".cm-highlightTab": {
            backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
            backgroundSize: "auto 100%",
            backgroundPosition: "right 90%",
            backgroundRepeat: "no-repeat"
        },
        ".cm-trailingSpace": {
            backgroundColor: "#ff332255"
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "1px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);

    const LineBreakPlaceholder = "\uffff";
    class DOMReader {
        constructor(points, state) {
            this.points = points;
            this.text = "";
            this.lineSeparator = state.facet(EditorState$1.lineSeparator);
        }
        append(text) {
            this.text += text;
        }
        lineBreak() {
            this.text += LineBreakPlaceholder;
        }
        readRange(start, end) {
            if (!start)
                return this;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                let oldLen = this.text.length;
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if (view && nextView ? view.breakAfter :
                    (view ? view.breakAfter : isBlockElement(cur)) ||
                        (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
                    this.lineBreak();
                cur = next;
            }
            this.findPointBefore(parent, end);
            return this;
        }
        readTextNode(node) {
            let text = node.nodeValue;
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, text.length);
            for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
                let nextBreak = -1, breakSize = 1, m;
                if (this.lineSeparator) {
                    nextBreak = text.indexOf(this.lineSeparator, off);
                    breakSize = this.lineSeparator.length;
                }
                else if (m = re.exec(text)) {
                    nextBreak = m.index;
                    breakSize = m[0].length;
                }
                this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
                if (nextBreak < 0)
                    break;
                this.lineBreak();
                if (breakSize > 1)
                    for (let point of this.points)
                        if (point.node == node && point.pos > this.text.length)
                            point.pos -= breakSize - 1;
                off = nextBreak + breakSize;
            }
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            if (fromView != null) {
                this.findPointInside(node, fromView.length);
                for (let i = fromView.iter(); !i.next().done;) {
                    if (i.lineBreak)
                        this.lineBreak();
                    else
                        this.append(i.value);
                }
            }
            else if (node.nodeType == 3) {
                this.readTextNode(node);
            }
            else if (node.nodeName == "BR") {
                if (node.nextSibling)
                    this.lineBreak();
            }
            else if (node.nodeType == 1) {
                this.readRange(node.firstChild, null);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointInside(node, length) {
            for (let point of this.points)
                if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                    point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
        }
    }
    function isAtEnd(parent, node, offset) {
        for (;;) {
            if (!node || offset < maxOffset(node))
                return false;
            if (node == parent)
                return true;
            offset = domIndex$1(node) + 1;
            node = node.parentNode;
        }
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }

    class DOMChange {
        constructor(view, start, end, typeOver) {
            this.typeOver = typeOver;
            this.bounds = null;
            this.text = "";
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            if (view.state.readOnly && start > -1) {
                // Ignore changes when the editor is read-only
                this.newSel = null;
            }
            else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
                let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
                let reader = new DOMReader(selPoints, view.state);
                reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
                this.text = reader.text;
                this.newSel = selectionFromPoints(selPoints, this.bounds.from);
            }
            else {
                let domSel = view.observer.selectionRange;
                let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                    !contains(view.contentDOM, domSel.focusNode)
                    ? view.state.selection.main.head
                    : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
                let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                    !contains(view.contentDOM, domSel.anchorNode)
                    ? view.state.selection.main.anchor
                    : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
                // iOS will refuse to select the block gaps when doing
                // select-all.
                // Chrome will put the selection *inside* them, confusing
                // posFromDOM
                let vp = view.viewport;
                if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor &&
                    (vp.from > 0 || vp.to < view.state.doc.length)) {
                    let from = Math.min(head, anchor), to = Math.max(head, anchor);
                    let offFrom = vp.from - from, offTo = vp.to - to;
                    if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
                        head = 0;
                        anchor = view.state.doc.length;
                    }
                }
                this.newSel = EditorSelection.single(anchor, head);
            }
        }
    }
    function applyDOMChange(view, domChange) {
        let change;
        let { newSel } = domChange, sel = view.state.selection.main;
        let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
        if (domChange.bounds) {
            let { from, to } = domChange.bounds;
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff$1(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
            if (diff) {
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. DomChange drops one of those.
                if (browser.chrome && lastKey == 13 &&
                    diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                    diff.toB--;
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
            }
        }
        else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
            newSel = null;
        }
        if (!change && !newSel)
            return false;
        if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
            // Heuristic to notice typing over a selected character
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        }
        else if (change && change.from >= sel.from && change.to <= sel.to &&
            (change.from != sel.from || change.to != sel.to) &&
            (sel.to - sel.from) - (change.to - change.from) <= 4) {
            // If the change is inside the selection and covers most of it,
            // assume it is a selection replace (with identical characters at
            // the start/end not included in the diff)
            change = {
                from: sel.from, to: sel.to,
                insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
            };
        }
        else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
            /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
            // Detect insert-period-on-double-space Mac and Android behavior,
            // and transform it into a regular space insert.
            if (newSel && change.insert.length == 2)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        }
        else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
            change.insert.toString() == "\n " && view.lineWrapping) {
            // In Chrome, if you insert a space at the start of a wrapped
            // line, it will actually insert a newline and a space, causing a
            // bogus new line to be created in CodeMirror (#968)
            if (newSel)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        }
        if (change) {
            if (browser.ios && view.inputState.flushIOSKey(change))
                return true;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events. (Some of these keys are also handled by beforeinput
            // events and the pendingAndroidKey mechanism, but that's not
            // reliable in all situations.)
            if (browser.android &&
                ((change.to == sel.to &&
                    // GBoard will sometimes remove a space it just inserted
                    // after a completion when you press enter
                    (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey(view.contentDOM, "Enter", 13)) ||
                    ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
                        lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
                        dispatchKey(view.contentDOM, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Delete", 46))))
                return true;
            let text = change.insert.toString();
            if (view.inputState.composing >= 0)
                view.inputState.composing++;
            let defaultTr;
            let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
            if (!view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text, defaultInsert)))
                view.dispatch(defaultInsert());
            return true;
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, userEvent = "select";
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "select")
                    scrollIntoView = true;
                userEvent = view.inputState.lastSelectionOrigin;
            }
            view.dispatch({ selection: newSel, scrollIntoView, userEvent });
            return true;
        }
        else {
            return false;
        }
    }
    function applyDefaultInsert(view, change, newSel) {
        let tr, startState = view.state, sel = startState.selection.main;
        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
            (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
            view.inputState.composing < 0) {
            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
        }
        else {
            let changes = startState.changes(change);
            let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
            // Try to apply a composition change to all cursors
            if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                change.to <= sel.to && change.to >= sel.to - 10) {
                let replaced = view.state.sliceDoc(change.from, change.to);
                let compositionRange, composition = newSel && findCompositionNode$1(view, newSel.main.head);
                if (composition) {
                    let dLen = change.insert.length - (change.to - change.from);
                    compositionRange = { from: composition.from, to: composition.to - dLen };
                }
                else {
                    compositionRange = view.state.doc.lineAt(sel.head);
                }
                let offset = sel.to - change.to, size = sel.to - sel.from;
                tr = startState.changeByRange(range => {
                    if (range.from == sel.from && range.to == sel.to)
                        return { changes, range: mainSel || range.map(changes) };
                    let to = range.to - offset, from = to - replaced.length;
                    if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                        // Unfortunately, there's no way to make multiple
                        // changes in the same node work without aborting
                        // composition, so cursors in the composition range are
                        // ignored.
                        range.to >= compositionRange.from && range.from <= compositionRange.to)
                        return { range };
                    let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                    return {
                        changes: rangeChanges,
                        range: !mainSel ? range.map(rangeChanges) :
                            EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                    };
                });
            }
            else {
                tr = {
                    changes,
                    selection: mainSel && startState.selection.replaceRange(mainSel)
                };
            }
        }
        let userEvent = "input.type";
        if (view.composing ||
            view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
            view.inputState.compositionPendingChange = false;
            userEvent += ".compose";
            if (view.inputState.compositionFirstChange) {
                userEvent += ".start";
                view.inputState.compositionFirstChange = false;
            }
        }
        return startState.update(tr, { userEvent, scrollIntoView: true });
    }
    function findDiff$1(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }

    const observeOptions$1 = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData$1 = browser.ie && browser.ie_version <= 11;
    let DOMObserver$1 = class DOMObserver {
        constructor(view) {
            this.view = view;
            this.active = false;
            // The known selection. Kept in our own object, as opposed to just
            // directly accessing the selection because:
            //  - Safari doesn't report the right selection in shadow DOM
            //  - Reading from the selection forces a DOM layout
            //  - This way, we can ignore selectionchange events if we have
            //    already seen the 'new' selection
            this.selectionRange = new DOMSelectionState;
            // Set when a selection change is detected, cleared on flush
            this.selectionChanged = false;
            this.delayedFlush = -1;
            this.resizeTimeout = -1;
            this.queue = [];
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
            this.lastChange = 0;
            this.scrollTargets = [];
            this.intersection = null;
            this.resizeScroll = null;
            this.intersecting = false;
            this.gapIntersection = null;
            this.gaps = [];
            this.printQuery = null;
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData$1)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            this.onResize = this.onResize.bind(this);
            this.onPrint = this.onPrint.bind(this);
            this.onScroll = this.onScroll.bind(this);
            if (window.matchMedia)
                this.printQuery = window.matchMedia("print");
            if (typeof ResizeObserver == "function") {
                this.resizeScroll = new ResizeObserver(() => {
                    var _a;
                    if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                        this.onResize();
                });
                this.resizeScroll.observe(view.scrollDOM);
            }
            this.addWindowListeners(this.win = view.win);
            this.start();
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, { threshold: [0, .001] });
                this.intersection.observe(this.dom);
                this.gapIntersection = new IntersectionObserver(entries => {
                    if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                        this.onScrollChanged(document.createEvent("Event"));
                }, {});
            }
            this.listenForScroll();
            this.readSelectionRange();
        }
        onScrollChanged(e) {
            this.view.inputState.runHandlers("scroll", e);
            if (this.intersecting)
                this.view.measure();
        }
        onScroll(e) {
            if (this.intersecting)
                this.flush(false);
            this.onScrollChanged(e);
        }
        onResize() {
            if (this.resizeTimeout < 0)
                this.resizeTimeout = setTimeout(() => {
                    this.resizeTimeout = -1;
                    this.view.requestMeasure();
                }, 50);
        }
        onPrint(event) {
            if (event.type == "change" && !event.matches)
                return;
            this.view.viewState.printing = true;
            this.view.measure();
            setTimeout(() => {
                this.view.viewState.printing = false;
                this.view.requestMeasure();
            }, 500);
        }
        updateGaps(gaps) {
            if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
                this.gapIntersection.disconnect();
                for (let gap of gaps)
                    this.gapIntersection.observe(gap);
                this.gaps = gaps;
            }
        }
        onSelectionChange(event) {
            let wasChanged = this.selectionChanged;
            if (!this.readSelectionRange() || this.delayedAndroidKey)
                return;
            let { view } = this, sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection$1(view.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event)) {
                if (!wasChanged)
                    this.selectionChanged = false;
                return;
            }
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // Chrome Android has a similar issue when backspacing out a
            // selection (#645).
            if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
                // (Selection.isCollapsed isn't reliable on IE)
                sel.focusNode && isEquivalentPosition$1(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush(false);
        }
        readSelectionRange() {
            let { view } = this;
            // The Selection object is broken in shadow roots in Safari. See
            // https://github.com/codemirror/dev/issues/414
            let selection = getSelection$1(view.root);
            if (!selection)
                return false;
            let range = browser.safari && view.root.nodeType == 11 &&
                deepActiveElement$1(this.dom.ownerDocument) == this.dom &&
                safariSelectionRangeHack(this.view, selection) || selection;
            if (!range || this.selectionRange.eq(range))
                return false;
            let local = hasSelection$1(this.dom, range);
            // Detect the situation where the browser has, on focus, moved the
            // selection to the start of the content element. Reset it to the
            // position from the editor state.
            if (local && !this.selectionChanged &&
                view.inputState.lastFocusTime > Date.now() - 200 &&
                view.inputState.lastTouchTime < Date.now() - 300 &&
                atElementStart(this.dom, range)) {
                this.view.inputState.lastFocusTime = 0;
                view.docView.updateSelection();
                return false;
            }
            this.selectionRange.setRange(range);
            if (local)
                this.selectionChanged = true;
            return true;
        }
        setSelectionRange(anchor, head) {
            this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
            this.selectionChanged = false;
        }
        clearSelectionRange() {
            this.selectionRange.set(null, 0, null, 0);
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.assignedSlot || dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions$1);
            if (useCharData$1)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            if (useCharData$1)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        // Throw away any pending changes
        clear() {
            this.processRecords();
            this.queue.length = 0;
            this.selectionChanged = false;
        }
        // Chrome Android, especially in combination with GBoard, not only
        // doesn't reliably fire regular key events, but also often
        // surrounds the effect of enter or backspace with a bunch of
        // composition events that, when interrupted, cause text duplication
        // or other kinds of corruption. This hack makes the editor back off
        // from handling DOM changes for a moment when such a key is
        // detected (via beforeinput or keydown), and then tries to flush
        // them or, if that has no effect, dispatches the given key.
        delayAndroidKey(key, keyCode) {
            var _a;
            if (!this.delayedAndroidKey) {
                let flush = () => {
                    let key = this.delayedAndroidKey;
                    if (key) {
                        this.clearDelayedAndroidKey();
                        this.view.inputState.lastKeyCode = key.keyCode;
                        this.view.inputState.lastKeyTime = Date.now();
                        let flushed = this.flush();
                        if (!flushed && key.force)
                            dispatchKey(this.dom, key.key, key.keyCode);
                    }
                };
                this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
            }
            // Since backspace beforeinput is sometimes signalled spuriously,
            // Enter always takes precedence.
            if (!this.delayedAndroidKey || key == "Enter")
                this.delayedAndroidKey = {
                    key, keyCode,
                    // Only run the key handler when no changes are detected if
                    // this isn't coming right after another change, in which case
                    // it is probably part of a weird chain of updates, and should
                    // be ignored if it returns the DOM to its previous state.
                    force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
                };
        }
        clearDelayedAndroidKey() {
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                this.view.win.cancelAnimationFrame(this.delayedFlush);
                this.delayedFlush = -1;
            }
            this.flush();
        }
        pendingRecords() {
            for (let mut of this.observer.takeRecords())
                this.queue.push(mut);
            return this.queue;
        }
        processRecords() {
            let records = this.pendingRecords();
            if (records.length)
                this.queue = [];
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            return { from, to, typeOver };
        }
        readChange() {
            let { from, to, typeOver } = this.processRecords();
            let newSel = this.selectionChanged && hasSelection$1(this.dom, this.selectionRange);
            if (from < 0 && !newSel)
                return null;
            if (from > -1)
                this.lastChange = Date.now();
            this.view.inputState.lastFocusTime = 0;
            this.selectionChanged = false;
            let change = new DOMChange(this.view, from, to, typeOver);
            this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
            return change;
        }
        // Apply pending changes, if any
        flush(readSelection = true) {
            // Completely hold off flushing when pending keys are set—the code
            // managing those will make sure processRecords is called and the
            // view is resynchronized after
            if (this.delayedFlush >= 0 || this.delayedAndroidKey)
                return false;
            if (readSelection)
                this.readSelectionRange();
            let domChange = this.readChange();
            if (!domChange) {
                this.view.requestMeasure();
                return false;
            }
            let startState = this.view.state;
            let handled = applyDOMChange(this.view, domChange);
            // The view wasn't updated
            if (this.view.state == startState)
                this.view.update([]);
            return handled;
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes")
                cView.flags |= 4 /* ViewFlag.AttrsDirty */;
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else if (rec.type == "characterData") {
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
            else {
                return null;
            }
        }
        setWindow(win) {
            if (win != this.win) {
                this.removeWindowListeners(this.win);
                this.win = win;
                this.addWindowListeners(this.win);
            }
        }
        addWindowListeners(win) {
            win.addEventListener("resize", this.onResize);
            if (this.printQuery)
                this.printQuery.addEventListener("change", this.onPrint);
            else
                win.addEventListener("beforeprint", this.onPrint);
            win.addEventListener("scroll", this.onScroll);
            win.document.addEventListener("selectionchange", this.onSelectionChange);
        }
        removeWindowListeners(win) {
            win.removeEventListener("scroll", this.onScroll);
            win.removeEventListener("resize", this.onResize);
            if (this.printQuery)
                this.printQuery.removeEventListener("change", this.onPrint);
            else
                win.removeEventListener("beforeprint", this.onPrint);
            win.document.removeEventListener("selectionchange", this.onSelectionChange);
        }
        destroy() {
            var _a, _b, _c;
            this.stop();
            (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
            (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            this.removeWindowListeners(this.win);
            clearTimeout(this.parentCheck);
            clearTimeout(this.resizeTimeout);
            this.win.cancelAnimationFrame(this.delayedFlush);
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
        }
    };
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }
    function buildSelectionRangeFromRange(view, range) {
        let anchorNode = range.startContainer, anchorOffset = range.startOffset;
        let focusNode = range.endContainer, focusOffset = range.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition$1(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }
    // Used to work around a Safari Selection/shadow DOM bug (#414)
    function safariSelectionRangeHack(view, selection) {
        if (selection.getComposedRanges) {
            let range = selection.getComposedRanges(view.root)[0];
            if (range)
                return buildSelectionRangeFromRange(view, range);
        }
        let found = null;
        // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        view.dom.ownerDocument.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        return found ? buildSelectionRangeFromRange(view, found) : null;
    }

    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    let EditorView$1 = class EditorView {
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method), and at least
        one change has been made in the current composition.
        */
        get composing() { return this.inputState.composing > 0; }
        /**
        Indicates whether the user is currently in composing state. Note
        that on some platforms, like Android, this will be the case a
        lot, since just putting the cursor on a word starts a
        composition there.
        */
        get compositionStarted() { return this.inputState.composing >= 0; }
        /**
        The document or shadow root that the view lives in.
        */
        get root() { return this._root; }
        /**
        @internal
        */
        get win() { return this.dom.ownerDocument.defaultView || window; }
        /**
        Construct a new view. You'll want to either provide a `parent`
        option, or put `view.dom` into your document after creating a
        view, so that the user can see the editor.
        */
        constructor(config = {}) {
            this.plugins = [];
            this.pluginMap = new Map;
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            this.destroyed = false;
            /**
            @internal
            */
            this.updateState = 2 /* UpdateState.Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.className = "cm-announced";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            if (config.parent)
                config.parent.appendChild(this.dom);
            let { dispatch } = config;
            this.dispatchTransactions = config.dispatchTransactions ||
                (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
                ((trs) => this.update(trs));
            this.dispatch = this.dispatch.bind(this);
            this._root = (config.root || getRoot(config.parent) || document);
            this.viewState = new ViewState(config.state || EditorState$1.create(config));
            if (config.scrollTo && config.scrollTo.is(scrollIntoView))
                this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
            for (let plugin of this.plugins)
                plugin.update(this);
            this.observer = new DOMObserver$1(this);
            this.inputState = new InputState$1(this);
            this.inputState.ensureHandlers(this.plugins);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* UpdateState.Idle */;
            this.requestMeasure();
        }
        dispatch(...input) {
            let trs = input.length == 1 && input[0] instanceof Transaction$1 ? input
                : input.length == 1 && Array.isArray(input[0]) ? input[0]
                    : [this.state.update(...input)];
            this.dispatchTransactions(trs, this);
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, attrsChanged = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            if (this.destroyed) {
                this.viewState.state = state;
                return;
            }
            let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
            if (transactions.some(tr => tr.annotation(isFocusChange))) {
                this.inputState.notifiedFocused = focus;
                // If a focus-change transaction is being dispatched, set this update flag.
                focusFlag = 1 /* UpdateFlag.Focus */;
            }
            else if (focus != this.inputState.notifiedFocused) {
                this.inputState.notifiedFocused = focus;
                // Schedule a separate focus transaction if necessary, otherwise
                // add a flag to this update
                dispatchFocus = focusChangeTransaction(state, focus);
                if (!dispatchFocus)
                    focusFlag = 1 /* UpdateFlag.Focus */;
            }
            // If there was a pending DOM change, eagerly read it and try to
            // apply it after the given transactions.
            let pendingKey = this.observer.delayedAndroidKey, domChange = null;
            if (pendingKey) {
                this.observer.clearDelayedAndroidKey();
                domChange = this.observer.readChange();
                // Only try to apply DOM changes if the transactions didn't
                // change the doc or selection.
                if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                    domChange = null;
            }
            else {
                this.observer.clear();
            }
            // When the phrases change, redraw the editor
            if (state.facet(EditorState$1.phrases) != this.state.facet(EditorState$1.phrases))
                return this.setState(state);
            update = ViewUpdate.create(this, state, transactions);
            update.flags |= focusFlag;
            let scrollTarget = this.viewState.scrollTarget;
            try {
                this.updateState = 2 /* UpdateState.Updating */;
                for (let tr of transactions) {
                    if (scrollTarget)
                        scrollTarget = scrollTarget.map(tr.changes);
                    if (tr.scrollIntoView) {
                        let { main } = tr.state.selection;
                        scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                    }
                    for (let e of tr.effects)
                        if (e.is(scrollIntoView))
                            scrollTarget = e.value.clip(this.state);
                }
                this.viewState.update(update, scrollTarget);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty) {
                    this.updatePlugins(update);
                    this.inputState.update(update);
                }
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                attrsChanged = this.updateAttrs();
                this.showAnnouncements(transactions);
                this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (update.startState.facet(theme) != update.state.facet(theme))
                this.viewState.mustMeasureContent = true;
            if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
                this.requestMeasure();
            if (redrawn)
                this.docViewUpdate();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener)) {
                    try {
                        listener(update);
                    }
                    catch (e) {
                        logException(this.state, e, "update listener");
                    }
                }
            if (dispatchFocus || domChange)
                Promise.resolve().then(() => {
                    if (dispatchFocus && this.state == dispatchFocus.startState)
                        this.dispatch(dispatchFocus);
                    if (domChange) {
                        if (!applyDOMChange(this, domChange) && pendingKey.force)
                            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                    }
                });
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            if (this.destroyed) {
                this.viewState.state = newState;
                return;
            }
            this.updateState = 2 /* UpdateState.Updating */;
            let hadFocus = this.hasFocus;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
                this.pluginMap.clear();
                for (let plugin of this.plugins)
                    plugin.update(this);
                this.docView.destroy();
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this.plugins);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (hadFocus)
                this.focus();
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.pluginMap.clear();
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i].update(this);
            if (prevSpecs != specs)
                this.inputState.ensureHandlers(this.plugins);
        }
        docViewUpdate() {
            for (let plugin of this.plugins) {
                let val = plugin.value;
                if (val && val.docViewUpdate) {
                    try {
                        val.docViewUpdate(this);
                    }
                    catch (e) {
                        logException(this.state, e, "doc view update listener");
                    }
                }
            }
        }
        /**
        @internal
        */
        measure(flush = true) {
            if (this.destroyed)
                return;
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            if (this.observer.delayedAndroidKey) {
                this.measureScheduled = -1;
                this.requestMeasure();
                return;
            }
            this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
            if (flush)
                this.observer.forceFlush();
            let updated = null;
            let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
            let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
            if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
                scrollAnchorHeight = -1;
            this.viewState.scrollAnchorHeight = -1;
            try {
                for (let i = 0;; i++) {
                    if (scrollAnchorHeight < 0) {
                        if (isScrolledToBottom(sDOM)) {
                            scrollAnchorPos = -1;
                            scrollAnchorHeight = this.viewState.heightMap.height;
                        }
                        else {
                            let block = this.viewState.scrollAnchorAt(scrollTop);
                            scrollAnchorPos = block.from;
                            scrollAnchorHeight = block.top;
                        }
                    }
                    this.updateState = 1 /* UpdateState.Measuring */;
                    let changed = this.viewState.measure(this);
                    if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                        break;
                    if (i > 5) {
                        console.warn(this.measureRequests.length
                            ? "Measure loop restarted more than 5 times"
                            : "Viewport failed to stabilize");
                        break;
                    }
                    let measuring = [];
                    // Only run measure requests in this cycle when the viewport didn't change
                    if (!(changed & 4 /* UpdateFlag.Viewport */))
                        [this.measureRequests, measuring] = [measuring, this.measureRequests];
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = ViewUpdate.create(this, this.state, []), redrawn = false;
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* UpdateState.Updating */;
                    if (!update.empty) {
                        this.updatePlugins(update);
                        this.inputState.update(update);
                        this.updateAttrs();
                        redrawn = this.docView.update(update);
                        if (redrawn)
                            this.docViewUpdate();
                    }
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                let m = measuring[i];
                                if (m.write)
                                    m.write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (redrawn)
                        this.docView.updateSelection(true);
                    if (!update.viewportChanged && this.measureRequests.length == 0) {
                        if (this.viewState.editorHeight) {
                            if (this.viewState.scrollTarget) {
                                this.docView.scrollIntoView(this.viewState.scrollTarget);
                                this.viewState.scrollTarget = null;
                                scrollAnchorHeight = -1;
                                continue;
                            }
                            else {
                                let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
                                    this.viewState.lineBlockAt(scrollAnchorPos).top;
                                let diff = newAnchorHeight - scrollAnchorHeight;
                                if (diff > 1 || diff < -1) {
                                    scrollTop = scrollTop + diff;
                                    sDOM.scrollTop = scrollTop / this.scaleY;
                                    scrollAnchorHeight = -1;
                                    continue;
                                }
                            }
                        }
                        break;
                    }
                }
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
                this.measureScheduled = -1;
            }
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme);
        }
        updateAttrs() {
            let editorAttrs = attrsFromFacet(this, editorAttributes, {
                class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            let contentAttrs = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                translate: "no",
                contenteditable: !this.state.facet(editable) ? "false" : "true",
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            };
            if (this.state.readOnly)
                contentAttrs["aria-readonly"] = "true";
            attrsFromFacet(this, contentAttributes, contentAttrs);
            let changed = this.observer.ignore(() => {
                let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
                let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
                return changedContent || changedEditor;
            });
            this.editorAttrs = editorAttrs;
            this.contentAttrs = contentAttrs;
            return changed;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            let nonce = this.state.facet(EditorView.cspNonce);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : undefined);
        }
        readMeasured() {
            if (this.updateState == 2 /* UpdateState.Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
                this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
            if (request) {
                if (this.measureRequests.indexOf(request) > -1)
                    return;
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            let known = this.pluginMap.get(plugin);
            if (known === undefined || known && known.spec != plugin)
                this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
            return known && known.update(this).value;
        }
        /**
        The top position of the document, in screen coordinates. This
        may be negative when the editor is scrolled down. Points
        directly to the top of the first line, not above the padding.
        */
        get documentTop() {
            return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        /**
        Reports the padding above and below the document.
        */
        get documentPadding() {
            return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        /**
        If the editor is transformed with CSS, this provides the scale
        along the X axis. Otherwise, it will just be 1. Note that
        transforms other than translation and scaling are not supported.
        */
        get scaleX() { return this.viewState.scaleX; }
        /**
        Provide the CSS transformed scale along the Y axis.
        */
        get scaleY() { return this.viewState.scaleY; }
        /**
        Find the text line or block widget at the given vertical
        position (which is interpreted as relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
        */
        elementAtHeight(height) {
            this.readMeasured();
            return this.viewState.elementAtHeight(height);
        }
        /**
        Find the line block (see
        [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
        height, again interpreted relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
        */
        lineBlockAtHeight(height) {
            this.readMeasured();
            return this.viewState.lineBlockAtHeight(height);
        }
        /**
        Get the extent and vertical position of all [line
        blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
        are relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
        */
        get viewportLineBlocks() {
            return this.viewState.viewportLines;
        }
        /**
        Find the line block around the given document position. A line
        block is a range delimited on both sides by either a
        non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
        start/end of the document. It will usually just hold a line of
        text, but may be broken into multiple textblocks by block
        widgets.
        */
        lineBlockAt(pos) {
            return this.viewState.lineBlockAt(pos);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. In
        bidirectional text, the line is traversed in visual order, using
        the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
        When the start position was the last one on the line, the
        returned position will be across the line break. If there is no
        further line, the original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
        }
        /**
        Get the cursor position visually at the start or end of a line.
        Note that this may differ from the _logical_ position at its
        start or end (which is simply at `line.from`/`line.to`) if text
        at the start or end goes against the line's base text direction.
        */
        visualLineSide(line, end) {
            let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
            let span = order[end ? order.length - 1 : 0];
            return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        
        Note that for positions that aren't currently in
        `visibleRanges`, the resulting DOM position isn't necessarily
        meaningful (it may just point before or after a placeholder
        element).
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
            this.readMeasured();
            return posAtCoords$1(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        Return the rectangle around a given character. If `pos` does not
        point in front of a character that is in the viewport and
        rendered (i.e. not replaced, not a line break), this will return
        null. For space characters that are a line wrap point, this will
        return the position before the line break.
        */
        coordsForChar(pos) {
            this.readMeasured();
            return this.docView.coordsForChar(pos);
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor's content element.
        */
        get textDirection() { return this.viewState.defaultTextDirection; }
        /**
        Find the text direction of the block at the given position, as
        assigned by CSS. If
        [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
        isn't enabled, or the given position is outside of the viewport,
        this will always return the same as
        [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
        this may trigger a DOM layout.
        */
        textDirectionAt(pos) {
            let perLine = this.state.facet(perLineTextDirection);
            if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
                return this.textDirection;
            this.readMeasured();
            return this.docView.textDirectionAt(pos);
        }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirectionAt(line.from), isolates;
            for (let entry of this.bidiCache) {
                if (entry.from == line.from && entry.dir == dir &&
                    (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
                    return entry.order;
            }
            if (!isolates)
                isolates = getIsolatedRanges(this, line);
            let order = computeOrder(line.text, dir, isolates);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            var _a;
            // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.
            return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
                this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll$1(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
        necessary when moving the editor's existing DOM to a new window or shadow root.
        */
        setRoot(root) {
            if (this._root != root) {
                this._root = root;
                this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
                this.mountStyles();
            }
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.plugins = [];
            this.inputState.destroy();
            this.docView.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            this.destroyed = true;
        }
        /**
        Returns an effect that can be
        [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
        cause it to scroll the given position or range into view.
        */
        static scrollIntoView(pos, options = {}) {
            return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
        }
        /**
        Return an effect that resets the editor to its current (at the
        time this method was called) scroll position. Note that this
        only affects the editor's own scrollable element, not parents.
        See also
        [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
        
        The effect should be used with a document identical to the one
        it was created for. Failing to do so is not an error, but may
        not scroll to the expected position. You can
        [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
        */
        scrollSnapshot() {
            let { scrollTop, scrollLeft } = this.scrollDOM;
            let ref = this.viewState.scrollAnchorAt(scrollTop);
            return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
        }
        /**
        Returns an extension that can be used to add DOM event handlers.
        The value should be an object mapping event names to handler
        functions. For any given event, such functions are ordered by
        extension precedence, and the first handler to return true will
        be assumed to have handled that event, and no other handlers or
        built-in behavior will be activated for it. These are registered
        on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
        for `scroll` handlers, which will be called any time the
        editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
        its parent nodes is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create an extension that registers DOM event observers. Contrary
        to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
        observers can't be prevented from running by a higher-precedence
        handler returning true. They also don't prevent other handlers
        and observers from running when they return true, and should not
        call `preventDefault`.
        */
        static domEventObservers(observers) {
            return ViewPlugin.define(() => ({}), { eventObservers: observers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
        /**
        Retrieve an editor view instance from the view's DOM
        representation.
        */
        static findFromDOM(dom) {
            var _a;
            let content = dom.querySelector(".cm-content");
            let cView = content && ContentView.get(content) || ContentView.get(dom);
            return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
        }
    };
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView$1.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.

    The `insert` argument can be used to get the default transaction
    that would be applied for this input. This can be useful when
    dispatching the custom behavior as a separate transaction.
    */
    EditorView$1.inputHandler = inputHandler;
    /**
    Scroll handlers can override how things are scrolled into view.
    If they return `true`, no further handling happens for the
    scrolling. If they return false, the default scroll behavior is
    applied. Scroll handlers should never initiate editor updates.
    */
    EditorView$1.scrollHandler = scrollHandler;
    /**
    This facet can be used to provide functions that create effects
    to be dispatched when the editor's focus state changes.
    */
    EditorView$1.focusChangeEffect = focusChangeEffect;
    /**
    By default, the editor assumes all its content has the same
    [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
    value to make it read the text direction of every (rendered)
    line separately.
    */
    EditorView$1.perLineTextDirection = perLineTextDirection;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView$1.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView$1.updateListener = updateListener;
    /**
    Facet that controls whether the editor content DOM is editable.
    When its highest-precedence value is `false`, the element will
    not have its `contenteditable` attribute set. (Note that this
    doesn't affect API calls that change the editor content, even
    when those are bound to keys or buttons. See the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
    */
    EditorView$1.editable = editable;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView$1.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView$1.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds a
    new range to the existing selection or replaces it entirely. The
    default behavior is to check `event.metaKey` on macOS, and
    `event.ctrlKey` elsewhere.
    */
    EditorView$1.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. Decorations can be provided in two
    ways—directly, or via a function that takes an editor view.

    Only decoration sets provided directly are allowed to influence
    the editor's vertical layout structure. The ones provided as
    functions are called _after_ the new viewport has been computed,
    and thus **must not** introduce block widgets or replacing
    decorations that cover line breaks.

    If you want decorated ranges to behave like atomic units for
    cursor motion and deletion purposes, also provide the range set
    containing the decorations to
    [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
    */
    EditorView$1.decorations = decorations;
    /**
    Facet that works much like
    [`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
    inputs at the very bottom of the precedence stack, meaning mark
    decorations provided here will only be split by other, partially
    overlapping \`outerDecorations\` ranges, and wrap around all
    regular decorations. Use this for mark elements that should, as
    much as possible, remain in one piece.
    */
    EditorView$1.outerDecorations = outerDecorations;
    /**
    Used to provide ranges that should be treated as atoms as far as
    cursor motion is concerned. This causes methods like
    [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
    [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
    commands built on top of them) to skip across such regions when
    a selection endpoint would enter them. This does _not_ prevent
    direct programmatic [selection
    updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
    regions.
    */
    EditorView$1.atomicRanges = atomicRanges;
    /**
    When range decorations add a `unicode-bidi: isolate` style, they
    should also include a
    [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
    in their decoration spec, and be exposed through this facet, so
    that the editor can compute the proper text order. (Other values
    for `unicode-bidi`, except of course `normal`, are not
    supported.)
    */
    EditorView$1.bidiIsolatedRanges = bidiIsolatedRanges;
    /**
    Facet that allows extensions to provide additional scroll
    margins (space around the sides of the scrolling element that
    should be considered invisible). This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    EditorView$1.scrollMargins = scrollMargins;
    /**
    This facet records whether a dark theme is active. The extension
    returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
    includes an instance of this when the `dark` option is set to
    true.
    */
    EditorView$1.darkTheme = darkTheme;
    /**
    Provides a Content Security Policy nonce to use when creating
    the style sheets for the editor. Holds the empty string when no
    nonce has been provided.
    */
    EditorView$1.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : "" });
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView$1.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView$1.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView$1.lineWrapping = /*@__PURE__*/EditorView$1.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView$1.announce = /*@__PURE__*/StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, isolates, fresh, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.isolates = isolates;
            this.fresh = fresh;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty && !cache.some(c => c.fresh))
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
            }
            return result;
        }
    }
    function attrsFromFacet(view, facet, base) {
        for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
            let source = sources[i], value = typeof source == "function" ? source(view) : source;
            if (value)
                combineAttrs(value, base);
        }
        return base;
    }

    const CanHidePrimary = !browser.ios; // FIXME test IE
    const themeSpec = {
        ".cm-line": {
            "& ::selection": { backgroundColor: "transparent !important" },
            "&::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary) {
        themeSpec[".cm-line"].caretColor = "transparent !important";
        themeSpec[".cm-content"] = { caretColor: "transparent !important" };
    }

    function iterMatches(doc, re, from, to, f) {
        re.lastIndex = 0;
        for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
            if (!cursor.lineBreak)
                while (m = re.exec(cursor.value))
                    f(pos + m.index, m);
        }
    }
    function matchRanges(view, maxLength) {
        let visible = view.visibleRanges;
        if (visible.length == 1 && visible[0].from == view.viewport.from &&
            visible[0].to == view.viewport.to)
            return visible;
        let result = [];
        for (let { from, to } of visible) {
            from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
            to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
            if (result.length && result[result.length - 1].to >= from)
                result[result.length - 1].to = to;
            else
                result.push({ from, to });
        }
        return result;
    }
    /**
    Helper class used to make it easier to maintain decorations on
    visible code that matches a given regular expression. To be used
    in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
    represent a matching configuration.
    */
    class MatchDecorator {
        /**
        Create a decorator.
        */
        constructor(config) {
            const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;
            if (!regexp.global)
                throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
            this.regexp = regexp;
            if (decorate) {
                this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
            }
            else if (typeof decoration == "function") {
                this.addMatch = (match, view, from, add) => {
                    let deco = decoration(match, view, from);
                    if (deco)
                        add(from, from + match[0].length, deco);
                };
            }
            else if (decoration) {
                this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);
            }
            else {
                throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
            }
            this.boundary = boundary;
            this.maxLength = maxLength;
        }
        /**
        Compute the full set of decorations for matches in the given
        view's viewport. You'll want to call this when initializing your
        plugin.
        */
        createDeco(view) {
            let build = new RangeSetBuilder(), add = build.add.bind(build);
            for (let { from, to } of matchRanges(view, this.maxLength))
                iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));
            return build.finish();
        }
        /**
        Update a set of decorations for a view update. `deco` _must_ be
        the set of decorations produced by _this_ `MatchDecorator` for
        the view state before the update.
        */
        updateDeco(update, deco) {
            let changeFrom = 1e9, changeTo = -1;
            if (update.docChanged)
                update.changes.iterChanges((_f, _t, from, to) => {
                    if (to > update.view.viewport.from && from < update.view.viewport.to) {
                        changeFrom = Math.min(from, changeFrom);
                        changeTo = Math.max(to, changeTo);
                    }
                });
            if (update.viewportChanged || changeTo - changeFrom > 1000)
                return this.createDeco(update.view);
            if (changeTo > -1)
                return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
            return deco;
        }
        updateRange(view, deco, updateFrom, updateTo) {
            for (let r of view.visibleRanges) {
                let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
                if (to > from) {
                    let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
                    let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
                    if (this.boundary) {
                        for (; from > fromLine.from; from--)
                            if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                                start = from;
                                break;
                            }
                        for (; to < toLine.to; to++)
                            if (this.boundary.test(toLine.text[to - toLine.from])) {
                                end = to;
                                break;
                            }
                    }
                    let ranges = [], m;
                    let add = (from, to, deco) => ranges.push(deco.range(from, to));
                    if (fromLine == toLine) {
                        this.regexp.lastIndex = start - fromLine.from;
                        while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
                            this.addMatch(m, view, m.index + fromLine.from, add);
                    }
                    else {
                        iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));
                    }
                    deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
                }
            }
            return deco;
        }
    }

    class Placeholder extends WidgetType$1 {
        constructor(content) {
            super();
            this.content = content;
        }
        toDOM() {
            let wrap = document.createElement("span");
            wrap.className = "cm-placeholder";
            wrap.style.pointerEvents = "none";
            wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
            if (typeof this.content == "string")
                wrap.setAttribute("aria-label", "placeholder " + this.content);
            else
                wrap.setAttribute("aria-hidden", "true");
            return wrap;
        }
        coordsAt(dom) {
            let rects = dom.firstChild ? clientRectsFor(dom.firstChild) : [];
            if (!rects.length)
                return null;
            let style = window.getComputedStyle(dom.parentNode);
            let rect = flattenRect(rects[0], style.direction != "rtl");
            let lineHeight = parseInt(style.lineHeight);
            if (rect.bottom - rect.top > lineHeight * 1.5)
                return { left: rect.left, right: rect.right, top: rect.top, bottom: rect.top + lineHeight };
            return rect;
        }
        ignoreEvent() { return false; }
    }
    /**
    Extension that enables a placeholder—a piece of example content
    to show when the editor is empty.
    */
    function placeholder(content) {
        return ViewPlugin.fromClass(class {
            constructor(view) {
                this.view = view;
                this.placeholder = content
                    ? Decoration$1.set([Decoration$1.widget({ widget: new Placeholder(content), side: 1 }).range(0)])
                    : Decoration$1.none;
            }
            get decorations() { return this.view.state.doc.length ? Decoration$1.none : this.placeholder; }
        }, { decorations: v => v.decorations });
    }

    /**
    A gutter marker represents a bit of information attached to a line
    in a specific gutter. Your own custom markers have to extend this
    class.
    */
    class GutterMarker extends RangeValue {
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) { return false; }
        /**
        Called if the marker has a `toDOM` method and its representation
        was removed from a gutter.
        */
        destroy(dom) { }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = undefined;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;

    var __defProp$17 = Object.defineProperty;
    var __name$17 = (target, value) => __defProp$17(target, "name", { value, configurable: true });
    const createInput = /* @__PURE__ */ __name$17((element, initialText = "", onChange = false, sections = [], getLabel = (match, items) => items[match] ?? match, config = {}, customPlaceholder = "") => new EditorView$1({
      doc: initialText,
      parent: element,
      extensions: [
        placeholder(customPlaceholder),
        /**
         * Needed to display a string like [[this]] as a span element instead
         *
         * @see DynamicString class below
         * @see https://codemirror.net/examples/decoration/
         */
        ViewPlugin.fromClass(class {
          constructor(view) {
            this.items = getItemsObject(sections);
            this.placeholders = this.matchResults(this.items).createDeco(view);
          }
          update(update) {
            this.placeholders = this.matchResults(this.items).updateDeco(update, this.placeholders);
          }
          matchResults(items) {
            return new MatchDecorator({
              regexp: dynamicValueRegex,
              decoration: (match, view, from) => Decoration$1.replace({
                widget: new DynamicString(
                  match[1],
                  getLabel(match[1], items),
                  /**
                   * For deletions, insert can be omitted
                   * @see https://codemirror.net/examples/change/
                   */
                  () => view.dispatch({
                    changes: {
                      from,
                      to: from + match[1].length + 4
                      // value + delimiters
                    }
                  }),
                  config
                )
              })
            });
          }
        }, {
          decorations: (instance) => instance.placeholders,
          provide: (plugin) => EditorView$1.atomicRanges.of((view) => view.plugin(plugin)?.placeholders || Decoration$1.none)
        }),
        /**
         * onChange callback
         *
         * @see https://discuss.codemirror.net/t/codemirror-6-proper-way-to-listen-for-changes/2395/11
         */
        EditorView$1.updateListener.of((view) => {
          if (config.inputMask) {
            if (view.focusChanged) {
              if (view.state.doc.toString().includes("_")) {
                view.view.dispatch({ changes: { from: 0, to: view.state.doc.length, insert: "" } });
              } else if (view.state.doc.toString().length === 0 && view.view.hasFocus) {
                handleMasking(view, config.inputMask);
              }
            } else if (view.docChanged && view.view.hasFocus) {
              if (handleMasking(view, config.inputMask))
                return;
            }
          }
          if (view.docChanged && onChange)
            onChange(view.state.doc.toString());
        }),
        /**
         * @see https://discuss.codemirror.net/t/changing-the-font-size-of-cm6/2935/6
         */
        EditorView$1.theme({
          ".cm-scroller": {
            fontFamily: "inherit",
            alignItems: "center !important"
          },
          "&.cm-editor.cm-focused": {
            outline: "none"
          }
        }),
        /**
         * Readonly mode
         * @see https://discuss.codemirror.net/t/codemirror-6-readonly-view/2333
         */
        EditorView$1.contentAttributes.of({
          contenteditable: !(config.readOnly ?? false)
        })
      ]
    }), "createInput");
    var processedValue = false;
    const handleMasking = /* @__PURE__ */ __name$17((view, mask) => {
      if (view.state.doc.toString().length === 0) {
        let placeholder2 = "";
        for (const char of mask) {
          placeholder2 += char === "a" || char === "9" || char === "*" ? "_" : char;
        }
        view.view.dispatch({ changes: { from: 0, to: view.state.doc.length, insert: placeholder2 } });
      } else {
        if (view.startState.doc.toString() === "" || processedValue) {
          processedValue = false;
          return false;
        }
        const newValue = view.startState.doc.toString().split("");
        let lastEnd;
        view.changes.iterChanges((fromA, toA, fromB, toB) => {
          const changes = view.state.doc.sliceString(fromB, toB).split("");
          let end = Math.min(Math.max(toA, toB), newValue.length);
          let maskIndex = Math.min(fromA, fromB);
          lastEnd = changes.length > 0 ? end : maskIndex;
          let changeIndex = 0;
          let matchEnd = false;
          while (maskIndex !== end) {
            let maskChar = mask[maskIndex];
            let newChar = changes[changeIndex];
            switch (maskChar) {
              case "a":
                if (newChar && newChar.match(/[a-zA-Z]/)) {
                  newValue[maskIndex] = newChar;
                  changeIndex += 1;
                } else {
                  newValue[maskIndex] = "_";
                  if (!matchEnd) {
                    matchEnd = true;
                    lastEnd = maskIndex;
                  }
                }
                break;
              case "9":
                if (newChar && newChar.match(/[0-9]/)) {
                  newValue[maskIndex] = newChar;
                  changeIndex += 1;
                } else {
                  newValue[maskIndex] = "_";
                  if (!matchEnd) {
                    matchEnd = true;
                    lastEnd = maskIndex;
                  }
                }
                break;
              case "*":
                if (newChar && newChar.match(/[a-zA-Z0-9]/)) {
                  newValue[maskIndex] = newChar;
                  changeIndex += 1;
                } else {
                  newValue[maskIndex] = "_";
                  if (!matchEnd) {
                    matchEnd = true;
                    lastEnd = maskIndex;
                  }
                }
                break;
              default:
                newValue[maskIndex] = maskChar;
                break;
            }
            maskIndex += 1;
          }
        });
        processedValue = true;
        view.view.dispatch({
          changes: { from: 0, to: view.state.doc.length, insert: newValue.join("") },
          selection: { anchor: lastEnd, head: lastEnd }
        });
        return true;
      }
    }, "handleMasking");
    const matchesMask = /* @__PURE__ */ __name$17((text, mask) => {
      if (text.length !== mask.length)
        return false;
      for (let i = 0; i < text.length; i++) {
        let maskChar = mask[i];
        let textChar = text[i];
        switch (maskChar) {
          case "a":
            if (!textChar.match(/[a-zA-Z]/))
              return false;
            break;
          case "9":
            if (!textChar.match(/[0-9]/))
              return false;
            break;
          case "*":
            if (!textChar.match(/[a-zA-Z0-9]/))
              return false;
            break;
          default:
            if (textChar !== maskChar)
              return false;
            break;
        }
      }
      return true;
    }, "matchesMask");
    const getItemsObject = /* @__PURE__ */ __name$17((sections) => {
      if (!Array.isArray(sections))
        return sections;
      return sections.reduce(
        (accumulator, item) => ({
          ...accumulator,
          ...item.choices ?? {}
        }),
        {}
      );
    }, "getItemsObject");
    const _DynamicString = class _DynamicString extends WidgetType$1 {
      constructor(value, label, onRemove, config) {
        super(value);
        this.value = value;
        this.label = label;
        this.onRemove = onRemove;
        this.config = config;
      }
      toDOM() {
        const span = document.createElement("span");
        span.setAttribute("class", "tf-dynamic-text-item");
        span.setAttribute("data-id", this.value);
        span.textContent = this.label;
        if (this.config?.readOnly === true)
          return span;
        const editButton = document.createElement("span");
        editButton.setAttribute("class", "tf-dynamic-text-item-delete");
        editButton.addEventListener("click", this.onRemove);
        span.appendChild(editButton);
        return span;
      }
    };
    __name$17(_DynamicString, "DynamicString");
    let DynamicString = _DynamicString;

    var __defProp$16 = Object.defineProperty;
    var __name$16 = (target, value) => __defProp$16(target, "name", { value, configurable: true });
    const TextInput = wp.element.forwardRef(({
      inputProps,
      ...props
    }, ref) => {
      const editor = wp.element.useRef();
      let initialValue = props.value ?? "";
      if (props.prefix || props.suffix) {
        if (props.prefix && !initialValue.startsWith(props.prefix))
          initialValue = props.prefix + initialValue;
        if (props.suffix && !initialValue.endsWith(props.suffix))
          initialValue = initialValue + props.suffix;
      }
      if (props.inputMask) {
        const start = props.prefix ? props.prefix.length : 0;
        const end = props.suffix ? initialValue.length - props.suffix.length : initialValue.length;
        initialValue = matchesMask(initialValue.slice(start, end), props.inputMask) ? initialValue : "";
      }
      const [value, setValue] = wp.element.useState(initialValue);
      wp.element.useEffect(() => {
        let editorValue = value;
        if (props.prefix)
          editorValue = editorValue.slice(props.prefix.length);
        if (props.suffix)
          editorValue = editorValue.slice(0, editorValue.length - props.suffix.length);
        editor.current = editor.current ?? createInput(
          ref.current,
          editorValue,
          (value2) => {
            setValue(`${props.prefix ?? ""}${value2}${props.suffix ?? ""}`);
          },
          props.choices,
          getDynamicValueLabel,
          {
            readOnly: props.readOnly ?? false,
            inputMask: props.inputMask && props.inputMask !== "" ? props.inputMask : null
          },
          props.placeholder ?? ""
        );
      }, [ref.current]);
      wp.element.useEffect(() => {
        if (props.suffix) {
          const suffix = document.createElement("span");
          suffix.textContent = props.suffix;
          suffix.setAttribute("class", "tf-dynamic-text-input__affix tf-dynamic-text-input__affix--suffix");
          ref.current.appendChild(suffix);
        }
        if (props.prefix) {
          const prefix = document.createElement("span");
          prefix.textContent = props.prefix;
          prefix.setAttribute("class", "tf-dynamic-text-input__affix tf-dynamic-text-input__affix--prefix");
          ref.current.insertBefore(prefix, ref.current.children[0]);
        }
      }, []);
      const getDynamicValueLabel = /* @__PURE__ */ __name$16((string) => {
        const value2 = props.dynamic.parse(string);
        return value2 && value2.type ? props.dynamic.getLabel(value2.type) : string;
      }, "getDynamicValueLabel");
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      const insertDynamicValue = /* @__PURE__ */ __name$16((value2) => {
        editor.current.dispatch({
          changes: {
            from: editor.current.state.doc.length,
            insert: `${value2}`
          }
        });
      }, "insertDynamicValue");
      if (!props.inputMask && props.dynamic && props.dynamic.getMode() === "replace") {
        return /* @__PURE__ */ wp.element.createElement(
          FieldWrapper,
          {
            ...props,
            config: props.dynamic ?? "",
            value,
            onValueSelection: setValue,
            onValueRemove: () => {
              editor.current = null;
              setValue("");
            },
            inputProps,
            readOnly: props.readOnly ?? false,
            buttonType: "inside"
          },
          /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, type: "hidden", value }),
          /* @__PURE__ */ wp.element.createElement(
            "div",
            {
              ref,
              className: `tf-dynamic-text-input${props.prefix ? " tf-dynamic-text-input--has-prefix" : ""}${props.suffix ? " tf-dynamic-text-input--has-suffix" : ""}`
            }
          )
        );
      }
      return /* @__PURE__ */ wp.element.createElement(
        BaseWrapper,
        {
          config: props.dynamic ?? "",
          onValueSelection: insertDynamicValue,
          buttonType: "inside",
          readOnly: props.readOnly ?? false,
          inputMasking: props.inputMask
        },
        /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, type: "hidden", value }),
        /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            ref,
            className: `tf-dynamic-text-input${props.prefix ? " tf-dynamic-text-input--has-prefix" : ""}${props.suffix ? " tf-dynamic-text-input--has-suffix" : ""}`
          }
        )
      );
    });

    var __defProp$15 = Object.defineProperty;
    var __name$15 = (target, value) => __defProp$15(target, "name", { value, configurable: true });
    const NumberComponent = /* @__PURE__ */ __name$15((props) => {
      const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
      const [value, setValue] = wp.element.useState(props.value ?? "");
      const state = $de67e98908f0c6ee$export$7f629e9dc1ecf37c({ ...props, locale });
      const inputRef = wp.element.useRef();
      const {
        labelProps,
        descriptionProps,
        groupProps,
        inputProps,
        incrementButtonProps,
        decrementButtonProps
      } = $81397a9303501bda$export$23f548e970bdf099(props, state, inputRef);
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      const hasButtons = props.hasButtons ?? true;
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-number" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-number-field", ...groupProps }, /* @__PURE__ */ wp.element.createElement(
        FieldWrapper,
        {
          ...props,
          value,
          onValueSelection: setValue,
          ref: inputRef,
          inputProps
        },
        /* @__PURE__ */ wp.element.createElement(
          "input",
          {
            ...inputProps,
            value: Number.isInteger(state.numberValue) ? state.numberValue : 0,
            ref: inputRef,
            name: props.name ?? ""
          }
        ),
        hasButtons && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-number-button-group" }, /* @__PURE__ */ wp.element.createElement(Button, { type: "number", ...incrementButtonProps }, "+"), /* @__PURE__ */ wp.element.createElement(Button, { type: "number", ...decrementButtonProps }, "-"))
      )), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "NumberComponent");

    var __defProp$14 = Object.defineProperty;
    var __name$14 = (target, value) => __defProp$14(target, "name", { value, configurable: true });
    const Select$1 = /* @__PURE__ */ __name$14((props) => {
      const state = $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props);
      const ref = wp.element.useRef();
      const listRef = wp.element.useRef();
      const wrapperRef = wp.element.useRef();
      const {
        labelProps,
        descriptionProps,
        triggerProps,
        valueProps,
        menuProps
      } = $58aed456727eb0f3$export$e64b2f635402ca43(props, state, ref);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-select", ref: wrapperRef }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement(
        $bdd25dc72710631f$export$cbd84cdb2e668835,
        {
          state,
          triggerRef: ref,
          label: props.label,
          name: props.name
        }
      ), /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "select",
          ...triggerProps,
          ref,
          onKeyDown: (e) => e.code === "Space" ? state.toggle() : triggerProps.onKeyDown(e)
        },
        /* @__PURE__ */ wp.element.createElement("span", { ...valueProps, className: "tf-select__value" }, state.selectedItem ? state.selectedItem.rendered : props.placeholder ?? "Select an option"),
        /* @__PURE__ */ wp.element.createElement("span", { "aria-hidden": "true", className: "tf-select-icon" }, "\u25BC")
      ), state.isOpen && /* @__PURE__ */ wp.element.createElement(
        Popover,
        {
          state,
          triggerRef: ref,
          placement: "bottom start",
          style: { width: wrapperRef?.current?.offsetWidth }
        },
        /* @__PURE__ */ wp.element.createElement(
          ListBox,
          {
            ...menuProps,
            listBoxRef: listRef,
            state,
            items: props.items
          }
        )
      ), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Select");

    var __defProp$13 = Object.defineProperty;
    var __name$13 = (target, value) => __defProp$13(target, "name", { value, configurable: true });
    const Dimensions$1 = /* @__PURE__ */ __name$13((props) => {
      const units = props.units ?? ["px"];
      const showToggle = props.linked === "toggle" || props.linked === void 0;
      const {
        labelProps,
        fieldProps,
        // Not sure where to use this one
        descriptionProps
      } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      const [value, setValue] = wp.element.useState(
        initJSON(
          props.value ?? "",
          {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            unit: units[0],
            isLinked: false
          }
        )
      );
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      wp.element.useEffect(() => {
        value.isLinked && setLinkedPosition(value.top);
      }, [value.isLinked]);
      const setAttribute = /* @__PURE__ */ __name$13((number, position) => {
        setValue({
          ...value,
          [position]: number
        });
      }, "setAttribute");
      const setLinkedPosition = /* @__PURE__ */ __name$13((number) => {
        setValue({
          ...value,
          top: number,
          left: number,
          right: number,
          bottom: number
        });
      }, "setLinkedPosition");
      const setIsLinked = /* @__PURE__ */ __name$13((state) => {
        setValue({
          ...value,
          isLinked: state
        });
      }, "setIsLinked");
      const isLinked = /* @__PURE__ */ __name$13(() => showToggle ? value.isLinked ?? false : props.linked, "isLinked");
      let groupClasses = "tf-dimensions-number-groups";
      if (isLinked())
        groupClasses += " tf-dimensions-number-groups-linked";
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dimensions" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: JSON.stringify(value), ...fieldProps }), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dimensions-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: groupClasses }, ["top", "left", "right", "bottom"].map((position) => /* @__PURE__ */ wp.element.createElement(
        NumberComponent,
        {
          key: position,
          value: value[position] ?? 0,
          name: position,
          description: false,
          label: `Value for ${position} position`,
          labelVisuallyHidden: true,
          onChange: (number) => isLinked() ? setLinkedPosition(number) : setAttribute(number, position)
        }
      ))), /* @__PURE__ */ wp.element.createElement(
        Select$1,
        {
          label: `Dimensions unit`,
          labelVisuallyHidden: true,
          description: false,
          selectedKey: value.unit ?? "px",
          onSelectionChange: (unit) => setAttribute(unit, "unit"),
          placeholder: "unit"
        },
        units.map((unit) => /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: unit }, unit))
      ), showToggle && /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: () => setIsLinked(!value.isLinked) }, /* @__PURE__ */ wp.element.createElement("span", { className: "dashicons dashicons-admin-links" }))), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Dimensions");

    var __defProp$12 = Object.defineProperty;
    var __name$12 = (target, value) => __defProp$12(target, "name", { value, configurable: true });
    const Border = /* @__PURE__ */ __name$12((props) => {
      const units = props.units ?? ["px"];
      const format = props.format ?? "hex";
      const {
        labelProps,
        fieldProps,
        descriptionProps
      } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      const [value, setValue] = wp.element.useState(
        initJSON(props.value ?? "", {
          dimensions: {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            unit: units[0],
            isLinked: false
          },
          color: "rgba(0,0,0,1)"
        })
      );
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      const handleData = /* @__PURE__ */ __name$12((value2) => {
        if (typeof value2 === "string") {
          setValue((prevState) => ({
            ...prevState,
            color: value2
          }));
        } else {
          setValue((prevState) => ({
            ...prevState,
            dimensions: {
              ...prevState.dimensions,
              ...value2
            }
          }));
        }
      }, "handleData");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-border" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: JSON.stringify(value), ...fieldProps }), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-border-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-border-dimensions-container" }, /* @__PURE__ */ wp.element.createElement(
        Dimensions$1,
        {
          label: "Border dimensions",
          labelVisuallyHidden: true,
          onChange: handleData,
          linked: props.linked,
          units,
          value: value.dimensions
        }
      )), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-border-color-picker-container" }, /* @__PURE__ */ wp.element.createElement(
        Color,
        {
          label: "Border Color",
          labelVisuallyHidden: true,
          onChange: handleData,
          value: value.color,
          format,
          hasAlpha: props.hasAlpha ?? true
        }
      ))), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Border");

    var __defProp$11 = Object.defineProperty;
    var __name$11 = (target, value) => __defProp$11(target, "name", { value, configurable: true });
    const ButtonOption = /* @__PURE__ */ __name$11((props) => {
      const state = wp.element.useContext(props.context);
      const ref = wp.element.useRef(null);
      const { inputProps } = $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref);
      let classes = "tf-button-group-option";
      if (state.selectedValue === props.value) {
        classes += " tf-button-group-option-selected";
      }
      return /* @__PURE__ */ wp.element.createElement("label", { className: classes }, /* @__PURE__ */ wp.element.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, ref })), props.children);
    }, "ButtonOption");

    var __defProp$10 = Object.defineProperty;
    var __name$10 = (target, value) => __defProp$10(target, "name", { value, configurable: true });
    const ButtonGroupContext = wp.element.createContext(null);
    const ButtonGroup = /* @__PURE__ */ __name$10((props) => {
      const state = $a54cdc5c1942b639$export$bca9d026f8e704eb(props);
      const options = getOptions(props.choices ?? {});
      const {
        radioGroupProps,
        labelProps,
        descriptionProps
      } = $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state);
      wp.element.useEffect(() => {
        props.onChange && props.onChange(state.selectedValue);
      }, [state.selectedValue]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-button-group" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-button-group-container", ...radioGroupProps }, /* @__PURE__ */ wp.element.createElement(ButtonGroupContext.Provider, { value: state }, options.map((option) => /* @__PURE__ */ wp.element.createElement(ButtonOption, { key: option.value, context: ButtonGroupContext, ...option }, props.use_dashicon ? /* @__PURE__ */ wp.element.createElement("span", { className: `dashicons dashicons-${option.label}` }) : option.label)))), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "ButtonGroup");

    var __defProp$$ = Object.defineProperty;
    var __name$$ = (target, value) => __defProp$$(target, "name", { value, configurable: true });
    const Checkbox = /* @__PURE__ */ __name$$((props) => {
      const state = $3017fa7ffdddec74$export$8042c6c013fd5226(props);
      const ref = wp.element.useRef();
      const { inputProps } = $406796ff087fe49b$export$e375f10ce42261c5({
        ...props,
        children: props.label ?? false
      }, state, ref);
      const {
        labelProps,
        descriptionProps
      } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      wp.element.useEffect(() => props.onChange && props.onChange(state.isSelected), [state.isSelected]);
      wp.element.useEffect(() => {
        if (props.value === "1")
          state.setSelected(true);
        if (typeof props.value === "boolean" && props.value !== state.isSelected) {
          state.setSelected(props.value);
        }
      }, [props.value]);
      const LabelWrapper = props?.labelVisuallyHidden ? $5c3e21d68f1c4674$export$439d29a4e110a164 : wp.element.Fragment;
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-checkbox" }, /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: { ...props, labelVisuallyHidden: false } }, /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, ref }), /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: state.isSelected ? "1" : "0" }), /* @__PURE__ */ wp.element.createElement(LabelWrapper, null, props.label ?? "")), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Checkbox");

    var $eccab2b0118aef08$exports = {};
    $eccab2b0118aef08$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `\u{623}\u{62F}\u{627}\u{629} \u{627}\u{646}\u{62A}\u{642}\u{627}\u{621} \u{627}\u{644}\u{644}\u{648}\u{646}`,
        "colorSwatch": `\u{62A}\u{63A}\u{64A}\u{64A}\u{631} \u{627}\u{644}\u{623}\u{644}\u{648}\u{627}\u{646}`,
        "transparent": `\u{634}\u{641}\u{627}\u{641}`,
        "twoDimensionalSlider": `\u{645}\u{64F}\u{646}\u{632}\u{644}\u{642} 2D`
    };

    var $bf2b4507594e3d45$exports = {};
    $bf2b4507594e3d45$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `\u{421}\u{440}\u{435}\u{434}\u{441}\u{442}\u{432}\u{43E} \u{437}\u{430} \u{438}\u{437}\u{431}\u{438}\u{440}\u{430}\u{43D}\u{435} \u{43D}\u{430} \u{446}\u{432}\u{44F}\u{442}`,
        "colorSwatch": `\u{446}\u{432}\u{435}\u{442}\u{43D}\u{430} \u{43C}\u{43E}\u{441}\u{442}\u{440}\u{430}`,
        "transparent": `\u{43F}\u{440}\u{43E}\u{437}\u{440}\u{430}\u{447}\u{435}\u{43D}`,
        "twoDimensionalSlider": `2D \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{447}`
    };

    var $01c08487af7ecd14$exports = {};
    $01c08487af7ecd14$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `V\xfdb\u{11B}r barvy`,
        "colorSwatch": `barevn\xfd vzorek`,
        "transparent": `pr\u{16F}hledn\xfd`,
        "twoDimensionalSlider": `2D posuvn\xedk`
    };

    var $5e997db6ea0d10f6$exports = {};
    $5e997db6ea0d10f6$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Farvev\xe6lger`,
        "colorSwatch": `farvepr\xf8ve`,
        "transparent": `gennemsigtig`,
        "twoDimensionalSlider": `2D-skyder`
    };

    var $fe5998f640a79fd2$exports = {};
    $fe5998f640a79fd2$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Farbw\xe4hler`,
        "colorSwatch": `Farbfeld`,
        "transparent": `transparent`,
        "twoDimensionalSlider": `2D-Schieberegler`
    };

    var $18e4d1d5b500a9ee$exports = {};
    $18e4d1d5b500a9ee$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AD}\u{3B1}\u{3C2} \u{3C7}\u{3C1}\u{3C9}\u{3BC}\u{3AC}\u{3C4}\u{3C9}\u{3BD}`,
        "colorSwatch": `\u{3C7}\u{3C1}\u{3C9}\u{3BC}\u{3B1}\u{3C4}\u{3B9}\u{3BA}\u{3CC} \u{3B4}\u{3B5}\u{3AF}\u{3B3}\u{3BC}\u{3B1}`,
        "transparent": `\u{3B4}\u{3B9}\u{3B1}\u{3C6}\u{3B1}\u{3BD}\u{3AD}\u{3C2}`,
        "twoDimensionalSlider": `\u{3A1}\u{3C5}\u{3B8}\u{3BC}\u{3B9}\u{3C3}\u{3C4}\u{3B9}\u{3BA}\u{3CC} 2D`
    };

    var $bf90a11a7a42a0f7$exports = {};
    $bf90a11a7a42a0f7$exports = {
        "colorPicker": `Color picker`,
        "twoDimensionalSlider": `2D slider`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorSwatch": `color swatch`,
        "transparent": `transparent`
    };

    var $dd0d25f885b5c5f3$exports = {};
    $dd0d25f885b5c5f3$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Selector de color`,
        "colorSwatch": `muestra de color`,
        "transparent": `transparente`,
        "twoDimensionalSlider": `Regulador 2D`
    };

    var $d950967017e3485b$exports = {};
    $d950967017e3485b$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `V\xe4rvivalija`,
        "colorSwatch": `v\xe4rvin\xe4idis`,
        "transparent": `l\xe4bipaistev`,
        "twoDimensionalSlider": `2D-liugur`
    };

    var $00a415a3f0ab315a$exports = {};
    $00a415a3f0ab315a$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `V\xe4rimuokkain`,
        "colorSwatch": `v\xe4rimalli`,
        "transparent": `l\xe4pin\xe4kyv\xe4`,
        "twoDimensionalSlider": `2D-liukus\xe4\xe4din`
    };

    var $d80f30fe86c95741$exports = {};
    $d80f30fe86c95741$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}\xa0: ${args.value}`,
        "colorPicker": `S\xe9lecteur de couleurs`,
        "colorSwatch": `\xc9chantillon de couleurs`,
        "transparent": `Transparent`,
        "twoDimensionalSlider": `Curseur\xa02D`
    };

    var $6912afb584340a2e$exports = {};
    $6912afb584340a2e$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `\u{5D1}\u{5D5}\u{5D7}\u{5E8} \u{5D4}\u{5E6}\u{5D1}\u{5E2}\u{5D9}\u{5DD}`,
        "colorSwatch": `\u{5D3}\u{5D5}\u{5D2}\u{5DE}\u{5D9}\u{5EA} \u{5E6}\u{5D1}\u{5E2}`,
        "transparent": `\u{5E9}\u{5E7}\u{5D5}\u{5E3}`,
        "twoDimensionalSlider": `\u{5DE}\u{5D7}\u{5D5}\u{5D5}\u{5DF} \u{5D3}\u{5D5} \u{5DE}\u{5D9}\u{5DE}\u{5D3}\u{5D9}`
    };

    var $7b97fcacd84ec90f$exports = {};
    $7b97fcacd84ec90f$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Odabir boje`,
        "colorSwatch": `uzorak boje`,
        "transparent": `transparentno`,
        "twoDimensionalSlider": `2D kliza\u{10D}`
    };

    var $da9b443e89eebc6b$exports = {};
    $da9b443e89eebc6b$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Sz\xednv\xe1laszt\xf3`,
        "colorSwatch": `sz\xednt\xe1r`,
        "transparent": `\xe1tl\xe1tsz\xf3`,
        "twoDimensionalSlider": `2D-cs\xfaszka`
    };

    var $35f135b45eb4d95b$exports = {};
    $35f135b45eb4d95b$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Selettore colore`,
        "colorSwatch": `campione di colore`,
        "transparent": `trasparente`,
        "twoDimensionalSlider": `Cursore 2D`
    };

    var $760b09448e39c6cd$exports = {};
    $760b09448e39c6cd$exports = {
        "colorInputLabel": (args)=>`${args.label}\u{3001}${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name} : ${args.value}`,
        "colorPicker": `\u{30AB}\u{30E9}\u{30FC}\u{30D4}\u{30C3}\u{30AB}\u{30FC}`,
        "colorSwatch": `\u{30AB}\u{30E9}\u{30FC}\u{30B9}\u{30A6}\u{30A9}\u{30C3}\u{30C1}`,
        "transparent": `\u{900F}\u{660E}`,
        "twoDimensionalSlider": `2D \u{30B9}\u{30E9}\u{30A4}\u{30C0}\u{30FC}`
    };

    var $fc7b7d43be9703ec$exports = {};
    $fc7b7d43be9703ec$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `\u{C0C9}\u{C0C1} \u{D53C}\u{CEE4}`,
        "colorSwatch": `\u{C0C9}\u{C0C1} \u{ACAC}\u{BCF8}`,
        "transparent": `\u{D22C}\u{BA85}\u{B3C4}`,
        "twoDimensionalSlider": `2D \u{C2AC}\u{B77C}\u{C774}\u{B354}`
    };

    var $74918a1664156912$exports = {};
    $74918a1664156912$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Spalv\u{173} parinkiklis`,
        "colorSwatch": `spalv\u{173} pavyzdys`,
        "transparent": `skaidrus`,
        "twoDimensionalSlider": `2D slankiklis`
    };

    var $4e6cde11c2bc9840$exports = {};
    $4e6cde11c2bc9840$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Kr\u{101}su atlas\u{12B}t\u{101}js`,
        "colorSwatch": `kr\u{101}su paraugs`,
        "transparent": `caursp\u{12B}d\u{12B}gs`,
        "twoDimensionalSlider": `2D sl\u{12B}dnis`
    };

    var $6faa3defebc3eb72$exports = {};
    $6faa3defebc3eb72$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Fargevelger`,
        "colorSwatch": `fargekart`,
        "transparent": `gjennomsiktig`,
        "twoDimensionalSlider": `2D-glidebryter`
    };

    var $6ac9b6b1b7e3ca12$exports = {};
    $6ac9b6b1b7e3ca12$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Kleurkiezer`,
        "colorSwatch": `kleurstaal`,
        "transparent": `transparant`,
        "twoDimensionalSlider": `2D-schuifregelaar`
    };

    var $1be8b0ee8841f1e7$exports = {};
    $1be8b0ee8841f1e7$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Pr\xf3bnik kolor\xf3w`,
        "colorSwatch": `pr\xf3bka koloru`,
        "transparent": `przezroczysty`,
        "twoDimensionalSlider": `Suwak 2D`
    };

    var $f9507c2d404ed689$exports = {};
    $f9507c2d404ed689$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Seletor de cores`,
        "colorSwatch": `amostra de cores`,
        "transparent": `transparente`,
        "twoDimensionalSlider": `Controle deslizante 2D`
    };

    var $8f872ea59c02d67e$exports = {};
    $8f872ea59c02d67e$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Seletor de cores`,
        "colorSwatch": `amostra de cor`,
        "transparent": `transparente`,
        "twoDimensionalSlider": `Controle deslizante 2D`
    };

    var $b03b45b62a7ccae4$exports = {};
    $b03b45b62a7ccae4$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Selector de culori`,
        "colorSwatch": `specimen de culoare`,
        "transparent": `transparent`,
        "twoDimensionalSlider": `Glisor 2D`
    };

    var $f1107d94c09df9b8$exports = {};
    $f1107d94c09df9b8$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `\u{41F}\u{430}\u{43B}\u{438}\u{442}\u{440}\u{430} \u{446}\u{432}\u{435}\u{442}\u{43E}\u{432}`,
        "colorSwatch": `\u{446}\u{432}\u{435}\u{442}\u{43E}\u{432}\u{43E}\u{439} \u{43E}\u{431}\u{440}\u{430}\u{437}\u{435}\u{446}`,
        "transparent": `\u{43F}\u{440}\u{43E}\u{437}\u{440}\u{430}\u{447}\u{43D}\u{44B}\u{439}`,
        "twoDimensionalSlider": `\u{41F}\u{43E}\u{43B}\u{437}\u{443}\u{43D}\u{43E}\u{43A} 2D`
    };

    var $b61325f242fafc7c$exports = {};
    $b61325f242fafc7c$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `V\xfdber farieb`,
        "colorSwatch": `vzorkovn\xedk farieb`,
        "transparent": `transparentn\xfd`,
        "twoDimensionalSlider": `2D jazdec`
    };

    var $f44b7cf39ac8f315$exports = {};
    $f44b7cf39ac8f315$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Izbirnik barv`,
        "colorSwatch": `barvna paleta`,
        "transparent": `prozorno`,
        "twoDimensionalSlider": `2D drsnik`
    };

    var $aa8cd83fc8d4982b$exports = {};
    $aa8cd83fc8d4982b$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Bira\u{10D} boja`,
        "colorSwatch": `Uzorak boje`,
        "transparent": `providno`,
        "twoDimensionalSlider": `2D kliza\u{10D}`
    };

    var $7c4f4e5bb7c06f1e$exports = {};
    $7c4f4e5bb7c06f1e$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `F\xe4rgv\xe4ljaren`,
        "colorSwatch": `f\xe4rgruta`,
        "transparent": `genomskinlig`,
        "twoDimensionalSlider": `2D-reglage`
    };

    var $8045cf930ef745aa$exports = {};
    $8045cf930ef745aa$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `Renk Se\xe7ici`,
        "colorSwatch": `renk \xf6rne\u{11F}i`,
        "transparent": `saydam`,
        "twoDimensionalSlider": `2D s\xfcrg\xfc`
    };

    var $ee2044a77f24b118$exports = {};
    $ee2044a77f24b118$exports = {
        "colorInputLabel": (args)=>`${args.label}, ${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}: ${args.value}`,
        "colorPicker": `\u{41F}\u{430}\u{43B}\u{456}\u{442}\u{440}\u{430} \u{43A}\u{43E}\u{43B}\u{44C}\u{43E}\u{440}\u{456}\u{432}`,
        "colorSwatch": `\u{437}\u{440}\u{430}\u{437}\u{43E}\u{43A} \u{43A}\u{43E}\u{43B}\u{44C}\u{43E}\u{440}\u{443}`,
        "transparent": `\u{43F}\u{440}\u{43E}\u{437}\u{43E}\u{440}\u{438}\u{439}`,
        "twoDimensionalSlider": `\u{41F}\u{43E}\u{432}\u{437}\u{443}\u{43D}\u{43E}\u{43A} 2D`
    };

    var $4e1dbc65a687dd93$exports = {};
    $4e1dbc65a687dd93$exports = {
        "colorInputLabel": (args)=>`${args.label}\u{3001}${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}\u{FF1A}${args.value}`,
        "colorPicker": `\u{62FE}\u{8272}\u{5668}`,
        "colorSwatch": `\u{989C}\u{8272}\u{8272}\u{677F}`,
        "transparent": `\u{900F}\u{660E}`,
        "twoDimensionalSlider": `2D \u{6ED1}\u{5757}`
    };

    var $b0fef28529309aa6$exports = {};
    $b0fef28529309aa6$exports = {
        "colorInputLabel": (args)=>`${args.label}\u{FF0C}${args.channelLabel}`,
        "colorNameAndValue": (args)=>`${args.name}\u{FF1A}${args.value}`,
        "colorPicker": `\u{6AA2}\u{8272}\u{5668}`,
        "colorSwatch": `\u{8272}\u{7968}`,
        "transparent": `\u{900F}\u{660E}`,
        "twoDimensionalSlider": `2D \u{6ED1}\u{687F}`
    };

    var $3493a52097159720$exports = {};


































    $3493a52097159720$exports = {
        "ar-AE": $eccab2b0118aef08$exports,
        "bg-BG": $bf2b4507594e3d45$exports,
        "cs-CZ": $01c08487af7ecd14$exports,
        "da-DK": $5e997db6ea0d10f6$exports,
        "de-DE": $fe5998f640a79fd2$exports,
        "el-GR": $18e4d1d5b500a9ee$exports,
        "en-US": $bf90a11a7a42a0f7$exports,
        "es-ES": $dd0d25f885b5c5f3$exports,
        "et-EE": $d950967017e3485b$exports,
        "fi-FI": $00a415a3f0ab315a$exports,
        "fr-FR": $d80f30fe86c95741$exports,
        "he-IL": $6912afb584340a2e$exports,
        "hr-HR": $7b97fcacd84ec90f$exports,
        "hu-HU": $da9b443e89eebc6b$exports,
        "it-IT": $35f135b45eb4d95b$exports,
        "ja-JP": $760b09448e39c6cd$exports,
        "ko-KR": $fc7b7d43be9703ec$exports,
        "lt-LT": $74918a1664156912$exports,
        "lv-LV": $4e6cde11c2bc9840$exports,
        "nb-NO": $6faa3defebc3eb72$exports,
        "nl-NL": $6ac9b6b1b7e3ca12$exports,
        "pl-PL": $1be8b0ee8841f1e7$exports,
        "pt-BR": $f9507c2d404ed689$exports,
        "pt-PT": $8f872ea59c02d67e$exports,
        "ro-RO": $b03b45b62a7ccae4$exports,
        "ru-RU": $f1107d94c09df9b8$exports,
        "sk-SK": $b61325f242fafc7c$exports,
        "sl-SI": $f44b7cf39ac8f315$exports,
        "sr-SP": $aa8cd83fc8d4982b$exports,
        "sv-SE": $7c4f4e5bb7c06f1e$exports,
        "tr-TR": $8045cf930ef745aa$exports,
        "uk-UA": $ee2044a77f24b118$exports,
        "zh-CN": $4e1dbc65a687dd93$exports,
        "zh-TW": $b0fef28529309aa6$exports
    };

    var $2d805fd52bb48883$exports = {};
    $2d805fd52bb48883$exports = {
        "alpha": `\u{623}\u{644}\u{641}\u{627}`,
        "black": `\u{623}\u{633}\u{648}\u{62F}`,
        "blue": `\u{623}\u{632}\u{631}\u{642}`,
        "blue purple": `\u{623}\u{631}\u{62C}\u{648}\u{627}\u{646}\u{64A} \u{645}\u{632}\u{631}\u{642}`,
        "brightness": `\u{627}\u{644}\u{633}\u{637}\u{648}\u{639}`,
        "brown": `\u{628}\u{646}\u{64A}`,
        "brown yellow": `\u{623}\u{635}\u{641}\u{631} \u{628}\u{646}\u{64A}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{633}\u{645}\u{627}\u{648}\u{64A}`,
        "cyan blue": `\u{623}\u{632}\u{631}\u{642} \u{633}\u{645}\u{627}\u{648}\u{64A}`,
        "dark": `\u{62F}\u{627}\u{643}\u{646}`,
        "gray": `\u{631}\u{645}\u{627}\u{62F}\u{64A}`,
        "grayish": `\u{645}\u{627}\u{626}\u{644} \u{644}\u{644}\u{631}\u{645}\u{627}\u{62F}\u{64A}`,
        "green": `\u{623}\u{62E}\u{636}\u{631}`,
        "green cyan": `\u{633}\u{645}\u{627}\u{648}\u{64A} \u{645}\u{62E}\u{636}\u{631}`,
        "hue": `\u{62F}\u{631}\u{62C}\u{629} \u{627}\u{644}\u{644}\u{648}\u{646}`,
        "light": `\u{641}\u{627}\u{62A}\u{62D}`,
        "lightness": `\u{627}\u{644}\u{625}\u{636}\u{627}\u{621}\u{629}`,
        "magenta": `\u{623}\u{631}\u{62C}\u{648}\u{627}\u{646}\u{64A}`,
        "magenta pink": `\u{623}\u{631}\u{62C}\u{648}\u{627}\u{646}\u{64A} \u{648}\u{631}\u{62F}\u{64A}`,
        "orange": `\u{628}\u{631}\u{62A}\u{642}\u{627}\u{644}\u{64A}`,
        "orange yellow": `\u{623}\u{635}\u{641}\u{631} \u{628}\u{631}\u{62A}\u{642}\u{627}\u{644}\u{64A}`,
        "pale": `\u{628}\u{627}\u{647}\u{62A}`,
        "pink": `\u{648}\u{631}\u{62F}\u{64A}`,
        "pink red": `\u{623}\u{62D}\u{645}\u{631} \u{648}\u{631}\u{62F}\u{64A}`,
        "purple": `\u{623}\u{631}\u{62C}\u{648}\u{627}\u{646}\u{64A}`,
        "purple magenta": `\u{628}\u{646}\u{641}\u{633}\u{62C}\u{64A}`,
        "red": `\u{623}\u{62D}\u{645}\u{631}`,
        "red orange": `\u{628}\u{631}\u{62A}\u{642}\u{627}\u{644}\u{64A} \u{645}\u{62D}\u{645}\u{631}`,
        "saturation": `\u{627}\u{644}\u{62A}\u{634}\u{628}\u{639}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \u{634}\u{641}\u{627}\u{641}`,
        "very dark": `\u{62F}\u{627}\u{643}\u{646} \u{62C}\u{62F}\u{64B}\u{627}`,
        "very light": `\u{641}\u{627}\u{62A}\u{62D} \u{62C}\u{62F}\u{64B}\u{627}`,
        "vibrant": `\u{633}\u{627}\u{637}\u{639}`,
        "white": `\u{623}\u{628}\u{64A}\u{636}`,
        "yellow": `\u{623}\u{635}\u{641}\u{631}`,
        "yellow green": `\u{623}\u{62E}\u{636}\u{631} \u{645}\u{635}\u{641}\u{631}`
    };

    var $6c28468dc1df643c$exports = {};
    $6c28468dc1df643c$exports = {
        "alpha": `\u{410}\u{43B}\u{444}\u{430}`,
        "black": `\u{447}\u{435}\u{440}\u{43D}\u{43E}`,
        "blue": `\u{421}\u{438}\u{43D}\u{44C}\u{43E}`,
        "blue purple": `\u{441}\u{438}\u{43D}\u{44C}\u{43E} \u{43B}\u{438}\u{43B}\u{430}\u{432}\u{43E}`,
        "brightness": `\u{42F}\u{440}\u{43A}\u{43E}\u{441}\u{442}`,
        "brown": `\u{43A}\u{430}\u{444}\u{44F}\u{432}\u{43E}`,
        "brown yellow": `\u{43A}\u{430}\u{444}\u{44F}\u{432}\u{43E} \u{436}\u{44A}\u{43B}\u{442}\u{43E}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{446}\u{438}\u{430}\u{43D}`,
        "cyan blue": `\u{446}\u{438}\u{430}\u{43D} \u{441}\u{438}\u{43D}\u{44C}\u{43E}`,
        "dark": `\u{442}\u{44A}\u{43C}\u{43D}\u{43E}`,
        "gray": `\u{441}\u{438}\u{432}\u{43E}`,
        "grayish": `\u{441}\u{438}\u{432}\u{43A}\u{430}\u{432}`,
        "green": `\u{417}\u{435}\u{43B}\u{435}\u{43D}\u{43E}`,
        "green cyan": `\u{437}\u{435}\u{43B}\u{435}\u{43D} \u{446}\u{438}\u{430}\u{43D}`,
        "hue": `\u{41E}\u{442}\u{442}\u{435}\u{43D}\u{44A}\u{43A}`,
        "light": `\u{441}\u{432}\u{435}\u{442}\u{43B}\u{43E}`,
        "lightness": `\u{41B}\u{435}\u{43A}\u{43E}\u{442}\u{430}`,
        "magenta": `\u{43C}\u{430}\u{433}\u{435}\u{43D}\u{442}\u{430}`,
        "magenta pink": `\u{43C}\u{430}\u{433}\u{435}\u{43D}\u{442}\u{430} \u{440}\u{43E}\u{437}\u{43E}\u{432}\u{43E}`,
        "orange": `\u{43E}\u{440}\u{430}\u{43D}\u{436}\u{435}\u{432}\u{43E}`,
        "orange yellow": `\u{43E}\u{440}\u{430}\u{43D}\u{436}\u{435}\u{432}\u{43E} \u{436}\u{44A}\u{43B}\u{442}\u{43E}`,
        "pale": `\u{431}\u{43B}\u{435}\u{434}\u{43E}`,
        "pink": `\u{440}\u{43E}\u{437}\u{43E}\u{432}\u{43E}`,
        "pink red": `\u{440}\u{43E}\u{437}\u{43E}\u{432}\u{43E} \u{447}\u{435}\u{440}\u{432}\u{435}\u{43D}\u{43E}`,
        "purple": `\u{43B}\u{438}\u{43B}\u{430}\u{432}\u{43E}`,
        "purple magenta": `\u{43B}\u{438}\u{43B}\u{430}\u{432}\u{43E} \u{43C}\u{430}\u{433}\u{435}\u{43D}\u{442}\u{430}`,
        "red": `\u{427}\u{435}\u{440}\u{432}\u{435}\u{43D}\u{43E}`,
        "red orange": `\u{447}\u{435}\u{440}\u{432}\u{435}\u{43D} \u{43F}\u{43E}\u{440}\u{442}\u{43E}\u{43A}\u{430}\u{43B}`,
        "saturation": `\u{41D}\u{430}\u{441}\u{438}\u{442}\u{435}\u{43D}\u{43E}\u{441}\u{442}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \u{43F}\u{440}\u{43E}\u{437}\u{440}\u{430}\u{447}\u{435}\u{43D}`,
        "very dark": `\u{43C}\u{43D}\u{43E}\u{433}\u{43E} \u{442}\u{44A}\u{43C}\u{43D}\u{43E}`,
        "very light": `\u{43C}\u{43D}\u{43E}\u{433}\u{43E} \u{441}\u{432}\u{435}\u{442}\u{43B}\u{43E}`,
        "vibrant": ` \u{44F}\u{440}\u{43A}\u{43E}`,
        "white": `\u{431}\u{44F}\u{43B}\u{43E}`,
        "yellow": `\u{436}\u{44A}\u{43B}\u{442}\u{43E}`,
        "yellow green": `\u{436}\u{44A}\u{43B}\u{442}\u{43E} \u{437}\u{435}\u{43B}\u{435}\u{43D}`
    };

    var $807554f8230db0ed$exports = {};
    $807554f8230db0ed$exports = {
        "alpha": `Alfa`,
        "black": `\u{10D}ern\xe1`,
        "blue": `Modr\xe1`,
        "blue purple": `modrofialov\xe1`,
        "brightness": `Jas`,
        "brown": `hn\u{11B}d\xe1`,
        "brown yellow": `hn\u{11B}do\u{17E}lut\xe1`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `tyrkysov\xe1`,
        "cyan blue": `tyrkysovomodr\xe1`,
        "dark": `tmav\xe1`,
        "gray": `\u{161}ed\xe1`,
        "grayish": `na\u{161}edl\xe1`,
        "green": `Zelen\xe1`,
        "green cyan": `zelenotyrkysov\xe1`,
        "hue": `Odst\xedn`,
        "light": `sv\u{11B}tl\xe1`,
        "lightness": `Sv\u{11B}tlost`,
        "magenta": `purpurov\xe1`,
        "magenta pink": `purpurov\u{11B} r\u{16F}\u{17E}ov\xe1`,
        "orange": `oran\u{17E}ov\xe1`,
        "orange yellow": `oran\u{17E}ovo\u{17E}lut\xe1`,
        "pale": `bled\xe1`,
        "pink": `r\u{16F}\u{17E}ov\xe1`,
        "pink red": `r\u{16F}\u{17E}ovo\u{10D}erven\xe1`,
        "purple": `fialov\xe1`,
        "purple magenta": `fialov\u{11B} purpurov\xe1`,
        "red": `\u{10C}erven\xe1`,
        "red orange": `\u{10D}ervenooran\u{17E}ov\xe1`,
        "saturation": `Sytost`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} pr\u{16F}hledn\xe9`,
        "very dark": `velmi tmav\xe1`,
        "very light": `velmi sv\u{11B}tl\xe1`,
        "vibrant": `z\xe1\u{159}iv\xe1`,
        "white": `b\xedl\xe1`,
        "yellow": `\u{17E}lut\xe1`,
        "yellow green": `\u{17E}lutozelen\xe1`
    };

    var $7097f64386f1761c$exports = {};
    $7097f64386f1761c$exports = {
        "alpha": `Alfa`,
        "black": `sort`,
        "blue": `Bl\xe5`,
        "blue purple": `bl\xe5lilla`,
        "brightness": `Lysstyrke`,
        "brown": `brun`,
        "brown yellow": `brungul`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cyan`,
        "cyan blue": `cyan bl\xe5`,
        "dark": `m\xf8rk`,
        "gray": `gr\xe5`,
        "grayish": `gr\xe5lig`,
        "green": `Gr\xf8n`,
        "green cyan": `gr\xf8n cyan`,
        "hue": `Tone`,
        "light": `lys`,
        "lightness": `Lyshed`,
        "magenta": `magenta`,
        "magenta pink": `magenta pink`,
        "orange": `orange`,
        "orange yellow": `orangegul`,
        "pale": `bleg`,
        "pink": `lyser\xf8d`,
        "pink red": `lyser\xf8dlig r\xf8d`,
        "purple": `lilla`,
        "purple magenta": `lilla magenta`,
        "red": `R\xf8d`,
        "red orange": `r\xf8dorange`,
        "saturation": `Farvem\xe6tning`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} gennemsigtig`,
        "very dark": `meget m\xf8rk`,
        "very light": `meget lys`,
        "vibrant": `klar`,
        "white": `hvid`,
        "yellow": `gul`,
        "yellow green": `gulgr\xf8n`
    };

    var $bdd847d8beb08799$exports = {};
    $bdd847d8beb08799$exports = {
        "alpha": `Alpha`,
        "black": `Schwarz`,
        "blue": `Blau`,
        "blue purple": `Blaulila`,
        "brightness": `Helligkeit`,
        "brown": `Braun`,
        "brown yellow": `Braungelb`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `Cyan`,
        "cyan blue": `Cyanblau`,
        "dark": `dunkles`,
        "gray": `Grau`,
        "grayish": `gr\xe4uliches`,
        "green": `Gr\xfcn`,
        "green cyan": `Gr\xfcncyan`,
        "hue": `Farbton`,
        "light": `helles`,
        "lightness": `Leuchtkraft`,
        "magenta": `Magenta`,
        "magenta pink": `Magentarosa`,
        "orange": `Orange`,
        "orange yellow": `Orangegelb`,
        "pale": `blasses`,
        "pink": `Rosa`,
        "pink red": `Rosarot`,
        "purple": `Lila`,
        "purple magenta": `Lilamagenta`,
        "red": `Rot`,
        "red orange": `Rotorange`,
        "saturation": `S\xe4ttigung`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, zu ${args.percentTransparent} transparent`,
        "very dark": `sehr dunkles`,
        "very light": `sehr helles`,
        "vibrant": `lebhaftes`,
        "white": `Wei\xdf`,
        "yellow": `Gelb`,
        "yellow green": `Gelbgr\xfcn`
    };

    var $a53e00b683950971$exports = {};
    $a53e00b683950971$exports = {
        "alpha": `\u{386}\u{3BB}\u{3C6}\u{3B1}`,
        "black": `\u{3BC}\u{3B1}\u{3CD}\u{3C1}\u{3BF}`,
        "blue": `\u{39C}\u{3C0}\u{3BB}\u{3B5}`,
        "blue purple": `\u{3BC}\u{3C0}\u{3BB}\u{3B5} \u{3BC}\u{3C9}\u{3B2}`,
        "brightness": `\u{3A6}\u{3C9}\u{3C4}\u{3B5}\u{3B9}\u{3BD}\u{3CC}\u{3C4}\u{3B7}\u{3C4}\u{3B1}`,
        "brown": `\u{3BA}\u{3B1}\u{3C6}\u{3AD}`,
        "brown yellow": `\u{3BA}\u{3B1}\u{3C6}\u{3AD} \u{3BA}\u{3AF}\u{3C4}\u{3C1}\u{3B9}\u{3BD}\u{3BF}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{3BA}\u{3C5}\u{3B1}\u{3BD}\u{3CC}`,
        "cyan blue": `\u{3BA}\u{3C5}\u{3B1}\u{3BD}\u{3CC} \u{3BC}\u{3C0}\u{3BB}\u{3B5}`,
        "dark": `\u{3C3}\u{3BA}\u{3BF}\u{3CD}\u{3C1}\u{3BF}`,
        "gray": `\u{3B3}\u{3BA}\u{3C1}\u{3B9}`,
        "grayish": `\u{3B3}\u{3BA}\u{3C1}\u{3B9}\u{3B6}\u{3C9}\u{3C0}\u{3CC}`,
        "green": `\u{3A0}\u{3C1}\u{3AC}\u{3C3}\u{3B9}\u{3BD}\u{3BF}`,
        "green cyan": `\u{3C0}\u{3C1}\u{3AC}\u{3C3}\u{3B9}\u{3BD}\u{3BF} \u{3BA}\u{3C5}\u{3B1}\u{3BD}\u{3CC}`,
        "hue": `\u{3A4}\u{3CC}\u{3BD}\u{3BF}\u{3C2}`,
        "light": `\u{3B1}\u{3BD}\u{3BF}\u{3B9}\u{3C7}\u{3C4}\u{3CC}`,
        "lightness": `\u{3A6}\u{3C9}\u{3C4}\u{3B5}\u{3B9}\u{3BD}\u{3CC}\u{3C4}\u{3B7}\u{3C4}\u{3B1}`,
        "magenta": `\u{3BC}\u{3B1}\u{3C4}\u{3B6}\u{3AD}\u{3BD}\u{3C4}\u{3B1}`,
        "magenta pink": `\u{3BC}\u{3B1}\u{3C4}\u{3B6}\u{3AD}\u{3BD}\u{3C4}\u{3B1} \u{3C1}\u{3BF}\u{3B6}`,
        "orange": `\u{3C0}\u{3BF}\u{3C1}\u{3C4}\u{3BF}\u{3BA}\u{3B1}\u{3BB}\u{3AF}`,
        "orange yellow": `\u{3C0}\u{3BF}\u{3C1}\u{3C4}\u{3BF}\u{3BA}\u{3B1}\u{3BB}\u{3AF} \u{3BA}\u{3AF}\u{3C4}\u{3C1}\u{3B9}\u{3BD}\u{3BF}`,
        "pale": `\u{3B1}\u{3BD}\u{3BF}\u{3B9}\u{3C7}\u{3C4}\u{3CC}`,
        "pink": `\u{3C1}\u{3BF}\u{3B6}`,
        "pink red": `\u{3C1}\u{3BF}\u{3B6} \u{3BA}\u{3CC}\u{3BA}\u{3BA}\u{3B9}\u{3BD}\u{3BF}`,
        "purple": `\u{3BC}\u{3C9}\u{3B2}`,
        "purple magenta": `\u{3BC}\u{3C9}\u{3B2} \u{3BC}\u{3B1}\u{3C4}\u{3B6}\u{3AD}\u{3BD}\u{3C4}\u{3B1}`,
        "red": `\u{39A}\u{3CC}\u{3BA}\u{3BA}\u{3B9}\u{3BD}\u{3BF}`,
        "red orange": `\u{3BA}\u{3CC}\u{3BA}\u{3BA}\u{3B9}\u{3BD}\u{3BF} \u{3C0}\u{3BF}\u{3C1}\u{3C4}\u{3BF}\u{3BA}\u{3B1}\u{3BB}\u{3AF}`,
        "saturation": `\u{39A}\u{3BF}\u{3C1}\u{3B5}\u{3C3}\u{3BC}\u{3CC}\u{3C2}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \u{3B4}\u{3B9}\u{3B1}\u{3C6}\u{3B1}\u{3BD}\u{3AD}\u{3C2}`,
        "very dark": `\u{3C0}\u{3BF}\u{3BB}\u{3CD} \u{3C3}\u{3BA}\u{3BF}\u{3CD}\u{3C1}\u{3BF}`,
        "very light": `\u{3C0}\u{3BF}\u{3BB}\u{3CD} \u{3B1}\u{3BD}\u{3BF}\u{3B9}\u{3C7}\u{3C4}\u{3CC}`,
        "vibrant": `\u{3AD}\u{3BD}\u{3C4}\u{3BF}\u{3BD}\u{3BF}`,
        "white": `\u{3BB}\u{3B5}\u{3C5}\u{3BA}\u{3CC}`,
        "yellow": `\u{3BA}\u{3AF}\u{3C4}\u{3C1}\u{3B9}\u{3BD}\u{3BF}`,
        "yellow green": `\u{3BA}\u{3AF}\u{3C4}\u{3C1}\u{3B9}\u{3BD}\u{3BF} \u{3C0}\u{3C1}\u{3AC}\u{3C3}\u{3B9}\u{3BD}\u{3BF}`
    };

    var $21cdd87e84f28d89$exports = {};
    $21cdd87e84f28d89$exports = {
        "hue": `Hue`,
        "saturation": `Saturation`,
        "lightness": `Lightness`,
        "brightness": `Brightness`,
        "red": `Red`,
        "green": `Green`,
        "blue": `Blue`,
        "alpha": `Alpha`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparent`,
        "very dark": `very dark`,
        "dark": `dark`,
        "light": `light`,
        "very light": `very light`,
        "pale": `pale`,
        "grayish": `grayish`,
        "vibrant": `vibrant`,
        "black": `black`,
        "white": `white`,
        "gray": `gray`,
        "pink": `pink`,
        "pink red": `pink red`,
        "red orange": `red orange`,
        "brown": `brown`,
        "orange": `orange`,
        "orange yellow": `orange yellow`,
        "brown yellow": `brown yellow`,
        "yellow": `yellow`,
        "yellow green": `yellow green`,
        "green cyan": `green cyan`,
        "cyan": `cyan`,
        "cyan blue": `cyan blue`,
        "blue purple": `blue purple`,
        "purple": `purple`,
        "purple magenta": `purple magenta`,
        "magenta": `magenta`,
        "magenta pink": `magenta pink`
    };

    var $92fee9698e4d675a$exports = {};
    $92fee9698e4d675a$exports = {
        "alpha": `Alpha`,
        "black": `negro`,
        "blue": `Azul`,
        "blue purple": `p\xfarpura azulado`,
        "brightness": `Brillo`,
        "brown": `marr\xf3n`,
        "brown yellow": `amarillo amarronado`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cian`,
        "cyan blue": `azul cian`,
        "dark": `oscuro`,
        "gray": `gris`,
        "grayish": `gris\xe1ceo`,
        "green": `Verde`,
        "green cyan": `cian verdoso`,
        "hue": `Tono`,
        "light": `claro`,
        "lightness": `Luminosidad`,
        "magenta": `magenta`,
        "magenta pink": `rosa magenta`,
        "orange": `naranja`,
        "orange yellow": `amarillo anaranjado`,
        "pale": `p\xe1lido`,
        "pink": `rosa`,
        "pink red": `rojo rosado`,
        "purple": `morado`,
        "purple magenta": `magenta viol\xe1ceo`,
        "red": `Rojo`,
        "red orange": `naranja rojizo`,
        "saturation": `Saturaci\xf3n`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparente`,
        "very dark": `muy oscuro`,
        "very light": `muy claro`,
        "vibrant": `intenso`,
        "white": `blanco`,
        "yellow": `amarillo`,
        "yellow green": `verde amarillento`
    };

    var $7ea012e91a5ad3ee$exports = {};
    $7ea012e91a5ad3ee$exports = {
        "alpha": `Alfa`,
        "black": `must`,
        "blue": `Sinine`,
        "blue purple": `sinakaslilla`,
        "brightness": `Heledus`,
        "brown": `pruun`,
        "brown yellow": `pruunikaskollane`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `ts\xfcaan`,
        "cyan blue": `ts\xfcaansinine`,
        "dark": `tume`,
        "gray": `hall`,
        "grayish": `hallikas`,
        "green": `Roheline`,
        "green cyan": `ts\xfcaanroheline`,
        "hue": `V\xe4rv`,
        "light": `valgus`,
        "lightness": `Valgus`,
        "magenta": `magentapunane`,
        "magenta pink": `magentaroosa`,
        "orange": `oran\u{17E}`,
        "orange yellow": `oran\u{17E}ikaskollane`,
        "pale": `kahvatu`,
        "pink": `roosa`,
        "pink red": `vaarikapunane`,
        "purple": `lilla`,
        "purple magenta": `purpurne magenta`,
        "red": `Punane`,
        "red orange": `punakasoran\u{17E}`,
        "saturation": `K\xfcllastus`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} l\xe4bipaistev`,
        "very dark": `v\xe4ga tume`,
        "very light": `v\xe4ga hele`,
        "vibrant": `ere`,
        "white": `valge`,
        "yellow": `kollane`,
        "yellow green": `kollakasroheline`
    };

    var $8460c13bb2d75345$exports = {};
    $8460c13bb2d75345$exports = {
        "alpha": `Alpha`,
        "black": `musta`,
        "blue": `Sininen`,
        "blue purple": `sinivioletti`,
        "brightness": `Kirkkaus`,
        "brown": `ruskea`,
        "brown yellow": `ruskeankeltainen`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `syaani`,
        "cyan blue": `syaaninsininen`,
        "dark": `tumma`,
        "gray": `harmaa`,
        "grayish": `harmahtava`,
        "green": `Vihre\xe4`,
        "green cyan": `vihre\xe4nsyaani`,
        "hue": `S\xe4vy`,
        "light": `vaalea`,
        "lightness": `Valom\xe4\xe4r\xe4`,
        "magenta": `magenta`,
        "magenta pink": `magentapinkki`,
        "orange": `oranssi`,
        "orange yellow": `oranssinkeltainen`,
        "pale": `vaalea`,
        "pink": `pinkki`,
        "pink red": `vaaleanpunainen`,
        "purple": `violetti`,
        "purple magenta": `violettimagenta`,
        "red": `Punainen`,
        "red orange": `punaoranssi`,
        "saturation": `V\xe4rikyll\xe4isyys`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} l\xe4pin\xe4kyv\xe4`,
        "very dark": `hyvin tumma`,
        "very light": `eritt\xe4in vaalea`,
        "vibrant": `eloisa`,
        "white": `valkea`,
        "yellow": `keltainen`,
        "yellow green": `keltavihre\xe4`
    };

    var $2a2d5dc14e680587$exports = {};
    $2a2d5dc14e680587$exports = {
        "alpha": `Alpha`,
        "black": `Noir`,
        "blue": `Bleu`,
        "blue purple": `Violet bleu`,
        "brightness": `Luminosit\xe9`,
        "brown": `Brun`,
        "brown yellow": `Jaune brun`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `Cyan`,
        "cyan blue": `Bleu cyan`,
        "dark": `Sombre`,
        "gray": `Gris`,
        "grayish": `Gris\xe2tre`,
        "green": `Vert`,
        "green cyan": `Cyan vert`,
        "hue": `Teinte`,
        "light": `Clair`,
        "lightness": `Luminosit\xe9`,
        "magenta": `Magenta`,
        "magenta pink": `Rose magenta`,
        "orange": `Orange`,
        "orange yellow": `Jaune orang\xe9`,
        "pale": `P\xe2le`,
        "pink": `Rose`,
        "pink red": `Rouge ros\xe9`,
        "purple": `Violet`,
        "purple magenta": `Magenta violet`,
        "red": `Rouge`,
        "red orange": `Orange rouge`,
        "saturation": `Saturation`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparent`,
        "very dark": `Tr\xe8s sombre`,
        "very light": `Tr\xe8s clair`,
        "vibrant": `Vif`,
        "white": `Blanc`,
        "yellow": `Jaune`,
        "yellow green": `Vert jaune`
    };

    var $9a3f292371bb0589$exports = {};
    $9a3f292371bb0589$exports = {
        "alpha": `\u{5D0}\u{5DC}\u{5E4}\u{5D0}`,
        "black": `\u{5E9}\u{5D7}\u{5D5}\u{5E8}`,
        "blue": `\u{5DB}\u{5D7}\u{5D5}\u{5DC}`,
        "blue purple": `\u{5DB}\u{5D7}\u{5D5}\u{5DC} \u{5E1}\u{5D2}\u{5D5}\u{5DC}`,
        "brightness": `\u{5D1}\u{5D4}\u{5D9}\u{5E8}\u{5D5}\u{5EA}`,
        "brown": `\u{5D7}\u{5D5}\u{5DD}`,
        "brown yellow": `\u{5D7}\u{5D5}\u{5DD} \u{5E6}\u{5D4}\u{5D5}\u{5D1}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{5D8}\u{5D5}\u{5E8}\u{5E7}\u{5D9}\u{5D6}`,
        "cyan blue": `\u{5DB}\u{5D7}\u{5D5}\u{5DC} \u{5E6}\u{5D9}\u{5D0}\u{5DF}`,
        "dark": `\u{5DB}\u{5D4}\u{5D4}`,
        "gray": `\u{5D0}\u{5E4}\u{5D5}\u{5E8}`,
        "grayish": `\u{5D0}\u{5E4}\u{5E8}\u{5E4}\u{5E8}`,
        "green": `\u{5D9}\u{5E8}\u{5D5}\u{5E7}`,
        "green cyan": `\u{5E6}\u{5D9}\u{5D0}\u{5DF} \u{5D9}\u{5E8}\u{5D5}\u{5E7}`,
        "hue": `\u{5D2}\u{5D5}\u{5D5}\u{5DF}`,
        "light": `\u{5D0}\u{5D5}\u{5E8}`,
        "lightness": `\u{5DB}\u{5DE}\u{5D5}\u{5EA} \u{5D0}\u{5D5}\u{5E8}`,
        "magenta": `\u{5DE}\u{5D2}'\u{5E0}\u{5D8}\u{5D4}`,
        "magenta pink": `\u{5D5}\u{5E8}\u{5D5}\u{5D3} \u{5DE}\u{5D2}'\u{5E0}\u{5D8}\u{5D4}`,
        "orange": `\u{5DB}\u{5EA}\u{5D5}\u{5DD}`,
        "orange yellow": `\u{5DB}\u{5EA}\u{5D5}\u{5DD} \u{5E6}\u{5D4}\u{5D5}\u{5D1}`,
        "pale": `\u{5D7}\u{5D9}\u{5D5}\u{5D5}\u{5E8}`,
        "pink": `\u{5D5}\u{5E8}\u{5D5}\u{5D3}`,
        "pink red": `\u{5D5}\u{5E8}\u{5D5}\u{5D3} \u{5D0}\u{5D3}\u{5D5}\u{5DD}`,
        "purple": `\u{5E1}\u{5D2}\u{5D5}\u{5DC}`,
        "purple magenta": `\u{5DE}\u{5D2}'\u{5E0}\u{5D8}\u{5D4} \u{5E1}\u{5D2}\u{5D5}\u{5DC}`,
        "red": `\u{5D0}\u{5D3}\u{5D5}\u{5DD}`,
        "red orange": `\u{5DB}\u{5EA}\u{5D5}\u{5DD} \u{5D0}\u{5D3}\u{5D5}\u{5DD}`,
        "saturation": `\u{5E8}\u{5D5}\u{5D5}\u{5D9}\u{5D4}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \u{5E9}\u{5E7}\u{5D5}\u{5E3}`,
        "very dark": `\u{5DB}\u{5D4}\u{5D4} \u{5DE}\u{5D0}\u{5D5}\u{5D3}`,
        "very light": `\u{5D1}\u{5D4}\u{5D9}\u{5E8} \u{5DE}\u{5D0}\u{5D5}\u{5D3}`,
        "vibrant": `\u{5EA}\u{5D5}\u{5E1}\u{5E1}`,
        "white": `\u{5DC}\u{5D1}\u{5DF}`,
        "yellow": `\u{5E6}\u{5D4}\u{5D5}\u{5D1}`,
        "yellow green": `\u{5E6}\u{5D4}\u{5D5}\u{5D1} \u{5D9}\u{5E8}\u{5D5}\u{5E7}`
    };

    var $4742231a685fa068$exports = {};
    $4742231a685fa068$exports = {
        "alpha": `Alfa`,
        "black": `crno`,
        "blue": `Plava`,
        "blue purple": `plavo ljubi\u{10D}asta`,
        "brightness": `Svjetlina`,
        "brown": `sme\u{111}a`,
        "brown yellow": `sme\u{111}e \u{17E}uta`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cijan`,
        "cyan blue": `cijan plava`,
        "dark": `tamno`,
        "gray": `siva`,
        "grayish": `sivkasto`,
        "green": `Zelena`,
        "green cyan": `zelena cijan`,
        "hue": `Nijansa`,
        "light": `svjetlo`,
        "lightness": `Osvijetljenost`,
        "magenta": `magenta`,
        "magenta pink": `magentno ru\u{17E}i\u{10D}asta`,
        "orange": `naran\u{10D}asta`,
        "orange yellow": `naran\u{10D}asto \u{17E}uta`,
        "pale": `blijeda`,
        "pink": `ru\u{17E}i\u{10D}asta`,
        "pink red": `ru\u{17E}i\u{10D}asto crvena`,
        "purple": `ljubi\u{10D}asta`,
        "purple magenta": `ljubi\u{10D}asta magenta`,
        "red": `Crvena`,
        "red orange": `crveno naran\u{10D}asta`,
        "saturation": `Zasi\u{107}enost`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} prozirnosti`,
        "very dark": `jako tamna`,
        "very light": `vrlo svijetlo`,
        "vibrant": `vibrantna`,
        "white": `bijela`,
        "yellow": `\u{17E}uto`,
        "yellow green": `\u{17E}uto zelena`
    };

    var $05e247fd2960981e$exports = {};
    $05e247fd2960981e$exports = {
        "alpha": `Alfa`,
        "black": `fekete`,
        "blue": `K\xe9k`,
        "blue purple": `k\xe9k lila`,
        "brightness": `F\xe9nyess\xe9g`,
        "brown": `barna`,
        "brown yellow": `barna s\xe1rga`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `ci\xe1nk\xe9k`,
        "cyan blue": `ci\xe1nk\xe9k`,
        "dark": `s\xf6t\xe9t`,
        "gray": `sz\xfcrke`,
        "grayish": `sz\xfcrk\xe9s`,
        "green": `Z\xf6ld`,
        "green cyan": `z\xf6ld ci\xe1nk\xe9k`,
        "hue": `Sz\xedn\xe1rnyalat`,
        "light": `vil\xe1gos`,
        "lightness": `Vil\xe1goss\xe1g`,
        "magenta": `b\xedbor`,
        "magenta pink": `b\xedbor r\xf3zsasz\xedn`,
        "orange": `narancs`,
        "orange yellow": `narancss\xe1rga`,
        "pale": `halv\xe1ny`,
        "pink": `r\xf3zsasz\xedn`,
        "pink red": `r\xf3zsasz\xedn piros`,
        "purple": `lila`,
        "purple magenta": `lila b\xedbor`,
        "red": `Piros`,
        "red orange": `piros narancs`,
        "saturation": `Tel\xedtetts\xe9g`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \xe1tl\xe1tsz\xf3`,
        "very dark": `nagyon s\xf6t\xe9t`,
        "very light": `nagyon vil\xe1gos`,
        "vibrant": `\xe9l\xe9nk`,
        "white": `feh\xe9r`,
        "yellow": `s\xe1rga`,
        "yellow green": `s\xe1rga z\xf6ld`
    };

    var $a67524a79ccbe190$exports = {};
    $a67524a79ccbe190$exports = {
        "alpha": `Alfa`,
        "black": `nero`,
        "blue": `Blu`,
        "blue purple": `blu viola`,
        "brightness": `Luminosit\xe0`,
        "brown": `marrone`,
        "brown yellow": `giallo bruno`,
        "colorName": (args)=>`${args.hue} ${args.chroma} ${args.lightness}`,
        "cyan": `ciano`,
        "cyan blue": `blu ciano`,
        "dark": `scuro`,
        "gray": `grigio`,
        "grayish": `grigiastro`,
        "green": `Verde`,
        "green cyan": `verde ciano`,
        "hue": `Tonalit\xe0`,
        "light": `chiaro`,
        "lightness": `Luminosit\xe0`,
        "magenta": `magenta`,
        "magenta pink": `rosa magenta`,
        "orange": `arancio`,
        "orange yellow": `giallo arancio`,
        "pale": `tenue`,
        "pink": `rosa`,
        "pink red": `rosa rosso`,
        "purple": `viola`,
        "purple magenta": `viola magenta`,
        "red": `Rosso`,
        "red orange": `rosso arancio`,
        "saturation": `Saturazione`,
        "transparentColorName": (args)=>`${args.hue} ${args.chroma} ${args.lightness}, trasparenza ${args.percentTransparent}`,
        "very dark": `molto scuro`,
        "very light": `molto chiaro`,
        "vibrant": `vivace`,
        "white": `bianco`,
        "yellow": `giallo`,
        "yellow green": `giallo verde`
    };

    var $a9eefe9d6c8cb7d5$exports = {};
    $a9eefe9d6c8cb7d5$exports = {
        "alpha": `\u{30A2}\u{30EB}\u{30D5}\u{30A1}`,
        "black": `\u{30D6}\u{30E9}\u{30C3}\u{30AF}`,
        "blue": `\u{9752}`,
        "blue purple": `\u{30D6}\u{30EB}\u{30FC}\u{30D1}\u{30FC}\u{30D7}\u{30EB}`,
        "brightness": `\u{660E}\u{308B}\u{3055}`,
        "brown": `\u{30D6}\u{30E9}\u{30A6}\u{30F3}`,
        "brown yellow": `\u{30D6}\u{30E9}\u{30A6}\u{30F3}\u{30A4}\u{30A8}\u{30ED}\u{30FC}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{30B7}\u{30A2}\u{30F3}`,
        "cyan blue": `\u{30B7}\u{30A2}\u{30F3}\u{30D6}\u{30EB}\u{30FC}`,
        "dark": `\u{30C0}\u{30FC}\u{30AF}`,
        "gray": `\u{30B0}\u{30EC}\u{30FC}`,
        "grayish": `\u{30B0}\u{30EC}\u{30A4}\u{30C3}\u{30B7}\u{30E5}`,
        "green": `\u{7DD1}`,
        "green cyan": `\u{30B0}\u{30EA}\u{30FC}\u{30F3}\u{30B7}\u{30A2}\u{30F3}`,
        "hue": `\u{8272}\u{76F8}`,
        "light": `\u{30E9}\u{30A4}\u{30C8}`,
        "lightness": `\u{660E}\u{5EA6}`,
        "magenta": `\u{30DE}\u{30BC}\u{30F3}\u{30BF}`,
        "magenta pink": `\u{30DE}\u{30BC}\u{30F3}\u{30BF}\u{30D4}\u{30F3}\u{30AF}`,
        "orange": `\u{30AA}\u{30EC}\u{30F3}\u{30B8}`,
        "orange yellow": `\u{30AA}\u{30EC}\u{30F3}\u{30B8}\u{30A4}\u{30A8}\u{30ED}\u{30FC}`,
        "pale": `\u{30DA}\u{30FC}\u{30EB}`,
        "pink": `\u{30D4}\u{30F3}\u{30AF}`,
        "pink red": `\u{30D4}\u{30F3}\u{30AF}\u{30EC}\u{30C3}\u{30C9}`,
        "purple": `\u{30D1}\u{30FC}\u{30D7}\u{30EB}`,
        "purple magenta": `\u{30D1}\u{30FC}\u{30D7}\u{30EB}\u{30DE}\u{30BC}\u{30F3}\u{30BF}`,
        "red": `\u{8D64}`,
        "red orange": `\u{30EC}\u{30C3}\u{30C9}\u{30AA}\u{30EC}\u{30F3}\u{30B8}`,
        "saturation": `\u{5F69}\u{5EA6}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \u{900F}\u{660E}`,
        "very dark": `\u{6700}\u{3082}\u{6697}\u{3044}`,
        "very light": `\u{30D9}\u{30EA}\u{30FC}\u{30E9}\u{30A4}\u{30C8}`,
        "vibrant": `\u{9BAE}\u{3084}\u{304B}`,
        "white": `\u{30DB}\u{30EF}\u{30A4}\u{30C8}`,
        "yellow": `\u{30A4}\u{30A8}\u{30ED}\u{30FC}`,
        "yellow green": `\u{30A4}\u{30A8}\u{30ED}\u{30FC}\u{30B0}\u{30EA}\u{30FC}\u{30F3}`
    };

    var $4a6b836d4f1bfaba$exports = {};
    $4a6b836d4f1bfaba$exports = {
        "alpha": `\u{C54C}\u{D30C}`,
        "black": `\u{AC80}\u{C740}\u{C0C9}`,
        "blue": `\u{D30C}\u{B791}`,
        "blue purple": `\u{CCAD}\u{C790}\u{C0C9}`,
        "brightness": `\u{BA85}\u{B3C4}`,
        "brown": `\u{AC08}\u{C0C9}`,
        "brown yellow": `\u{D669}\u{AC08}\u{C0C9}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{CCAD}\u{B85D}\u{C0C9}`,
        "cyan blue": `\u{CCAD}\u{B85D}\u{C0C9}`,
        "dark": `\u{B2E4}\u{D06C}`,
        "gray": `\u{D68C}\u{C0C9}`,
        "grayish": `\u{D68C}\u{AC08}\u{C0C9}`,
        "green": `\u{CD08}\u{B85D}`,
        "green cyan": `\u{CCAD}\u{B85D}\u{C0C9}`,
        "hue": `\u{C0C9}\u{C870}`,
        "light": `\u{B77C}\u{C774}\u{D2B8}`,
        "lightness": `\u{BC1D}\u{AE30}`,
        "magenta": `\u{C790}\u{D64D}\u{C0C9}`,
        "magenta pink": `\u{B9C8}\u{C820}\u{D0C0} \u{D551}\u{D06C}`,
        "orange": `\u{C8FC}\u{D669}\u{C0C9}`,
        "orange yellow": `\u{BD88}\u{ADF8}\u{C2A4}\u{B984}\u{D55C} \u{B178}\u{B791}`,
        "pale": `\u{D759}\u{C0C9}`,
        "pink": `\u{BD84}\u{D64D}\u{C0C9}`,
        "pink red": `\u{D551}\u{D06C} \u{B808}\u{B4DC}`,
        "purple": `\u{C790}\u{C8FC}\u{C0C9}`,
        "purple magenta": `\u{BCF4}\u{B77C}\u{BE5B} \u{C790}\u{D64D}\u{C0C9}`,
        "red": `\u{BE68}\u{AC15}`,
        "red orange": `\u{BD89}\u{C740} \u{C8FC}\u{D669}\u{C0C9}`,
        "saturation": `\u{CC44}\u{B3C4}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \u{D22C}\u{BA85}\u{B3C4}`,
        "very dark": `\u{B9E4}\u{C6B0} \u{C5B4}\u{B450}\u{C6B4}`,
        "very light": `\u{B9E4}\u{C6B0} \u{C5F0}\u{D568}`,
        "vibrant": `\u{AC15}\u{B82C}\u{D55C}`,
        "white": `\u{D770}\u{C0C9}`,
        "yellow": `\u{B178}\u{B780}\u{C0C9}`,
        "yellow green": `\u{C5F0}\u{B450}\u{C0C9}`
    };

    var $c950e4b1c482abde$exports = {};
    $c950e4b1c482abde$exports = {
        "alpha": `Alfa`,
        "black": `juoda`,
        "blue": `M\u{117}lyna`,
        "blue purple": `melsvai violetin\u{117}`,
        "brightness": `Ry\u{161}kumas`,
        "brown": `ruda`,
        "brown yellow": `rusvai geltona`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{17E}alsvai m\u{117}lyna`,
        "cyan blue": `\u{17E}alsvai m\u{117}lyna`,
        "dark": `tamsi`,
        "gray": `pilka`,
        "grayish": `pilk\u{161}va`,
        "green": `\u{17D}alia`,
        "green cyan": `\u{17E}alsvai m\u{117}lyna`,
        "hue": `Atspalvis`,
        "light": `\u{161}viesi`,
        "lightness": `\u{160}viesumas`,
        "magenta": `rausvai raudona`,
        "magenta pink": `purpurin\u{117}`,
        "orange": `oran\u{17E}in\u{117}`,
        "orange yellow": `oran\u{17E}inio atspalvio geltona`,
        "pale": `bly\u{161}ki`,
        "pink": `ro\u{17E}in\u{117}`,
        "pink red": `ro\u{17E}in\u{117} raudona`,
        "purple": `violetin\u{117}`,
        "purple magenta": `purpurin\u{117} rausvai raudona`,
        "red": `Raudona`,
        "red orange": `rausvai oran\u{17E}in\u{117}`,
        "saturation": `\u{12E}sotinimas`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} skaidri`,
        "very dark": `labai tamsi`,
        "very light": `labai \u{161}viesi`,
        "vibrant": `ry\u{161}ki`,
        "white": `balta`,
        "yellow": `geltona`,
        "yellow green": `gelsvai \u{17E}alia`
    };

    var $d10d6b60dc50b438$exports = {};
    $d10d6b60dc50b438$exports = {
        "alpha": `Alfa`,
        "black": `melns`,
        "blue": `Zila`,
        "blue purple": `zili violets`,
        "brightness": `Spilgtums`,
        "brown": `br\u{16B}ns`,
        "brown yellow": `br\u{16B}ni dzeltens`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `ci\u{101}ns`,
        "cyan blue": `ci\u{101}na zils`,
        "dark": `tum\u{161}s`,
        "gray": `pel\u{113}ks`,
        "grayish": `pel\u{113}c\u{12B}gs`,
        "green": `Za\u{13C}a`,
        "green cyan": `za\u{13C}\u{161} ci\u{101}ns`,
        "hue": `Nokr\u{101}sa`,
        "light": `gai\u{161}s`,
        "lightness": `Gai\u{161}ums`,
        "magenta": `fuksiju`,
        "magenta pink": `fuksiju roz\u{101}`,
        "orange": `oran\u{17E}s`,
        "orange yellow": `oran\u{17E}i dzeltens`,
        "pale": `b\u{101}ls`,
        "pink": `roz\u{101}`,
        "pink red": `roz\u{12B}gi sarkans`,
        "purple": `violets`,
        "purple magenta": `violets fuksiju`,
        "red": `Sarkana`,
        "red orange": `sarkan\u{12B}gi oran\u{17E}s`,
        "saturation": `Pies\u{101}tin\u{101}jums`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} caursp\u{12B}d\u{12B}gs`,
        "very dark": `\u{13C}oti tum\u{161}s`,
        "very light": `\u{13C}oti gai\u{161}s`,
        "vibrant": `ko\u{161}s`,
        "white": `balts`,
        "yellow": `dzeltens`,
        "yellow green": `dzelteni za\u{13C}\u{161}`
    };

    var $371a732b2494f452$exports = {};
    $371a732b2494f452$exports = {
        "alpha": `Alfa`,
        "black": `svart`,
        "blue": `Bl\xe5`,
        "blue purple": `bl\xe5lilla`,
        "brightness": `Lysstyrke`,
        "brown": `brun`,
        "brown yellow": `brungul`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cyan`,
        "cyan blue": `cyanbl\xe5`,
        "dark": `m\xf8rk`,
        "gray": `gr\xe5`,
        "grayish": `gr\xe5aktig`,
        "green": `Gr\xf8nn`,
        "green cyan": `gr\xf8nncyan`,
        "hue": `Fargetone`,
        "light": `lys`,
        "lightness": `Lyshet`,
        "magenta": `magenta`,
        "magenta pink": `magentarosa`,
        "orange": `oransje`,
        "orange yellow": `oransjegul`,
        "pale": `blek`,
        "pink": `rosa`,
        "pink red": `rosar\xf8d`,
        "purple": `lilla`,
        "purple magenta": `lillamagenta`,
        "red": `R\xf8d`,
        "red orange": `r\xf8doransje`,
        "saturation": `Metning`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} gjennomsiktig`,
        "very dark": `sv\xe6rt m\xf8rk`,
        "very light": `sv\xe6rt lys`,
        "vibrant": `levende`,
        "white": `hvit`,
        "yellow": `gul`,
        "yellow green": `gulgr\xf8nn`
    };

    var $6d042cae6243464b$exports = {};
    $6d042cae6243464b$exports = {
        "alpha": `Alfa`,
        "black": `zwart`,
        "blue": `Blauw`,
        "blue purple": `paarsblauw`,
        "brightness": `Helderheid`,
        "brown": `bruin`,
        "brown yellow": `bruingeel`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cyaan`,
        "cyan blue": `cyaanblauw`,
        "dark": `donker`,
        "gray": `grijs`,
        "grayish": `grijsachtig`,
        "green": `Groen`,
        "green cyan": `cyaangroen`,
        "hue": `Kleurtoon`,
        "light": `licht`,
        "lightness": `Lichtsterkte`,
        "magenta": `magenta`,
        "magenta pink": `magentaroze`,
        "orange": `oranje`,
        "orange yellow": `oranjegeel`,
        "pale": `bleek`,
        "pink": `roze`,
        "pink red": `rozerood`,
        "purple": `paars`,
        "purple magenta": `magentapaars`,
        "red": `Rood`,
        "red orange": `roodoranje`,
        "saturation": `Verzadiging`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparant`,
        "very dark": `heel donker`,
        "very light": `heel licht`,
        "vibrant": `levendig`,
        "white": `wit`,
        "yellow": `geel`,
        "yellow green": `geelgroen`
    };

    var $d9ab5c2611e0bcd3$exports = {};
    $d9ab5c2611e0bcd3$exports = {
        "alpha": `Alfa`,
        "black": `czarny`,
        "blue": `Niebieski`,
        "blue purple": `niebiesko-fioletowy`,
        "brightness": `Jasno\u{15B}\u{107}`,
        "brown": `br\u{105}zowy`,
        "brown yellow": `br\u{105}zowo-\u{17C}\xf3\u{142}ty`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cyjanowy`,
        "cyan blue": `cyjanowo-niebieski`,
        "dark": `ciemny`,
        "gray": `szary`,
        "grayish": `szarawy`,
        "green": `Zielony`,
        "green cyan": `zielono-cyjanowy`,
        "hue": `Odcie\u{144}`,
        "light": `jasny`,
        "lightness": `Jaskrawo\u{15B}\u{107}`,
        "magenta": `purpurowy`,
        "magenta pink": `purpurowo-r\xf3\u{17C}owy`,
        "orange": `pomara\u{144}czowy`,
        "orange yellow": `pomara\u{144}czowo-\u{17C}\xf3\u{142}ty`,
        "pale": `blady`,
        "pink": `r\xf3\u{17C}owy`,
        "pink red": `r\xf3\u{17C}owo-czerwony`,
        "purple": `fioletowy`,
        "purple magenta": `fioletowo-purpurowy`,
        "red": `Czerwony`,
        "red orange": `czerwono-pomara\u{144}czowy`,
        "saturation": `Nasycenie`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} przezroczysto\u{15B}ci`,
        "very dark": `bardzo ciemny`,
        "very light": `bardzo jasny`,
        "vibrant": `intensywny`,
        "white": `bia\u{142}y`,
        "yellow": `\u{17C}\xf3\u{142}ty`,
        "yellow green": `\u{17C}\xf3\u{142}to-zielony`
    };

    var $73f77c9902e29ca6$exports = {};
    $73f77c9902e29ca6$exports = {
        "alpha": `Alfa`,
        "black": `preto`,
        "blue": `Azul`,
        "blue purple": `roxo azulado`,
        "brightness": `Brilho`,
        "brown": `marrom`,
        "brown yellow": `marrom amarelado`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `ciano`,
        "cyan blue": `azul-ciano`,
        "dark": `escuro`,
        "gray": `cinza`,
        "grayish": `acinzentado`,
        "green": `Verde`,
        "green cyan": `verde-ciano`,
        "hue": `Matiz`,
        "light": `claro`,
        "lightness": `Luminosidade`,
        "magenta": `magenta`,
        "magenta pink": `rosa-magenta`,
        "orange": `laranja`,
        "orange yellow": `amarelo alaranjado`,
        "pale": `p\xe1lido`,
        "pink": `rosa`,
        "pink red": `rosa avermelhado`,
        "purple": `roxo`,
        "purple magenta": `roxo-magenta`,
        "red": `Vermelho`,
        "red orange": `laranja avermelhado`,
        "saturation": `Satura\xe7\xe3o`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparente`,
        "very dark": `muito escuro`,
        "very light": `muito claro`,
        "vibrant": `vibrante`,
        "white": `branco`,
        "yellow": `amarelo`,
        "yellow green": `verde amarelado`
    };

    var $4f461eb266a95c10$exports = {};
    $4f461eb266a95c10$exports = {
        "alpha": `Alfa`,
        "black": `preto`,
        "blue": `Azul`,
        "blue purple": `azul-p\xfarpura`,
        "brightness": `Luminosidade`,
        "brown": `castanho`,
        "brown yellow": `amarelo-castanho`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `ciano`,
        "cyan blue": `azul-ciano`,
        "dark": `escuro`,
        "gray": `cinzento`,
        "grayish": `acinzentado`,
        "green": `Verde`,
        "green cyan": `verde-ciano`,
        "hue": `Tonalidade`,
        "light": `claro`,
        "lightness": `Claridade`,
        "magenta": `magenta`,
        "magenta pink": `rosa-magenta`,
        "orange": `laranja`,
        "orange yellow": `amarelo-laranja`,
        "pale": `p\xe1lido`,
        "pink": `cor-de-rosa`,
        "pink red": `vermelho-rosa`,
        "purple": `p\xfarpura`,
        "purple magenta": `p\xfarpura-magenta`,
        "red": `Vermelho`,
        "red orange": `laranja-vermelho`,
        "saturation": `Satura\xe7\xe3o`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparente`,
        "very dark": `muito escuro`,
        "very light": `muito claro`,
        "vibrant": `vibrante`,
        "white": `branco`,
        "yellow": `amarelo`,
        "yellow green": `verde-amarelo`
    };

    var $dc46bea2f2597899$exports = {};
    $dc46bea2f2597899$exports = {
        "alpha": `Alfa`,
        "black": `negru`,
        "blue": `Albastru`,
        "blue purple": `albastru-violet`,
        "brightness": `Luminozitate`,
        "brown": `maro`,
        "brown yellow": `galben maro`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `bleu`,
        "cyan blue": `albastru-bleu`,
        "dark": `\xeenchis`,
        "gray": `gri`,
        "grayish": `cenu\u{219}iu`,
        "green": `Verde`,
        "green cyan": `verde bleu`,
        "hue": `Nuan\u{21B}\u{103}`,
        "light": `deschis`,
        "lightness": `Luminozitate`,
        "magenta": `fucsia`,
        "magenta pink": `roz-fucsia`,
        "orange": `portocaliu`,
        "orange yellow": `galben-portocaliu`,
        "pale": `pal`,
        "pink": `roz`,
        "pink red": `roz-ro\u{219}u`,
        "purple": `violet`,
        "purple magenta": `violet-fucsia`,
        "red": `Ro\u{219}u`,
        "red orange": `portocaliu-ro\u{219}u`,
        "saturation": `Satura\u{21B}ie`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} transparent`,
        "very dark": `foarte \xeenchis`,
        "very light": `foarte deschis`,
        "vibrant": `plin de via\u{21B}\u{103}`,
        "white": `alb`,
        "yellow": `galben`,
        "yellow green": `galben-verde`
    };

    var $622bbd6719cc95af$exports = {};
    $622bbd6719cc95af$exports = {
        "alpha": `\u{410}\u{43B}\u{44C}\u{444}\u{430}`,
        "black": `\u{447}\u{435}\u{440}\u{43D}\u{44B}\u{439}`,
        "blue": `\u{421}\u{438}\u{43D}\u{438}\u{439}`,
        "blue purple": `\u{441}\u{438}\u{43D}\u{435}-\u{444}\u{438}\u{43E}\u{43B}\u{435}\u{442}\u{43E}\u{432}\u{44B}\u{439}`,
        "brightness": `\u{42F}\u{440}\u{43A}\u{43E}\u{441}\u{442}\u{44C}`,
        "brown": `\u{43A}\u{43E}\u{440}\u{438}\u{447}\u{43D}\u{435}\u{432}\u{44B}\u{439}`,
        "brown yellow": `\u{43A}\u{43E}\u{440}\u{438}\u{447}\u{43D}\u{435}\u{432}\u{43E}-\u{436}\u{435}\u{43B}\u{442}\u{44B}\u{439}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{433}\u{43E}\u{43B}\u{443}\u{431}\u{43E}\u{439}`,
        "cyan blue": `\u{446}\u{432}\u{435}\u{442} \u{43C}\u{43E}\u{440}\u{441}\u{43A}\u{43E}\u{439} \u{432}\u{43E}\u{43B}\u{43D}\u{44B}`,
        "dark": `\u{442}\u{435}\u{43C}\u{43D}\u{44B}\u{439}`,
        "gray": `\u{441}\u{435}\u{440}\u{44B}\u{439}`,
        "grayish": `\u{441}\u{435}\u{440}\u{43E}\u{432}\u{430}\u{442}\u{44B}\u{439}`,
        "green": `\u{417}\u{435}\u{43B}\u{435}\u{43D}\u{44B}\u{439}`,
        "green cyan": `\u{441}\u{438}\u{43D}\u{435}-\u{437}\u{435}\u{43B}\u{435}\u{43D}\u{44B}\u{439}`,
        "hue": `\u{41E}\u{442}\u{442}\u{435}\u{43D}\u{43E}\u{43A}`,
        "light": `\u{441}\u{432}\u{435}\u{442}\u{43B}\u{44B}\u{439}`,
        "lightness": `\u{41E}\u{441}\u{432}\u{435}\u{449}\u{435}\u{43D}\u{43D}\u{43E}\u{441}\u{442}\u{44C}`,
        "magenta": `\u{43F}\u{443}\u{440}\u{43F}\u{443}\u{440}\u{43D}\u{44B}\u{439}`,
        "magenta pink": `\u{43F}\u{443}\u{440}\u{43F}\u{443}\u{440}\u{43D}\u{43E}-\u{440}\u{43E}\u{437}\u{43E}\u{432}\u{44B}\u{439}`,
        "orange": `\u{43E}\u{440}\u{430}\u{43D}\u{436}\u{435}\u{432}\u{44B}\u{439}`,
        "orange yellow": `\u{43E}\u{440}\u{430}\u{43D}\u{436}\u{435}\u{432}\u{43E}-\u{436}\u{435}\u{43B}\u{442}\u{44B}\u{439}`,
        "pale": `\u{431}\u{43B}\u{435}\u{434}\u{43D}\u{44B}\u{439}`,
        "pink": `\u{440}\u{43E}\u{437}\u{43E}\u{432}\u{44B}\u{439}`,
        "pink red": `\u{440}\u{43E}\u{437}\u{43E}\u{432}\u{43E}-\u{43A}\u{440}\u{430}\u{441}\u{43D}\u{44B}\u{439}`,
        "purple": `\u{444}\u{438}\u{43E}\u{43B}\u{435}\u{442}\u{43E}\u{432}\u{44B}\u{439}`,
        "purple magenta": `\u{444}\u{438}\u{43E}\u{43B}\u{435}\u{442}\u{43E}\u{432}\u{43E}-\u{43F}\u{443}\u{440}\u{43F}\u{443}\u{440}\u{43D}\u{44B}\u{439}`,
        "red": `\u{41A}\u{440}\u{430}\u{441}\u{43D}\u{44B}\u{439}`,
        "red orange": `\u{43A}\u{440}\u{430}\u{441}\u{43D}\u{43E}-\u{43E}\u{440}\u{430}\u{43D}\u{436}\u{435}\u{432}\u{44B}\u{439}`,
        "saturation": `\u{41D}\u{430}\u{441}\u{44B}\u{449}\u{435}\u{43D}\u{43D}\u{43E}\u{441}\u{442}\u{44C}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, \u{43F}\u{440}\u{43E}\u{437}\u{440}\u{430}\u{447}\u{43D}\u{44B}\u{439} \u{43D}\u{430} ${args.percentTransparent}`,
        "very dark": `\u{43E}\u{447}\u{435}\u{43D}\u{44C} \u{442}\u{435}\u{43C}\u{43D}\u{44B}\u{439}`,
        "very light": `\u{43E}\u{447}\u{435}\u{43D}\u{44C} \u{441}\u{432}\u{435}\u{442}\u{43B}\u{44B}\u{439}`,
        "vibrant": `\u{44F}\u{440}\u{43A}\u{438}\u{439}`,
        "white": `\u{431}\u{435}\u{43B}\u{44B}\u{439}`,
        "yellow": `\u{436}\u{435}\u{43B}\u{442}\u{44B}\u{439}`,
        "yellow green": `\u{436}\u{435}\u{43B}\u{442}\u{43E}-\u{437}\u{435}\u{43B}\u{435}\u{43D}\u{44B}\u{439}`
    };

    var $4da03c1ecd9a9c7d$exports = {};
    $4da03c1ecd9a9c7d$exports = {
        "alpha": `Alfa`,
        "black": `\u{10D}ierna`,
        "blue": `Modr\xe1`,
        "blue purple": `modrofialov\xe1`,
        "brightness": `Jas`,
        "brown": `hned\xe1`,
        "brown yellow": `hnedo\u{17E}lt\xe1`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `az\xfarov\xe1`,
        "cyan blue": `az\xfarov\xe1 modr\xe1`,
        "dark": `tmav\xe1`,
        "gray": `siv\xe1`,
        "grayish": `sivast\xe1`,
        "green": `Zelen\xe1`,
        "green cyan": `zelen\xe1 az\xfarov\xe1`,
        "hue": `Odtie\u{148}`,
        "light": `svetl\xe1`,
        "lightness": `Svetlos\u{165}`,
        "magenta": `purpurov\xe1`,
        "magenta pink": `ru\u{17E}ov\xe1 purpurov\xe1`,
        "orange": `oran\u{17E}ov\xe1`,
        "orange yellow": `oran\u{17E}ovo\u{17E}lt\xe1`,
        "pale": `bled\xe1`,
        "pink": `ru\u{17E}ov\xe1`,
        "pink red": `ru\u{17E}ovo\u{10D}erven\xe1`,
        "purple": `fialov\xe1`,
        "purple magenta": `fialov\xe1 purpurov\xe1`,
        "red": `\u{10C}erven\xe1`,
        "red orange": `\u{10D}ervenooran\u{17E}ov\xe1`,
        "saturation": `S\xfdtos\u{165}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} prieh\u{13E}adn\xe1`,
        "very dark": `ve\u{13E}mi tmav\xe1`,
        "very light": `ve\u{13E}mi svetl\xe1`,
        "vibrant": `energick\xe1`,
        "white": `biela`,
        "yellow": `\u{17E}lt\xe1`,
        "yellow green": `\u{17E}ltozelen\xe1`
    };

    var $edb6b2fe456ed4e8$exports = {};
    $edb6b2fe456ed4e8$exports = {
        "alpha": `Alfa`,
        "black": `\u{10D}rna`,
        "blue": `Modra`,
        "blue purple": `modro vijoli\u{10D}na`,
        "brightness": `Svetlost`,
        "brown": `rjava`,
        "brown yellow": `rjavo rumena`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cian`,
        "cyan blue": `cian modra`,
        "dark": `temna`,
        "gray": `siva`,
        "grayish": `sivkasta`,
        "green": `Zelena`,
        "green cyan": `zelena cian`,
        "hue": `Barva`,
        "light": `svetla`,
        "lightness": `Lahkost`,
        "magenta": `\u{161}krlatna`,
        "magenta pink": `\u{161}krlatno roza`,
        "orange": `oran\u{17E}na`,
        "orange yellow": `oran\u{17E}no rumena`,
        "pale": `bleda`,
        "pink": `roza`,
        "pink red": `roza rde\u{10D}a`,
        "purple": `vijoli\u{10D}na`,
        "purple magenta": `vijoli\u{10D}no \u{161}krlatna`,
        "red": `Rde\u{10D}a`,
        "red orange": `rde\u{10D}e oran\u{17E}na`,
        "saturation": `Nasi\u{10D}enost`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} prozorna`,
        "very dark": `zelo temna`,
        "very light": `zelo svetla`,
        "vibrant": `\u{17E}ivahna`,
        "white": `bela`,
        "yellow": `rumena`,
        "yellow green": `rumeno zelena`
    };

    var $264cd81c52b30815$exports = {};
    $264cd81c52b30815$exports = {
        "alpha": `Alfa`,
        "black": `crno`,
        "blue": `Plava`,
        "blue purple": `plavoljubi\u{10D}asta`,
        "brightness": `Osvetljenost`,
        "brown": `sme\u{111}a`,
        "brown yellow": `sme\u{111}e\u{17E}uta`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cijan`,
        "cyan blue": `cijan plava`,
        "dark": `tamno`,
        "gray": `siva`,
        "grayish": `sivkasta`,
        "green": `Zelena`,
        "green cyan": `zeleno cijan`,
        "hue": `Nijansa`,
        "light": `svetla`,
        "lightness": `Osvetljenje`,
        "magenta": `purpurnocrvena`,
        "magenta pink": `magenta ru\u{17E}i\u{10D}asta`,
        "orange": `narand\u{17E}asta`,
        "orange yellow": `narand\u{17E}asto\u{17E}uta`,
        "pale": `bledo`,
        "pink": `ru\u{17E}i\u{10D}asta`,
        "pink red": `ru\u{17E}i\u{10D}astocrvena`,
        "purple": `ljubi\u{10D}asta`,
        "purple magenta": `ljubi\u{10D}asta magenta`,
        "red": `Crvena`,
        "red orange": `crvenonarand\u{17E}asta`,
        "saturation": `Zasi\u{107}enje`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} prozirna`,
        "very dark": `veoma tamno`,
        "very light": `vrlo svetlo`,
        "vibrant": `\u{17E}ivopisna`,
        "white": `bela`,
        "yellow": `\u{17E}uto`,
        "yellow green": `\u{17E}utozelena`
    };

    var $6f80afde0270dda7$exports = {};
    $6f80afde0270dda7$exports = {
        "alpha": `Alfa`,
        "black": `svart`,
        "blue": `Bl\xe5tt`,
        "blue purple": `bl\xe5lila`,
        "brightness": `Ljusstyrka`,
        "brown": `brun`,
        "brown yellow": `brungul`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `cyan`,
        "cyan blue": `cyanbl\xe5`,
        "dark": `m\xf6rk`,
        "gray": `gr\xe5`,
        "grayish": `gr\xe5aktig`,
        "green": `Gr\xf6nt`,
        "green cyan": `gr\xf6n cyan`,
        "hue": `Nyans`,
        "light": `ljus`,
        "lightness": `Ljushet`,
        "magenta": `magenta`,
        "magenta pink": `magentarosa`,
        "orange": `orange`,
        "orange yellow": `orangegul`,
        "pale": `blek`,
        "pink": `rosa`,
        "pink red": `rosar\xf6d`,
        "purple": `lila`,
        "purple magenta": `lila magenta`,
        "red": `R\xf6tt`,
        "red orange": `r\xf6dorange`,
        "saturation": `M\xe4ttnad`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} genomskinlig`,
        "very dark": `mycket m\xf6rk`,
        "very light": `mycket ljus`,
        "vibrant": `livfull`,
        "white": `vit`,
        "yellow": `gul`,
        "yellow green": `gulgr\xf6n`
    };

    var $23a92651c6957668$exports = {};
    $23a92651c6957668$exports = {
        "alpha": `Alfa`,
        "black": `siyah`,
        "blue": `Mavi`,
        "blue purple": `mavi mor`,
        "brightness": `Parlakl\u{131}k`,
        "brown": `kahverengi`,
        "brown yellow": `kahverengi sar\u{131}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `camg\xf6be\u{11F}i`,
        "cyan blue": `camg\xf6be\u{11F}i mavi`,
        "dark": `koyu`,
        "gray": `gri`,
        "grayish": `grimsi`,
        "green": `Ye\u{15F}il`,
        "green cyan": `ye\u{15F}il camg\xf6be\u{11F}i`,
        "hue": `Ton`,
        "light": `a\xe7\u{131}k`,
        "lightness": `Canl\u{131}l\u{131}k`,
        "magenta": `eflatun`,
        "magenta pink": `eflatun pembe`,
        "orange": `turuncu`,
        "orange yellow": `turuncu sar\u{131}`,
        "pale": `solgun`,
        "pink": `pembe`,
        "pink red": `pembe k\u{131}rm\u{131}z\u{131}`,
        "purple": `mor`,
        "purple magenta": `mor eflatun`,
        "red": `K\u{131}rm\u{131}z\u{131}`,
        "red orange": `k\u{131}rm\u{131}z\u{131} portakal`,
        "saturation": `Doygunluk`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} saydam`,
        "very dark": `\xe7ok koyu`,
        "very light": `\xe7ok a\xe7\u{131}k`,
        "vibrant": `canl\u{131}`,
        "white": `beyaz`,
        "yellow": `sar\u{131}`,
        "yellow green": `sar\u{131} ye\u{15F}il`
    };

    var $0f9b1074d04f4954$exports = {};
    $0f9b1074d04f4954$exports = {
        "alpha": `\u{410}\u{43B}\u{44C}\u{444}\u{430}`,
        "black": `\u{447}\u{43E}\u{440}\u{43D}\u{438}\u{439}`,
        "blue": `\u{421}\u{438}\u{43D}\u{456}\u{439}`,
        "blue purple": `\u{441}\u{438}\u{43D}\u{44C}\u{43E}-\u{444}\u{456}\u{43E}\u{43B}\u{435}\u{442}\u{43E}\u{432}\u{438}\u{439}`,
        "brightness": `\u{42F}\u{441}\u{43A}\u{440}\u{430}\u{432}\u{456}\u{441}\u{442}\u{44C}`,
        "brown": `\u{43A}\u{43E}\u{440}\u{438}\u{447}\u{43D}\u{435}\u{432}\u{438}\u{439}`,
        "brown yellow": `\u{43A}\u{43E}\u{440}\u{438}\u{447}\u{43D}\u{435}\u{432}\u{43E}-\u{436}\u{43E}\u{432}\u{442}\u{438}\u{439}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{431}\u{43B}\u{430}\u{43A}\u{438}\u{442}\u{43D}\u{438}\u{439}`,
        "cyan blue": `\u{441}\u{438}\u{43D}\u{44C}\u{43E}-\u{431}\u{43B}\u{430}\u{43A}\u{438}\u{442}\u{43D}\u{438}\u{439}`,
        "dark": `\u{442}\u{435}\u{43C}\u{43D}\u{438}\u{439}`,
        "gray": `\u{441}\u{456}\u{440}\u{438}\u{439}`,
        "grayish": `\u{441}\u{456}\u{440}\u{443}\u{432}\u{430}\u{442}\u{438}\u{439}`,
        "green": `\u{417}\u{435}\u{43B}\u{435}\u{43D}\u{438}\u{439}`,
        "green cyan": `\u{437}\u{435}\u{43B}\u{435}\u{43D}\u{43E}-\u{431}\u{43B}\u{430}\u{43A}\u{438}\u{442}\u{43D}\u{438}\u{439}`,
        "hue": `\u{422}\u{43E}\u{43D}`,
        "light": `\u{441}\u{432}\u{456}\u{442}\u{43B}\u{438}\u{439}`,
        "lightness": `\u{41E}\u{441}\u{432}\u{456}\u{442}\u{43B}\u{435}\u{43D}\u{456}\u{441}\u{442}\u{44C}`,
        "magenta": `\u{43F}\u{443}\u{440}\u{43F}\u{443}\u{440}\u{43E}\u{432}\u{438}\u{439}`,
        "magenta pink": `\u{43F}\u{443}\u{440}\u{43F}\u{443}\u{440}\u{43E}\u{432}\u{43E}-\u{440}\u{43E}\u{436}\u{435}\u{432}\u{438}\u{439}`,
        "orange": `\u{43F}\u{43E}\u{43C}\u{430}\u{440}\u{430}\u{43D}\u{447}\u{435}\u{432}\u{438}\u{439}`,
        "orange yellow": `\u{43F}\u{43E}\u{43C}\u{430}\u{440}\u{430}\u{43D}\u{447}\u{435}\u{432}\u{43E}-\u{436}\u{43E}\u{432}\u{442}\u{438}\u{439}`,
        "pale": `\u{431}\u{43B}\u{456}\u{434}\u{438}\u{439}`,
        "pink": `\u{440}\u{43E}\u{436}\u{435}\u{432}\u{438}\u{439}`,
        "pink red": `\u{440}\u{43E}\u{436}\u{435}\u{432}\u{43E}-\u{447}\u{435}\u{440}\u{432}\u{43E}\u{43D}\u{438}\u{439}`,
        "purple": `\u{444}\u{456}\u{43E}\u{43B}\u{435}\u{442}\u{43E}\u{432}\u{438}\u{439}`,
        "purple magenta": `\u{444}\u{456}\u{43E}\u{43B}\u{435}\u{442}\u{43E}\u{432}\u{43E}-\u{43F}\u{443}\u{440}\u{43F}\u{443}\u{440}\u{43E}\u{432}\u{438}\u{439}`,
        "red": `\u{427}\u{435}\u{440}\u{432}\u{43E}\u{43D}\u{438}\u{439}`,
        "red orange": `\u{447}\u{435}\u{440}\u{432}\u{43E}\u{43D}\u{43E}-\u{43F}\u{43E}\u{43C}\u{430}\u{440}\u{430}\u{43D}\u{447}\u{435}\u{432}\u{438}\u{439}`,
        "saturation": `\u{41D}\u{430}\u{441}\u{438}\u{447}\u{435}\u{43D}\u{456}\u{441}\u{442}\u{44C}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, \u{43F}\u{440}\u{43E}\u{437}\u{43E}\u{440}\u{438}\u{439} \u{43D}\u{430} ${args.percentTransparent}`,
        "very dark": `\u{434}\u{443}\u{436}\u{435} \u{442}\u{435}\u{43C}\u{43D}\u{438}\u{439}`,
        "very light": `\u{434}\u{443}\u{436}\u{435} \u{441}\u{432}\u{456}\u{442}\u{43B}\u{438}\u{439}`,
        "vibrant": `\u{44F}\u{441}\u{43A}\u{440}\u{430}\u{432}\u{438}\u{439}`,
        "white": `\u{431}\u{456}\u{43B}\u{438}\u{439}`,
        "yellow": `\u{436}\u{43E}\u{432}\u{442}\u{438}\u{439}`,
        "yellow green": `\u{436}\u{43E}\u{432}\u{442}\u{43E}-\u{437}\u{435}\u{43B}\u{435}\u{43D}\u{438}\u{439}`
    };

    var $a9cedf75b94e4916$exports = {};
    $a9cedf75b94e4916$exports = {
        "alpha": `Alpha`,
        "black": `\u{9ED1}\u{8272}`,
        "blue": `\u{84DD}\u{8272}`,
        "blue purple": `\u{84DD}\u{7D2B}\u{8272}`,
        "brightness": `\u{4EAE}\u{5EA6}`,
        "brown": `\u{68D5}\u{8272}\u{7684}`,
        "brown yellow": `\u{68D5}\u{9EC4}\u{8272}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{84DD}\u{7EFF}\u{8272}`,
        "cyan blue": `\u{9752}\u{84DD}\u{8272}`,
        "dark": `\u{6DF1}\u{8272}`,
        "gray": `\u{7070}\u{8272}`,
        "grayish": `\u{6D45}\u{7070}\u{8272}\u{7684}`,
        "green": `\u{7EFF}\u{8272}`,
        "green cyan": `\u{7EFF}\u{9752}\u{8272}`,
        "hue": `\u{8272}\u{76F8}`,
        "light": `\u{6D45}\u{8272}`,
        "lightness": `\u{660E}\u{4EAE}\u{5EA6}`,
        "magenta": `\u{7D2B}\u{7EA2}\u{8272}`,
        "magenta pink": `\u{7D2B}\u{7C89}\u{8272}`,
        "orange": `\u{6A59}\u{8272}`,
        "orange yellow": `\u{6A59}\u{9EC4}\u{8272}`,
        "pale": `\u{82CD}\u{767D}\u{7684}`,
        "pink": `\u{7C89}\u{8272}`,
        "pink red": `\u{7C89}\u{7EA2}\u{8272}`,
        "purple": `\u{7D2B}\u{8272}`,
        "purple magenta": `\u{7D2B}\u{6D0B}\u{7EA2}\u{8272}`,
        "red": `\u{7EA2}\u{8272}`,
        "red orange": `\u{7EA2}\u{6A59}\u{8272}`,
        "saturation": `\u{9971}\u{548C}\u{5EA6}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \u{900F}\u{660E}`,
        "very dark": `\u{5F88}\u{6697}`,
        "very light": `\u{5F88}\u{6D45}`,
        "vibrant": `\u{751F}\u{673A}\u{52C3}\u{52C3}`,
        "white": `\u{767D}\u{8272}`,
        "yellow": `\u{9EC4}\u{8272}`,
        "yellow green": `\u{9EC4}\u{8272}/\u{7EFF}\u{8272}`
    };

    var $37cff576474bc8d4$exports = {};
    $37cff576474bc8d4$exports = {
        "alpha": `Alpha`,
        "black": `\u{9ED1}`,
        "blue": `\u{85CD}\u{8272}`,
        "blue purple": `\u{85CD}\u{7D2B}`,
        "brightness": `\u{4EAE}\u{5EA6}`,
        "brown": `\u{68D5}`,
        "brown yellow": `\u{68D5}\u{9EC3}`,
        "colorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}`,
        "cyan": `\u{9752}`,
        "cyan blue": `\u{9752}\u{85CD}`,
        "dark": `\u{6697}`,
        "gray": `\u{7070}`,
        "grayish": `\u{504F}\u{7070}`,
        "green": `\u{7DA0}\u{8272}`,
        "green cyan": `\u{9752}\u{7DA0}`,
        "hue": `\u{8272}\u{76F8}`,
        "light": `\u{6DFA}`,
        "lightness": `\u{660E}\u{4EAE}`,
        "magenta": `\u{6D0B}\u{7D05}`,
        "magenta pink": `\u{6DFA}\u{6D0B}\u{7D05}`,
        "orange": `\u{6A59}`,
        "orange yellow": `\u{6A59}\u{9EC3}`,
        "pale": `\u{6DE1}`,
        "pink": `\u{7C89}\u{7D05}`,
        "pink red": `\u{7C89}\u{7D05}`,
        "purple": `\u{7D2B}`,
        "purple magenta": `\u{7D2B}\u{6D0B}\u{7D05}`,
        "red": `\u{7D05}\u{8272}`,
        "red orange": `\u{6A59}\u{7D05}`,
        "saturation": `\u{98FD}\u{548C}\u{5EA6}`,
        "transparentColorName": (args)=>`${args.lightness} ${args.chroma} ${args.hue}, ${args.percentTransparent} \u{900F}\u{660E}`,
        "very dark": `\u{5F88}\u{6697}`,
        "very light": `\u{5F88}\u{6DFA}`,
        "vibrant": `\u{9BAE}\u{8C54}`,
        "white": `\u{767D}`,
        "yellow": `\u{9EC3}`,
        "yellow green": `\u{9EC3}\u{7DA0}`
    };

    var $f98dad178a72c00d$exports = {};


































    $f98dad178a72c00d$exports = {
        "ar-AE": $2d805fd52bb48883$exports,
        "bg-BG": $6c28468dc1df643c$exports,
        "cs-CZ": $807554f8230db0ed$exports,
        "da-DK": $7097f64386f1761c$exports,
        "de-DE": $bdd847d8beb08799$exports,
        "el-GR": $a53e00b683950971$exports,
        "en-US": $21cdd87e84f28d89$exports,
        "es-ES": $92fee9698e4d675a$exports,
        "et-EE": $7ea012e91a5ad3ee$exports,
        "fi-FI": $8460c13bb2d75345$exports,
        "fr-FR": $2a2d5dc14e680587$exports,
        "he-IL": $9a3f292371bb0589$exports,
        "hr-HR": $4742231a685fa068$exports,
        "hu-HU": $05e247fd2960981e$exports,
        "it-IT": $a67524a79ccbe190$exports,
        "ja-JP": $a9eefe9d6c8cb7d5$exports,
        "ko-KR": $4a6b836d4f1bfaba$exports,
        "lt-LT": $c950e4b1c482abde$exports,
        "lv-LV": $d10d6b60dc50b438$exports,
        "nb-NO": $371a732b2494f452$exports,
        "nl-NL": $6d042cae6243464b$exports,
        "pl-PL": $d9ab5c2611e0bcd3$exports,
        "pt-BR": $73f77c9902e29ca6$exports,
        "pt-PT": $4f461eb266a95c10$exports,
        "ro-RO": $dc46bea2f2597899$exports,
        "ru-RU": $622bbd6719cc95af$exports,
        "sk-SK": $4da03c1ecd9a9c7d$exports,
        "sl-SI": $edb6b2fe456ed4e8$exports,
        "sr-SP": $264cd81c52b30815$exports,
        "sv-SE": $6f80afde0270dda7$exports,
        "tr-TR": $23a92651c6957668$exports,
        "uk-UA": $0f9b1074d04f4954$exports,
        "zh-CN": $a9cedf75b94e4916$exports,
        "zh-TW": $37cff576474bc8d4$exports
    };

    function $parcel$interopDefault$1(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    let $799cddbef784668f$var$dictionary = new ($5b160d28a433310d$export$c17fa47878dc55b6)((($parcel$interopDefault$1($f98dad178a72c00d$exports))));
    function $799cddbef784668f$export$6e865ea70d7724f(value) {
        let res = $799cddbef784668f$var$RGBColor.parse(value) || $799cddbef784668f$var$HSBColor.parse(value) || $799cddbef784668f$var$HSLColor.parse(value);
        if (res) return res;
        throw new Error('Invalid color value: ' + value);
    }
    function $799cddbef784668f$export$4cde5df63f53f473(v) {
        if (typeof v === 'string') return $799cddbef784668f$export$6e865ea70d7724f(v);
        else return v;
    }
    // Lightness threshold between orange and brown.
    const $799cddbef784668f$var$ORANGE_LIGHTNESS_THRESHOLD = 0.68;
    // Lightness threshold between pure yellow and "yellow green".
    const $799cddbef784668f$var$YELLOW_GREEN_LIGHTNESS_THRESHOLD = 0.85;
    // The maximum lightness considered to be "dark".
    const $799cddbef784668f$var$MAX_DARK_LIGHTNESS = 0.55;
    // The chroma threshold between gray and color.
    const $799cddbef784668f$var$GRAY_THRESHOLD = 0.001;
    const $799cddbef784668f$var$OKLCH_HUES = [
        [
            0,
            'pink'
        ],
        [
            15,
            'red'
        ],
        [
            48,
            'orange'
        ],
        [
            94,
            'yellow'
        ],
        [
            135,
            'green'
        ],
        [
            175,
            'cyan'
        ],
        [
            264,
            'blue'
        ],
        [
            284,
            'purple'
        ],
        [
            320,
            'magenta'
        ],
        [
            349,
            'pink'
        ]
    ];
    class $799cddbef784668f$var$Color {
        toHexInt() {
            return this.toFormat('rgb').toHexInt();
        }
        getChannelValue(channel) {
            if (channel in this) return this[channel];
            throw new Error('Unsupported color channel: ' + channel);
        }
        withChannelValue(channel, value) {
            if (channel in this) {
                let x = this.clone();
                x[channel] = value;
                return x;
            }
            throw new Error('Unsupported color channel: ' + channel);
        }
        getChannelName(channel, locale) {
            let strings = ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage('@react-stately/color') || $799cddbef784668f$var$dictionary;
            return strings.getStringForLocale(channel, locale);
        }
        getColorSpaceAxes(xyChannels) {
            let { xChannel: xChannel, yChannel: yChannel } = xyChannels;
            let xCh = xChannel || this.getColorChannels().find((c)=>c !== yChannel);
            let yCh = yChannel || this.getColorChannels().find((c)=>c !== xCh);
            let zCh = this.getColorChannels().find((c)=>c !== xCh && c !== yCh);
            return {
                xChannel: xCh,
                yChannel: yCh,
                zChannel: zCh
            };
        }
        getColorName(locale) {
            // Convert to oklch color space, which has perceptually uniform lightness across all hues.
            let [l, c, h] = $799cddbef784668f$var$toOKLCH(this);
            let strings = ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage('@react-stately/color') || $799cddbef784668f$var$dictionary;
            if (l > 0.999) return strings.getStringForLocale('white', locale);
            if (l < 0.001) return strings.getStringForLocale('black', locale);
            let hue;
            [hue, l] = this.getOklchHue(l, c, h, locale);
            let lightness = '';
            let chroma = '';
            if (c <= 0.1 && c >= $799cddbef784668f$var$GRAY_THRESHOLD) {
                if (l >= 0.7) chroma = 'pale';
                else chroma = 'grayish';
            } else if (c >= 0.15) chroma = 'vibrant';
            if (l < 0.3) lightness = 'very dark';
            else if (l < $799cddbef784668f$var$MAX_DARK_LIGHTNESS) lightness = 'dark';
            else if (l < 0.7) ;
            else if (l < 0.85) lightness = 'light';
            else lightness = 'very light';
            if (chroma) chroma = strings.getStringForLocale(chroma, locale);
            if (lightness) lightness = strings.getStringForLocale(lightness, locale);
            let alpha = this.getChannelValue('alpha');
            let formatter = new ($6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, strings);
            if (alpha < 1) {
                let percentTransparent = new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, {
                    style: 'percent'
                }).format(1 - alpha);
                return formatter.format('transparentColorName', {
                    lightness: lightness,
                    chroma: chroma,
                    hue: hue,
                    percentTransparent: percentTransparent
                }).replace(/\s+/g, ' ').trim();
            } else return formatter.format('colorName', {
                lightness: lightness,
                chroma: chroma,
                hue: hue
            }).replace(/\s+/g, ' ').trim();
        }
        getOklchHue(l, c, h, locale) {
            let strings = ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage('@react-stately/color') || $799cddbef784668f$var$dictionary;
            if (c < $799cddbef784668f$var$GRAY_THRESHOLD) return [
                strings.getStringForLocale('gray', locale),
                l
            ];
            for(let i = 0; i < $799cddbef784668f$var$OKLCH_HUES.length; i++){
                let [hue, hueName] = $799cddbef784668f$var$OKLCH_HUES[i];
                let [nextHue, nextHueName] = $799cddbef784668f$var$OKLCH_HUES[i + 1] || [
                    360,
                    'pink'
                ];
                if (h >= hue && h < nextHue) {
                    // Split orange hue into brown/orange depending on lightness.
                    if (hueName === 'orange') {
                        if (l < $799cddbef784668f$var$ORANGE_LIGHTNESS_THRESHOLD) hueName = 'brown';
                        else // Adjust lightness.
                        l = l - $799cddbef784668f$var$ORANGE_LIGHTNESS_THRESHOLD + $799cddbef784668f$var$MAX_DARK_LIGHTNESS;
                    }
                    // If the hue is at least halfway to the next hue, add the next hue name as well.
                    if (h > hue + (nextHue - hue) / 2 && hueName !== nextHueName) hueName = `${hueName} ${nextHueName}`;
                    else if (hueName === 'yellow' && l < $799cddbef784668f$var$YELLOW_GREEN_LIGHTNESS_THRESHOLD) // Yellow shifts toward green at lower lightnesses.
                    hueName = 'yellow green';
                    let name = strings.getStringForLocale(hueName, locale).toLocaleLowerCase(locale);
                    return [
                        name,
                        l
                    ];
                }
            }
            throw new Error('Unexpected hue');
        }
        getHueName(locale) {
            let [l, c, h] = $799cddbef784668f$var$toOKLCH(this);
            let [name] = this.getOklchHue(l, c, h, locale);
            return name;
        }
    }
    class $799cddbef784668f$var$RGBColor extends $799cddbef784668f$var$Color {
        static parse(value) {
            let colors = [];
            // matching #rgb, #rgba, #rrggbb, #rrggbbaa
            if (/^#[\da-f]+$/i.test(value) && [
                4,
                5,
                7,
                9
            ].includes(value.length)) {
                const values = (value.length < 6 ? value.replace(/[^#]/gi, '$&$&') : value).slice(1).split('');
                while(values.length > 0)colors.push(parseInt(values.splice(0, 2).join(''), 16));
                colors[3] = colors[3] !== undefined ? colors[3] / 255 : undefined;
            }
            // matching rgb(rrr, ggg, bbb), rgba(rrr, ggg, bbb, 0.a)
            const match = value.match(/^rgba?\((.*)\)$/);
            if (match === null || match === void 0 ? void 0 : match[1]) {
                colors = match[1].split(',').map((value)=>Number(value.trim()));
                colors = colors.map((num, i)=>($9446cca9a3875146$export$7d15b64cf5a3a4c4)(num, 0, i < 3 ? 255 : 1));
            }
            var _colors_;
            return colors.length < 3 ? undefined : new $799cddbef784668f$var$RGBColor(colors[0], colors[1], colors[2], (_colors_ = colors[3]) !== null && _colors_ !== void 0 ? _colors_ : 1);
        }
        toString(format = 'css') {
            switch(format){
                case 'hex':
                    return '#' + (this.red.toString(16).padStart(2, '0') + this.green.toString(16).padStart(2, '0') + this.blue.toString(16).padStart(2, '0')).toUpperCase();
                case 'hexa':
                    return '#' + (this.red.toString(16).padStart(2, '0') + this.green.toString(16).padStart(2, '0') + this.blue.toString(16).padStart(2, '0') + Math.round(this.alpha * 255).toString(16).padStart(2, '0')).toUpperCase();
                case 'rgb':
                    return `rgb(${this.red}, ${this.green}, ${this.blue})`;
                case 'css':
                case 'rgba':
                    return `rgba(${this.red}, ${this.green}, ${this.blue}, ${this.alpha})`;
                default:
                    return this.toFormat(format).toString(format);
            }
        }
        toFormat(format) {
            switch(format){
                case 'hex':
                case 'hexa':
                case 'rgb':
                case 'rgba':
                    return this;
                case 'hsb':
                case 'hsba':
                    return this.toHSB();
                case 'hsl':
                case 'hsla':
                    return this.toHSL();
                default:
                    throw new Error('Unsupported color conversion: rgb -> ' + format);
            }
        }
        toHexInt() {
            return this.red << 16 | this.green << 8 | this.blue;
        }
        /**
       * Converts an RGB color value to HSB.
       * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
       * @returns An HSBColor object.
       */ toHSB() {
            const red = this.red / 255;
            const green = this.green / 255;
            const blue = this.blue / 255;
            const min = Math.min(red, green, blue);
            const brightness = Math.max(red, green, blue);
            const chroma = brightness - min;
            const saturation = brightness === 0 ? 0 : chroma / brightness;
            let hue = 0; // achromatic
            if (chroma !== 0) {
                switch(brightness){
                    case red:
                        hue = (green - blue) / chroma + (green < blue ? 6 : 0);
                        break;
                    case green:
                        hue = (blue - red) / chroma + 2;
                        break;
                    case blue:
                        hue = (red - green) / chroma + 4;
                        break;
                }
                hue /= 6;
            }
            return new $799cddbef784668f$var$HSBColor(($9446cca9a3875146$export$b6268554fba451f)(hue * 360, 2), ($9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), ($9446cca9a3875146$export$b6268554fba451f)(brightness * 100, 2), this.alpha);
        }
        /**
       * Converts an RGB color value to HSL.
       * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB.
       * @returns An HSLColor object.
       */ toHSL() {
            const red = this.red / 255;
            const green = this.green / 255;
            const blue = this.blue / 255;
            const min = Math.min(red, green, blue);
            const max = Math.max(red, green, blue);
            const lightness = (max + min) / 2;
            const chroma = max - min;
            let hue;
            let saturation;
            if (chroma === 0) hue = saturation = 0; // achromatic
            else {
                saturation = chroma / (lightness < .5 ? max + min : 2 - max - min);
                switch(max){
                    case red:
                        hue = (green - blue) / chroma + (green < blue ? 6 : 0);
                        break;
                    case green:
                        hue = (blue - red) / chroma + 2;
                        break;
                    case blue:
                        hue = (red - green) / chroma + 4;
                        break;
                }
                hue /= 6;
            }
            return new $799cddbef784668f$var$HSLColor(($9446cca9a3875146$export$b6268554fba451f)(hue * 360, 2), ($9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), ($9446cca9a3875146$export$b6268554fba451f)(lightness * 100, 2), this.alpha);
        }
        clone() {
            return new $799cddbef784668f$var$RGBColor(this.red, this.green, this.blue, this.alpha);
        }
        getChannelRange(channel) {
            switch(channel){
                case 'red':
                case 'green':
                case 'blue':
                    return {
                        minValue: 0x0,
                        maxValue: 0xFF,
                        step: 0x1,
                        pageSize: 0x11
                    };
                case 'alpha':
                    return {
                        minValue: 0,
                        maxValue: 1,
                        step: 0.01,
                        pageSize: 0.1
                    };
                default:
                    throw new Error('Unknown color channel: ' + channel);
            }
        }
        getChannelFormatOptions(channel) {
            switch(channel){
                case 'red':
                case 'green':
                case 'blue':
                    return {
                        style: 'decimal'
                    };
                case 'alpha':
                    return {
                        style: 'percent'
                    };
                default:
                    throw new Error('Unknown color channel: ' + channel);
            }
        }
        formatChannelValue(channel, locale) {
            let options = this.getChannelFormatOptions(channel);
            let value = this.getChannelValue(channel);
            return new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
        }
        getColorSpace() {
            return 'rgb';
        }
        getColorChannels() {
            return $799cddbef784668f$var$RGBColor.colorChannels;
        }
        constructor(red, green, blue, alpha){
            super();
            this.red = red;
            this.green = green;
            this.blue = blue;
            this.alpha = alpha;
        }
    }
    $799cddbef784668f$var$RGBColor.colorChannels = [
        'red',
        'green',
        'blue'
    ];
    // X = <negative/positive number with/without decimal places>
    // before/after a comma, 0 or more whitespaces are allowed
    // - hsb(X, X%, X%)
    // - hsba(X, X%, X%, X)
    const $799cddbef784668f$var$HSB_REGEX = /hsb\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsba\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
    class $799cddbef784668f$var$HSBColor extends $799cddbef784668f$var$Color {
        static parse(value) {
            let m;
            if (m = value.match($799cddbef784668f$var$HSB_REGEX)) {
                var _m_;
                const [h, s, b, a] = ((_m_ = m[1]) !== null && _m_ !== void 0 ? _m_ : m[2]).split(',').map((n)=>Number(n.trim().replace('%', '')));
                return new $799cddbef784668f$var$HSBColor($799cddbef784668f$var$mod(h, 360), ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(s, 0, 100), ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(b, 0, 100), ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(a !== null && a !== void 0 ? a : 1, 0, 1));
            }
        }
        toString(format = 'css') {
            switch(format){
                case 'css':
                    return this.toHSL().toString('css');
                case 'hex':
                    return this.toRGB().toString('hex');
                case 'hexa':
                    return this.toRGB().toString('hexa');
                case 'hsb':
                    return `hsb(${this.hue}, ${($9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${($9446cca9a3875146$export$b6268554fba451f)(this.brightness, 2)}%)`;
                case 'hsba':
                    return `hsba(${this.hue}, ${($9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${($9446cca9a3875146$export$b6268554fba451f)(this.brightness, 2)}%, ${this.alpha})`;
                default:
                    return this.toFormat(format).toString(format);
            }
        }
        toFormat(format) {
            switch(format){
                case 'hsb':
                case 'hsba':
                    return this;
                case 'hsl':
                case 'hsla':
                    return this.toHSL();
                case 'rgb':
                case 'rgba':
                    return this.toRGB();
                default:
                    throw new Error('Unsupported color conversion: hsb -> ' + format);
            }
        }
        /**
       * Converts a HSB color to HSL.
       * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_HSL.
       * @returns An HSLColor object.
       */ toHSL() {
            let saturation = this.saturation / 100;
            let brightness = this.brightness / 100;
            let lightness = brightness * (1 - saturation / 2);
            saturation = lightness === 0 || lightness === 1 ? 0 : (brightness - lightness) / Math.min(lightness, 1 - lightness);
            return new $799cddbef784668f$var$HSLColor(($9446cca9a3875146$export$b6268554fba451f)(this.hue, 2), ($9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), ($9446cca9a3875146$export$b6268554fba451f)(lightness * 100, 2), this.alpha);
        }
        /**
       * Converts a HSV color value to RGB.
       * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative.
       * @returns An RGBColor object.
       */ toRGB() {
            let hue = this.hue;
            let saturation = this.saturation / 100;
            let brightness = this.brightness / 100;
            let fn = (n, k = (n + hue / 60) % 6)=>brightness - saturation * brightness * Math.max(Math.min(k, 4 - k, 1), 0);
            return new $799cddbef784668f$var$RGBColor(Math.round(fn(5) * 255), Math.round(fn(3) * 255), Math.round(fn(1) * 255), this.alpha);
        }
        clone() {
            return new $799cddbef784668f$var$HSBColor(this.hue, this.saturation, this.brightness, this.alpha);
        }
        getChannelRange(channel) {
            switch(channel){
                case 'hue':
                    return {
                        minValue: 0,
                        maxValue: 360,
                        step: 1,
                        pageSize: 15
                    };
                case 'saturation':
                case 'brightness':
                    return {
                        minValue: 0,
                        maxValue: 100,
                        step: 1,
                        pageSize: 10
                    };
                case 'alpha':
                    return {
                        minValue: 0,
                        maxValue: 1,
                        step: 0.01,
                        pageSize: 0.1
                    };
                default:
                    throw new Error('Unknown color channel: ' + channel);
            }
        }
        getChannelFormatOptions(channel) {
            switch(channel){
                case 'hue':
                    return {
                        style: 'unit',
                        unit: 'degree',
                        unitDisplay: 'narrow'
                    };
                case 'saturation':
                case 'brightness':
                case 'alpha':
                    return {
                        style: 'percent'
                    };
                default:
                    throw new Error('Unknown color channel: ' + channel);
            }
        }
        formatChannelValue(channel, locale) {
            let options = this.getChannelFormatOptions(channel);
            let value = this.getChannelValue(channel);
            if (channel === 'saturation' || channel === 'brightness') value /= 100;
            return new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
        }
        getColorSpace() {
            return 'hsb';
        }
        getColorChannels() {
            return $799cddbef784668f$var$HSBColor.colorChannels;
        }
        constructor(hue, saturation, brightness, alpha){
            super();
            this.hue = hue;
            this.saturation = saturation;
            this.brightness = brightness;
            this.alpha = alpha;
        }
    }
    $799cddbef784668f$var$HSBColor.colorChannels = [
        'hue',
        'saturation',
        'brightness'
    ];
    // X = <negative/positive number with/without decimal places>
    // before/after a comma, 0 or more whitespaces are allowed
    // - hsl(X, X%, X%)
    // - hsla(X, X%, X%, X)
    const $799cddbef784668f$var$HSL_REGEX = /hsl\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%)\)|hsla\(([-+]?\d+(?:.\d+)?\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d+(?:.\d+)?%\s*,\s*[-+]?\d(.\d+)?)\)/;
    function $799cddbef784668f$var$mod(n, m) {
        return (n % m + m) % m;
    }
    class $799cddbef784668f$var$HSLColor extends $799cddbef784668f$var$Color {
        static parse(value) {
            let m;
            if (m = value.match($799cddbef784668f$var$HSL_REGEX)) {
                var _m_;
                const [h, s, l, a] = ((_m_ = m[1]) !== null && _m_ !== void 0 ? _m_ : m[2]).split(',').map((n)=>Number(n.trim().replace('%', '')));
                return new $799cddbef784668f$var$HSLColor($799cddbef784668f$var$mod(h, 360), ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(s, 0, 100), ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(l, 0, 100), ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(a !== null && a !== void 0 ? a : 1, 0, 1));
            }
        }
        toString(format = 'css') {
            switch(format){
                case 'hex':
                    return this.toRGB().toString('hex');
                case 'hexa':
                    return this.toRGB().toString('hexa');
                case 'hsl':
                    return `hsl(${this.hue}, ${($9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${($9446cca9a3875146$export$b6268554fba451f)(this.lightness, 2)}%)`;
                case 'css':
                case 'hsla':
                    return `hsla(${this.hue}, ${($9446cca9a3875146$export$b6268554fba451f)(this.saturation, 2)}%, ${($9446cca9a3875146$export$b6268554fba451f)(this.lightness, 2)}%, ${this.alpha})`;
                default:
                    return this.toFormat(format).toString(format);
            }
        }
        toFormat(format) {
            switch(format){
                case 'hsl':
                case 'hsla':
                    return this;
                case 'hsb':
                case 'hsba':
                    return this.toHSB();
                case 'rgb':
                case 'rgba':
                    return this.toRGB();
                default:
                    throw new Error('Unsupported color conversion: hsl -> ' + format);
            }
        }
        /**
       * Converts a HSL color to HSB.
       * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_HSV.
       * @returns An HSBColor object.
       */ toHSB() {
            let saturation = this.saturation / 100;
            let lightness = this.lightness / 100;
            let brightness = lightness + saturation * Math.min(lightness, 1 - lightness);
            saturation = brightness === 0 ? 0 : 2 * (1 - lightness / brightness);
            return new $799cddbef784668f$var$HSBColor(($9446cca9a3875146$export$b6268554fba451f)(this.hue, 2), ($9446cca9a3875146$export$b6268554fba451f)(saturation * 100, 2), ($9446cca9a3875146$export$b6268554fba451f)(brightness * 100, 2), this.alpha);
        }
        /**
       * Converts a HSL color to RGB.
       * Conversion formula adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative.
       * @returns An RGBColor object.
       */ toRGB() {
            let hue = this.hue;
            let saturation = this.saturation / 100;
            let lightness = this.lightness / 100;
            let a = saturation * Math.min(lightness, 1 - lightness);
            let fn = (n, k = (n + hue / 30) % 12)=>lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
            return new $799cddbef784668f$var$RGBColor(Math.round(fn(0) * 255), Math.round(fn(8) * 255), Math.round(fn(4) * 255), this.alpha);
        }
        clone() {
            return new $799cddbef784668f$var$HSLColor(this.hue, this.saturation, this.lightness, this.alpha);
        }
        getChannelRange(channel) {
            switch(channel){
                case 'hue':
                    return {
                        minValue: 0,
                        maxValue: 360,
                        step: 1,
                        pageSize: 15
                    };
                case 'saturation':
                case 'lightness':
                    return {
                        minValue: 0,
                        maxValue: 100,
                        step: 1,
                        pageSize: 10
                    };
                case 'alpha':
                    return {
                        minValue: 0,
                        maxValue: 1,
                        step: 0.01,
                        pageSize: 0.1
                    };
                default:
                    throw new Error('Unknown color channel: ' + channel);
            }
        }
        getChannelFormatOptions(channel) {
            switch(channel){
                case 'hue':
                    return {
                        style: 'unit',
                        unit: 'degree',
                        unitDisplay: 'narrow'
                    };
                case 'saturation':
                case 'lightness':
                case 'alpha':
                    return {
                        style: 'percent'
                    };
                default:
                    throw new Error('Unknown color channel: ' + channel);
            }
        }
        formatChannelValue(channel, locale) {
            let options = this.getChannelFormatOptions(channel);
            let value = this.getChannelValue(channel);
            if (channel === 'saturation' || channel === 'lightness') value /= 100;
            return new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options).format(value);
        }
        getColorSpace() {
            return 'hsl';
        }
        getColorChannels() {
            return $799cddbef784668f$var$HSLColor.colorChannels;
        }
        constructor(hue, saturation, lightness, alpha){
            super();
            this.hue = hue;
            this.saturation = saturation;
            this.lightness = lightness;
            this.alpha = alpha;
        }
    }
    $799cddbef784668f$var$HSLColor.colorChannels = [
        'hue',
        'saturation',
        'lightness'
    ];
    // https://www.w3.org/TR/css-color-4/#color-conversion-code
    function $799cddbef784668f$var$toOKLCH(color) {
        let rgb = color.toFormat('rgb');
        let red = rgb.getChannelValue('red') / 255;
        let green = rgb.getChannelValue('green') / 255;
        let blue = rgb.getChannelValue('blue') / 255;
        [red, green, blue] = $799cddbef784668f$var$lin_sRGB(red, green, blue);
        let [x, y, z] = $799cddbef784668f$var$lin_sRGB_to_XYZ(red, green, blue);
        let [l, a, b] = $799cddbef784668f$var$XYZ_to_OKLab(x, y, z);
        return $799cddbef784668f$var$OKLab_to_OKLCH(l, a, b);
    }
    function $799cddbef784668f$var$OKLab_to_OKLCH(l, a, b) {
        var hue = Math.atan2(b, a) * 180 / Math.PI;
        return [
            l,
            Math.sqrt(a ** 2 + b ** 2),
            hue >= 0 ? hue : hue + 360 // Hue, in degrees [0 to 360)
        ];
    }
    function $799cddbef784668f$var$lin_sRGB(r, g, b) {
        // convert an array of sRGB values
        // where in-gamut values are in the range [0 - 1]
        // to linear light (un-companded) form.
        // https://en.wikipedia.org/wiki/SRGB
        // Extended transfer function:
        // for negative values,  linear portion is extended on reflection of axis,
        // then reflected power function is used.
        return [
            $799cddbef784668f$var$lin_sRGB_component(r),
            $799cddbef784668f$var$lin_sRGB_component(g),
            $799cddbef784668f$var$lin_sRGB_component(b)
        ];
    }
    function $799cddbef784668f$var$lin_sRGB_component(val) {
        let sign = val < 0 ? -1 : 1;
        let abs = Math.abs(val);
        if (abs <= 0.04045) return val / 12.92;
        return sign * Math.pow((abs + 0.055) / 1.055, 2.4);
    }
    function $799cddbef784668f$var$lin_sRGB_to_XYZ(r, g, b) {
        // convert an array of linear-light sRGB values to CIE XYZ
        // using sRGB's own white, D65 (no chromatic adaptation)
        const M = [
            506752 / 1228815,
            87881 / 245763,
            12673 / 70218,
            87098 / 409605,
            175762 / 245763,
            12673 / 175545,
            7918 / 409605,
            87881 / 737289,
            1001167 / 1053270
        ];
        return $799cddbef784668f$var$multiplyMatrix(M, r, g, b);
    }
    function $799cddbef784668f$var$XYZ_to_OKLab(x, y, z) {
        // Given XYZ relative to D65, convert to OKLab
        const XYZtoLMS = [
            0.8190224379967030,
            0.3619062600528904,
            -0.1288737815209879,
            0.0329836539323885,
            0.9292868615863434,
            0.0361446663506424,
            0.0481771893596242,
            0.2642395317527308,
            0.6335478284694309
        ];
        const LMStoOKLab = [
            0.2104542683093140,
            0.7936177747023054,
            -0.0040720430116193,
            1.9779985324311684,
            -2.42859224204858,
            0.4505937096174110,
            0.0259040424655478,
            0.7827717124575296,
            -0.8086757549230774
        ];
        let [a, b, c] = $799cddbef784668f$var$multiplyMatrix(XYZtoLMS, x, y, z);
        return $799cddbef784668f$var$multiplyMatrix(LMStoOKLab, Math.cbrt(a), Math.cbrt(b), Math.cbrt(c));
    }
    function $799cddbef784668f$var$multiplyMatrix(m, x, y, z) {
        let a = m[0] * x + m[1] * y + m[2] * z;
        let b = m[3] * x + m[4] * y + m[5] * z;
        let c = m[6] * x + m[7] * y + m[8] * z;
        return [
            a,
            b,
            c
        ];
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 


    const $6e14a98a7f67141d$var$DEFAULT_COLOR = ($799cddbef784668f$export$6e865ea70d7724f)('#ffffff');
    function $6e14a98a7f67141d$export$6df7f0e2cabc7eef(props) {
        let { value: value, defaultValue: defaultValue, colorSpace: colorSpace, xChannel: xChannel, yChannel: yChannel, onChange: onChange, onChangeEnd: onChangeEnd } = props;
        if (!value && !defaultValue) defaultValue = $6e14a98a7f67141d$var$DEFAULT_COLOR;
        let [colorValue, setColorState] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(value && ($799cddbef784668f$export$4cde5df63f53f473)(value), defaultValue && ($799cddbef784668f$export$4cde5df63f53f473)(defaultValue), onChange);
        let color = (0, wp.element.useMemo)(()=>colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [
            colorValue,
            colorSpace
        ]);
        let valueRef = (0, wp.element.useRef)(color);
        let setColor = (color)=>{
            valueRef.current = color;
            setColorState(color);
        };
        let channels = (0, wp.element.useMemo)(()=>color.getColorSpaceAxes({
                xChannel: xChannel,
                yChannel: yChannel
            }), [
            color,
            xChannel,
            yChannel
        ]);
        let xChannelRange = color.getChannelRange(channels.xChannel);
        let yChannelRange = color.getChannelRange(channels.yChannel);
        let { minValue: minValueX, maxValue: maxValueX, step: stepX, pageSize: pageSizeX } = xChannelRange;
        let { minValue: minValueY, maxValue: maxValueY, step: stepY, pageSize: pageSizeY } = yChannelRange;
        let [isDragging, setDragging] = (0, wp.element.useState)(false);
        let isDraggingRef = (0, wp.element.useRef)(false);
        let xValue = color.getChannelValue(channels.xChannel);
        let yValue = color.getChannelValue(channels.yChannel);
        let setXValue = (v)=>{
            if (v === xValue) return;
            let newColor = color.withChannelValue(channels.xChannel, v);
            setColor(newColor);
        };
        let setYValue = (v)=>{
            if (v === yValue) return;
            let newColor = color.withChannelValue(channels.yChannel, v);
            setColor(newColor);
        };
        return {
            channels: channels,
            xChannelStep: stepX,
            yChannelStep: stepY,
            xChannelPageStep: pageSizeX,
            yChannelPageStep: pageSizeY,
            value: color,
            setValue (value) {
                setColor(($799cddbef784668f$export$4cde5df63f53f473)(value));
            },
            xValue: xValue,
            setXValue: setXValue,
            yValue: yValue,
            setYValue: setYValue,
            setColorFromPoint (x, y) {
                let newXValue = minValueX + ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(x, 0, 1) * (maxValueX - minValueX);
                let newYValue = minValueY + (1 - ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(y, 0, 1)) * (maxValueY - minValueY);
                let newColor;
                if (newXValue !== xValue) {
                    // Round new value to multiple of step, clamp value between min and max
                    newXValue = ($9446cca9a3875146$export$cb6e0bb50bc19463)(newXValue, minValueX, maxValueX, stepX);
                    newColor = color.withChannelValue(channels.xChannel, newXValue);
                }
                if (newYValue !== yValue) {
                    // Round new value to multiple of step, clamp value between min and max
                    newYValue = ($9446cca9a3875146$export$cb6e0bb50bc19463)(newYValue, minValueY, maxValueY, stepY);
                    newColor = (newColor || color).withChannelValue(channels.yChannel, newYValue);
                }
                if (newColor) setColor(newColor);
            },
            getThumbPosition () {
                let x = (xValue - minValueX) / (maxValueX - minValueX);
                let y = 1 - (yValue - minValueY) / (maxValueY - minValueY);
                return {
                    x: x,
                    y: y
                };
            },
            incrementX (stepSize) {
                setXValue(xValue + stepSize > maxValueX ? maxValueX : ($9446cca9a3875146$export$cb6e0bb50bc19463)(xValue + stepSize, minValueX, maxValueX, stepX));
            },
            incrementY (stepSize) {
                setYValue(yValue + stepSize > maxValueY ? maxValueY : ($9446cca9a3875146$export$cb6e0bb50bc19463)(yValue + stepSize, minValueY, maxValueY, stepY));
            },
            decrementX (stepSize) {
                setXValue(($9446cca9a3875146$export$cb6e0bb50bc19463)(xValue - stepSize, minValueX, maxValueX, stepX));
            },
            decrementY (stepSize) {
                setYValue(($9446cca9a3875146$export$cb6e0bb50bc19463)(yValue - stepSize, minValueY, maxValueY, stepY));
            },
            setDragging (isDragging) {
                let wasDragging = isDraggingRef.current;
                isDraggingRef.current = isDragging;
                if (onChangeEnd && !isDragging && wasDragging) onChangeEnd(valueRef.current);
                setDragging(isDragging);
            },
            isDragging: isDragging,
            getDisplayColor () {
                return color.withChannelValue('alpha', 1);
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $25a25ac0d1624665$export$57bc203e1c9c6d44(props) {
        let { channel: channel, colorSpace: colorSpace, value: value, defaultValue: defaultValue, onChange: onChange, locale: locale, ...otherProps } = props;
        if (value == null && defaultValue == null) throw new Error('useColorSliderState requires a value or defaultValue');
        let [colorValue, setColor] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(value && ($799cddbef784668f$export$4cde5df63f53f473)(value), defaultValue && ($799cddbef784668f$export$4cde5df63f53f473)(defaultValue), onChange);
        let color = (0, wp.element.useMemo)(()=>colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [
            colorValue,
            colorSpace
        ]);
        let sliderState = ($28f99e3e86e6ec45$export$e5fda3247f5d67f9)({
            ...color.getChannelRange(channel),
            ...otherProps,
            // Unused except in getThumbValueLabel, which is overridden below. null to appease TypeScript.
            numberFormatter: null,
            value: color.getChannelValue(channel),
            onChange (v) {
                setColor(color.withChannelValue(channel, v));
            },
            onChangeEnd (v) {
                // onChange will have already been called with the right value, this is just to trigger onChangeEnd
                if (props.onChangeEnd) props.onChangeEnd(color.withChannelValue(channel, v));
            }
        });
        let { step: step, pageSize: pageSize } = color.getChannelRange(channel);
        return {
            ...sliderState,
            value: color,
            setValue (value) {
                setColor(($799cddbef784668f$export$4cde5df63f53f473)(value));
            },
            getDisplayColor () {
                switch(channel){
                    case 'hue':
                        return ($799cddbef784668f$export$6e865ea70d7724f)(`hsl(${color.getChannelValue('hue')}, 100%, 50%)`);
                    case 'lightness':
                    case 'brightness':
                    case 'saturation':
                    case 'red':
                    case 'green':
                    case 'blue':
                        return color.withChannelValue('alpha', 1);
                    case 'alpha':
                        return color;
                    default:
                        throw new Error('Unknown color channel: ' + channel);
                }
            },
            getThumbValueLabel () {
                return color.formatChannelValue(channel, locale);
            },
            step: step,
            pageSize: pageSize,
            isDragging: sliderState.isThumbDragging(0)
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 

    function $aa90ad8b2b1d015f$export$5aadd9c0606af5c2(value) {
        return (0, wp.element.useMemo)(()=>{
            if (typeof value === 'string') try {
                return (0, $799cddbef784668f$export$6e865ea70d7724f)(value);
            } catch (err) {
                return undefined;
            }
            return value;
        }, [
            value
        ]);
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 




    const $b335ada08155d9c0$var$MIN_COLOR = ($799cddbef784668f$export$6e865ea70d7724f)('#000000');
    const $b335ada08155d9c0$var$MAX_COLOR = ($799cddbef784668f$export$6e865ea70d7724f)('#FFFFFF');
    const $b335ada08155d9c0$var$MIN_COLOR_INT = $b335ada08155d9c0$var$MIN_COLOR.toHexInt();
    const $b335ada08155d9c0$var$MAX_COLOR_INT = $b335ada08155d9c0$var$MAX_COLOR.toHexInt();
    function $b335ada08155d9c0$export$d52a01683abdfcd6(props) {
        let { value: value, defaultValue: defaultValue, onChange: onChange } = props;
        let { step: step } = $b335ada08155d9c0$var$MIN_COLOR.getChannelRange('red');
        let initialValue = ($aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(value);
        let initialDefaultValue = ($aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(defaultValue);
        let [colorValue, setColorValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(initialValue, initialDefaultValue, onChange);
        let [inputValue, setInputValue] = (0, wp.element.useState)(()=>(value || defaultValue) && colorValue ? colorValue.toString('hex') : '');
        let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
            ...props,
            value: colorValue
        });
        let safelySetColorValue = (newColor)=>{
            if (!colorValue || !newColor) {
                setColorValue(newColor);
                return;
            }
            if (newColor.toHexInt() !== colorValue.toHexInt()) {
                setColorValue(newColor);
                return;
            }
        };
        let [prevValue, setPrevValue] = (0, wp.element.useState)(colorValue);
        if (prevValue !== colorValue) {
            setInputValue(colorValue ? colorValue.toString('hex') : '');
            setPrevValue(colorValue);
        }
        let parsedValue = (0, wp.element.useMemo)(()=>{
            let color;
            try {
                color = (0, $799cddbef784668f$export$6e865ea70d7724f)(inputValue.startsWith('#') ? inputValue : `#${inputValue}`);
            } catch (err) {
                color = null;
            }
            return color;
        }, [
            inputValue
        ]);
        let commit = ()=>{
            // Set to empty state if input value is empty
            if (!inputValue.length) {
                safelySetColorValue(null);
                setInputValue(value === undefined ? '' : colorValue.toString('hex'));
                return;
            }
            // if it failed to parse, then reset input to formatted version of current number
            if (parsedValue == null) {
                setInputValue(colorValue ? colorValue.toString('hex') : '');
                return;
            }
            safelySetColorValue(parsedValue);
            // in a controlled state, the numberValue won't change, so we won't go back to our old input without help
            let newColorValue = '';
            if (colorValue) newColorValue = colorValue.toString('hex');
            setInputValue(newColorValue);
        };
        let increment = ()=>{
            let newValue = $b335ada08155d9c0$var$addColorValue(parsedValue, step);
            // if we've arrived at the same value that was previously in the state, the
            // input value should be updated to match
            // ex type 4, press increment, highlight the number in the input, type 4 again, press increment
            // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input
            if (newValue === colorValue) setInputValue(newValue.toString('hex'));
            safelySetColorValue(newValue);
            validation.commitValidation();
        };
        let decrement = ()=>{
            let newValue = $b335ada08155d9c0$var$addColorValue(parsedValue, -step);
            // if we've arrived at the same value that was previously in the state, the
            // input value should be updated to match
            // ex type 4, press increment, highlight the number in the input, type 4 again, press increment
            // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input
            if (newValue === colorValue) setInputValue(newValue.toString('hex'));
            safelySetColorValue(newValue);
            validation.commitValidation();
        };
        let incrementToMax = ()=>safelySetColorValue($b335ada08155d9c0$var$MAX_COLOR);
        let decrementToMin = ()=>safelySetColorValue($b335ada08155d9c0$var$MIN_COLOR);
        let validate = (value)=>{
            var _value_match;
            return value === '' || !!((_value_match = value.match(/^#?[0-9a-f]{0,6}$/i)) === null || _value_match === void 0 ? void 0 : _value_match[0]);
        };
        return {
            ...validation,
            validate: validate,
            colorValue: colorValue,
            inputValue: inputValue,
            setInputValue: setInputValue,
            commit: commit,
            increment: increment,
            incrementToMax: incrementToMax,
            decrement: decrement,
            decrementToMin: decrementToMin
        };
    }
    function $b335ada08155d9c0$var$addColorValue(color, step) {
        let newColor = color ? color : $b335ada08155d9c0$var$MIN_COLOR;
        let colorInt = newColor.toHexInt();
        let clampInt = Math.min(Math.max(colorInt + step, $b335ada08155d9c0$var$MIN_COLOR_INT), $b335ada08155d9c0$var$MAX_COLOR_INT);
        if (clampInt !== colorInt) {
            let newColorString = `#${clampInt.toString(16).padStart(6, '0').toUpperCase()}`;
            newColor = ($799cddbef784668f$export$6e865ea70d7724f)(newColorString);
        }
        return newColor;
    }

    /*
     * Copyright 2022 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
    */ 

    const $40297c24c53588e6$var$hue = (color)=>[
            0,
            60,
            120,
            180,
            240,
            300,
            360
        ].map((hue)=>color.withChannelValue('hue', hue).toString('css')).join(', ');
    const $40297c24c53588e6$var$saturation = (color)=>`${color.withChannelValue('saturation', 0)}, transparent`;
    const $40297c24c53588e6$var$hslChannels = {
        hue: $40297c24c53588e6$var$hue,
        saturation: $40297c24c53588e6$var$saturation,
        lightness: ()=>'black, transparent, white'
    };
    const $40297c24c53588e6$var$hsbChannels = {
        hue: $40297c24c53588e6$var$hue,
        saturation: $40297c24c53588e6$var$saturation,
        brightness: ()=>'black, transparent'
    };
    function $40297c24c53588e6$export$dd62420467d245ca({ direction: direction, state: state, zChannel: zChannel, xChannel: xChannel, yChannel: yChannel }) {
        let returnVal = (0, wp.element.useMemo)(()=>{
            let end = direction === 'rtl' ? 'left' : 'right';
            let colorAreaStyles = {};
            let zValue = state.value.getChannelValue(zChannel);
            switch(state.value.getColorSpace()){
                case 'rgb':
                    {
                        let rgb = ($799cddbef784668f$export$6e865ea70d7724f)('rgb(0, 0, 0)');
                        colorAreaStyles = {
                            background: [
                                // The screen blend mode multiplies the inverse of each channel, e.g. 1 - (1 - a) * (1 - b).
                                // Create a layer for each channel, with the other channels as 0. After blending, this should
                                // result in the gradients being combined channel by channel.
                                `linear-gradient(to ${end}, ${rgb.withChannelValue(xChannel, 0)}, ${rgb.withChannelValue(xChannel, 255)})`,
                                `linear-gradient(to top, ${rgb.withChannelValue(yChannel, 0)}, ${rgb.withChannelValue(yChannel, 255)})`,
                                rgb.withChannelValue(zChannel, zValue)
                            ].join(','),
                            backgroundBlendMode: 'screen'
                        };
                        break;
                    }
                case 'hsl':
                    {
                        let channels = state.value.getColorChannels();
                        let value = ($799cddbef784668f$export$6e865ea70d7724f)('hsl(0, 100%, 50%)').withChannelValue(zChannel, zValue);
                        let bg = channels.filter((c)=>c !== zChannel).map((c)=>`linear-gradient(to ${c === xChannel ? end : 'top'}, ${$40297c24c53588e6$var$hslChannels[c](value)})`).reverse();
                        if (zChannel === 'hue') bg.push(value.toString('css'));
                        colorAreaStyles = {
                            background: bg.join(', ')
                        };
                        break;
                    }
                case 'hsb':
                    {
                        let channels = state.value.getColorChannels();
                        let value = ($799cddbef784668f$export$6e865ea70d7724f)('hsb(0, 100%, 100%)').withChannelValue(zChannel, zValue);
                        let bg = channels.filter((c)=>c !== zChannel).map((c)=>`linear-gradient(to ${c === xChannel ? end : 'top'}, ${$40297c24c53588e6$var$hsbChannels[c](value)})`).reverse();
                        if (zChannel === 'hue') bg.push(value.toString('css'));
                        colorAreaStyles = {
                            background: bg.join(', ')
                        };
                        break;
                    }
            }
            let { x: x, y: y } = state.getThumbPosition();
            if (direction === 'rtl') x = 1 - x;
            let forcedColorAdjustNoneStyle = {
                forcedColorAdjust: 'none'
            };
            return {
                colorAreaStyleProps: {
                    style: {
                        position: 'relative',
                        touchAction: 'none',
                        ...forcedColorAdjustNoneStyle,
                        ...colorAreaStyles
                    }
                },
                thumbStyleProps: {
                    style: {
                        position: 'absolute',
                        left: `${x * 100}%`,
                        top: `${y * 100}%`,
                        transform: 'translate(-50%, -50%)',
                        touchAction: 'none',
                        ...forcedColorAdjustNoneStyle
                    }
                }
            };
        }, [
            direction,
            state,
            zChannel,
            xChannel,
            yChannel
        ]);
        return returnVal;
    }

    function $parcel$interopDefault(a) {
      return a && a.__esModule ? a.default : a;
    }
    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 






    function $60bd7d6e45dcddfa$export$2f92a7a615a014f6(props, state) {
        let { isDisabled: isDisabled, inputXRef: inputXRef, inputYRef: inputYRef, containerRef: containerRef, 'aria-label': ariaLabel, xName: xName, yName: yName } = props;
        let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault($3493a52097159720$exports))), '@react-aria/color');
        let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
        let { direction: direction, locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        let [focusedInput, setFocusedInput] = (0, wp.element.useState)(null);
        let focusInput = (0, wp.element.useCallback)((inputRef = inputXRef)=>{
            if (inputRef.current) ($7215afc6de606d6b$export$de79e2c695e052f3)(inputRef.current);
        }, [
            inputXRef
        ]);
        ($99facab73266f662$export$5add1d006293d136)(inputXRef, [
            state.xValue,
            state.yValue
        ], ([x, y])=>{
            let newColor = state.value.withChannelValue(state.channels.xChannel, x).withChannelValue(state.channels.yChannel, y);
            state.setValue(newColor);
        });
        let [valueChangedViaKeyboard, setValueChangedViaKeyboard] = (0, wp.element.useState)(false);
        let [valueChangedViaInputChangeEvent, setValueChangedViaInputChangeEvent] = (0, wp.element.useState)(false);
        let { xChannel: xChannel, yChannel: yChannel, zChannel: zChannel } = state.channels;
        let xChannelStep = state.xChannelStep;
        let yChannelStep = state.yChannelStep;
        let currentPosition = (0, wp.element.useRef)(null);
        let { keyboardProps: keyboardProps } = ($46d819fcbaf35654$export$8f71654801c2f7cd)({
            onKeyDown (e) {
                // these are the cases that useMove doesn't handle
                if (!/^(PageUp|PageDown|Home|End)$/.test(e.key)) {
                    e.continuePropagation();
                    return;
                }
                // same handling as useMove, don't need to stop propagation, useKeyboard will do that for us
                e.preventDefault();
                // remember to set this and unset it so that onChangeEnd is fired
                state.setDragging(true);
                setValueChangedViaKeyboard(true);
                let dir;
                switch(e.key){
                    case 'PageUp':
                        state.incrementY(state.yChannelPageStep);
                        dir = 'y';
                        break;
                    case 'PageDown':
                        state.decrementY(state.yChannelPageStep);
                        dir = 'y';
                        break;
                    case 'Home':
                        direction === 'rtl' ? state.incrementX(state.xChannelPageStep) : state.decrementX(state.xChannelPageStep);
                        dir = 'x';
                        break;
                    case 'End':
                        direction === 'rtl' ? state.decrementX(state.xChannelPageStep) : state.incrementX(state.xChannelPageStep);
                        dir = 'x';
                        break;
                }
                state.setDragging(false);
                if (dir) {
                    let input = dir === 'x' ? inputXRef : inputYRef;
                    focusInput(input);
                    setFocusedInput(dir);
                }
            }
        });
        let moveHandler = {
            onMoveStart () {
                currentPosition.current = null;
                state.setDragging(true);
            },
            onMove ({ deltaX: deltaX, deltaY: deltaY, pointerType: pointerType, shiftKey: shiftKey }) {
                var _containerRef_current;
                let { incrementX: incrementX, decrementX: decrementX, incrementY: incrementY, decrementY: decrementY, xChannelPageStep: xChannelPageStep, xChannelStep: xChannelStep, yChannelPageStep: yChannelPageStep, yChannelStep: yChannelStep, getThumbPosition: getThumbPosition, setColorFromPoint: setColorFromPoint } = state;
                if (currentPosition.current == null) currentPosition.current = getThumbPosition();
                let { width: width, height: height } = ((_containerRef_current = containerRef.current) === null || _containerRef_current === void 0 ? void 0 : _containerRef_current.getBoundingClientRect()) || {
                    width: 0,
                    height: 0
                };
                let valueChanged = deltaX !== 0 || deltaY !== 0;
                if (pointerType === 'keyboard') {
                    let deltaXValue = shiftKey && xChannelPageStep > xChannelStep ? xChannelPageStep : xChannelStep;
                    let deltaYValue = shiftKey && yChannelPageStep > yChannelStep ? yChannelPageStep : yChannelStep;
                    if (deltaX > 0 && direction === 'ltr' || deltaX < 0 && direction === 'rtl') incrementX(deltaXValue);
                    else if (deltaX < 0 && direction === 'ltr' || deltaX > 0 && direction === 'rtl') decrementX(deltaXValue);
                    else if (deltaY > 0) decrementY(deltaYValue);
                    else if (deltaY < 0) incrementY(deltaYValue);
                    setValueChangedViaKeyboard(valueChanged);
                    // set the focused input based on which axis has the greater delta
                    focusedInput = valueChanged && Math.abs(deltaY) > Math.abs(deltaX) ? 'y' : 'x';
                    setFocusedInput(focusedInput);
                } else {
                    currentPosition.current.x += (direction === 'rtl' ? -1 : 1) * deltaX / width;
                    currentPosition.current.y += deltaY / height;
                    setColorFromPoint(currentPosition.current.x, currentPosition.current.y);
                }
            },
            onMoveEnd () {
                isOnColorArea.current = false;
                state.setDragging(false);
                let input = focusedInput === 'x' ? inputXRef : inputYRef;
                focusInput(input);
            }
        };
        let { moveProps: movePropsThumb } = ($e8a7022cf87cba2a$export$36da96379f79f245)(moveHandler);
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            onFocusWithinChange: (focusWithin)=>{
                if (!focusWithin) {
                    setValueChangedViaKeyboard(false);
                    setValueChangedViaInputChangeEvent(false);
                }
            }
        });
        let currentPointer = (0, wp.element.useRef)(undefined);
        let isOnColorArea = (0, wp.element.useRef)(false);
        let { moveProps: movePropsContainer } = ($e8a7022cf87cba2a$export$36da96379f79f245)({
            onMoveStart () {
                if (isOnColorArea.current) moveHandler.onMoveStart();
            },
            onMove (e) {
                if (isOnColorArea.current) moveHandler.onMove(e);
            },
            onMoveEnd () {
                if (isOnColorArea.current) moveHandler.onMoveEnd();
            }
        });
        let onThumbDown = (id)=>{
            if (!state.isDragging) {
                currentPointer.current = id;
                setValueChangedViaKeyboard(false);
                focusInput();
                state.setDragging(true);
                if (typeof PointerEvent !== 'undefined') addGlobalListener(window, 'pointerup', onThumbUp, false);
                else {
                    addGlobalListener(window, 'mouseup', onThumbUp, false);
                    addGlobalListener(window, 'touchend', onThumbUp, false);
                }
            }
        };
        let onThumbUp = (e)=>{
            var _e_changedTouches;
            var _e_pointerId;
            let id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;
            if (id === currentPointer.current) {
                setValueChangedViaKeyboard(false);
                focusInput();
                state.setDragging(false);
                currentPointer.current = undefined;
                isOnColorArea.current = false;
                if (typeof PointerEvent !== 'undefined') removeGlobalListener(window, 'pointerup', onThumbUp, false);
                else {
                    removeGlobalListener(window, 'mouseup', onThumbUp, false);
                    removeGlobalListener(window, 'touchend', onThumbUp, false);
                }
            }
        };
        let onColorAreaDown = (colorArea, id, clientX, clientY)=>{
            let rect = colorArea.getBoundingClientRect();
            let { width: width, height: height } = rect;
            let x = (clientX - rect.x) / width;
            let y = (clientY - rect.y) / height;
            if (direction === 'rtl') x = 1 - x;
            if (x >= 0 && x <= 1 && y >= 0 && y <= 1 && !state.isDragging && currentPointer.current === undefined) {
                isOnColorArea.current = true;
                setValueChangedViaKeyboard(false);
                currentPointer.current = id;
                state.setColorFromPoint(x, y);
                focusInput();
                state.setDragging(true);
                if (typeof PointerEvent !== 'undefined') addGlobalListener(window, 'pointerup', onColorAreaUp, false);
                else {
                    addGlobalListener(window, 'mouseup', onColorAreaUp, false);
                    addGlobalListener(window, 'touchend', onColorAreaUp, false);
                }
            }
        };
        let onColorAreaUp = (e)=>{
            var _e_changedTouches;
            var _e_pointerId;
            let id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;
            if (isOnColorArea.current && id === currentPointer.current) {
                isOnColorArea.current = false;
                setValueChangedViaKeyboard(false);
                currentPointer.current = undefined;
                state.setDragging(false);
                focusInput();
                if (typeof PointerEvent !== 'undefined') removeGlobalListener(window, 'pointerup', onColorAreaUp, false);
                else {
                    removeGlobalListener(window, 'mouseup', onColorAreaUp, false);
                    removeGlobalListener(window, 'touchend', onColorAreaUp, false);
                }
            }
        };
        let colorAreaInteractions = isDisabled ? {} : ($3ef42575df84b30b$export$9d1611c77c2fe928)({
            ...typeof PointerEvent !== 'undefined' ? {
                onPointerDown: (e)=>{
                    if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) return;
                    onColorAreaDown(e.currentTarget, e.pointerId, e.clientX, e.clientY);
                }
            } : {
                onMouseDown: (e)=>{
                    if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                    onColorAreaDown(e.currentTarget, undefined, e.clientX, e.clientY);
                },
                onTouchStart: (e)=>{
                    onColorAreaDown(e.currentTarget, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);
                }
            }
        }, movePropsContainer);
        let thumbInteractions = isDisabled ? {} : ($3ef42575df84b30b$export$9d1611c77c2fe928)({
            ...typeof PointerEvent !== 'undefined' ? {
                onPointerDown: (e)=>{
                    if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) return;
                    onThumbDown(e.pointerId);
                }
            } : {
                onMouseDown: (e)=>{
                    if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                    onThumbDown(undefined);
                },
                onTouchStart: (e)=>{
                    onThumbDown(e.changedTouches[0].identifier);
                }
            }
        }, focusWithinProps, keyboardProps, movePropsThumb);
        let { focusProps: xInputFocusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
            onFocus: ()=>{
                setFocusedInput('x');
            }
        });
        let { focusProps: yInputFocusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
            onFocus: ()=>{
                setFocusedInput('y');
            }
        });
        const onChange = (e)=>{
            const { target: target } = e;
            setValueChangedViaInputChangeEvent(true);
            if (target === inputXRef.current) state.setXValue(parseFloat(target.value));
            else if (target === inputYRef.current) state.setYValue(parseFloat(target.value));
        };
        let isMobile = ($c87311424ea30a05$export$fedb369cb70207f1)() || ($c87311424ea30a05$export$a11b0059900ceec8)();
        let value = state.getDisplayColor();
        const getAriaValueTextForChannel = (0, wp.element.useCallback)((channel)=>{
            const isAfterInput = valueChangedViaInputChangeEvent || valueChangedViaKeyboard;
            return `${isAfterInput ? stringFormatter.format('colorNameAndValue', {
            name: value.getChannelName(channel, locale),
            value: value.formatChannelValue(channel, locale)
        }) : [
            stringFormatter.format('colorNameAndValue', {
                name: value.getChannelName(channel, locale),
                value: value.formatChannelValue(channel, locale)
            }),
            stringFormatter.format('colorNameAndValue', {
                name: value.getChannelName(channel === yChannel ? xChannel : yChannel, locale),
                value: value.formatChannelValue(channel === yChannel ? xChannel : yChannel, locale)
            }),
            stringFormatter.format('colorNameAndValue', {
                name: value.getChannelName(zChannel, locale),
                value: value.formatChannelValue(zChannel, locale)
            })
        ].join(', ')}, ${value.getColorName(locale)}`;
        }, [
            locale,
            value,
            stringFormatter,
            valueChangedViaInputChangeEvent,
            valueChangedViaKeyboard,
            xChannel,
            yChannel,
            zChannel
        ]);
        let colorPickerLabel = stringFormatter.format('colorPicker');
        let xInputLabellingProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            ...props,
            'aria-label': ariaLabel ? stringFormatter.format('colorInputLabel', {
                label: ariaLabel,
                channelLabel: colorPickerLabel
            }) : colorPickerLabel
        });
        let yInputLabellingProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            ...props,
            'aria-label': ariaLabel ? stringFormatter.format('colorInputLabel', {
                label: ariaLabel,
                channelLabel: colorPickerLabel
            }) : colorPickerLabel
        });
        let colorAreaLabellingProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
            ...props,
            'aria-label': ariaLabel ? `${ariaLabel}, ${colorPickerLabel}` : undefined
        }, isMobile ? colorPickerLabel : undefined);
        let ariaRoleDescription = stringFormatter.format('twoDimensionalSlider');
        let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)({
            style: {
                opacity: '0.0001',
                width: '100%',
                height: '100%',
                pointerEvents: 'none'
            }
        });
        let { colorAreaStyleProps: colorAreaStyleProps, thumbStyleProps: thumbStyleProps } = ($40297c24c53588e6$export$dd62420467d245ca)({
            direction: direction,
            state: state,
            xChannel: xChannel,
            yChannel: yChannel,
            zChannel: zChannel
        });
        return {
            colorAreaProps: {
                ...colorAreaLabellingProps,
                ...colorAreaInteractions,
                ...colorAreaStyleProps,
                role: 'group'
            },
            thumbProps: {
                ...thumbInteractions,
                ...thumbStyleProps,
                role: 'presentation'
            },
            xInputProps: {
                ...xInputLabellingProps,
                ...visuallyHiddenProps,
                ...xInputFocusProps,
                type: 'range',
                min: state.value.getChannelRange(xChannel).minValue,
                max: state.value.getChannelRange(xChannel).maxValue,
                step: xChannelStep,
                'aria-roledescription': ariaRoleDescription,
                'aria-valuetext': getAriaValueTextForChannel(xChannel),
                'aria-orientation': 'horizontal',
                'aria-describedby': props['aria-describedby'],
                'aria-details': props['aria-details'],
                disabled: isDisabled,
                value: state.value.getChannelValue(xChannel),
                name: xName,
                tabIndex: isMobile || !focusedInput || focusedInput === 'x' ? undefined : -1,
                /*
            So that only a single "2d slider" control shows up when listing form elements for screen readers,
            add aria-hidden="true" to the unfocused control when the value has not changed via the keyboard,
            but remove aria-hidden to reveal the input for each channel when the value has changed with the keyboard.
          */ 'aria-hidden': isMobile || !focusedInput || focusedInput === 'x' || valueChangedViaKeyboard ? undefined : 'true',
                onChange: onChange
            },
            yInputProps: {
                ...yInputLabellingProps,
                ...visuallyHiddenProps,
                ...yInputFocusProps,
                type: 'range',
                min: state.value.getChannelRange(yChannel).minValue,
                max: state.value.getChannelRange(yChannel).maxValue,
                step: yChannelStep,
                'aria-roledescription': ariaRoleDescription,
                'aria-valuetext': getAriaValueTextForChannel(yChannel),
                'aria-orientation': 'vertical',
                'aria-describedby': props['aria-describedby'],
                'aria-details': props['aria-details'],
                disabled: isDisabled,
                value: state.value.getChannelValue(yChannel),
                name: yName,
                tabIndex: isMobile || focusedInput === 'y' ? undefined : -1,
                /*
            So that only a single "2d slider" control shows up when listing form elements for screen readers,
            add aria-hidden="true" to the unfocused input when the value has not changed via the keyboard,
            but remove aria-hidden to reveal the input for each channel when the value has changed with the keyboard.
          */ 'aria-hidden': isMobile || focusedInput === 'y' || valueChangedViaKeyboard ? undefined : 'true',
                onChange: onChange
            }
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 



    function $40af666d6c251e36$export$106b7a4e66508f66(props, state) {
        let { trackRef: trackRef, inputRef: inputRef, orientation: orientation, channel: channel, 'aria-label': ariaLabel, name: name } = props;
        let { locale: locale, direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
        // Provide a default aria-label if there is no other label provided.
        if (!props.label && !ariaLabel && !props['aria-labelledby']) ariaLabel = state.value.getChannelName(channel, locale);
        // @ts-ignore - ignore unused incompatible props
        let { groupProps: groupProps, trackProps: trackProps, labelProps: labelProps, outputProps: outputProps } = ($bcca50147b47f54d$export$56b2c08e277f365)({
            ...props,
            'aria-label': ariaLabel
        }, state, trackRef);
        let { inputProps: inputProps, thumbProps: thumbProps } = ($47b897dc8cdb026b$export$8d15029008292ae)({
            index: 0,
            orientation: orientation,
            isDisabled: props.isDisabled,
            name: name,
            trackRef: trackRef,
            inputRef: inputRef
        }, state);
        let value = state.getDisplayColor();
        let generateBackground = ()=>{
            let to;
            if (orientation === 'vertical') to = 'top';
            else if (direction === 'ltr') to = 'right';
            else to = 'left';
            switch(channel){
                case 'hue':
                    {
                        let stops = [
                            0,
                            60,
                            120,
                            180,
                            240,
                            300,
                            360
                        ].map((hue)=>value.withChannelValue('hue', hue).toString('css')).join(', ');
                        return `linear-gradient(to ${to}, ${stops})`;
                    }
                case 'lightness':
                    {
                        // We have to add an extra color stop in the middle so that the hue shows up at all.
                        // Otherwise it will always just be black to white.
                        let min = state.getThumbMinValue(0);
                        let max = state.getThumbMaxValue(0);
                        let start = value.withChannelValue(channel, min).toString('css');
                        let middle = value.withChannelValue(channel, (max - min) / 2).toString('css');
                        let end = value.withChannelValue(channel, max).toString('css');
                        return `linear-gradient(to ${to}, ${start}, ${middle}, ${end})`;
                    }
                case 'saturation':
                case 'brightness':
                case 'red':
                case 'green':
                case 'blue':
                case 'alpha':
                    {
                        let start = value.withChannelValue(channel, state.getThumbMinValue(0)).toString('css');
                        let end = value.withChannelValue(channel, state.getThumbMaxValue(0)).toString('css');
                        return `linear-gradient(to ${to}, ${start}, ${end})`;
                    }
                default:
                    throw new Error('Unknown color channel: ' + channel);
            }
        };
        let forcedColorAdjustNoneStyle = {
            forcedColorAdjust: 'none'
        };
        if (channel === 'hue') inputProps['aria-valuetext'] += `, ${value.getHueName(locale)}`;
        else if (channel !== 'alpha') inputProps['aria-valuetext'] += `, ${value.getColorName(locale)}`;
        let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)({
            style: {
                opacity: '0.0001',
                width: '100%',
                height: '100%',
                pointerEvents: 'none'
            }
        });
        return {
            trackProps: {
                ...($3ef42575df84b30b$export$9d1611c77c2fe928)(groupProps, trackProps),
                style: {
                    ...trackProps.style,
                    ...forcedColorAdjustNoneStyle,
                    background: generateBackground()
                }
            },
            inputProps: {
                ...inputProps,
                style: {
                    ...inputProps.style,
                    ...visuallyHiddenProps.style
                }
            },
            thumbProps: {
                ...thumbProps,
                style: {
                    ...thumbProps.style,
                    ...forcedColorAdjustNoneStyle
                }
            },
            labelProps: labelProps,
            outputProps: outputProps
        };
    }

    /*
     * Copyright 2020 Adobe. All rights reserved.
     * This file is licensed to you under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License. You may obtain a copy
     * of the License at http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software distributed under
     * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
     * OF ANY KIND, either express or implied. See the License for the specific language
     * governing permissions and limitations under the License.
     */ 





    function $f6896b05b2ecad12$export$77e32ca575a28fdf(props, state, ref) {
        let { isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, isWheelDisabled: isWheelDisabled, validationBehavior: validationBehavior = 'aria' } = props;
        let { colorValue: colorValue, inputValue: inputValue, increment: increment, decrement: decrement, incrementToMax: incrementToMax, decrementToMin: decrementToMin, commit: commit } = state;
        let inputId = ($bdb11010cef70236$export$f680877a34711e37)();
        let { spinButtonProps: spinButtonProps } = ($d2e8511e6f209edf$export$e908e06f4b8e3402)({
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isRequired: isRequired,
            maxValue: 0xFFFFFF,
            minValue: 0,
            onIncrement: increment,
            onIncrementToMax: incrementToMax,
            onDecrement: decrement,
            onDecrementToMin: decrementToMin,
            value: colorValue ? colorValue.toHexInt() : undefined,
            textValue: colorValue ? colorValue.toString('hex') : undefined
        });
        let [focusWithin, setFocusWithin] = (0, wp.element.useState)(false);
        let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
            isDisabled: isDisabled,
            onFocusWithinChange: setFocusWithin
        });
        let onWheel = (0, wp.element.useCallback)((e)=>{
            if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) return;
            if (e.deltaY > 0) increment();
            else if (e.deltaY < 0) decrement();
        }, [
            decrement,
            increment
        ]);
        // If the input isn't supposed to receive input, disable scrolling.
        let scrollingDisabled = isWheelDisabled || isDisabled || isReadOnly || !focusWithin;
        ($7d0a636d7a4dcefd$export$2123ff2b87c81ca)({
            onScroll: onWheel,
            isDisabled: scrollingDisabled
        }, ref);
        let onChange = (value)=>{
            if (state.validate(value)) state.setInputValue(value);
        };
        let { inputProps: inputProps, ...otherProps } = ($d841c8010a73d545$export$4f384c9210e583c3)({
            ...props,
            id: inputId,
            value: inputValue,
            defaultValue: undefined,
            validate: undefined,
            [($e5be200c675c3b3a$export$a763b9476acd3eb)]: state,
            type: 'text',
            autoComplete: 'off',
            onChange: onChange
        }, state, ref);
        inputProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(inputProps, spinButtonProps, focusWithinProps, {
            role: 'textbox',
            'aria-valuemax': null,
            'aria-valuemin': null,
            'aria-valuenow': null,
            'aria-valuetext': null,
            autoCorrect: 'off',
            spellCheck: 'false',
            onBlur: commit
        });
        if (validationBehavior === 'native') inputProps['aria-required'] = undefined;
        return {
            inputProps: inputProps,
            ...otherProps
        };
    }

    var __defProp$_ = Object.defineProperty;
    var __name$_ = (target, value) => __defProp$_(target, "name", { value, configurable: true });
    const ColorArea = /* @__PURE__ */ __name$_((props) => {
      const inputXRef = wp.element.useRef(null);
      const inputYRef = wp.element.useRef(null);
      const containerRef = wp.element.useRef(null);
      const state = $6e14a98a7f67141d$export$6df7f0e2cabc7eef(props);
      const {
        colorAreaProps,
        gradientProps,
        xInputProps,
        yInputProps,
        thumbProps
      } = $60bd7d6e45dcddfa$export$2f92a7a615a014f6({
        ...props,
        inputXRef,
        inputYRef,
        containerRef
      }, state);
      const { focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
      return /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          className: "tf-color-area",
          ref: containerRef,
          style: colorAreaProps.style,
          ...colorAreaProps
        },
        /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            className: "tf-color-area-gradient",
            style: gradientProps?.style,
            ...gradientProps
          }
        ),
        /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            className: "tf-color-area-thumb",
            style: {
              ...thumbProps.style,
              background: state.getDisplayColor().toString("css")
            },
            ...thumbProps
          },
          /* @__PURE__ */ wp.element.createElement("input", { ref: inputXRef, ...xInputProps, ...focusProps }),
          /* @__PURE__ */ wp.element.createElement("input", { ref: inputYRef, ...yInputProps, ...focusProps })
        )
      );
    }, "ColorArea");

    var __defProp$Z = Object.defineProperty;
    var __name$Z = (target, value) => __defProp$Z(target, "name", { value, configurable: true });
    const ColorSlider = /* @__PURE__ */ __name$Z((props) => {
      const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
      const state = $25a25ac0d1624665$export$57bc203e1c9c6d44({ ...props, locale });
      const trackRef = wp.element.useRef();
      const inputRef = wp.element.useRef();
      const label = props.label || state.value.getChannelName(props.channel, locale);
      const {
        trackProps,
        thumbProps,
        inputProps,
        labelProps,
        outputProps
      } = $40af666d6c251e36$export$106b7a4e66508f66({
        ...props,
        label,
        trackRef,
        inputRef
      }, state);
      const { focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-color-slider" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-color-slider-label" }, /* @__PURE__ */ wp.element.createElement("label", { ...labelProps }, label), /* @__PURE__ */ wp.element.createElement("output", { ...outputProps }, state.value.formatChannelValue(props.channel, locale))), /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          className: "tf-color-slider-container",
          ref: trackRef,
          style: trackProps.style,
          ...trackProps
        },
        /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            className: "tf-color-area-thumb",
            style: {
              ...thumbProps.style,
              background: state.getDisplayColor().toString("css")
            },
            ...thumbProps
          },
          /* @__PURE__ */ wp.element.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ wp.element.createElement("input", { ref: inputRef, ...inputProps, ...focusProps }))
        )
      ));
    }, "ColorSlider");

    var __defProp$Y = Object.defineProperty;
    var __name$Y = (target, value) => __defProp$Y(target, "name", { value, configurable: true });
    const ColorPicker = /* @__PURE__ */ __name$Y((props) => {
      const [color, setColor] = wp.element.useState(
        $799cddbef784668f$export$6e865ea70d7724f(
          props.value && props.value !== "" ? props.value : "rgba(255, 255, 255, 1)"
        ).toHSB()
      );
      const [
        xChannel,
        yChannel,
        zChannel
      ] = color.getColorChannels();
      const [inputColor, setInputColor] = wp.element.useState(props.value);
      wp.element.useEffect(() => {
        setInputColor(props.value);
      }, [props.value]);
      wp.element.useEffect(() => {
        props.onChange && props.onChange(color);
      }, [color]);
      const { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
        onFocusWithinChange: (isFocus) => {
          props.onFocusChange ? props.onFocusChange(isFocus) : false;
        }
      });
      const hasAlpha = props.hasAlpha ?? true;
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-color-picker", ...focusWithinProps }, /* @__PURE__ */ wp.element.createElement(Dialog, null, /* @__PURE__ */ wp.element.createElement($9bf71ea28793e738$export$20e40289641fbbb6, { autoFocus: true, restoreFocus: true }, /* @__PURE__ */ wp.element.createElement(
        ColorArea,
        {
          "aria-labelledby": "hsb-label-id-1",
          value: color,
          onChange: setColor,
          xChannel: yChannel,
          yChannel: zChannel
        }
      ), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-color-input" }, /* @__PURE__ */ wp.element.createElement("label", null, "Color"), /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          type: "text",
          value: inputColor,
          onChange: (e) => {
            setInputColor(e.target.value);
          },
          onBlur: (e) => {
            props.onChange(e.target.value);
          }
        }
      )), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-color-sliders" }, /* @__PURE__ */ wp.element.createElement(
        ColorSlider,
        {
          channel: xChannel,
          value: color,
          onChange: setColor
        }
      ), hasAlpha && /* @__PURE__ */ wp.element.createElement(
        ColorSlider,
        {
          channel: "alpha",
          value: color,
          onChange: setColor
        }
      )))));
    }, "ColorPicker");

    var __defProp$X = Object.defineProperty;
    var __name$X = (target, value) => __defProp$X(target, "name", { value, configurable: true });
    const ColorField = wp.element.forwardRef(({
      inputProps,
      state,
      ...props
    }, ref) => {
      const [open, isOpen] = wp.element.useState(false);
      const format = props.format ?? "hexa";
      const wrapperRef = wp.element.useRef();
      const onChange = /* @__PURE__ */ __name$X((value) => {
        const stringValue = value.toString ? value.toString(format) : "";
        state.setInputValue(stringValue);
        if (props.onChange)
          props.onChange(stringValue);
      }, "onChange");
      wp.element.useEffect(() => state.setInputValue(
        state.colorValue?.toString(format)
      ), []);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-color-container", ref: wrapperRef }, /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          ref,
          ...inputProps,
          onClick: () => isOpen(true),
          value: state.inputValue ?? ""
        }
      ), open && /* @__PURE__ */ wp.element.createElement(
        Popover,
        {
          state: { isOpen: open, close: () => isOpen(false) },
          triggerRef: ref,
          placement: "bottom start",
          style: { width: wrapperRef?.current?.offsetWidth },
          className: "tf-color-popover"
        },
        /* @__PURE__ */ wp.element.createElement(
          ColorPicker,
          {
            value: state.colorValue?.toString(format),
            onChange,
            hasAlpha: props.hasAlpha ?? true,
            onFocusChange: (isFocus) => isOpen(isFocus)
          }
        )
      ));
    });

    var __defProp$W = Object.defineProperty;
    var __name$W = (target, value) => __defProp$W(target, "name", { value, configurable: true });
    const Color = /* @__PURE__ */ __name$W((props) => {
      const ref = wp.element.useRef();
      const state = $b335ada08155d9c0$export$d52a01683abdfcd6(props);
      const {
        labelProps,
        inputProps,
        descriptionProps
      } = $f6896b05b2ecad12$export$77e32ca575a28fdf(props, state, ref);
      const [value, setValue] = wp.element.useState(props.value ?? "");
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-color" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement(
        FieldWrapper,
        {
          ...props,
          value,
          onValueSelection: setValue,
          inputProps,
          ref
        },
        /* @__PURE__ */ wp.element.createElement(
          ColorField,
          {
            ...props,
            value,
            onChange: props.onChange,
            state,
            inputProps,
            ref
          }
        )
      ), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Color");

    var __defProp$V = Object.defineProperty;
    var __name$V = (target, value) => __defProp$V(target, "name", { value, configurable: true });
    const post = /* @__PURE__ */ __name$V((url, data) => {
      if (process.env.JEST_WORKER_ID) {
        return new Promise((resolve) => resolve(window.tangibleTests.fetchResponse));
      }
      const { api } = TangibleFields;
      return new Promise((resolve, reject) => {
        fetch(url, {
          method: "POST",
          body: data,
          headers: {
            "X-WP-Nonce": api.nonce ?? false,
            "enctype": "multipart/form-data"
          },
          credentials: "same-origin",
          processData: false,
          contentType: false
        }).then((resp) => resp.ok ? resolve(resp.json()) : resp.json().then(reject));
      });
    }, "post");
    const get = /* @__PURE__ */ __name$V((url, data = false) => {
      if (process.env.JEST_WORKER_ID) {
        return new Promise((resolve) => resolve(window.tangibleTests.fetchResponse));
      }
      const { api } = TangibleFields;
      return new Promise((resolve, reject) => {
        fetch(`${url}?${data ? new URLSearchParams(data) : ""}`, {
          method: "GET",
          headers: {
            "X-WP-Nonce": api.nonce ?? false
          },
          credentials: "same-origin"
        }).then((resp) => resp.ok ? resolve(resp.json()) : resp.json().then(reject));
      });
    }, "get");

    var __defProp$U = Object.defineProperty;
    var __name$U = (target, value) => __defProp$U(target, "name", { value, configurable: true });
    const getAsyncProps = /* @__PURE__ */ __name$U((props) => {
      const list = $f86e6c1ec7da6ebb$export$bc3384a35de93d66({
        async load({ filterText }) {
          const data = {
            ...props.asyncArgs ?? {},
            search: filterText
          };
          const results = props.ajaxAction ? await Tangible?.ajax(props.ajaxAction, data) : await get(props.searchUrl ?? "", data);
          if (results.length === 0) {
            results.push({
              id: "_noResults",
              title: "No results"
            });
          }
          const formatedResults = props.mapResults ? mapResults(results, props.mapResults) : results;
          return {
            items: getOptions(
              (formatedResults ?? []).reduce((items, item) => ({ ...items, [item.id]: item.title }), {})
            )
          };
        }
      });
      return {
        items: list.items,
        inputValue: list.filterText,
        onInputChange: list.setFilterText
      };
    }, "getAsyncProps");
    const mapResults = /* @__PURE__ */ __name$U((results, mapResults2) => results.map((item) => {
      if (mapResults2.id) {
        item.id = mapResultsItem(item, mapResults2.id);
      }
      if (mapResults2.title) {
        item.title = mapResultsItem(item, mapResults2.title);
      }
      return item;
    }), "mapResults");
    const mapResultsItem = /* @__PURE__ */ __name$U((item, config) => typeof config === "object" ? item[config.key][config.attribute] : item[config], "mapResultsItem");

    var __defProp$T = Object.defineProperty;
    var __name$T = (target, value) => __defProp$T(target, "name", { value, configurable: true });
    const ComboBox$1 = /* @__PURE__ */ __name$T((props) => {
      const onSelectionChange = /* @__PURE__ */ __name$T((value) => {
        if (!props.isAsync) {
          props.onSelectionChange(value);
          return;
        }
        const option = getOption(value, props.items);
        props.onSelectionChange(option);
        if (!props.multiple)
          state.setInputValue(option.label);
      }, "onSelectionChange");
      wp.element.useEffect(() => {
        props.isAsync && props.selectedKey ? state.setInputValue(props.selectedKey.label ?? "") : null;
      }, []);
      const { contains } = $bb77f239b46e8c72$export$3274cf84b703fff({ sensitivity: "base" });
      const state = $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e({
        ...props,
        onSelectionChange,
        selectedKey: props.isAsync && props.selectedKey?.value ? props.selectedKey.value : props.selectedKey ?? "",
        defaultFilter: contains,
        disabledKeys: [
          ...props.disabledKeys ?? [],
          "_noResults"
        ]
      });
      const triggerRef = wp.element.useRef();
      const inputRef = wp.element.useRef();
      const listBoxRef = wp.element.useRef();
      const popoverRef = wp.element.useRef();
      const wrapperRef = wp.element.useRef();
      const {
        buttonProps,
        inputProps,
        listBoxProps,
        labelProps,
        descriptionProps
      } = $c350ade66beef0af$export$8c18d1b4f7232bbf({
        ...props,
        inputRef,
        buttonRef: triggerRef,
        listBoxRef,
        popoverRef,
        menuTrigger: "input"
      }, state);
      const { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
        onFocusWithinChange: (isFocus) => {
          props.onFocusChange ? props.onFocusChange(isFocus) : false;
        }
      });
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-combo-box", ...focusWithinProps }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement($9bf71ea28793e738$export$20e40289641fbbb6, { autoFocus: props.autoFocus, restoreFocus: true }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-combo-box-text", ref: wrapperRef }, /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, ref: inputRef }), props.showButton && /* @__PURE__ */ wp.element.createElement(Button, { type: "action", ref: triggerRef, preventFocusOnPress: true, ...buttonProps }, /* @__PURE__ */ wp.element.createElement("span", { "aria-hidden": "true" }, "\u25BC")), state.isOpen && /* @__PURE__ */ wp.element.createElement(
        Popover,
        {
          state,
          triggerRef: inputRef,
          popoverRef,
          placement: "bottom start",
          isNonModal: true,
          style: { width: wrapperRef?.current?.offsetWidth },
          className: "tf-combo-box-popover"
        },
        /* @__PURE__ */ wp.element.createElement(
          ListBox,
          {
            listBoxRef,
            state,
            items: props.items,
            focusWithinProps: true,
            shouldUseVirtualFocus: true,
            ...listBoxProps
          }
        )
      ))), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "ComboBox");

    var __defProp$S = Object.defineProperty;
    var __name$S = (target, value) => __defProp$S(target, "name", { value, configurable: true });
    const MultipleComboBox = /* @__PURE__ */ __name$S((props) => {
      const [values, setValues] = wp.element.useState(
        props.value && Array.isArray(props.value) ? props.value : props.value && !props.isAsync ? props.value.split(",") : []
      );
      const itemProps = {
        ...props.isAsync ? getAsyncProps(props) : {
          defaultItems: getOptions(props.choices ?? {})
        }
      };
      const input = wp.element.useRef(null);
      const triggerRef = wp.element.useRef(null);
      const overlayRef = wp.element.useRef(null);
      const {
        labelProps,
        inputProps,
        descriptionProps
      } = $2d73ec29415bd339$export$712718f7aec83d5(props, input);
      const state = $fc909762b330b746$export$61c6a8c84e605fb6({});
      const { triggerProps, overlayProps } = $628037886ba31236$export$f9d5c8beee7d008d(
        { type: "dialog" },
        state,
        triggerRef
      );
      wp.element.useEffect(() => props.onChange && props.onChange(values), [values.length]);
      const add = /* @__PURE__ */ __name$S((value) => {
        setValues([
          ...values,
          value
        ]);
      }, "add");
      const remove = /* @__PURE__ */ __name$S((i) => {
        setValues([
          ...values.slice(0, i),
          ...values.slice(i + 1)
        ]);
      }, "remove");
      const getDisabledKeys = /* @__PURE__ */ __name$S(() => props.isAsync ? values.map((item) => item.value) : values, "getDisabledKeys");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-multiple-combobox" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-multiple-combobox-container" }, /* @__PURE__ */ wp.element.createElement("div", { ref: input, className: "tf-multiple-combobox-values", ...inputProps }, values.length === 0 ? props.placeholder ?? "No item selected" : values.map(
        (value, i) => /* @__PURE__ */ wp.element.createElement("span", { key: value.key ?? i, className: "tf-combo-box-item" }, /* @__PURE__ */ wp.element.createElement("span", null, props.isAsync ? value.label : props.choices[value] ?? ""), /* @__PURE__ */ wp.element.createElement(Button, { onPress: () => remove(i) }, "x"))
      )), /* @__PURE__ */ wp.element.createElement(Button, { type: "action", ref: triggerRef, ...triggerProps }, "Add"), state.isOpen && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-popover", ref: overlayRef, ...overlayProps }, /* @__PURE__ */ wp.element.createElement(
        ComboBox$1,
        {
          focusStrategy: "first",
          label: "Select an item to add",
          labelVisuallyHidden: true,
          description: false,
          disabledKeys: getDisabledKeys(),
          autoFocus: true,
          multiple: true,
          showButton: false,
          menuTrigger: "focus",
          onSelectionChange: (value) => {
            if (!value)
              return;
            add(value);
            state.close();
          },
          onFocusChange: (isFocus) => isFocus ? !state.isOpen && state.open() : state.close(),
          isAsync: props.isAsync ?? false,
          ...itemProps
        },
        props.children
      ), /* @__PURE__ */ wp.element.createElement($86ea4cb521eb2e37$export$2317d149ed6f78c4, { onDismiss: state.close }))), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "MultipleComboBox");

    var __defProp$R = Object.defineProperty;
    var __name$R = (target, value) => __defProp$R(target, "name", { value, configurable: true });
    var ComboBox = /* @__PURE__ */ __name$R((props) => {
      const [value, setValue] = wp.element.useState(
        props.isAsync ? initJSON(props.value ?? "") : props.value ?? false
      );
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      const itemProps = props.isAsync ? getAsyncProps(props) : {
        defaultItems: getOptions(props.choices ?? {})
      };
      if (props.multiple) {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
          "input",
          {
            type: "hidden",
            name: props.name ?? "",
            value: props.isAsync ? JSON.stringify(value) : value
          }
        ), /* @__PURE__ */ wp.element.createElement(
          MultipleComboBox,
          {
            ...props,
            onChange: (values) => setValue(props.isAsync ? values : values.join(",")),
            value
          },
          RenderChoices
        ));
      }
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          type: "hidden",
          name: props.name ?? "",
          value: props.isAsync ? JSON.stringify(value) : value
        }
      ), /* @__PURE__ */ wp.element.createElement(
        ComboBox$1,
        {
          focusStrategy: "first",
          label: props.label ?? null,
          placeholder: props.placeholder,
          description: props.description ?? false,
          selectedKey: value,
          onSelectionChange: setValue,
          onFocusChange: props.onFocusChange ?? false,
          autoFocus: props.autoFocus ?? false,
          isAsync: props.isAsync ?? false,
          showButton: props.showButton ?? true,
          menuTrigger: "focus",
          labelVisuallyHidden: props.labelVisuallyHidden ?? false,
          descriptionVisuallyHidden: props.descriptionVisuallyHidden ?? false,
          disabledKeys: props.disabledKeys ?? [],
          ...itemProps
        },
        RenderChoices
      ));
    }, "default");

    var __defProp$Q = Object.defineProperty;
    var __name$Q = (target, value) => __defProp$Q(target, "name", { value, configurable: true });
    const formatValue = /* @__PURE__ */ __name$Q((value, minDate) => {
      if (value instanceof $35ea8db9cb2ccb90$export$99faa760c7908e4f)
        return value;
      const initialValue = (value ?? "").split("-");
      return initialValue.length === 3 ? new $35ea8db9cb2ccb90$export$99faa760c7908e4f("AD", initialValue[0], initialValue[1], initialValue[2]) : minDate;
    }, "formatValue");

    var __defProp$P = Object.defineProperty;
    var __name$P = (target, value) => __defProp$P(target, "name", { value, configurable: true });
    const CalendarPickerContext = wp.element.createContext(null);
    const CalendarContextProvider = /* @__PURE__ */ __name$P(({ value, children }) => {
      const values = initJSON(value) ?? "";
      const dateToday = $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3($14e0f24ef4ac5c92$export$aa8b41735afcabd2());
      const dateValues = {
        start: formatValue(values.start ?? "", dateToday),
        end: formatValue(values.end ?? "", dateToday)
      };
      const [dateValue, setDateValue] = wp.element.useState(dateValues);
      return /* @__PURE__ */ wp.element.createElement(
        CalendarPickerContext.Provider,
        {
          value: { dateValue, setDateValue }
        },
        children
      );
    }, "CalendarContextProvider");
    const useCalendarContext = /* @__PURE__ */ __name$P(() => {
      const context = wp.element.useContext(CalendarPickerContext);
      if (!context) {
        throw new Error("useCalendarContext must be used within a Calendar");
      }
      return context;
    }, "useCalendarContext");

    var __defProp$O = Object.defineProperty;
    var __name$O = (target, value) => __defProp$O(target, "name", { value, configurable: true });
    const CalendarCell = /* @__PURE__ */ __name$O(({ state, date }) => {
      const ref = wp.element.useRef();
      const {
        cellProps,
        buttonProps,
        isSelected,
        isOutsideVisibleRange,
        isDisabled,
        isUnavailable,
        formattedDate
      } = $36a0ac60f04457c5$export$136073280381448e({ date }, state, ref);
      const { focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
      let classes = "tf-calendar-cell";
      if (isSelected)
        classes += " tf-calendar-cell-selected";
      if (isDisabled)
        classes += " tf-calendar-cell-disabled";
      if (isUnavailable)
        classes += " tf-calendar-cell-unavailable";
      return /* @__PURE__ */ wp.element.createElement("td", { ...cellProps }, /* @__PURE__ */ wp.element.createElement(
        "div",
        {
          ...$3ef42575df84b30b$export$9d1611c77c2fe928(buttonProps, focusProps),
          ref,
          hidden: isOutsideVisibleRange,
          className: classes
        },
        formattedDate
      ));
    }, "CalendarCell");

    var __defProp$N = Object.defineProperty;
    var __name$N = (target, value) => __defProp$N(target, "name", { value, configurable: true });
    const CalendarGrid = /* @__PURE__ */ __name$N(({ state, ...props }) => {
      const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
      const isDateRange = props.dateRange ?? false;
      const startDate = state.visibleRange.start.add(props.offset ?? {});
      const endDate = $14e0f24ef4ac5c92$export$a2258d9c4118825c(startDate);
      const { gridProps, headerProps, weekDays } = isDateRange ? $e3031d1f8c9d64eb$export$cb95147730a423f5(
        {
          startDate,
          endDate
        },
        state
      ) : $e3031d1f8c9d64eb$export$cb95147730a423f5(
        props,
        state
      );
      const weeksInMonth = $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(state.visibleRange.start, locale);
      return /* @__PURE__ */ wp.element.createElement("table", { className: "tf-calendar-table", ...gridProps }, /* @__PURE__ */ wp.element.createElement("thead", { ...headerProps }, /* @__PURE__ */ wp.element.createElement("tr", null, weekDays.map((day, index) => /* @__PURE__ */ wp.element.createElement("th", { key: index }, day)))), /* @__PURE__ */ wp.element.createElement("tbody", null, [...new Array(weeksInMonth).keys()].map((weekIndex) => {
        const datesInWeek = isDateRange ? [weekIndex, startDate] : [weekIndex];
        return /* @__PURE__ */ wp.element.createElement("tr", { key: weekIndex }, state.getDatesInWeek(...datesInWeek).map(
          (date, i) => date ? /* @__PURE__ */ wp.element.createElement(CalendarCell, { key: i, state, date, currentMonth: startDate }) : /* @__PURE__ */ wp.element.createElement("td", { key: i })
        ));
      })));
    }, "CalendarGrid");

    var __defProp$M = Object.defineProperty;
    var __name$M = (target, value) => __defProp$M(target, "name", { value, configurable: true });
    const Preset = /* @__PURE__ */ __name$M(({ date, children }) => {
      const { setDateValue } = useCalendarContext();
      const onPress = /* @__PURE__ */ __name$M(() => {
        setDateValue(date);
      }, "onPress");
      return /* @__PURE__ */ wp.element.createElement(Button, { onPress }, children);
    }, "Preset");
    const DateRangePresets = /* @__PURE__ */ __name$M(() => {
      const dateToday = $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3($14e0f24ef4ac5c92$export$aa8b41735afcabd2());
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement(Preset, { date: { start: dateToday, end: dateToday } }, "Today"), /* @__PURE__ */ wp.element.createElement(Preset, { date: { start: dateToday.subtract({ weeks: 1 }), end: dateToday } }, "Last Week"), /* @__PURE__ */ wp.element.createElement(Preset, { date: { start: $14e0f24ef4ac5c92$export$a5a3b454ada2268e(dateToday), end: $14e0f24ef4ac5c92$export$a2258d9c4118825c(dateToday) } }, "This Month"), /* @__PURE__ */ wp.element.createElement(Preset, { date: { start: $14e0f24ef4ac5c92$export$a5a3b454ada2268e(dateToday.subtract({ months: 1 })), end: $14e0f24ef4ac5c92$export$a2258d9c4118825c(dateToday.subtract({ months: 1 })) } }, "Last Month"));
    }, "DateRangePresets");

    var __defProp$L = Object.defineProperty;
    var __name$L = (target, value) => __defProp$L(target, "name", { value, configurable: true });
    const Calendar = /* @__PURE__ */ __name$L((props) => {
      const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
      const { dateValue } = props.dateRange ? useCalendarContext() : {};
      const state = props.dateRange ? $9a36b6ba2fb1a7c5$export$9a987164d97ecc90({
        ...props,
        value: dateValue,
        locale,
        visibleDuration: { months: props.multiMonth },
        createCalendar: $64244302c3013299$export$dd0bbc9b26defe37
      }) : $131cf43a05231e1e$export$6d095e787d2b5e1f({
        ...props,
        locale,
        createCalendar: $64244302c3013299$export$dd0bbc9b26defe37
      });
      const ref = wp.element.useRef();
      const {
        calendarProps,
        prevButtonProps,
        nextButtonProps,
        title
      } = props.dateRange ? $46a4342aab3d8076$export$87e0539f600c24e5(
        props,
        state,
        ref
      ) : $9942cad8a072a530$export$3ee915f8151bd4f1(
        props,
        state);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-calendar", ...calendarProps, ref }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-calendar-header" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-calendar-buttons" }, /* @__PURE__ */ wp.element.createElement(Button, { ...prevButtonProps }, "<"), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-calendar-month" }, title), /* @__PURE__ */ wp.element.createElement(Button, { ...nextButtonProps }, ">"))), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-calendar-tables" }, props.multiMonth === 1 || !props.dateRange ? /* @__PURE__ */ wp.element.createElement(CalendarGrid, { state }) : Array.from({ length: props.multiMonth }, (_, index) => /* @__PURE__ */ wp.element.createElement(
        CalendarGrid,
        {
          key: index,
          state,
          dateRange: props.dateRange,
          offset: { months: index }
        }
      ))), props.dateRange && props.datePresets && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-calendar-presets" }, /* @__PURE__ */ wp.element.createElement(DateRangePresets, null)));
    }, "Calendar");

    var __defProp$K = Object.defineProperty;
    var __name$K = (target, value) => __defProp$K(target, "name", { value, configurable: true });
    const DateSegment = /* @__PURE__ */ __name$K(({ segment, state }) => {
      const ref = wp.element.useRef();
      const { segmentProps } = $32489daedd52963e$export$1315d136e6f7581(segment, state, ref);
      let classes = "tf-date-segment";
      if (segment.isPlaceholder)
        classes += " tf-date-segment-placeholder";
      return /* @__PURE__ */ wp.element.createElement("div", { className: classes, ...segmentProps, ref }, /* @__PURE__ */ wp.element.createElement("span", { "aria-hidden": "true" }, segment.placeholder), segment.isPlaceholder ? "" : segment.text);
    }, "DateSegment");

    var __defProp$J = Object.defineProperty;
    var __name$J = (target, value) => __defProp$J(target, "name", { value, configurable: true });
    const DateField = /* @__PURE__ */ __name$J((props) => {
      const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
      const state = $3c0fc76039f1c516$export$60e84778edff6d26({
        ...props,
        locale,
        createCalendar: $64244302c3013299$export$dd0bbc9b26defe37
      });
      const ref = wp.element.useRef();
      const { fieldProps } = $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-date-field", ...fieldProps, ref }, state.segments.map((segment, i) => /* @__PURE__ */ wp.element.createElement(DateSegment, { key: i, segment, state })));
    }, "DateField");

    var __defProp$I = Object.defineProperty;
    var __name$I = (target, value) => __defProp$I(target, "name", { value, configurable: true });
    const DatePicker = wp.element.forwardRef(({
      datePickerProps,
      hasFutureOnly,
      state,
      ...props
    }, ref) => {
      const {
        groupProps,
        fieldProps,
        buttonProps,
        dialogProps,
        calendarProps,
        inputProps
      } = datePickerProps;
      const [focusedDate, setFocusedDate] = wp.element.useState(props.value);
      wp.element.useEffect(() => {
        if (props.value !== focusedDate)
          setFocusedDate(props.value);
      }, [props.value]);
      wp.element.useEffect(() => {
        document.addEventListener("mousedown", onClickOutside);
        return () => document.removeEventListener("mousedown", onClickOutside);
      }, [ref]);
      const onClickOutside = /* @__PURE__ */ __name$I((event) => {
        const tempRef = ref.current ?? false;
        if (!tempRef)
          return;
        if (tempRef.contains(event.target)) {
          return;
        }
        state.setOpen(false);
      }, "onClickOutside");
      buttonProps.onPress = () => state.setOpen(!state.isOpen);
      const getStringValue = /* @__PURE__ */ __name$I(() => state.value && state.value.toString ? state.value.toString() : "", "getStringValue");
      wp.element.useEffect(() => {
        props.onChange && props.onChange(getStringValue());
        if (hasFutureOnly && state.value && props.value) {
          const dateToday = $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3($14e0f24ef4ac5c92$export$aa8b41735afcabd2());
          if (state.value.compare(dateToday) < 0)
            state.setValue(dateToday);
        }
      }, [state.value]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-date-field-container" }, /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, type: "hidden", name: props.name ?? "", value: getStringValue() }), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-date-group", ...groupProps, ref }, /* @__PURE__ */ wp.element.createElement(DateField, { ...fieldProps }), /* @__PURE__ */ wp.element.createElement(Button, { type: "action", ...buttonProps }, "\u{1F5D3}")), state.isOpen && /* @__PURE__ */ wp.element.createElement(Popover, { state, triggerRef: ref, placement: "bottom start" }, /* @__PURE__ */ wp.element.createElement(Dialog, { ...dialogProps }, /* @__PURE__ */ wp.element.createElement(Calendar, { ...calendarProps }))));
    });

    var __defProp$H = Object.defineProperty;
    var __name$H = (target, value) => __defProp$H(target, "name", { value, configurable: true });
    const Date$2 = /* @__PURE__ */ __name$H((props) => {
      const [value, setValue] = wp.element.useState(props.value ?? "");
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      const hasFutureOnly = props.futureOnly && props.futureOnly === true;
      const dateToday = $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3($14e0f24ef4ac5c92$export$aa8b41735afcabd2());
      const minValue = hasFutureOnly ? dateToday : new $35ea8db9cb2ccb90$export$99faa760c7908e4f("AD", "1", "1", "1");
      const state = $ab5bf3f618090389$export$87194bb378cc3ac2({
        ...props,
        /**
         * useDatePickerState only accept a CalendarDate instance as a value 
         */
        value: formatValue(props.value, dateToday)
      });
      const ref = wp.element.useRef(null);
      const {
        labelProps,
        descriptionProps,
        inputProps,
        ...datePickerProps
      } = $6057a3d2a53a12fd$export$42df105a73306d51({ ...props, minValue }, state, ref);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-date-picker" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement(
        FieldWrapper,
        {
          ...props,
          value,
          onValueSelection: setValue,
          ref,
          inputProps: datePickerProps.inputProps
        },
        /* @__PURE__ */ wp.element.createElement(
          DatePicker,
          {
            ref,
            minValue,
            name: props.name ?? "",
            value: formatValue(value),
            onChange: setValue,
            onFocusChange: props.onFocusChange ?? false,
            dynamic: props.dynamic ?? false,
            hasFutureOnly,
            state,
            datePickerProps: {
              inputProps,
              ...datePickerProps
            }
          }
        )
      ), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Date");

    var __defProp$G = Object.defineProperty;
    var __name$G = (target, value) => __defProp$G(target, "name", { value, configurable: true });
    const DateRangePicker = wp.element.forwardRef(({
      dateRangePickerProps,
      state,
      ...props
    }, ref) => {
      const { dateValue } = useCalendarContext();
      const [focusedDate, setFocusedDate] = wp.element.useState(dateValue.start);
      wp.element.useEffect(() => {
        if (props.value !== focusedDate)
          setFocusedDate(props.value.start);
      }, [props.value]);
      const {
        groupProps,
        startFieldProps,
        endFieldProps,
        buttonProps,
        dialogProps,
        calendarProps,
        inputProps
      } = $887cac91b7cc8801$export$12fd5f0e9f4bb192(props, state, ref);
      const getStringValue = /* @__PURE__ */ __name$G(() => state.value && state.value.start && state.value.end ? JSON.stringify({
        start: state.value.start.toString(),
        end: state.value.end.toString()
      }) : "", "getStringValue");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-date-field-container" }, /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, type: "hidden", name: props.name ?? "", value: getStringValue() }), /* @__PURE__ */ wp.element.createElement("div", { ...groupProps, ref, className: "tf-date-group" }, /* @__PURE__ */ wp.element.createElement(DateField, { ...startFieldProps }), /* @__PURE__ */ wp.element.createElement("span", { style: { padding: "0 4px" } }, "\u2013"), /* @__PURE__ */ wp.element.createElement(DateField, { ...endFieldProps }), state.isInvalid && /* @__PURE__ */ wp.element.createElement("span", { "aria-hidden": "true" }, "\u{1F6AB}"), /* @__PURE__ */ wp.element.createElement(Button, { type: "action", ...buttonProps }, "\u{1F5D3}")), state.isOpen && /* @__PURE__ */ wp.element.createElement(Popover, { state, triggerRef: ref, placement: "bottom start" }, /* @__PURE__ */ wp.element.createElement(Dialog, { ...dialogProps }, /* @__PURE__ */ wp.element.createElement(
        Calendar,
        {
          ...calendarProps,
          dateRange: true,
          datePresets: props.datePresets ?? false,
          pageBehavior: "single",
          multiMonth: props.multiMonth,
          focusedValue: focusedDate,
          onFocusChange: setFocusedDate
        }
      ))));
    });

    var __defProp$F = Object.defineProperty;
    var __name$F = (target, value) => __defProp$F(target, "name", { value, configurable: true });
    const DateRange = /* @__PURE__ */ __name$F((props) => {
      const { dateValue, setDateValue } = useCalendarContext();
      wp.element.useEffect(() => {
        props.onChange && props.onChange(dateValue);
      }, [dateValue]);
      wp.element.useEffect(() => {
        if (dateValue !== props.value && typeof props.value === "object")
          setDateValue(props.value);
      }, [props.value]);
      const hasFutureOnly = props.futureOnly && props.futureOnly === true;
      const dateToday = $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3($14e0f24ef4ac5c92$export$aa8b41735afcabd2());
      const minValue = hasFutureOnly ? dateToday : new $35ea8db9cb2ccb90$export$99faa760c7908e4f("AD", "1", "1", "1");
      const state = $93c38a5e28be6249$export$e50a61c1de9f574({
        ...props,
        /**
         * useDateRangePickerState only accept a CalendarDate instance as a value 
         */
        value: dateValue
      });
      const ref = wp.element.useRef();
      const {
        labelProps,
        descriptionProps,
        ...dateRangePickerProps
      } = $887cac91b7cc8801$export$12fd5f0e9f4bb192({ ...props, minValue }, state, ref);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-date-picker" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement(
        FieldWrapper,
        {
          ...props,
          value: dateValue,
          ref
        },
        /* @__PURE__ */ wp.element.createElement(
          DateRangePicker,
          {
            ref,
            name: props.name ?? "",
            minValue,
            value: dateValue,
            hasFutureOnly,
            onChange: setDateValue,
            onFocusChange: props.onFocusChange ?? false,
            state,
            multiMonth: props.multiMonth ?? 1,
            datePresets: props.datePresets ?? false,
            dateRangePickerProps: {
              ...dateRangePickerProps
            }
          }
        )
      ), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "DateRange");

    var __defProp$E = Object.defineProperty;
    var __name$E = (target, value) => __defProp$E(target, "name", { value, configurable: true });
    var Date$1 = /* @__PURE__ */ __name$E((props) => {
      if (props.dateRange)
        return /* @__PURE__ */ wp.element.createElement(CalendarContextProvider, { value: props.value }, /* @__PURE__ */ wp.element.createElement(DateRange, { ...props }));
      return /* @__PURE__ */ wp.element.createElement(Date$2, { ...props });
    }, "default");

    var __defProp$D = Object.defineProperty;
    var __name$D = (target, value) => __defProp$D(target, "name", { value, configurable: true });
    const editors = {};
    const DynamicText = /* @__PURE__ */ __name$D((props) => {
      const [value, setValue] = wp.element.useState(props.value ?? "");
      const [id, setID] = wp.element.useState(uniqid());
      const input = wp.element.useRef(null);
      const triggerRef = wp.element.useRef(null);
      const overlayRef = wp.element.useRef(null);
      const {
        labelProps,
        inputProps,
        descriptionProps
      } = $2d73ec29415bd339$export$712718f7aec83d5(props, input);
      wp.element.useEffect(() => {
        editors[id] = createInput(
          input.current,
          value,
          setValue,
          props.choices
        );
      }, []);
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      const state = $fc909762b330b746$export$61c6a8c84e605fb6({});
      const { triggerProps, overlayProps } = $628037886ba31236$export$f9d5c8beee7d008d(
        { type: "dialog" },
        state,
        triggerRef
      );
      const addDynamicElement = /* @__PURE__ */ __name$D((tag) => {
        editors[id].dispatch({
          changes: {
            from: editors[id].state.doc.length,
            insert: `[[${tag}]]`
          }
        });
      }, "addDynamicElement");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dynamic-text" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dynamic-text-field" }, /* @__PURE__ */ wp.element.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ wp.element.createElement(
        TextField,
        {
          label: props.label ?? false,
          name: props.name ?? "",
          value
        }
      )), /* @__PURE__ */ wp.element.createElement("div", { ref: input, className: "tf-dynamic-text-input", ...inputProps }), /* @__PURE__ */ wp.element.createElement(Button, { type: "action", ref: triggerRef, ...triggerProps }, "Add"), state.isOpen && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-dynamic-text-popover", ref: overlayRef, ...overlayProps }, /* @__PURE__ */ wp.element.createElement(
        ComboBox,
        {
          label: "Select dynamic token",
          labelVisuallyHidden: true,
          choices: props.choices ?? {},
          autoFocus: true,
          showButton: false,
          onChange: (value2) => {
            if (!value2)
              return;
            addDynamicElement(value2);
            state.close();
          },
          onFocusChange: (isFocus) => isFocus ? !state.isOpen && state.open() : state.close()
        }
      ), /* @__PURE__ */ wp.element.createElement($86ea4cb521eb2e37$export$2317d149ed6f78c4, { onDismiss: state.close }))), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "DynamicText");

    // ::- Persistent data structure representing an ordered mapping from
    // strings to values, with some convenient update methods.
    function OrderedMap(content) {
      this.content = content;
    }

    OrderedMap.prototype = {
      constructor: OrderedMap,

      find: function(key) {
        for (var i = 0; i < this.content.length; i += 2)
          if (this.content[i] === key) return i
        return -1
      },

      // :: (string) → ?any
      // Retrieve the value stored under `key`, or return undefined when
      // no such key exists.
      get: function(key) {
        var found = this.find(key);
        return found == -1 ? undefined : this.content[found + 1]
      },

      // :: (string, any, ?string) → OrderedMap
      // Create a new map by replacing the value of `key` with a new
      // value, or adding a binding to the end of the map. If `newKey` is
      // given, the key of the binding will be replaced with that key.
      update: function(key, value, newKey) {
        var self = newKey && newKey != key ? this.remove(newKey) : this;
        var found = self.find(key), content = self.content.slice();
        if (found == -1) {
          content.push(newKey || key, value);
        } else {
          content[found + 1] = value;
          if (newKey) content[found] = newKey;
        }
        return new OrderedMap(content)
      },

      // :: (string) → OrderedMap
      // Return a map with the given key removed, if it existed.
      remove: function(key) {
        var found = this.find(key);
        if (found == -1) return this
        var content = this.content.slice();
        content.splice(found, 2);
        return new OrderedMap(content)
      },

      // :: (string, any) → OrderedMap
      // Add a new key to the start of the map.
      addToStart: function(key, value) {
        return new OrderedMap([key, value].concat(this.remove(key).content))
      },

      // :: (string, any) → OrderedMap
      // Add a new key to the end of the map.
      addToEnd: function(key, value) {
        var content = this.remove(key).content.slice();
        content.push(key, value);
        return new OrderedMap(content)
      },

      // :: (string, string, any) → OrderedMap
      // Add a key after the given key. If `place` is not found, the new
      // key is added to the end.
      addBefore: function(place, key, value) {
        var without = this.remove(key), content = without.content.slice();
        var found = without.find(place);
        content.splice(found == -1 ? content.length : found, 0, key, value);
        return new OrderedMap(content)
      },

      // :: ((key: string, value: any))
      // Call the given function for each key/value pair in the map, in
      // order.
      forEach: function(f) {
        for (var i = 0; i < this.content.length; i += 2)
          f(this.content[i], this.content[i + 1]);
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a new map by prepending the keys in this map that don't
      // appear in `map` before the keys in `map`.
      prepend: function(map) {
        map = OrderedMap.from(map);
        if (!map.size) return this
        return new OrderedMap(map.content.concat(this.subtract(map).content))
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a new map by appending the keys in this map that don't
      // appear in `map` after the keys in `map`.
      append: function(map) {
        map = OrderedMap.from(map);
        if (!map.size) return this
        return new OrderedMap(this.subtract(map).content.concat(map.content))
      },

      // :: (union<Object, OrderedMap>) → OrderedMap
      // Create a map containing all the keys in this map that don't
      // appear in `map`.
      subtract: function(map) {
        var result = this;
        map = OrderedMap.from(map);
        for (var i = 0; i < map.content.length; i += 2)
          result = result.remove(map.content[i]);
        return result
      },

      // :: () → Object
      // Turn ordered map into a plain object.
      toObject: function() {
        var result = {};
        this.forEach(function(key, value) { result[key] = value; });
        return result
      },

      // :: number
      // The amount of keys in this map.
      get size() {
        return this.content.length >> 1
      }
    };

    // :: (?union<Object, OrderedMap>) → OrderedMap
    // Return a map with the given content. If null, create an empty
    // map. If given an ordered map, return that map itself. If given an
    // object, create a map from the object's properties.
    OrderedMap.from = function(value) {
      if (value instanceof OrderedMap) return value
      var content = [];
      if (value) for (var prop in value) content.push(prop, value[prop]);
      return new OrderedMap(content)
    };

    function findDiffStart(a, b, pos) {
        for (let i = 0;; i++) {
            if (i == a.childCount || i == b.childCount)
                return a.childCount == b.childCount ? null : pos;
            let childA = a.child(i), childB = b.child(i);
            if (childA == childB) {
                pos += childA.nodeSize;
                continue;
            }
            if (!childA.sameMarkup(childB))
                return pos;
            if (childA.isText && childA.text != childB.text) {
                for (let j = 0; childA.text[j] == childB.text[j]; j++)
                    pos++;
                return pos;
            }
            if (childA.content.size || childB.content.size) {
                let inner = findDiffStart(childA.content, childB.content, pos + 1);
                if (inner != null)
                    return inner;
            }
            pos += childA.nodeSize;
        }
    }
    function findDiffEnd(a, b, posA, posB) {
        for (let iA = a.childCount, iB = b.childCount;;) {
            if (iA == 0 || iB == 0)
                return iA == iB ? null : { a: posA, b: posB };
            let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
            if (childA == childB) {
                posA -= size;
                posB -= size;
                continue;
            }
            if (!childA.sameMarkup(childB))
                return { a: posA, b: posB };
            if (childA.isText && childA.text != childB.text) {
                let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
                while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
                    same++;
                    posA--;
                    posB--;
                }
                return { a: posA, b: posB };
            }
            if (childA.content.size || childB.content.size) {
                let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
                if (inner)
                    return inner;
            }
            posA -= size;
            posB -= size;
        }
    }

    /**
    A fragment represents a node's collection of child nodes.

    Like nodes, fragments are persistent data structures, and you
    should not mutate them or their content. Rather, you create new
    instances whenever needed. The API tries to make this easy.
    */
    class Fragment {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        content, size) {
            this.content = content;
            this.size = size || 0;
            if (size == null)
                for (let i = 0; i < content.length; i++)
                    this.size += content[i].nodeSize;
        }
        /**
        Invoke a callback for all descendant nodes between the given two
        positions (relative to start of this fragment). Doesn't descend
        into a node when the callback returns `false`.
        */
        nodesBetween(from, to, f, nodeStart = 0, parent) {
            for (let i = 0, pos = 0; pos < to; i++) {
                let child = this.content[i], end = pos + child.nodeSize;
                if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {
                    let start = pos + 1;
                    child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);
                }
                pos = end;
            }
        }
        /**
        Call the given callback for every descendant node. `pos` will be
        relative to the start of the fragment. The callback may return
        `false` to prevent traversal of a given node's children.
        */
        descendants(f) {
            this.nodesBetween(0, this.size, f);
        }
        /**
        Extract the text between `from` and `to`. See the same method on
        [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
        */
        textBetween(from, to, blockSeparator, leafText) {
            let text = "", first = true;
            this.nodesBetween(from, to, (node, pos) => {
                let nodeText = node.isText ? node.text.slice(Math.max(from, pos) - pos, to - pos)
                    : !node.isLeaf ? ""
                        : leafText ? (typeof leafText === "function" ? leafText(node) : leafText)
                            : node.type.spec.leafText ? node.type.spec.leafText(node)
                                : "";
                if (node.isBlock && (node.isLeaf && nodeText || node.isTextblock) && blockSeparator) {
                    if (first)
                        first = false;
                    else
                        text += blockSeparator;
                }
                text += nodeText;
            }, 0);
            return text;
        }
        /**
        Create a new fragment containing the combined content of this
        fragment and the other.
        */
        append(other) {
            if (!other.size)
                return this;
            if (!this.size)
                return other;
            let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
            if (last.isText && last.sameMarkup(first)) {
                content[content.length - 1] = last.withText(last.text + first.text);
                i = 1;
            }
            for (; i < other.content.length; i++)
                content.push(other.content[i]);
            return new Fragment(content, this.size + other.size);
        }
        /**
        Cut out the sub-fragment between the two given positions.
        */
        cut(from, to = this.size) {
            if (from == 0 && to == this.size)
                return this;
            let result = [], size = 0;
            if (to > from)
                for (let i = 0, pos = 0; pos < to; i++) {
                    let child = this.content[i], end = pos + child.nodeSize;
                    if (end > from) {
                        if (pos < from || end > to) {
                            if (child.isText)
                                child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));
                            else
                                child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));
                        }
                        result.push(child);
                        size += child.nodeSize;
                    }
                    pos = end;
                }
            return new Fragment(result, size);
        }
        /**
        @internal
        */
        cutByIndex(from, to) {
            if (from == to)
                return Fragment.empty;
            if (from == 0 && to == this.content.length)
                return this;
            return new Fragment(this.content.slice(from, to));
        }
        /**
        Create a new fragment in which the node at the given index is
        replaced by the given node.
        */
        replaceChild(index, node) {
            let current = this.content[index];
            if (current == node)
                return this;
            let copy = this.content.slice();
            let size = this.size + node.nodeSize - current.nodeSize;
            copy[index] = node;
            return new Fragment(copy, size);
        }
        /**
        Create a new fragment by prepending the given node to this
        fragment.
        */
        addToStart(node) {
            return new Fragment([node].concat(this.content), this.size + node.nodeSize);
        }
        /**
        Create a new fragment by appending the given node to this
        fragment.
        */
        addToEnd(node) {
            return new Fragment(this.content.concat(node), this.size + node.nodeSize);
        }
        /**
        Compare this fragment to another one.
        */
        eq(other) {
            if (this.content.length != other.content.length)
                return false;
            for (let i = 0; i < this.content.length; i++)
                if (!this.content[i].eq(other.content[i]))
                    return false;
            return true;
        }
        /**
        The first child of the fragment, or `null` if it is empty.
        */
        get firstChild() { return this.content.length ? this.content[0] : null; }
        /**
        The last child of the fragment, or `null` if it is empty.
        */
        get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null; }
        /**
        The number of child nodes in this fragment.
        */
        get childCount() { return this.content.length; }
        /**
        Get the child node at the given index. Raise an error when the
        index is out of range.
        */
        child(index) {
            let found = this.content[index];
            if (!found)
                throw new RangeError("Index " + index + " out of range for " + this);
            return found;
        }
        /**
        Get the child node at the given index, if it exists.
        */
        maybeChild(index) {
            return this.content[index] || null;
        }
        /**
        Call `f` for every child node, passing the node, its offset
        into this parent node, and its index.
        */
        forEach(f) {
            for (let i = 0, p = 0; i < this.content.length; i++) {
                let child = this.content[i];
                f(child, p, i);
                p += child.nodeSize;
            }
        }
        /**
        Find the first position at which this fragment and another
        fragment differ, or `null` if they are the same.
        */
        findDiffStart(other, pos = 0) {
            return findDiffStart(this, other, pos);
        }
        /**
        Find the first position, searching from the end, at which this
        fragment and the given fragment differ, or `null` if they are
        the same. Since this position will not be the same in both
        nodes, an object with two separate positions is returned.
        */
        findDiffEnd(other, pos = this.size, otherPos = other.size) {
            return findDiffEnd(this, other, pos, otherPos);
        }
        /**
        Find the index and inner offset corresponding to a given relative
        position in this fragment. The result object will be reused
        (overwritten) the next time the function is called. (Not public.)
        */
        findIndex(pos, round = -1) {
            if (pos == 0)
                return retIndex(0, pos);
            if (pos == this.size)
                return retIndex(this.content.length, pos);
            if (pos > this.size || pos < 0)
                throw new RangeError(`Position ${pos} outside of fragment (${this})`);
            for (let i = 0, curPos = 0;; i++) {
                let cur = this.child(i), end = curPos + cur.nodeSize;
                if (end >= pos) {
                    if (end == pos || round > 0)
                        return retIndex(i + 1, end);
                    return retIndex(i, curPos);
                }
                curPos = end;
            }
        }
        /**
        Return a debugging string that describes this fragment.
        */
        toString() { return "<" + this.toStringInner() + ">"; }
        /**
        @internal
        */
        toStringInner() { return this.content.join(", "); }
        /**
        Create a JSON-serializeable representation of this fragment.
        */
        toJSON() {
            return this.content.length ? this.content.map(n => n.toJSON()) : null;
        }
        /**
        Deserialize a fragment from its JSON representation.
        */
        static fromJSON(schema, value) {
            if (!value)
                return Fragment.empty;
            if (!Array.isArray(value))
                throw new RangeError("Invalid input for Fragment.fromJSON");
            return new Fragment(value.map(schema.nodeFromJSON));
        }
        /**
        Build a fragment from an array of nodes. Ensures that adjacent
        text nodes with the same marks are joined together.
        */
        static fromArray(array) {
            if (!array.length)
                return Fragment.empty;
            let joined, size = 0;
            for (let i = 0; i < array.length; i++) {
                let node = array[i];
                size += node.nodeSize;
                if (i && node.isText && array[i - 1].sameMarkup(node)) {
                    if (!joined)
                        joined = array.slice(0, i);
                    joined[joined.length - 1] = node
                        .withText(joined[joined.length - 1].text + node.text);
                }
                else if (joined) {
                    joined.push(node);
                }
            }
            return new Fragment(joined || array, size);
        }
        /**
        Create a fragment from something that can be interpreted as a
        set of nodes. For `null`, it returns the empty fragment. For a
        fragment, the fragment itself. For a node or array of nodes, a
        fragment containing those nodes.
        */
        static from(nodes) {
            if (!nodes)
                return Fragment.empty;
            if (nodes instanceof Fragment)
                return nodes;
            if (Array.isArray(nodes))
                return this.fromArray(nodes);
            if (nodes.attrs)
                return new Fragment([nodes], nodes.nodeSize);
            throw new RangeError("Can not convert " + nodes + " to a Fragment" +
                (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
        }
    }
    /**
    An empty fragment. Intended to be reused whenever a node doesn't
    contain anything (rather than allocating a new empty fragment for
    each leaf node).
    */
    Fragment.empty = new Fragment([], 0);
    const found = { index: 0, offset: 0 };
    function retIndex(index, offset) {
        found.index = index;
        found.offset = offset;
        return found;
    }

    function compareDeep(a, b) {
        if (a === b)
            return true;
        if (!(a && typeof a == "object") ||
            !(b && typeof b == "object"))
            return false;
        let array = Array.isArray(a);
        if (Array.isArray(b) != array)
            return false;
        if (array) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++)
                if (!compareDeep(a[i], b[i]))
                    return false;
        }
        else {
            for (let p in a)
                if (!(p in b) || !compareDeep(a[p], b[p]))
                    return false;
            for (let p in b)
                if (!(p in a))
                    return false;
        }
        return true;
    }

    /**
    A mark is a piece of information that can be attached to a node,
    such as it being emphasized, in code font, or a link. It has a
    type and optionally a set of attributes that provide further
    information (such as the target of the link). Marks are created
    through a `Schema`, which controls which types exist and which
    attributes they have.
    */
    class Mark {
        /**
        @internal
        */
        constructor(
        /**
        The type of this mark.
        */
        type, 
        /**
        The attributes associated with this mark.
        */
        attrs) {
            this.type = type;
            this.attrs = attrs;
        }
        /**
        Given a set of marks, create a new set which contains this one as
        well, in the right position. If this mark is already in the set,
        the set itself is returned. If any marks that are set to be
        [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
        those are replaced by this one.
        */
        addToSet(set) {
            let copy, placed = false;
            for (let i = 0; i < set.length; i++) {
                let other = set[i];
                if (this.eq(other))
                    return set;
                if (this.type.excludes(other.type)) {
                    if (!copy)
                        copy = set.slice(0, i);
                }
                else if (other.type.excludes(this.type)) {
                    return set;
                }
                else {
                    if (!placed && other.type.rank > this.type.rank) {
                        if (!copy)
                            copy = set.slice(0, i);
                        copy.push(this);
                        placed = true;
                    }
                    if (copy)
                        copy.push(other);
                }
            }
            if (!copy)
                copy = set.slice();
            if (!placed)
                copy.push(this);
            return copy;
        }
        /**
        Remove this mark from the given set, returning a new set. If this
        mark is not in the set, the set itself is returned.
        */
        removeFromSet(set) {
            for (let i = 0; i < set.length; i++)
                if (this.eq(set[i]))
                    return set.slice(0, i).concat(set.slice(i + 1));
            return set;
        }
        /**
        Test whether this mark is in the given set of marks.
        */
        isInSet(set) {
            for (let i = 0; i < set.length; i++)
                if (this.eq(set[i]))
                    return true;
            return false;
        }
        /**
        Test whether this mark has the same type and attributes as
        another mark.
        */
        eq(other) {
            return this == other ||
                (this.type == other.type && compareDeep(this.attrs, other.attrs));
        }
        /**
        Convert this mark to a JSON-serializeable representation.
        */
        toJSON() {
            let obj = { type: this.type.name };
            for (let _ in this.attrs) {
                obj.attrs = this.attrs;
                break;
            }
            return obj;
        }
        /**
        Deserialize a mark from JSON.
        */
        static fromJSON(schema, json) {
            if (!json)
                throw new RangeError("Invalid input for Mark.fromJSON");
            let type = schema.marks[json.type];
            if (!type)
                throw new RangeError(`There is no mark type ${json.type} in this schema`);
            return type.create(json.attrs);
        }
        /**
        Test whether two sets of marks are identical.
        */
        static sameSet(a, b) {
            if (a == b)
                return true;
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++)
                if (!a[i].eq(b[i]))
                    return false;
            return true;
        }
        /**
        Create a properly sorted mark set from null, a single mark, or an
        unsorted array of marks.
        */
        static setFrom(marks) {
            if (!marks || Array.isArray(marks) && marks.length == 0)
                return Mark.none;
            if (marks instanceof Mark)
                return [marks];
            let copy = marks.slice();
            copy.sort((a, b) => a.type.rank - b.type.rank);
            return copy;
        }
    }
    /**
    The empty set of marks.
    */
    Mark.none = [];

    /**
    Error type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when
    given an invalid replacement.
    */
    class ReplaceError extends Error {
    }
    /*
    ReplaceError = function(this: any, message: string) {
      let err = Error.call(this, message)
      ;(err as any).__proto__ = ReplaceError.prototype
      return err
    } as any

    ReplaceError.prototype = Object.create(Error.prototype)
    ReplaceError.prototype.constructor = ReplaceError
    ReplaceError.prototype.name = "ReplaceError"
    */
    /**
    A slice represents a piece cut out of a larger document. It
    stores not only a fragment, but also the depth up to which nodes on
    both side are ‘open’ (cut through).
    */
    class Slice {
        /**
        Create a slice. When specifying a non-zero open depth, you must
        make sure that there are nodes of at least that depth at the
        appropriate side of the fragment—i.e. if the fragment is an
        empty paragraph node, `openStart` and `openEnd` can't be greater
        than 1.
        
        It is not necessary for the content of open nodes to conform to
        the schema's content constraints, though it should be a valid
        start/end/middle for such a node, depending on which sides are
        open.
        */
        constructor(
        /**
        The slice's content.
        */
        content, 
        /**
        The open depth at the start of the fragment.
        */
        openStart, 
        /**
        The open depth at the end.
        */
        openEnd) {
            this.content = content;
            this.openStart = openStart;
            this.openEnd = openEnd;
        }
        /**
        The size this slice would add when inserted into a document.
        */
        get size() {
            return this.content.size - this.openStart - this.openEnd;
        }
        /**
        @internal
        */
        insertAt(pos, fragment) {
            let content = insertInto(this.content, pos + this.openStart, fragment);
            return content && new Slice(content, this.openStart, this.openEnd);
        }
        /**
        @internal
        */
        removeBetween(from, to) {
            return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);
        }
        /**
        Tests whether this slice is equal to another slice.
        */
        eq(other) {
            return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
        }
        /**
        @internal
        */
        toString() {
            return this.content + "(" + this.openStart + "," + this.openEnd + ")";
        }
        /**
        Convert a slice to a JSON-serializable representation.
        */
        toJSON() {
            if (!this.content.size)
                return null;
            let json = { content: this.content.toJSON() };
            if (this.openStart > 0)
                json.openStart = this.openStart;
            if (this.openEnd > 0)
                json.openEnd = this.openEnd;
            return json;
        }
        /**
        Deserialize a slice from its JSON representation.
        */
        static fromJSON(schema, json) {
            if (!json)
                return Slice.empty;
            let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
            if (typeof openStart != "number" || typeof openEnd != "number")
                throw new RangeError("Invalid input for Slice.fromJSON");
            return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
        }
        /**
        Create a slice from a fragment by taking the maximum possible
        open value on both side of the fragment.
        */
        static maxOpen(fragment, openIsolating = true) {
            let openStart = 0, openEnd = 0;
            for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)
                openStart++;
            for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)
                openEnd++;
            return new Slice(fragment, openStart, openEnd);
        }
    }
    /**
    The empty slice.
    */
    Slice.empty = new Slice(Fragment.empty, 0, 0);
    function removeRange(content, from, to) {
        let { index, offset } = content.findIndex(from), child = content.maybeChild(index);
        let { index: indexTo, offset: offsetTo } = content.findIndex(to);
        if (offset == from || child.isText) {
            if (offsetTo != to && !content.child(indexTo).isText)
                throw new RangeError("Removing non-flat range");
            return content.cut(0, from).append(content.cut(to));
        }
        if (index != indexTo)
            throw new RangeError("Removing non-flat range");
        return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));
    }
    function insertInto(content, dist, insert, parent) {
        let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);
        if (offset == dist || child.isText) {
            if (parent && !parent.canReplace(index, index, insert))
                return null;
            return content.cut(0, dist).append(insert).append(content.cut(dist));
        }
        let inner = insertInto(child.content, dist - offset - 1, insert);
        return inner && content.replaceChild(index, child.copy(inner));
    }
    function replace($from, $to, slice) {
        if (slice.openStart > $from.depth)
            throw new ReplaceError("Inserted content deeper than insertion position");
        if ($from.depth - slice.openStart != $to.depth - slice.openEnd)
            throw new ReplaceError("Inconsistent open depths");
        return replaceOuter($from, $to, slice, 0);
    }
    function replaceOuter($from, $to, slice, depth) {
        let index = $from.index(depth), node = $from.node(depth);
        if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
            let inner = replaceOuter($from, $to, slice, depth + 1);
            return node.copy(node.content.replaceChild(index, inner));
        }
        else if (!slice.content.size) {
            return close(node, replaceTwoWay($from, $to, depth));
        }
        else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case
            let parent = $from.parent, content = parent.content;
            return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));
        }
        else {
            let { start, end } = prepareSliceForReplace(slice, $from);
            return close(node, replaceThreeWay($from, start, end, $to, depth));
        }
    }
    function checkJoin(main, sub) {
        if (!sub.type.compatibleContent(main.type))
            throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
    }
    function joinable$1($before, $after, depth) {
        let node = $before.node(depth);
        checkJoin(node, $after.node(depth));
        return node;
    }
    function addNode(child, target) {
        let last = target.length - 1;
        if (last >= 0 && child.isText && child.sameMarkup(target[last]))
            target[last] = child.withText(target[last].text + child.text);
        else
            target.push(child);
    }
    function addRange($start, $end, depth, target) {
        let node = ($end || $start).node(depth);
        let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
        if ($start) {
            startIndex = $start.index(depth);
            if ($start.depth > depth) {
                startIndex++;
            }
            else if ($start.textOffset) {
                addNode($start.nodeAfter, target);
                startIndex++;
            }
        }
        for (let i = startIndex; i < endIndex; i++)
            addNode(node.child(i), target);
        if ($end && $end.depth == depth && $end.textOffset)
            addNode($end.nodeBefore, target);
    }
    function close(node, content) {
        node.type.checkContent(content);
        return node.copy(content);
    }
    function replaceThreeWay($from, $start, $end, $to, depth) {
        let openStart = $from.depth > depth && joinable$1($from, $start, depth + 1);
        let openEnd = $to.depth > depth && joinable$1($end, $to, depth + 1);
        let content = [];
        addRange(null, $from, depth, content);
        if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
            checkJoin(openStart, openEnd);
            addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
        }
        else {
            if (openStart)
                addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);
            addRange($start, $end, depth, content);
            if (openEnd)
                addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
        }
        addRange($to, null, depth, content);
        return new Fragment(content);
    }
    function replaceTwoWay($from, $to, depth) {
        let content = [];
        addRange(null, $from, depth, content);
        if ($from.depth > depth) {
            let type = joinable$1($from, $to, depth + 1);
            addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
        }
        addRange($to, null, depth, content);
        return new Fragment(content);
    }
    function prepareSliceForReplace(slice, $along) {
        let extra = $along.depth - slice.openStart, parent = $along.node(extra);
        let node = parent.copy(slice.content);
        for (let i = extra - 1; i >= 0; i--)
            node = $along.node(i).copy(Fragment.from(node));
        return { start: node.resolveNoCache(slice.openStart + extra),
            end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };
    }

    /**
    You can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more
    information about it. Objects of this class represent such a
    resolved position, providing various pieces of context
    information, and some helper methods.

    Throughout this interface, methods that take an optional `depth`
    parameter will interpret undefined as `this.depth` and negative
    numbers as `this.depth + value`.
    */
    class ResolvedPos {
        /**
        @internal
        */
        constructor(
        /**
        The position that was resolved.
        */
        pos, 
        /**
        @internal
        */
        path, 
        /**
        The offset this position has into its parent node.
        */
        parentOffset) {
            this.pos = pos;
            this.path = path;
            this.parentOffset = parentOffset;
            this.depth = path.length / 3 - 1;
        }
        /**
        @internal
        */
        resolveDepth(val) {
            if (val == null)
                return this.depth;
            if (val < 0)
                return this.depth + val;
            return val;
        }
        /**
        The parent node that the position points into. Note that even if
        a position points into a text node, that node is not considered
        the parent—text nodes are ‘flat’ in this model, and have no content.
        */
        get parent() { return this.node(this.depth); }
        /**
        The root node in which the position was resolved.
        */
        get doc() { return this.node(0); }
        /**
        The ancestor node at the given level. `p.node(p.depth)` is the
        same as `p.parent`.
        */
        node(depth) { return this.path[this.resolveDepth(depth) * 3]; }
        /**
        The index into the ancestor at the given level. If this points
        at the 3rd node in the 2nd paragraph on the top level, for
        example, `p.index(0)` is 1 and `p.index(1)` is 2.
        */
        index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; }
        /**
        The index pointing after this position into the ancestor at the
        given level.
        */
        indexAfter(depth) {
            depth = this.resolveDepth(depth);
            return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
        }
        /**
        The (absolute) position at the start of the node at the given
        level.
        */
        start(depth) {
            depth = this.resolveDepth(depth);
            return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
        }
        /**
        The (absolute) position at the end of the node at the given
        level.
        */
        end(depth) {
            depth = this.resolveDepth(depth);
            return this.start(depth) + this.node(depth).content.size;
        }
        /**
        The (absolute) position directly before the wrapping node at the
        given level, or, when `depth` is `this.depth + 1`, the original
        position.
        */
        before(depth) {
            depth = this.resolveDepth(depth);
            if (!depth)
                throw new RangeError("There is no position before the top-level node");
            return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
        }
        /**
        The (absolute) position directly after the wrapping node at the
        given level, or the original position when `depth` is `this.depth + 1`.
        */
        after(depth) {
            depth = this.resolveDepth(depth);
            if (!depth)
                throw new RangeError("There is no position after the top-level node");
            return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
        }
        /**
        When this position points into a text node, this returns the
        distance between the position and the start of the text node.
        Will be zero for positions that point between nodes.
        */
        get textOffset() { return this.pos - this.path[this.path.length - 1]; }
        /**
        Get the node directly after the position, if any. If the position
        points into a text node, only the part of that node after the
        position is returned.
        */
        get nodeAfter() {
            let parent = this.parent, index = this.index(this.depth);
            if (index == parent.childCount)
                return null;
            let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
            return dOff ? parent.child(index).cut(dOff) : child;
        }
        /**
        Get the node directly before the position, if any. If the
        position points into a text node, only the part of that node
        before the position is returned.
        */
        get nodeBefore() {
            let index = this.index(this.depth);
            let dOff = this.pos - this.path[this.path.length - 1];
            if (dOff)
                return this.parent.child(index).cut(0, dOff);
            return index == 0 ? null : this.parent.child(index - 1);
        }
        /**
        Get the position at the given index in the parent node at the
        given depth (which defaults to `this.depth`).
        */
        posAtIndex(index, depth) {
            depth = this.resolveDepth(depth);
            let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
            for (let i = 0; i < index; i++)
                pos += node.child(i).nodeSize;
            return pos;
        }
        /**
        Get the marks at this position, factoring in the surrounding
        marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
        position is at the start of a non-empty node, the marks of the
        node after it (if any) are returned.
        */
        marks() {
            let parent = this.parent, index = this.index();
            // In an empty parent, return the empty array
            if (parent.content.size == 0)
                return Mark.none;
            // When inside a text node, just return the text node's marks
            if (this.textOffset)
                return parent.child(index).marks;
            let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
            // If the `after` flag is true of there is no node before, make
            // the node after this position the main reference.
            if (!main) {
                let tmp = main;
                main = other;
                other = tmp;
            }
            // Use all marks in the main node, except those that have
            // `inclusive` set to false and are not present in the other node.
            let marks = main.marks;
            for (var i = 0; i < marks.length; i++)
                if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))
                    marks = marks[i--].removeFromSet(marks);
            return marks;
        }
        /**
        Get the marks after the current position, if any, except those
        that are non-inclusive and not present at position `$end`. This
        is mostly useful for getting the set of marks to preserve after a
        deletion. Will return `null` if this position is at the end of
        its parent node or its parent node isn't a textblock (in which
        case no marks should be preserved).
        */
        marksAcross($end) {
            let after = this.parent.maybeChild(this.index());
            if (!after || !after.isInline)
                return null;
            let marks = after.marks, next = $end.parent.maybeChild($end.index());
            for (var i = 0; i < marks.length; i++)
                if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))
                    marks = marks[i--].removeFromSet(marks);
            return marks;
        }
        /**
        The depth up to which this position and the given (non-resolved)
        position share the same parent nodes.
        */
        sharedDepth(pos) {
            for (let depth = this.depth; depth > 0; depth--)
                if (this.start(depth) <= pos && this.end(depth) >= pos)
                    return depth;
            return 0;
        }
        /**
        Returns a range based on the place where this position and the
        given position diverge around block content. If both point into
        the same textblock, for example, a range around that textblock
        will be returned. If they point into different blocks, the range
        around those blocks in their shared ancestor is returned. You can
        pass in an optional predicate that will be called with a parent
        node to see if a range into that parent is acceptable.
        */
        blockRange(other = this, pred) {
            if (other.pos < this.pos)
                return other.blockRange(this);
            for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
                if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
                    return new NodeRange(this, other, d);
            return null;
        }
        /**
        Query whether the given position shares the same parent node.
        */
        sameParent(other) {
            return this.pos - this.parentOffset == other.pos - other.parentOffset;
        }
        /**
        Return the greater of this and the given position.
        */
        max(other) {
            return other.pos > this.pos ? other : this;
        }
        /**
        Return the smaller of this and the given position.
        */
        min(other) {
            return other.pos < this.pos ? other : this;
        }
        /**
        @internal
        */
        toString() {
            let str = "";
            for (let i = 1; i <= this.depth; i++)
                str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
            return str + ":" + this.parentOffset;
        }
        /**
        @internal
        */
        static resolve(doc, pos) {
            if (!(pos >= 0 && pos <= doc.content.size))
                throw new RangeError("Position " + pos + " out of range");
            let path = [];
            let start = 0, parentOffset = pos;
            for (let node = doc;;) {
                let { index, offset } = node.content.findIndex(parentOffset);
                let rem = parentOffset - offset;
                path.push(node, index, start + offset);
                if (!rem)
                    break;
                node = node.child(index);
                if (node.isText)
                    break;
                parentOffset = rem - 1;
                start += offset + 1;
            }
            return new ResolvedPos(pos, path, parentOffset);
        }
        /**
        @internal
        */
        static resolveCached(doc, pos) {
            for (let i = 0; i < resolveCache.length; i++) {
                let cached = resolveCache[i];
                if (cached.pos == pos && cached.doc == doc)
                    return cached;
            }
            let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);
            resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
            return result;
        }
    }
    let resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;
    /**
    Represents a flat range of content, i.e. one that starts and
    ends in the same node.
    */
    class NodeRange {
        /**
        Construct a node range. `$from` and `$to` should point into the
        same node until at least the given `depth`, since a node range
        denotes an adjacent set of nodes in a single parent node.
        */
        constructor(
        /**
        A resolved position along the start of the content. May have a
        `depth` greater than this object's `depth` property, since
        these are the positions that were used to compute the range,
        not re-resolved positions directly at its boundaries.
        */
        $from, 
        /**
        A position along the end of the content. See
        caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).
        */
        $to, 
        /**
        The depth of the node that this range points into.
        */
        depth) {
            this.$from = $from;
            this.$to = $to;
            this.depth = depth;
        }
        /**
        The position at the start of the range.
        */
        get start() { return this.$from.before(this.depth + 1); }
        /**
        The position at the end of the range.
        */
        get end() { return this.$to.after(this.depth + 1); }
        /**
        The parent node that the range points into.
        */
        get parent() { return this.$from.node(this.depth); }
        /**
        The start index of the range in the parent node.
        */
        get startIndex() { return this.$from.index(this.depth); }
        /**
        The end index of the range in the parent node.
        */
        get endIndex() { return this.$to.indexAfter(this.depth); }
    }

    const emptyAttrs = Object.create(null);
    /**
    This class represents a node in the tree that makes up a
    ProseMirror document. So a document is an instance of `Node`, with
    children that are also instances of `Node`.

    Nodes are persistent data structures. Instead of changing them, you
    create new ones with the content you want. Old ones keep pointing
    at the old document shape. This is made cheaper by sharing
    structure between the old and new data as much as possible, which a
    tree shape like this (without back pointers) makes easy.

    **Do not** directly mutate the properties of a `Node` object. See
    [the guide](/docs/guide/#doc) for more information.
    */
    let Node$1 = class Node {
        /**
        @internal
        */
        constructor(
        /**
        The type of node that this is.
        */
        type, 
        /**
        An object mapping attribute names to values. The kind of
        attributes allowed and required are
        [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.
        */
        attrs, 
        // A fragment holding the node's children.
        content, 
        /**
        The marks (things like whether it is emphasized or part of a
        link) applied to this node.
        */
        marks = Mark.none) {
            this.type = type;
            this.attrs = attrs;
            this.marks = marks;
            this.content = content || Fragment.empty;
        }
        /**
        The size of this node, as defined by the integer-based [indexing
        scheme](/docs/guide/#doc.indexing). For text nodes, this is the
        amount of characters. For other leaf nodes, it is one. For
        non-leaf nodes, it is the size of the content plus two (the
        start and end token).
        */
        get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size; }
        /**
        The number of children that the node has.
        */
        get childCount() { return this.content.childCount; }
        /**
        Get the child node at the given index. Raises an error when the
        index is out of range.
        */
        child(index) { return this.content.child(index); }
        /**
        Get the child node at the given index, if it exists.
        */
        maybeChild(index) { return this.content.maybeChild(index); }
        /**
        Call `f` for every child node, passing the node, its offset
        into this parent node, and its index.
        */
        forEach(f) { this.content.forEach(f); }
        /**
        Invoke a callback for all descendant nodes recursively between
        the given two positions that are relative to start of this
        node's content. The callback is invoked with the node, its
        position relative to the original node (method receiver),
        its parent node, and its child index. When the callback returns
        false for a given node, that node's children will not be
        recursed over. The last parameter can be used to specify a
        starting position to count from.
        */
        nodesBetween(from, to, f, startPos = 0) {
            this.content.nodesBetween(from, to, f, startPos, this);
        }
        /**
        Call the given callback for every descendant node. Doesn't
        descend into a node when the callback returns `false`.
        */
        descendants(f) {
            this.nodesBetween(0, this.content.size, f);
        }
        /**
        Concatenates all the text nodes found in this fragment and its
        children.
        */
        get textContent() {
            return (this.isLeaf && this.type.spec.leafText)
                ? this.type.spec.leafText(this)
                : this.textBetween(0, this.content.size, "");
        }
        /**
        Get all text between positions `from` and `to`. When
        `blockSeparator` is given, it will be inserted to separate text
        from different block nodes. If `leafText` is given, it'll be
        inserted for every non-text leaf node encountered, otherwise
        [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
        */
        textBetween(from, to, blockSeparator, leafText) {
            return this.content.textBetween(from, to, blockSeparator, leafText);
        }
        /**
        Returns this node's first child, or `null` if there are no
        children.
        */
        get firstChild() { return this.content.firstChild; }
        /**
        Returns this node's last child, or `null` if there are no
        children.
        */
        get lastChild() { return this.content.lastChild; }
        /**
        Test whether two nodes represent the same piece of document.
        */
        eq(other) {
            return this == other || (this.sameMarkup(other) && this.content.eq(other.content));
        }
        /**
        Compare the markup (type, attributes, and marks) of this node to
        those of another. Returns `true` if both have the same markup.
        */
        sameMarkup(other) {
            return this.hasMarkup(other.type, other.attrs, other.marks);
        }
        /**
        Check whether this node's markup correspond to the given type,
        attributes, and marks.
        */
        hasMarkup(type, attrs, marks) {
            return this.type == type &&
                compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
                Mark.sameSet(this.marks, marks || Mark.none);
        }
        /**
        Create a new node with the same markup as this node, containing
        the given content (or empty, if no content is given).
        */
        copy(content = null) {
            if (content == this.content)
                return this;
            return new Node(this.type, this.attrs, content, this.marks);
        }
        /**
        Create a copy of this node, with the given set of marks instead
        of the node's own marks.
        */
        mark(marks) {
            return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);
        }
        /**
        Create a copy of this node with only the content between the
        given positions. If `to` is not given, it defaults to the end of
        the node.
        */
        cut(from, to = this.content.size) {
            if (from == 0 && to == this.content.size)
                return this;
            return this.copy(this.content.cut(from, to));
        }
        /**
        Cut out the part of the document between the given positions, and
        return it as a `Slice` object.
        */
        slice(from, to = this.content.size, includeParents = false) {
            if (from == to)
                return Slice.empty;
            let $from = this.resolve(from), $to = this.resolve(to);
            let depth = includeParents ? 0 : $from.sharedDepth(to);
            let start = $from.start(depth), node = $from.node(depth);
            let content = node.content.cut($from.pos - start, $to.pos - start);
            return new Slice(content, $from.depth - depth, $to.depth - depth);
        }
        /**
        Replace the part of the document between the given positions with
        the given slice. The slice must 'fit', meaning its open sides
        must be able to connect to the surrounding content, and its
        content nodes must be valid children for the node they are placed
        into. If any of this is violated, an error of type
        [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
        */
        replace(from, to, slice) {
            return replace(this.resolve(from), this.resolve(to), slice);
        }
        /**
        Find the node directly after the given position.
        */
        nodeAt(pos) {
            for (let node = this;;) {
                let { index, offset } = node.content.findIndex(pos);
                node = node.maybeChild(index);
                if (!node)
                    return null;
                if (offset == pos || node.isText)
                    return node;
                pos -= offset + 1;
            }
        }
        /**
        Find the (direct) child node after the given offset, if any,
        and return it along with its index and offset relative to this
        node.
        */
        childAfter(pos) {
            let { index, offset } = this.content.findIndex(pos);
            return { node: this.content.maybeChild(index), index, offset };
        }
        /**
        Find the (direct) child node before the given offset, if any,
        and return it along with its index and offset relative to this
        node.
        */
        childBefore(pos) {
            if (pos == 0)
                return { node: null, index: 0, offset: 0 };
            let { index, offset } = this.content.findIndex(pos);
            if (offset < pos)
                return { node: this.content.child(index), index, offset };
            let node = this.content.child(index - 1);
            return { node, index: index - 1, offset: offset - node.nodeSize };
        }
        /**
        Resolve the given position in the document, returning an
        [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
        */
        resolve(pos) { return ResolvedPos.resolveCached(this, pos); }
        /**
        @internal
        */
        resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); }
        /**
        Test whether a given mark or mark type occurs in this document
        between the two given positions.
        */
        rangeHasMark(from, to, type) {
            let found = false;
            if (to > from)
                this.nodesBetween(from, to, node => {
                    if (type.isInSet(node.marks))
                        found = true;
                    return !found;
                });
            return found;
        }
        /**
        True when this is a block (non-inline node)
        */
        get isBlock() { return this.type.isBlock; }
        /**
        True when this is a textblock node, a block node with inline
        content.
        */
        get isTextblock() { return this.type.isTextblock; }
        /**
        True when this node allows inline content.
        */
        get inlineContent() { return this.type.inlineContent; }
        /**
        True when this is an inline node (a text node or a node that can
        appear among text).
        */
        get isInline() { return this.type.isInline; }
        /**
        True when this is a text node.
        */
        get isText() { return this.type.isText; }
        /**
        True when this is a leaf node.
        */
        get isLeaf() { return this.type.isLeaf; }
        /**
        True when this is an atom, i.e. when it does not have directly
        editable content. This is usually the same as `isLeaf`, but can
        be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
        on a node's spec (typically used when the node is displayed as
        an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
        */
        get isAtom() { return this.type.isAtom; }
        /**
        Return a string representation of this node for debugging
        purposes.
        */
        toString() {
            if (this.type.spec.toDebugString)
                return this.type.spec.toDebugString(this);
            let name = this.type.name;
            if (this.content.size)
                name += "(" + this.content.toStringInner() + ")";
            return wrapMarks(this.marks, name);
        }
        /**
        Get the content match in this node at the given index.
        */
        contentMatchAt(index) {
            let match = this.type.contentMatch.matchFragment(this.content, 0, index);
            if (!match)
                throw new Error("Called contentMatchAt on a node with invalid content");
            return match;
        }
        /**
        Test whether replacing the range between `from` and `to` (by
        child index) with the given replacement fragment (which defaults
        to the empty fragment) would leave the node's content valid. You
        can optionally pass `start` and `end` indices into the
        replacement fragment.
        */
        canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {
            let one = this.contentMatchAt(from).matchFragment(replacement, start, end);
            let two = one && one.matchFragment(this.content, to);
            if (!two || !two.validEnd)
                return false;
            for (let i = start; i < end; i++)
                if (!this.type.allowsMarks(replacement.child(i).marks))
                    return false;
            return true;
        }
        /**
        Test whether replacing the range `from` to `to` (by index) with
        a node of the given type would leave the node's content valid.
        */
        canReplaceWith(from, to, type, marks) {
            if (marks && !this.type.allowsMarks(marks))
                return false;
            let start = this.contentMatchAt(from).matchType(type);
            let end = start && start.matchFragment(this.content, to);
            return end ? end.validEnd : false;
        }
        /**
        Test whether the given node's content could be appended to this
        node. If that node is empty, this will only return true if there
        is at least one node type that can appear in both nodes (to avoid
        merging completely incompatible nodes).
        */
        canAppend(other) {
            if (other.content.size)
                return this.canReplace(this.childCount, this.childCount, other.content);
            else
                return this.type.compatibleContent(other.type);
        }
        /**
        Check whether this node and its descendants conform to the
        schema, and raise error when they do not.
        */
        check() {
            this.type.checkContent(this.content);
            let copy = Mark.none;
            for (let i = 0; i < this.marks.length; i++)
                copy = this.marks[i].addToSet(copy);
            if (!Mark.sameSet(copy, this.marks))
                throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`);
            this.content.forEach(node => node.check());
        }
        /**
        Return a JSON-serializeable representation of this node.
        */
        toJSON() {
            let obj = { type: this.type.name };
            for (let _ in this.attrs) {
                obj.attrs = this.attrs;
                break;
            }
            if (this.content.size)
                obj.content = this.content.toJSON();
            if (this.marks.length)
                obj.marks = this.marks.map(n => n.toJSON());
            return obj;
        }
        /**
        Deserialize a node from its JSON representation.
        */
        static fromJSON(schema, json) {
            if (!json)
                throw new RangeError("Invalid input for Node.fromJSON");
            let marks = null;
            if (json.marks) {
                if (!Array.isArray(json.marks))
                    throw new RangeError("Invalid mark data for Node.fromJSON");
                marks = json.marks.map(schema.markFromJSON);
            }
            if (json.type == "text") {
                if (typeof json.text != "string")
                    throw new RangeError("Invalid text node in JSON");
                return schema.text(json.text, marks);
            }
            let content = Fragment.fromJSON(schema, json.content);
            return schema.nodeType(json.type).create(json.attrs, content, marks);
        }
    };
    Node$1.prototype.text = undefined;
    class TextNode extends Node$1 {
        /**
        @internal
        */
        constructor(type, attrs, content, marks) {
            super(type, attrs, null, marks);
            if (!content)
                throw new RangeError("Empty text nodes are not allowed");
            this.text = content;
        }
        toString() {
            if (this.type.spec.toDebugString)
                return this.type.spec.toDebugString(this);
            return wrapMarks(this.marks, JSON.stringify(this.text));
        }
        get textContent() { return this.text; }
        textBetween(from, to) { return this.text.slice(from, to); }
        get nodeSize() { return this.text.length; }
        mark(marks) {
            return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
        }
        withText(text) {
            if (text == this.text)
                return this;
            return new TextNode(this.type, this.attrs, text, this.marks);
        }
        cut(from = 0, to = this.text.length) {
            if (from == 0 && to == this.text.length)
                return this;
            return this.withText(this.text.slice(from, to));
        }
        eq(other) {
            return this.sameMarkup(other) && this.text == other.text;
        }
        toJSON() {
            let base = super.toJSON();
            base.text = this.text;
            return base;
        }
    }
    function wrapMarks(marks, str) {
        for (let i = marks.length - 1; i >= 0; i--)
            str = marks[i].type.name + "(" + str + ")";
        return str;
    }

    /**
    Instances of this class represent a match state of a node type's
    [content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to
    find out whether further content matches here, and whether a given
    position is a valid end of the node.
    */
    class ContentMatch {
        /**
        @internal
        */
        constructor(
        /**
        True when this match state represents a valid end of the node.
        */
        validEnd) {
            this.validEnd = validEnd;
            /**
            @internal
            */
            this.next = [];
            /**
            @internal
            */
            this.wrapCache = [];
        }
        /**
        @internal
        */
        static parse(string, nodeTypes) {
            let stream = new TokenStream(string, nodeTypes);
            if (stream.next == null)
                return ContentMatch.empty;
            let expr = parseExpr(stream);
            if (stream.next)
                stream.err("Unexpected trailing text");
            let match = dfa(nfa(expr));
            checkForDeadEnds(match, stream);
            return match;
        }
        /**
        Match a node type, returning a match after that node if
        successful.
        */
        matchType(type) {
            for (let i = 0; i < this.next.length; i++)
                if (this.next[i].type == type)
                    return this.next[i].next;
            return null;
        }
        /**
        Try to match a fragment. Returns the resulting match when
        successful.
        */
        matchFragment(frag, start = 0, end = frag.childCount) {
            let cur = this;
            for (let i = start; cur && i < end; i++)
                cur = cur.matchType(frag.child(i).type);
            return cur;
        }
        /**
        @internal
        */
        get inlineContent() {
            return this.next.length != 0 && this.next[0].type.isInline;
        }
        /**
        Get the first matching node type at this match position that can
        be generated.
        */
        get defaultType() {
            for (let i = 0; i < this.next.length; i++) {
                let { type } = this.next[i];
                if (!(type.isText || type.hasRequiredAttrs()))
                    return type;
            }
            return null;
        }
        /**
        @internal
        */
        compatible(other) {
            for (let i = 0; i < this.next.length; i++)
                for (let j = 0; j < other.next.length; j++)
                    if (this.next[i].type == other.next[j].type)
                        return true;
            return false;
        }
        /**
        Try to match the given fragment, and if that fails, see if it can
        be made to match by inserting nodes in front of it. When
        successful, return a fragment of inserted nodes (which may be
        empty if nothing had to be inserted). When `toEnd` is true, only
        return a fragment if the resulting match goes to the end of the
        content expression.
        */
        fillBefore(after, toEnd = false, startIndex = 0) {
            let seen = [this];
            function search(match, types) {
                let finished = match.matchFragment(after, startIndex);
                if (finished && (!toEnd || finished.validEnd))
                    return Fragment.from(types.map(tp => tp.createAndFill()));
                for (let i = 0; i < match.next.length; i++) {
                    let { type, next } = match.next[i];
                    if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
                        seen.push(next);
                        let found = search(next, types.concat(type));
                        if (found)
                            return found;
                    }
                }
                return null;
            }
            return search(this, []);
        }
        /**
        Find a set of wrapping node types that would allow a node of the
        given type to appear at this position. The result may be empty
        (when it fits directly) and will be null when no such wrapping
        exists.
        */
        findWrapping(target) {
            for (let i = 0; i < this.wrapCache.length; i += 2)
                if (this.wrapCache[i] == target)
                    return this.wrapCache[i + 1];
            let computed = this.computeWrapping(target);
            this.wrapCache.push(target, computed);
            return computed;
        }
        /**
        @internal
        */
        computeWrapping(target) {
            let seen = Object.create(null), active = [{ match: this, type: null, via: null }];
            while (active.length) {
                let current = active.shift(), match = current.match;
                if (match.matchType(target)) {
                    let result = [];
                    for (let obj = current; obj.type; obj = obj.via)
                        result.push(obj.type);
                    return result.reverse();
                }
                for (let i = 0; i < match.next.length; i++) {
                    let { type, next } = match.next[i];
                    if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {
                        active.push({ match: type.contentMatch, type, via: current });
                        seen[type.name] = true;
                    }
                }
            }
            return null;
        }
        /**
        The number of outgoing edges this node has in the finite
        automaton that describes the content expression.
        */
        get edgeCount() {
            return this.next.length;
        }
        /**
        Get the _n_​th outgoing edge from this node in the finite
        automaton that describes the content expression.
        */
        edge(n) {
            if (n >= this.next.length)
                throw new RangeError(`There's no ${n}th edge in this content match`);
            return this.next[n];
        }
        /**
        @internal
        */
        toString() {
            let seen = [];
            function scan(m) {
                seen.push(m);
                for (let i = 0; i < m.next.length; i++)
                    if (seen.indexOf(m.next[i].next) == -1)
                        scan(m.next[i].next);
            }
            scan(this);
            return seen.map((m, i) => {
                let out = i + (m.validEnd ? "*" : " ") + " ";
                for (let i = 0; i < m.next.length; i++)
                    out += (i ? ", " : "") + m.next[i].type.name + "->" + seen.indexOf(m.next[i].next);
                return out;
            }).join("\n");
        }
    }
    /**
    @internal
    */
    ContentMatch.empty = new ContentMatch(true);
    class TokenStream {
        constructor(string, nodeTypes) {
            this.string = string;
            this.nodeTypes = nodeTypes;
            this.inline = null;
            this.pos = 0;
            this.tokens = string.split(/\s*(?=\b|\W|$)/);
            if (this.tokens[this.tokens.length - 1] == "")
                this.tokens.pop();
            if (this.tokens[0] == "")
                this.tokens.shift();
        }
        get next() { return this.tokens[this.pos]; }
        eat(tok) { return this.next == tok && (this.pos++ || true); }
        err(str) { throw new SyntaxError(str + " (in content expression '" + this.string + "')"); }
    }
    function parseExpr(stream) {
        let exprs = [];
        do {
            exprs.push(parseExprSeq(stream));
        } while (stream.eat("|"));
        return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
    }
    function parseExprSeq(stream) {
        let exprs = [];
        do {
            exprs.push(parseExprSubscript(stream));
        } while (stream.next && stream.next != ")" && stream.next != "|");
        return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
    }
    function parseExprSubscript(stream) {
        let expr = parseExprAtom(stream);
        for (;;) {
            if (stream.eat("+"))
                expr = { type: "plus", expr };
            else if (stream.eat("*"))
                expr = { type: "star", expr };
            else if (stream.eat("?"))
                expr = { type: "opt", expr };
            else if (stream.eat("{"))
                expr = parseExprRange(stream, expr);
            else
                break;
        }
        return expr;
    }
    function parseNum(stream) {
        if (/\D/.test(stream.next))
            stream.err("Expected number, got '" + stream.next + "'");
        let result = Number(stream.next);
        stream.pos++;
        return result;
    }
    function parseExprRange(stream, expr) {
        let min = parseNum(stream), max = min;
        if (stream.eat(",")) {
            if (stream.next != "}")
                max = parseNum(stream);
            else
                max = -1;
        }
        if (!stream.eat("}"))
            stream.err("Unclosed braced range");
        return { type: "range", min, max, expr };
    }
    function resolveName(stream, name) {
        let types = stream.nodeTypes, type = types[name];
        if (type)
            return [type];
        let result = [];
        for (let typeName in types) {
            let type = types[typeName];
            if (type.groups.indexOf(name) > -1)
                result.push(type);
        }
        if (result.length == 0)
            stream.err("No node type or group '" + name + "' found");
        return result;
    }
    function parseExprAtom(stream) {
        if (stream.eat("(")) {
            let expr = parseExpr(stream);
            if (!stream.eat(")"))
                stream.err("Missing closing paren");
            return expr;
        }
        else if (!/\W/.test(stream.next)) {
            let exprs = resolveName(stream, stream.next).map(type => {
                if (stream.inline == null)
                    stream.inline = type.isInline;
                else if (stream.inline != type.isInline)
                    stream.err("Mixing inline and block content");
                return { type: "name", value: type };
            });
            stream.pos++;
            return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
        }
        else {
            stream.err("Unexpected token '" + stream.next + "'");
        }
    }
    /**
    Construct an NFA from an expression as returned by the parser. The
    NFA is represented as an array of states, which are themselves
    arrays of edges, which are `{term, to}` objects. The first state is
    the entry state and the last node is the success state.

    Note that unlike typical NFAs, the edge ordering in this one is
    significant, in that it is used to contruct filler content when
    necessary.
    */
    function nfa(expr) {
        let nfa = [[]];
        connect(compile(expr, 0), node());
        return nfa;
        function node() { return nfa.push([]) - 1; }
        function edge(from, to, term) {
            let edge = { term, to };
            nfa[from].push(edge);
            return edge;
        }
        function connect(edges, to) {
            edges.forEach(edge => edge.to = to);
        }
        function compile(expr, from) {
            if (expr.type == "choice") {
                return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), []);
            }
            else if (expr.type == "seq") {
                for (let i = 0;; i++) {
                    let next = compile(expr.exprs[i], from);
                    if (i == expr.exprs.length - 1)
                        return next;
                    connect(next, from = node());
                }
            }
            else if (expr.type == "star") {
                let loop = node();
                edge(from, loop);
                connect(compile(expr.expr, loop), loop);
                return [edge(loop)];
            }
            else if (expr.type == "plus") {
                let loop = node();
                connect(compile(expr.expr, from), loop);
                connect(compile(expr.expr, loop), loop);
                return [edge(loop)];
            }
            else if (expr.type == "opt") {
                return [edge(from)].concat(compile(expr.expr, from));
            }
            else if (expr.type == "range") {
                let cur = from;
                for (let i = 0; i < expr.min; i++) {
                    let next = node();
                    connect(compile(expr.expr, cur), next);
                    cur = next;
                }
                if (expr.max == -1) {
                    connect(compile(expr.expr, cur), cur);
                }
                else {
                    for (let i = expr.min; i < expr.max; i++) {
                        let next = node();
                        edge(cur, next);
                        connect(compile(expr.expr, cur), next);
                        cur = next;
                    }
                }
                return [edge(cur)];
            }
            else if (expr.type == "name") {
                return [edge(from, undefined, expr.value)];
            }
            else {
                throw new Error("Unknown expr type");
            }
        }
    }
    function cmp(a, b) { return b - a; }
    // Get the set of nodes reachable by null edges from `node`. Omit
    // nodes with only a single null-out-edge, since they may lead to
    // needless duplicated nodes.
    function nullFrom(nfa, node) {
        let result = [];
        scan(node);
        return result.sort(cmp);
        function scan(node) {
            let edges = nfa[node];
            if (edges.length == 1 && !edges[0].term)
                return scan(edges[0].to);
            result.push(node);
            for (let i = 0; i < edges.length; i++) {
                let { term, to } = edges[i];
                if (!term && result.indexOf(to) == -1)
                    scan(to);
            }
        }
    }
    // Compiles an NFA as produced by `nfa` into a DFA, modeled as a set
    // of state objects (`ContentMatch` instances) with transitions
    // between them.
    function dfa(nfa) {
        let labeled = Object.create(null);
        return explore(nullFrom(nfa, 0));
        function explore(states) {
            let out = [];
            states.forEach(node => {
                nfa[node].forEach(({ term, to }) => {
                    if (!term)
                        return;
                    let set;
                    for (let i = 0; i < out.length; i++)
                        if (out[i][0] == term)
                            set = out[i][1];
                    nullFrom(nfa, to).forEach(node => {
                        if (!set)
                            out.push([term, set = []]);
                        if (set.indexOf(node) == -1)
                            set.push(node);
                    });
                });
            });
            let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);
            for (let i = 0; i < out.length; i++) {
                let states = out[i][1].sort(cmp);
                state.next.push({ type: out[i][0], next: labeled[states.join(",")] || explore(states) });
            }
            return state;
        }
    }
    function checkForDeadEnds(match, stream) {
        for (let i = 0, work = [match]; i < work.length; i++) {
            let state = work[i], dead = !state.validEnd, nodes = [];
            for (let j = 0; j < state.next.length; j++) {
                let { type, next } = state.next[j];
                nodes.push(type.name);
                if (dead && !(type.isText || type.hasRequiredAttrs()))
                    dead = false;
                if (work.indexOf(next) == -1)
                    work.push(next);
            }
            if (dead)
                stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
        }
    }

    // For node types where all attrs have a default value (or which don't
    // have any attributes), build up a single reusable default attribute
    // object, and use it for all nodes that don't specify specific
    // attributes.
    function defaultAttrs(attrs) {
        let defaults = Object.create(null);
        for (let attrName in attrs) {
            let attr = attrs[attrName];
            if (!attr.hasDefault)
                return null;
            defaults[attrName] = attr.default;
        }
        return defaults;
    }
    function computeAttrs(attrs, value) {
        let built = Object.create(null);
        for (let name in attrs) {
            let given = value && value[name];
            if (given === undefined) {
                let attr = attrs[name];
                if (attr.hasDefault)
                    given = attr.default;
                else
                    throw new RangeError("No value supplied for attribute " + name);
            }
            built[name] = given;
        }
        return built;
    }
    function initAttrs(attrs) {
        let result = Object.create(null);
        if (attrs)
            for (let name in attrs)
                result[name] = new Attribute(attrs[name]);
        return result;
    }
    /**
    Node types are objects allocated once per `Schema` and used to
    [tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information
    about the node type, such as its name and what kind of node it
    represents.
    */
    let NodeType$1 = class NodeType {
        /**
        @internal
        */
        constructor(
        /**
        The name the node type has in this schema.
        */
        name, 
        /**
        A link back to the `Schema` the node type belongs to.
        */
        schema, 
        /**
        The spec that this type is based on
        */
        spec) {
            this.name = name;
            this.schema = schema;
            this.spec = spec;
            /**
            The set of marks allowed in this node. `null` means all marks
            are allowed.
            */
            this.markSet = null;
            this.groups = spec.group ? spec.group.split(" ") : [];
            this.attrs = initAttrs(spec.attrs);
            this.defaultAttrs = defaultAttrs(this.attrs);
            this.contentMatch = null;
            this.inlineContent = null;
            this.isBlock = !(spec.inline || name == "text");
            this.isText = name == "text";
        }
        /**
        True if this is an inline type.
        */
        get isInline() { return !this.isBlock; }
        /**
        True if this is a textblock type, a block that contains inline
        content.
        */
        get isTextblock() { return this.isBlock && this.inlineContent; }
        /**
        True for node types that allow no content.
        */
        get isLeaf() { return this.contentMatch == ContentMatch.empty; }
        /**
        True when this node is an atom, i.e. when it does not have
        directly editable content.
        */
        get isAtom() { return this.isLeaf || !!this.spec.atom; }
        /**
        The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
        */
        get whitespace() {
            return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
        }
        /**
        Tells you whether this node type has any required attributes.
        */
        hasRequiredAttrs() {
            for (let n in this.attrs)
                if (this.attrs[n].isRequired)
                    return true;
            return false;
        }
        /**
        Indicates whether this node allows some of the same content as
        the given node type.
        */
        compatibleContent(other) {
            return this == other || this.contentMatch.compatible(other.contentMatch);
        }
        /**
        @internal
        */
        computeAttrs(attrs) {
            if (!attrs && this.defaultAttrs)
                return this.defaultAttrs;
            else
                return computeAttrs(this.attrs, attrs);
        }
        /**
        Create a `Node` of this type. The given attributes are
        checked and defaulted (you can pass `null` to use the type's
        defaults entirely, if no required attributes exist). `content`
        may be a `Fragment`, a node, an array of nodes, or
        `null`. Similarly `marks` may be `null` to default to the empty
        set of marks.
        */
        create(attrs = null, content, marks) {
            if (this.isText)
                throw new Error("NodeType.create can't construct text nodes");
            return new Node$1(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));
        }
        /**
        Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
        against the node type's content restrictions, and throw an error
        if it doesn't match.
        */
        createChecked(attrs = null, content, marks) {
            content = Fragment.from(content);
            this.checkContent(content);
            return new Node$1(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));
        }
        /**
        Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
        necessary to add nodes to the start or end of the given fragment
        to make it fit the node. If no fitting wrapping can be found,
        return null. Note that, due to the fact that required nodes can
        always be created, this will always succeed if you pass null or
        `Fragment.empty` as content.
        */
        createAndFill(attrs = null, content, marks) {
            attrs = this.computeAttrs(attrs);
            content = Fragment.from(content);
            if (content.size) {
                let before = this.contentMatch.fillBefore(content);
                if (!before)
                    return null;
                content = before.append(content);
            }
            let matched = this.contentMatch.matchFragment(content);
            let after = matched && matched.fillBefore(Fragment.empty, true);
            if (!after)
                return null;
            return new Node$1(this, attrs, content.append(after), Mark.setFrom(marks));
        }
        /**
        Returns true if the given fragment is valid content for this node
        type with the given attributes.
        */
        validContent(content) {
            let result = this.contentMatch.matchFragment(content);
            if (!result || !result.validEnd)
                return false;
            for (let i = 0; i < content.childCount; i++)
                if (!this.allowsMarks(content.child(i).marks))
                    return false;
            return true;
        }
        /**
        Throws a RangeError if the given fragment is not valid content for this
        node type.
        @internal
        */
        checkContent(content) {
            if (!this.validContent(content))
                throw new RangeError(`Invalid content for node ${this.name}: ${content.toString().slice(0, 50)}`);
        }
        /**
        Check whether the given mark type is allowed in this node.
        */
        allowsMarkType(markType) {
            return this.markSet == null || this.markSet.indexOf(markType) > -1;
        }
        /**
        Test whether the given set of marks are allowed in this node.
        */
        allowsMarks(marks) {
            if (this.markSet == null)
                return true;
            for (let i = 0; i < marks.length; i++)
                if (!this.allowsMarkType(marks[i].type))
                    return false;
            return true;
        }
        /**
        Removes the marks that are not allowed in this node from the given set.
        */
        allowedMarks(marks) {
            if (this.markSet == null)
                return marks;
            let copy;
            for (let i = 0; i < marks.length; i++) {
                if (!this.allowsMarkType(marks[i].type)) {
                    if (!copy)
                        copy = marks.slice(0, i);
                }
                else if (copy) {
                    copy.push(marks[i]);
                }
            }
            return !copy ? marks : copy.length ? copy : Mark.none;
        }
        /**
        @internal
        */
        static compile(nodes, schema) {
            let result = Object.create(null);
            nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));
            let topType = schema.spec.topNode || "doc";
            if (!result[topType])
                throw new RangeError("Schema is missing its top node type ('" + topType + "')");
            if (!result.text)
                throw new RangeError("Every schema needs a 'text' type");
            for (let _ in result.text.attrs)
                throw new RangeError("The text node type should not have attributes");
            return result;
        }
    };
    // Attribute descriptors
    class Attribute {
        constructor(options) {
            this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
            this.default = options.default;
        }
        get isRequired() {
            return !this.hasDefault;
        }
    }
    // Marks
    /**
    Like nodes, marks (which are associated with nodes to signify
    things like emphasis or being part of a link) are
    [tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are
    instantiated once per `Schema`.
    */
    class MarkType {
        /**
        @internal
        */
        constructor(
        /**
        The name of the mark type.
        */
        name, 
        /**
        @internal
        */
        rank, 
        /**
        The schema that this mark type instance is part of.
        */
        schema, 
        /**
        The spec on which the type is based.
        */
        spec) {
            this.name = name;
            this.rank = rank;
            this.schema = schema;
            this.spec = spec;
            this.attrs = initAttrs(spec.attrs);
            this.excluded = null;
            let defaults = defaultAttrs(this.attrs);
            this.instance = defaults ? new Mark(this, defaults) : null;
        }
        /**
        Create a mark of this type. `attrs` may be `null` or an object
        containing only some of the mark's attributes. The others, if
        they have defaults, will be added.
        */
        create(attrs = null) {
            if (!attrs && this.instance)
                return this.instance;
            return new Mark(this, computeAttrs(this.attrs, attrs));
        }
        /**
        @internal
        */
        static compile(marks, schema) {
            let result = Object.create(null), rank = 0;
            marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));
            return result;
        }
        /**
        When there is a mark of this type in the given set, a new set
        without it is returned. Otherwise, the input set is returned.
        */
        removeFromSet(set) {
            for (var i = 0; i < set.length; i++)
                if (set[i].type == this) {
                    set = set.slice(0, i).concat(set.slice(i + 1));
                    i--;
                }
            return set;
        }
        /**
        Tests whether there is a mark of this type in the given set.
        */
        isInSet(set) {
            for (let i = 0; i < set.length; i++)
                if (set[i].type == this)
                    return set[i];
        }
        /**
        Queries whether a given mark type is
        [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
        */
        excludes(other) {
            return this.excluded.indexOf(other) > -1;
        }
    }
    /**
    A document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark
    type](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may
    occur in conforming documents, and provides functionality for
    creating and deserializing such documents.

    When given, the type parameters provide the names of the nodes and
    marks in this schema.
    */
    class Schema {
        /**
        Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
        */
        constructor(spec) {
            /**
            The [linebreak
            replacement](https://prosemirror.net/docs/ref/#model.NodeSpec.linebreakReplacement) node defined
            in this schema, if any.
            */
            this.linebreakReplacement = null;
            /**
            An object for storing whatever values modules may want to
            compute and cache per schema. (If you want to store something
            in it, try to use property names unlikely to clash.)
            */
            this.cached = Object.create(null);
            let instanceSpec = this.spec = {};
            for (let prop in spec)
                instanceSpec[prop] = spec[prop];
            instanceSpec.nodes = OrderedMap.from(spec.nodes),
                instanceSpec.marks = OrderedMap.from(spec.marks || {}),
                this.nodes = NodeType$1.compile(this.spec.nodes, this);
            this.marks = MarkType.compile(this.spec.marks, this);
            let contentExprCache = Object.create(null);
            for (let prop in this.nodes) {
                if (prop in this.marks)
                    throw new RangeError(prop + " can not be both a node and a mark");
                let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
                type.contentMatch = contentExprCache[contentExpr] ||
                    (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
                type.inlineContent = type.contentMatch.inlineContent;
                if (type.spec.linebreakReplacement) {
                    if (this.linebreakReplacement)
                        throw new RangeError("Multiple linebreak nodes defined");
                    if (!type.isInline || !type.isLeaf)
                        throw new RangeError("Linebreak replacement nodes must be inline leaf nodes");
                    this.linebreakReplacement = type;
                }
                type.markSet = markExpr == "_" ? null :
                    markExpr ? gatherMarks(this, markExpr.split(" ")) :
                        markExpr == "" || !type.inlineContent ? [] : null;
            }
            for (let prop in this.marks) {
                let type = this.marks[prop], excl = type.spec.excludes;
                type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
            }
            this.nodeFromJSON = this.nodeFromJSON.bind(this);
            this.markFromJSON = this.markFromJSON.bind(this);
            this.topNodeType = this.nodes[this.spec.topNode || "doc"];
            this.cached.wrappings = Object.create(null);
        }
        /**
        Create a node in this schema. The `type` may be a string or a
        `NodeType` instance. Attributes will be extended with defaults,
        `content` may be a `Fragment`, `null`, a `Node`, or an array of
        nodes.
        */
        node(type, attrs = null, content, marks) {
            if (typeof type == "string")
                type = this.nodeType(type);
            else if (!(type instanceof NodeType$1))
                throw new RangeError("Invalid node type: " + type);
            else if (type.schema != this)
                throw new RangeError("Node type from different schema used (" + type.name + ")");
            return type.createChecked(attrs, content, marks);
        }
        /**
        Create a text node in the schema. Empty text nodes are not
        allowed.
        */
        text(text, marks) {
            let type = this.nodes.text;
            return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks));
        }
        /**
        Create a mark with the given type and attributes.
        */
        mark(type, attrs) {
            if (typeof type == "string")
                type = this.marks[type];
            return type.create(attrs);
        }
        /**
        Deserialize a node from its JSON representation. This method is
        bound.
        */
        nodeFromJSON(json) {
            return Node$1.fromJSON(this, json);
        }
        /**
        Deserialize a mark from its JSON representation. This method is
        bound.
        */
        markFromJSON(json) {
            return Mark.fromJSON(this, json);
        }
        /**
        @internal
        */
        nodeType(name) {
            let found = this.nodes[name];
            if (!found)
                throw new RangeError("Unknown node type: " + name);
            return found;
        }
    }
    function gatherMarks(schema, marks) {
        let found = [];
        for (let i = 0; i < marks.length; i++) {
            let name = marks[i], mark = schema.marks[name], ok = mark;
            if (mark) {
                found.push(mark);
            }
            else {
                for (let prop in schema.marks) {
                    let mark = schema.marks[prop];
                    if (name == "_" || (mark.spec.group && mark.spec.group.split(" ").indexOf(name) > -1))
                        found.push(ok = mark);
                }
            }
            if (!ok)
                throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
        }
        return found;
    }

    function isTagRule(rule) { return rule.tag != null; }
    function isStyleRule(rule) { return rule.style != null; }
    /**
    A DOM parser represents a strategy for parsing DOM content into a
    ProseMirror document conforming to a given schema. Its behavior is
    defined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).
    */
    class DOMParser {
        /**
        Create a parser that targets the given schema, using the given
        parsing rules.
        */
        constructor(
        /**
        The schema into which the parser parses.
        */
        schema, 
        /**
        The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser
        uses, in order of precedence.
        */
        rules) {
            this.schema = schema;
            this.rules = rules;
            /**
            @internal
            */
            this.tags = [];
            /**
            @internal
            */
            this.styles = [];
            rules.forEach(rule => {
                if (isTagRule(rule))
                    this.tags.push(rule);
                else if (isStyleRule(rule))
                    this.styles.push(rule);
            });
            // Only normalize list elements when lists in the schema can't directly contain themselves
            this.normalizeLists = !this.tags.some(r => {
                if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
                    return false;
                let node = schema.nodes[r.node];
                return node.contentMatch.matchType(node);
            });
        }
        /**
        Parse a document from the content of a DOM node.
        */
        parse(dom, options = {}) {
            let context = new ParseContext(this, options, false);
            context.addAll(dom, options.from, options.to);
            return context.finish();
        }
        /**
        Parses the content of the given DOM node, like
        [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
        options. But unlike that method, which produces a whole node,
        this one returns a slice that is open at the sides, meaning that
        the schema constraints aren't applied to the start of nodes to
        the left of the input and the end of nodes at the end.
        */
        parseSlice(dom, options = {}) {
            let context = new ParseContext(this, options, true);
            context.addAll(dom, options.from, options.to);
            return Slice.maxOpen(context.finish());
        }
        /**
        @internal
        */
        matchTag(dom, context, after) {
            for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
                let rule = this.tags[i];
                if (matches(dom, rule.tag) &&
                    (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
                    (!rule.context || context.matchesContext(rule.context))) {
                    if (rule.getAttrs) {
                        let result = rule.getAttrs(dom);
                        if (result === false)
                            continue;
                        rule.attrs = result || undefined;
                    }
                    return rule;
                }
            }
        }
        /**
        @internal
        */
        matchStyle(prop, value, context, after) {
            for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
                let rule = this.styles[i], style = rule.style;
                if (style.indexOf(prop) != 0 ||
                    rule.context && !context.matchesContext(rule.context) ||
                    // Test that the style string either precisely matches the prop,
                    // or has an '=' sign after the prop, followed by the given
                    // value.
                    style.length > prop.length &&
                        (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))
                    continue;
                if (rule.getAttrs) {
                    let result = rule.getAttrs(value);
                    if (result === false)
                        continue;
                    rule.attrs = result || undefined;
                }
                return rule;
            }
        }
        /**
        @internal
        */
        static schemaRules(schema) {
            let result = [];
            function insert(rule) {
                let priority = rule.priority == null ? 50 : rule.priority, i = 0;
                for (; i < result.length; i++) {
                    let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
                    if (nextPriority < priority)
                        break;
                }
                result.splice(i, 0, rule);
            }
            for (let name in schema.marks) {
                let rules = schema.marks[name].spec.parseDOM;
                if (rules)
                    rules.forEach(rule => {
                        insert(rule = copy(rule));
                        if (!(rule.mark || rule.ignore || rule.clearMark))
                            rule.mark = name;
                    });
            }
            for (let name in schema.nodes) {
                let rules = schema.nodes[name].spec.parseDOM;
                if (rules)
                    rules.forEach(rule => {
                        insert(rule = copy(rule));
                        if (!(rule.node || rule.ignore || rule.mark))
                            rule.node = name;
                    });
            }
            return result;
        }
        /**
        Construct a DOM parser using the parsing rules listed in a
        schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
        [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
        */
        static fromSchema(schema) {
            return schema.cached.domParser ||
                (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));
        }
    }
    const blockTags = {
        address: true, article: true, aside: true, blockquote: true, canvas: true,
        dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
        footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
        h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
        output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
    };
    const ignoreTags = {
        head: true, noscript: true, object: true, script: true, style: true, title: true
    };
    const listTags = { ol: true, ul: true };
    // Using a bitfield for node context options
    const OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;
    function wsOptionsFor(type, preserveWhitespace, base) {
        if (preserveWhitespace != null)
            return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |
                (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
        return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;
    }
    class NodeContext {
        constructor(type, attrs, 
        // Marks applied to this node itself
        marks, 
        // Marks that can't apply here, but will be used in children if possible
        pendingMarks, solid, match, options) {
            this.type = type;
            this.attrs = attrs;
            this.marks = marks;
            this.pendingMarks = pendingMarks;
            this.solid = solid;
            this.options = options;
            this.content = [];
            // Marks applied to the node's children
            this.activeMarks = Mark.none;
            // Nested Marks with same type
            this.stashMarks = [];
            this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
        }
        findWrapping(node) {
            if (!this.match) {
                if (!this.type)
                    return [];
                let fill = this.type.contentMatch.fillBefore(Fragment.from(node));
                if (fill) {
                    this.match = this.type.contentMatch.matchFragment(fill);
                }
                else {
                    let start = this.type.contentMatch, wrap;
                    if (wrap = start.findWrapping(node.type)) {
                        this.match = start;
                        return wrap;
                    }
                    else {
                        return null;
                    }
                }
            }
            return this.match.findWrapping(node.type);
        }
        finish(openEnd) {
            if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace
                let last = this.content[this.content.length - 1], m;
                if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
                    let text = last;
                    if (last.text.length == m[0].length)
                        this.content.pop();
                    else
                        this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));
                }
            }
            let content = Fragment.from(this.content);
            if (!openEnd && this.match)
                content = content.append(this.match.fillBefore(Fragment.empty, true));
            return this.type ? this.type.create(this.attrs, content, this.marks) : content;
        }
        popFromStashMark(mark) {
            for (let i = this.stashMarks.length - 1; i >= 0; i--)
                if (mark.eq(this.stashMarks[i]))
                    return this.stashMarks.splice(i, 1)[0];
        }
        applyPending(nextType) {
            for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {
                let mark = pending[i];
                if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&
                    !mark.isInSet(this.activeMarks)) {
                    this.activeMarks = mark.addToSet(this.activeMarks);
                    this.pendingMarks = mark.removeFromSet(this.pendingMarks);
                }
            }
        }
        inlineContext(node) {
            if (this.type)
                return this.type.inlineContent;
            if (this.content.length)
                return this.content[0].isInline;
            return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());
        }
    }
    class ParseContext {
        constructor(
        // The parser we are using.
        parser, 
        // The options passed to this parse.
        options, isOpen) {
            this.parser = parser;
            this.options = options;
            this.isOpen = isOpen;
            this.open = 0;
            let topNode = options.topNode, topContext;
            let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
            if (topNode)
                topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
            else if (isOpen)
                topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);
            else
                topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);
            this.nodes = [topContext];
            this.find = options.findPositions;
            this.needsBlock = false;
        }
        get top() {
            return this.nodes[this.open];
        }
        // Add a DOM node to the content. Text is inserted as text node,
        // otherwise, the node is passed to `addElement` or, if it has a
        // `style` attribute, `addElementWithStyles`.
        addDOM(dom) {
            if (dom.nodeType == 3)
                this.addTextNode(dom);
            else if (dom.nodeType == 1)
                this.addElement(dom);
        }
        withStyleRules(dom, f) {
            let style = dom.getAttribute("style");
            if (!style)
                return f();
            let marks = this.readStyles(parseStyles(style));
            if (!marks)
                return; // A style with ignore: true
            let [addMarks, removeMarks] = marks, top = this.top;
            for (let i = 0; i < removeMarks.length; i++)
                this.removePendingMark(removeMarks[i], top);
            for (let i = 0; i < addMarks.length; i++)
                this.addPendingMark(addMarks[i]);
            f();
            for (let i = 0; i < addMarks.length; i++)
                this.removePendingMark(addMarks[i], top);
            for (let i = 0; i < removeMarks.length; i++)
                this.addPendingMark(removeMarks[i]);
        }
        addTextNode(dom) {
            let value = dom.nodeValue;
            let top = this.top;
            if (top.options & OPT_PRESERVE_WS_FULL ||
                top.inlineContext(dom) ||
                /[^ \t\r\n\u000c]/.test(value)) {
                if (!(top.options & OPT_PRESERVE_WS)) {
                    value = value.replace(/[ \t\r\n\u000c]+/g, " ");
                    // If this starts with whitespace, and there is no node before it, or
                    // a hard break, or a text node that ends with whitespace, strip the
                    // leading space.
                    if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
                        let nodeBefore = top.content[top.content.length - 1];
                        let domNodeBefore = dom.previousSibling;
                        if (!nodeBefore ||
                            (domNodeBefore && domNodeBefore.nodeName == 'BR') ||
                            (nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text)))
                            value = value.slice(1);
                    }
                }
                else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
                    value = value.replace(/\r?\n|\r/g, " ");
                }
                else {
                    value = value.replace(/\r\n?/g, "\n");
                }
                if (value)
                    this.insertNode(this.parser.schema.text(value));
                this.findInText(dom);
            }
            else {
                this.findInside(dom);
            }
        }
        // Try to find a handler for the given tag and use that to parse. If
        // none is found, the element's content nodes are added directly.
        addElement(dom, matchAfter) {
            let name = dom.nodeName.toLowerCase(), ruleID;
            if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
                normalizeList(dom);
            let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||
                (ruleID = this.parser.matchTag(dom, this, matchAfter));
            if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
                this.findInside(dom);
                this.ignoreFallback(dom);
            }
            else if (!rule || rule.skip || rule.closeParent) {
                if (rule && rule.closeParent)
                    this.open = Math.max(0, this.open - 1);
                else if (rule && rule.skip.nodeType)
                    dom = rule.skip;
                let sync, top = this.top, oldNeedsBlock = this.needsBlock;
                if (blockTags.hasOwnProperty(name)) {
                    if (top.content.length && top.content[0].isInline && this.open) {
                        this.open--;
                        top = this.top;
                    }
                    sync = true;
                    if (!top.type)
                        this.needsBlock = true;
                }
                else if (!dom.firstChild) {
                    this.leafFallback(dom);
                    return;
                }
                if (rule && rule.skip)
                    this.addAll(dom);
                else
                    this.withStyleRules(dom, () => this.addAll(dom));
                if (sync)
                    this.sync(top);
                this.needsBlock = oldNeedsBlock;
            }
            else {
                this.withStyleRules(dom, () => {
                    this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);
                });
            }
        }
        // Called for leaf DOM nodes that would otherwise be ignored
        leafFallback(dom) {
            if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
                this.addTextNode(dom.ownerDocument.createTextNode("\n"));
        }
        // Called for ignored nodes
        ignoreFallback(dom) {
            // Ignored BR nodes should at least create an inline context
            if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
                this.findPlace(this.parser.schema.text("-"));
        }
        // Run any style parser associated with the node's styles. Either
        // return an array of marks, or null to indicate some of the styles
        // had a rule with `ignore` set.
        readStyles(styles) {
            let add = Mark.none, remove = Mark.none;
            for (let i = 0; i < styles.length; i += 2) {
                for (let after = undefined;;) {
                    let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);
                    if (!rule)
                        break;
                    if (rule.ignore)
                        return null;
                    if (rule.clearMark) {
                        this.top.pendingMarks.concat(this.top.activeMarks).forEach(m => {
                            if (rule.clearMark(m))
                                remove = m.addToSet(remove);
                        });
                    }
                    else {
                        add = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add);
                    }
                    if (rule.consuming === false)
                        after = rule;
                    else
                        break;
                }
            }
            return [add, remove];
        }
        // Look up a handler for the given node. If none are found, return
        // false. Otherwise, apply it, use its return value to drive the way
        // the node's content is wrapped, and return true.
        addElementByRule(dom, rule, continueAfter) {
            let sync, nodeType, mark;
            if (rule.node) {
                nodeType = this.parser.schema.nodes[rule.node];
                if (!nodeType.isLeaf) {
                    sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
                }
                else if (!this.insertNode(nodeType.create(rule.attrs))) {
                    this.leafFallback(dom);
                }
            }
            else {
                let markType = this.parser.schema.marks[rule.mark];
                mark = markType.create(rule.attrs);
                this.addPendingMark(mark);
            }
            let startIn = this.top;
            if (nodeType && nodeType.isLeaf) {
                this.findInside(dom);
            }
            else if (continueAfter) {
                this.addElement(dom, continueAfter);
            }
            else if (rule.getContent) {
                this.findInside(dom);
                rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node));
            }
            else {
                let contentDOM = dom;
                if (typeof rule.contentElement == "string")
                    contentDOM = dom.querySelector(rule.contentElement);
                else if (typeof rule.contentElement == "function")
                    contentDOM = rule.contentElement(dom);
                else if (rule.contentElement)
                    contentDOM = rule.contentElement;
                this.findAround(dom, contentDOM, true);
                this.addAll(contentDOM);
            }
            if (sync && this.sync(startIn))
                this.open--;
            if (mark)
                this.removePendingMark(mark, startIn);
        }
        // Add all child nodes between `startIndex` and `endIndex` (or the
        // whole node, if not given). If `sync` is passed, use it to
        // synchronize after every block element.
        addAll(parent, startIndex, endIndex) {
            let index = startIndex || 0;
            for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
                this.findAtPoint(parent, index);
                this.addDOM(dom);
            }
            this.findAtPoint(parent, index);
        }
        // Try to find a way to fit the given node type into the current
        // context. May add intermediate wrappers and/or leave non-solid
        // nodes that we're in.
        findPlace(node) {
            let route, sync;
            for (let depth = this.open; depth >= 0; depth--) {
                let cx = this.nodes[depth];
                let found = cx.findWrapping(node);
                if (found && (!route || route.length > found.length)) {
                    route = found;
                    sync = cx;
                    if (!found.length)
                        break;
                }
                if (cx.solid)
                    break;
            }
            if (!route)
                return false;
            this.sync(sync);
            for (let i = 0; i < route.length; i++)
                this.enterInner(route[i], null, false);
            return true;
        }
        // Try to insert the given node, adjusting the context when needed.
        insertNode(node) {
            if (node.isInline && this.needsBlock && !this.top.type) {
                let block = this.textblockFromContext();
                if (block)
                    this.enterInner(block);
            }
            if (this.findPlace(node)) {
                this.closeExtra();
                let top = this.top;
                top.applyPending(node.type);
                if (top.match)
                    top.match = top.match.matchType(node.type);
                let marks = top.activeMarks;
                for (let i = 0; i < node.marks.length; i++)
                    if (!top.type || top.type.allowsMarkType(node.marks[i].type))
                        marks = node.marks[i].addToSet(marks);
                top.content.push(node.mark(marks));
                return true;
            }
            return false;
        }
        // Try to start a node of the given type, adjusting the context when
        // necessary.
        enter(type, attrs, preserveWS) {
            let ok = this.findPlace(type.create(attrs));
            if (ok)
                this.enterInner(type, attrs, true, preserveWS);
            return ok;
        }
        // Open a node of the given type
        enterInner(type, attrs = null, solid = false, preserveWS) {
            this.closeExtra();
            let top = this.top;
            top.applyPending(type);
            top.match = top.match && top.match.matchType(type);
            let options = wsOptionsFor(type, preserveWS, top.options);
            if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0)
                options |= OPT_OPEN_LEFT;
            this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));
            this.open++;
        }
        // Make sure all nodes above this.open are finished and added to
        // their parents
        closeExtra(openEnd = false) {
            let i = this.nodes.length - 1;
            if (i > this.open) {
                for (; i > this.open; i--)
                    this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
                this.nodes.length = this.open + 1;
            }
        }
        finish() {
            this.open = 0;
            this.closeExtra(this.isOpen);
            return this.nodes[0].finish(this.isOpen || this.options.topOpen);
        }
        sync(to) {
            for (let i = this.open; i >= 0; i--)
                if (this.nodes[i] == to) {
                    this.open = i;
                    return true;
                }
            return false;
        }
        get currentPos() {
            this.closeExtra();
            let pos = 0;
            for (let i = this.open; i >= 0; i--) {
                let content = this.nodes[i].content;
                for (let j = content.length - 1; j >= 0; j--)
                    pos += content[j].nodeSize;
                if (i)
                    pos++;
            }
            return pos;
        }
        findAtPoint(parent, offset) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].node == parent && this.find[i].offset == offset)
                        this.find[i].pos = this.currentPos;
                }
        }
        findInside(parent) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
                        this.find[i].pos = this.currentPos;
                }
        }
        findAround(parent, content, before) {
            if (parent != content && this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
                        let pos = content.compareDocumentPosition(this.find[i].node);
                        if (pos & (before ? 2 : 4))
                            this.find[i].pos = this.currentPos;
                    }
                }
        }
        findInText(textNode) {
            if (this.find)
                for (let i = 0; i < this.find.length; i++) {
                    if (this.find[i].node == textNode)
                        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);
                }
        }
        // Determines whether the given context string matches this context.
        matchesContext(context) {
            if (context.indexOf("|") > -1)
                return context.split(/\s*\|\s*/).some(this.matchesContext, this);
            let parts = context.split("/");
            let option = this.options.context;
            let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
            let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
            let match = (i, depth) => {
                for (; i >= 0; i--) {
                    let part = parts[i];
                    if (part == "") {
                        if (i == parts.length - 1 || i == 0)
                            continue;
                        for (; depth >= minDepth; depth--)
                            if (match(i - 1, depth))
                                return true;
                        return false;
                    }
                    else {
                        let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type
                            : option && depth >= minDepth ? option.node(depth - minDepth).type
                                : null;
                        if (!next || (next.name != part && next.groups.indexOf(part) == -1))
                            return false;
                        depth--;
                    }
                }
                return true;
            };
            return match(parts.length - 1, this.open);
        }
        textblockFromContext() {
            let $context = this.options.context;
            if ($context)
                for (let d = $context.depth; d >= 0; d--) {
                    let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
                    if (deflt && deflt.isTextblock && deflt.defaultAttrs)
                        return deflt;
                }
            for (let name in this.parser.schema.nodes) {
                let type = this.parser.schema.nodes[name];
                if (type.isTextblock && type.defaultAttrs)
                    return type;
            }
        }
        addPendingMark(mark) {
            let found = findSameMarkInSet(mark, this.top.pendingMarks);
            if (found)
                this.top.stashMarks.push(found);
            this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
        }
        removePendingMark(mark, upto) {
            for (let depth = this.open; depth >= 0; depth--) {
                let level = this.nodes[depth];
                let found = level.pendingMarks.lastIndexOf(mark);
                if (found > -1) {
                    level.pendingMarks = mark.removeFromSet(level.pendingMarks);
                }
                else {
                    level.activeMarks = mark.removeFromSet(level.activeMarks);
                    let stashMark = level.popFromStashMark(mark);
                    if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
                        level.activeMarks = stashMark.addToSet(level.activeMarks);
                }
                if (level == upto)
                    break;
            }
        }
    }
    // Kludge to work around directly nested list nodes produced by some
    // tools and allowed by browsers to mean that the nested list is
    // actually part of the list item above it.
    function normalizeList(dom) {
        for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
            let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
            if (name && listTags.hasOwnProperty(name) && prevItem) {
                prevItem.appendChild(child);
                child = prevItem;
            }
            else if (name == "li") {
                prevItem = child;
            }
            else if (name) {
                prevItem = null;
            }
        }
    }
    // Apply a CSS selector.
    function matches(dom, selector) {
        return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
    }
    // Tokenize a style attribute into property/value pairs.
    function parseStyles(style) {
        let re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
        while (m = re.exec(style))
            result.push(m[1], m[2].trim());
        return result;
    }
    function copy(obj) {
        let copy = {};
        for (let prop in obj)
            copy[prop] = obj[prop];
        return copy;
    }
    // Used when finding a mark at the top level of a fragment parse.
    // Checks whether it would be reasonable to apply a given mark type to
    // a given node, by looking at the way the mark occurs in the schema.
    function markMayApply(markType, nodeType) {
        let nodes = nodeType.schema.nodes;
        for (let name in nodes) {
            let parent = nodes[name];
            if (!parent.allowsMarkType(markType))
                continue;
            let seen = [], scan = (match) => {
                seen.push(match);
                for (let i = 0; i < match.edgeCount; i++) {
                    let { type, next } = match.edge(i);
                    if (type == nodeType)
                        return true;
                    if (seen.indexOf(next) < 0 && scan(next))
                        return true;
                }
            };
            if (scan(parent.contentMatch))
                return true;
        }
    }
    function findSameMarkInSet(mark, set) {
        for (let i = 0; i < set.length; i++) {
            if (mark.eq(set[i]))
                return set[i];
        }
    }

    /**
    A DOM serializer knows how to convert ProseMirror nodes and
    marks of various types to DOM nodes.
    */
    class DOMSerializer {
        /**
        Create a serializer. `nodes` should map node names to functions
        that take a node and return a description of the corresponding
        DOM. `marks` does the same for mark names, but also gets an
        argument that tells it whether the mark's content is block or
        inline content (for typical use, it'll always be inline). A mark
        serializer may be `null` to indicate that marks of that type
        should not be serialized.
        */
        constructor(
        /**
        The node serialization functions.
        */
        nodes, 
        /**
        The mark serialization functions.
        */
        marks) {
            this.nodes = nodes;
            this.marks = marks;
        }
        /**
        Serialize the content of this fragment to a DOM fragment. When
        not in the browser, the `document` option, containing a DOM
        document, should be passed so that the serializer can create
        nodes.
        */
        serializeFragment(fragment, options = {}, target) {
            if (!target)
                target = doc$1(options).createDocumentFragment();
            let top = target, active = [];
            fragment.forEach(node => {
                if (active.length || node.marks.length) {
                    let keep = 0, rendered = 0;
                    while (keep < active.length && rendered < node.marks.length) {
                        let next = node.marks[rendered];
                        if (!this.marks[next.type.name]) {
                            rendered++;
                            continue;
                        }
                        if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)
                            break;
                        keep++;
                        rendered++;
                    }
                    while (keep < active.length)
                        top = active.pop()[1];
                    while (rendered < node.marks.length) {
                        let add = node.marks[rendered++];
                        let markDOM = this.serializeMark(add, node.isInline, options);
                        if (markDOM) {
                            active.push([add, top]);
                            top.appendChild(markDOM.dom);
                            top = markDOM.contentDOM || markDOM.dom;
                        }
                    }
                }
                top.appendChild(this.serializeNodeInner(node, options));
            });
            return target;
        }
        /**
        @internal
        */
        serializeNodeInner(node, options) {
            let { dom, contentDOM } = DOMSerializer.renderSpec(doc$1(options), this.nodes[node.type.name](node));
            if (contentDOM) {
                if (node.isLeaf)
                    throw new RangeError("Content hole not allowed in a leaf node spec");
                this.serializeFragment(node.content, options, contentDOM);
            }
            return dom;
        }
        /**
        Serialize this node to a DOM node. This can be useful when you
        need to serialize a part of a document, as opposed to the whole
        document. To serialize a whole document, use
        [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
        its [content](https://prosemirror.net/docs/ref/#model.Node.content).
        */
        serializeNode(node, options = {}) {
            let dom = this.serializeNodeInner(node, options);
            for (let i = node.marks.length - 1; i >= 0; i--) {
                let wrap = this.serializeMark(node.marks[i], node.isInline, options);
                if (wrap) {
                    (wrap.contentDOM || wrap.dom).appendChild(dom);
                    dom = wrap.dom;
                }
            }
            return dom;
        }
        /**
        @internal
        */
        serializeMark(mark, inline, options = {}) {
            let toDOM = this.marks[mark.type.name];
            return toDOM && DOMSerializer.renderSpec(doc$1(options), toDOM(mark, inline));
        }
        /**
        Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
        the spec has a hole (zero) in it, `contentDOM` will point at the
        node with the hole.
        */
        static renderSpec(doc, structure, xmlNS = null) {
            if (typeof structure == "string")
                return { dom: doc.createTextNode(structure) };
            if (structure.nodeType != null)
                return { dom: structure };
            if (structure.dom && structure.dom.nodeType != null)
                return structure;
            let tagName = structure[0], space = tagName.indexOf(" ");
            if (space > 0) {
                xmlNS = tagName.slice(0, space);
                tagName = tagName.slice(space + 1);
            }
            let contentDOM;
            let dom = (xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName));
            let attrs = structure[1], start = 1;
            if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
                start = 2;
                for (let name in attrs)
                    if (attrs[name] != null) {
                        let space = name.indexOf(" ");
                        if (space > 0)
                            dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);
                        else
                            dom.setAttribute(name, attrs[name]);
                    }
            }
            for (let i = start; i < structure.length; i++) {
                let child = structure[i];
                if (child === 0) {
                    if (i < structure.length - 1 || i > start)
                        throw new RangeError("Content hole must be the only child of its parent node");
                    return { dom, contentDOM: dom };
                }
                else {
                    let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc, child, xmlNS);
                    dom.appendChild(inner);
                    if (innerContent) {
                        if (contentDOM)
                            throw new RangeError("Multiple content holes");
                        contentDOM = innerContent;
                    }
                }
            }
            return { dom, contentDOM };
        }
        /**
        Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
        properties in a schema's node and mark specs.
        */
        static fromSchema(schema) {
            return schema.cached.domSerializer ||
                (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
        }
        /**
        Gather the serializers in a schema's node specs into an object.
        This can be useful as a base to build a custom serializer from.
        */
        static nodesFromSchema(schema) {
            let result = gatherToDOM(schema.nodes);
            if (!result.text)
                result.text = node => node.text;
            return result;
        }
        /**
        Gather the serializers in a schema's mark specs into an object.
        */
        static marksFromSchema(schema) {
            return gatherToDOM(schema.marks);
        }
    }
    function gatherToDOM(obj) {
        let result = {};
        for (let name in obj) {
            let toDOM = obj[name].spec.toDOM;
            if (toDOM)
                result[name] = toDOM;
        }
        return result;
    }
    function doc$1(options) {
        return options.document || window.document;
    }

    // Recovery values encode a range index and an offset. They are
    // represented as numbers, because tons of them will be created when
    // mapping, for example, a large number of decorations. The number's
    // lower 16 bits provide the index, the remaining bits the offset.
    //
    // Note: We intentionally don't use bit shift operators to en- and
    // decode these, since those clip to 32 bits, which we might in rare
    // cases want to overflow. A 64-bit float can represent 48-bit
    // integers precisely.
    const lower16 = 0xffff;
    const factor16 = Math.pow(2, 16);
    function makeRecover(index, offset) { return index + offset * factor16; }
    function recoverIndex(value) { return value & lower16; }
    function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
    const DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;
    /**
    An object representing a mapped position with extra
    information.
    */
    class MapResult {
        /**
        @internal
        */
        constructor(
        /**
        The mapped version of the position.
        */
        pos, 
        /**
        @internal
        */
        delInfo, 
        /**
        @internal
        */
        recover) {
            this.pos = pos;
            this.delInfo = delInfo;
            this.recover = recover;
        }
        /**
        Tells you whether the position was deleted, that is, whether the
        step removed the token on the side queried (via the `assoc`)
        argument from the document.
        */
        get deleted() { return (this.delInfo & DEL_SIDE) > 0; }
        /**
        Tells you whether the token before the mapped position was deleted.
        */
        get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }
        /**
        True when the token after the mapped position was deleted.
        */
        get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }
        /**
        Tells whether any of the steps mapped through deletes across the
        position (including both the token before and after the
        position).
        */
        get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }
    }
    /**
    A map describing the deletions and insertions made by a step, which
    can be used to find the correspondence between positions in the
    pre-step version of a document and the same position in the
    post-step version.
    */
    class StepMap {
        /**
        Create a position map. The modifications to the document are
        represented as an array of numbers, in which each group of three
        represents a modified chunk as `[start, oldSize, newSize]`.
        */
        constructor(
        /**
        @internal
        */
        ranges, 
        /**
        @internal
        */
        inverted = false) {
            this.ranges = ranges;
            this.inverted = inverted;
            if (!ranges.length && StepMap.empty)
                return StepMap.empty;
        }
        /**
        @internal
        */
        recover(value) {
            let diff = 0, index = recoverIndex(value);
            if (!this.inverted)
                for (let i = 0; i < index; i++)
                    diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
            return this.ranges[index * 3] + diff + recoverOffset(value);
        }
        mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
        map(pos, assoc = 1) { return this._map(pos, assoc, true); }
        /**
        @internal
        */
        _map(pos, assoc, simple) {
            let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i] - (this.inverted ? diff : 0);
                if (start > pos)
                    break;
                let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
                if (pos <= end) {
                    let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                    let result = start + diff + (side < 0 ? 0 : newSize);
                    if (simple)
                        return result;
                    let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
                    let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
                    if (assoc < 0 ? pos != start : pos != end)
                        del |= DEL_SIDE;
                    return new MapResult(result, del, recover);
                }
                diff += newSize - oldSize;
            }
            return simple ? pos + diff : new MapResult(pos + diff, 0, null);
        }
        /**
        @internal
        */
        touches(pos, recover) {
            let diff = 0, index = recoverIndex(recover);
            let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i] - (this.inverted ? diff : 0);
                if (start > pos)
                    break;
                let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
                if (pos <= end && i == index * 3)
                    return true;
                diff += this.ranges[i + newIndex] - oldSize;
            }
            return false;
        }
        /**
        Calls the given function on each of the changed ranges included in
        this map.
        */
        forEach(f) {
            let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
            for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
                let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
                let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
                f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
                diff += newSize - oldSize;
            }
        }
        /**
        Create an inverted version of this map. The result can be used to
        map positions in the post-step document to the pre-step document.
        */
        invert() {
            return new StepMap(this.ranges, !this.inverted);
        }
        /**
        @internal
        */
        toString() {
            return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
        }
        /**
        Create a map that moves all positions by offset `n` (which may be
        negative). This can be useful when applying steps meant for a
        sub-document to a larger document, or vice-versa.
        */
        static offset(n) {
            return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
        }
    }
    /**
    A StepMap that contains no changed ranges.
    */
    StepMap.empty = new StepMap([]);
    /**
    A mapping represents a pipeline of zero or more [step
    maps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly
    handling mapping positions through a series of steps in which some
    steps are inverted versions of earlier steps. (This comes up when
    ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
    collaboration or history management.)
    */
    class Mapping {
        /**
        Create a new mapping with the given position maps.
        */
        constructor(
        /**
        The step maps in this mapping.
        */
        maps = [], 
        /**
        @internal
        */
        mirror, 
        /**
        The starting position in the `maps` array, used when `map` or
        `mapResult` is called.
        */
        from = 0, 
        /**
        The end position in the `maps` array.
        */
        to = maps.length) {
            this.maps = maps;
            this.mirror = mirror;
            this.from = from;
            this.to = to;
        }
        /**
        Create a mapping that maps only through a part of this one.
        */
        slice(from = 0, to = this.maps.length) {
            return new Mapping(this.maps, this.mirror, from, to);
        }
        /**
        @internal
        */
        copy() {
            return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
        }
        /**
        Add a step map to the end of this mapping. If `mirrors` is
        given, it should be the index of the step map that is the mirror
        image of this one.
        */
        appendMap(map, mirrors) {
            this.to = this.maps.push(map);
            if (mirrors != null)
                this.setMirror(this.maps.length - 1, mirrors);
        }
        /**
        Add all the step maps in a given mapping to this one (preserving
        mirroring information).
        */
        appendMapping(mapping) {
            for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
                let mirr = mapping.getMirror(i);
                this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);
            }
        }
        /**
        Finds the offset of the step map that mirrors the map at the
        given offset, in this mapping (as per the second argument to
        `appendMap`).
        */
        getMirror(n) {
            if (this.mirror)
                for (let i = 0; i < this.mirror.length; i++)
                    if (this.mirror[i] == n)
                        return this.mirror[i + (i % 2 ? -1 : 1)];
        }
        /**
        @internal
        */
        setMirror(n, m) {
            if (!this.mirror)
                this.mirror = [];
            this.mirror.push(n, m);
        }
        /**
        Append the inverse of the given mapping to this one.
        */
        appendMappingInverted(mapping) {
            for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
                let mirr = mapping.getMirror(i);
                this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);
            }
        }
        /**
        Create an inverted version of this mapping.
        */
        invert() {
            let inverse = new Mapping;
            inverse.appendMappingInverted(this);
            return inverse;
        }
        /**
        Map a position through this mapping.
        */
        map(pos, assoc = 1) {
            if (this.mirror)
                return this._map(pos, assoc, true);
            for (let i = this.from; i < this.to; i++)
                pos = this.maps[i].map(pos, assoc);
            return pos;
        }
        /**
        Map a position through this mapping, returning a mapping
        result.
        */
        mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
        /**
        @internal
        */
        _map(pos, assoc, simple) {
            let delInfo = 0;
            for (let i = this.from; i < this.to; i++) {
                let map = this.maps[i], result = map.mapResult(pos, assoc);
                if (result.recover != null) {
                    let corr = this.getMirror(i);
                    if (corr != null && corr > i && corr < this.to) {
                        i = corr;
                        pos = this.maps[corr].recover(result.recover);
                        continue;
                    }
                }
                delInfo |= result.delInfo;
                pos = result.pos;
            }
            return simple ? pos : new MapResult(pos, delInfo, null);
        }
    }

    const stepsByID = Object.create(null);
    /**
    A step object represents an atomic change. It generally applies
    only to the document it was created for, since the positions
    stored in it will only make sense for that document.

    New steps are defined by creating classes that extend `Step`,
    overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
    methods, and registering your class with a unique
    JSON-serialization identifier using
    [`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).
    */
    class Step {
        /**
        Get the step map that represents the changes made by this step,
        and which can be used to transform between positions in the old
        and the new document.
        */
        getMap() { return StepMap.empty; }
        /**
        Try to merge this step with another one, to be applied directly
        after it. Returns the merged step when possible, null if the
        steps can't be merged.
        */
        merge(other) { return null; }
        /**
        Deserialize a step from its JSON representation. Will call
        through to the step class' own implementation of this method.
        */
        static fromJSON(schema, json) {
            if (!json || !json.stepType)
                throw new RangeError("Invalid input for Step.fromJSON");
            let type = stepsByID[json.stepType];
            if (!type)
                throw new RangeError(`No step type ${json.stepType} defined`);
            return type.fromJSON(schema, json);
        }
        /**
        To be able to serialize steps to JSON, each step needs a string
        ID to attach to its JSON representation. Use this method to
        register an ID for your step classes. Try to pick something
        that's unlikely to clash with steps from other modules.
        */
        static jsonID(id, stepClass) {
            if (id in stepsByID)
                throw new RangeError("Duplicate use of step JSON ID " + id);
            stepsByID[id] = stepClass;
            stepClass.prototype.jsonID = id;
            return stepClass;
        }
    }
    /**
    The result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a
    new document or a failure value.
    */
    class StepResult {
        /**
        @internal
        */
        constructor(
        /**
        The transformed document, if successful.
        */
        doc, 
        /**
        The failure message, if unsuccessful.
        */
        failed) {
            this.doc = doc;
            this.failed = failed;
        }
        /**
        Create a successful step result.
        */
        static ok(doc) { return new StepResult(doc, null); }
        /**
        Create a failed step result.
        */
        static fail(message) { return new StepResult(null, message); }
        /**
        Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
        arguments. Create a successful result if it succeeds, and a
        failed one if it throws a `ReplaceError`.
        */
        static fromReplace(doc, from, to, slice) {
            try {
                return StepResult.ok(doc.replace(from, to, slice));
            }
            catch (e) {
                if (e instanceof ReplaceError)
                    return StepResult.fail(e.message);
                throw e;
            }
        }
    }

    function mapFragment(fragment, f, parent) {
        let mapped = [];
        for (let i = 0; i < fragment.childCount; i++) {
            let child = fragment.child(i);
            if (child.content.size)
                child = child.copy(mapFragment(child.content, f, child));
            if (child.isInline)
                child = f(child, parent, i);
            mapped.push(child);
        }
        return Fragment.fromArray(mapped);
    }
    /**
    Add a mark to all inline content between two positions.
    */
    class AddMarkStep extends Step {
        /**
        Create a mark step.
        */
        constructor(
        /**
        The start of the marked range.
        */
        from, 
        /**
        The end of the marked range.
        */
        to, 
        /**
        The mark to add.
        */
        mark) {
            super();
            this.from = from;
            this.to = to;
            this.mark = mark;
        }
        apply(doc) {
            let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
            let parent = $from.node($from.sharedDepth(this.to));
            let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {
                if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))
                    return node;
                return node.mark(this.mark.addToSet(node.marks));
            }, parent), oldSlice.openStart, oldSlice.openEnd);
            return StepResult.fromReplace(doc, this.from, this.to, slice);
        }
        invert() {
            return new RemoveMarkStep(this.from, this.to, this.mark);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted || from.pos >= to.pos)
                return null;
            return new AddMarkStep(from.pos, to.pos, this.mark);
        }
        merge(other) {
            if (other instanceof AddMarkStep &&
                other.mark.eq(this.mark) &&
                this.from <= other.to && this.to >= other.from)
                return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
            return null;
        }
        toJSON() {
            return { stepType: "addMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for AddMarkStep.fromJSON");
            return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("addMark", AddMarkStep);
    /**
    Remove a mark from all inline content between two positions.
    */
    class RemoveMarkStep extends Step {
        /**
        Create a mark-removing step.
        */
        constructor(
        /**
        The start of the unmarked range.
        */
        from, 
        /**
        The end of the unmarked range.
        */
        to, 
        /**
        The mark to remove.
        */
        mark) {
            super();
            this.from = from;
            this.to = to;
            this.mark = mark;
        }
        apply(doc) {
            let oldSlice = doc.slice(this.from, this.to);
            let slice = new Slice(mapFragment(oldSlice.content, node => {
                return node.mark(this.mark.removeFromSet(node.marks));
            }, doc), oldSlice.openStart, oldSlice.openEnd);
            return StepResult.fromReplace(doc, this.from, this.to, slice);
        }
        invert() {
            return new AddMarkStep(this.from, this.to, this.mark);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deleted && to.deleted || from.pos >= to.pos)
                return null;
            return new RemoveMarkStep(from.pos, to.pos, this.mark);
        }
        merge(other) {
            if (other instanceof RemoveMarkStep &&
                other.mark.eq(this.mark) &&
                this.from <= other.to && this.to >= other.from)
                return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
            return null;
        }
        toJSON() {
            return { stepType: "removeMark", mark: this.mark.toJSON(),
                from: this.from, to: this.to };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
            return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("removeMark", RemoveMarkStep);
    /**
    Add a mark to a specific node.
    */
    class AddNodeMarkStep extends Step {
        /**
        Create a node mark step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos, 
        /**
        The mark to add.
        */
        mark) {
            super();
            this.pos = pos;
            this.mark = mark;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at mark step's position");
            let updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        invert(doc) {
            let node = doc.nodeAt(this.pos);
            if (node) {
                let newSet = this.mark.addToSet(node.marks);
                if (newSet.length == node.marks.length) {
                    for (let i = 0; i < node.marks.length; i++)
                        if (!node.marks[i].isInSet(newSet))
                            return new AddNodeMarkStep(this.pos, node.marks[i]);
                    return new AddNodeMarkStep(this.pos, this.mark);
                }
            }
            return new RemoveNodeMarkStep(this.pos, this.mark);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
        }
        toJSON() {
            return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
            return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("addNodeMark", AddNodeMarkStep);
    /**
    Remove a mark from a specific node.
    */
    class RemoveNodeMarkStep extends Step {
        /**
        Create a mark-removing step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos, 
        /**
        The mark to remove.
        */
        mark) {
            super();
            this.pos = pos;
            this.mark = mark;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at mark step's position");
            let updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        invert(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node || !this.mark.isInSet(node.marks))
                return this;
            return new AddNodeMarkStep(this.pos, this.mark);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
        }
        toJSON() {
            return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
            return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
        }
    }
    Step.jsonID("removeNodeMark", RemoveNodeMarkStep);

    /**
    Replace a part of the document with a slice of new content.
    */
    class ReplaceStep extends Step {
        /**
        The given `slice` should fit the 'gap' between `from` and
        `to`—the depths must line up, and the surrounding nodes must be
        able to be joined with the open sides of the slice. When
        `structure` is true, the step will fail if the content between
        from and to is not just a sequence of closing and then opening
        tokens (this is to guard against rebased replace steps
        overwriting something they weren't supposed to).
        */
        constructor(
        /**
        The start position of the replaced range.
        */
        from, 
        /**
        The end position of the replaced range.
        */
        to, 
        /**
        The slice to insert.
        */
        slice, 
        /**
        @internal
        */
        structure = false) {
            super();
            this.from = from;
            this.to = to;
            this.slice = slice;
            this.structure = structure;
        }
        apply(doc) {
            if (this.structure && contentBetween(doc, this.from, this.to))
                return StepResult.fail("Structure replace would overwrite content");
            return StepResult.fromReplace(doc, this.from, this.to, this.slice);
        }
        getMap() {
            return new StepMap([this.from, this.to - this.from, this.slice.size]);
        }
        invert(doc) {
            return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            if (from.deletedAcross && to.deletedAcross)
                return null;
            return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
        }
        merge(other) {
            if (!(other instanceof ReplaceStep) || other.structure || this.structure)
                return null;
            if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
                let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                    : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
                return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
            }
            else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
                let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                    : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
                return new ReplaceStep(other.from, this.to, slice, this.structure);
            }
            else {
                return null;
            }
        }
        toJSON() {
            let json = { stepType: "replace", from: this.from, to: this.to };
            if (this.slice.size)
                json.slice = this.slice.toJSON();
            if (this.structure)
                json.structure = true;
            return json;
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number")
                throw new RangeError("Invalid input for ReplaceStep.fromJSON");
            return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
        }
    }
    Step.jsonID("replace", ReplaceStep);
    /**
    Replace a part of the document with a slice of content, but
    preserve a range of the replaced content by moving it into the
    slice.
    */
    class ReplaceAroundStep extends Step {
        /**
        Create a replace-around step with the given range and gap.
        `insert` should be the point in the slice into which the content
        of the gap should be moved. `structure` has the same meaning as
        it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
        */
        constructor(
        /**
        The start position of the replaced range.
        */
        from, 
        /**
        The end position of the replaced range.
        */
        to, 
        /**
        The start of preserved range.
        */
        gapFrom, 
        /**
        The end of preserved range.
        */
        gapTo, 
        /**
        The slice to insert.
        */
        slice, 
        /**
        The position in the slice where the preserved range should be
        inserted.
        */
        insert, 
        /**
        @internal
        */
        structure = false) {
            super();
            this.from = from;
            this.to = to;
            this.gapFrom = gapFrom;
            this.gapTo = gapTo;
            this.slice = slice;
            this.insert = insert;
            this.structure = structure;
        }
        apply(doc) {
            if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
                contentBetween(doc, this.gapTo, this.to)))
                return StepResult.fail("Structure gap-replace would overwrite content");
            let gap = doc.slice(this.gapFrom, this.gapTo);
            if (gap.openStart || gap.openEnd)
                return StepResult.fail("Gap is not a flat range");
            let inserted = this.slice.insertAt(this.insert, gap.content);
            if (!inserted)
                return StepResult.fail("Content does not fit in gap");
            return StepResult.fromReplace(doc, this.from, this.to, inserted);
        }
        getMap() {
            return new StepMap([this.from, this.gapFrom - this.from, this.insert,
                this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
        }
        invert(doc) {
            let gap = this.gapTo - this.gapFrom;
            return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
        }
        map(mapping) {
            let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
            let gapFrom = this.from == this.gapFrom ? from.pos : mapping.map(this.gapFrom, -1);
            let gapTo = this.to == this.gapTo ? to.pos : mapping.map(this.gapTo, 1);
            if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)
                return null;
            return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
        }
        toJSON() {
            let json = { stepType: "replaceAround", from: this.from, to: this.to,
                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
            if (this.slice.size)
                json.slice = this.slice.toJSON();
            if (this.structure)
                json.structure = true;
            return json;
        }
        /**
        @internal
        */
        static fromJSON(schema, json) {
            if (typeof json.from != "number" || typeof json.to != "number" ||
                typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
                throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
            return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
        }
    }
    Step.jsonID("replaceAround", ReplaceAroundStep);
    function contentBetween(doc, from, to) {
        let $from = doc.resolve(from), dist = to - from, depth = $from.depth;
        while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
            depth--;
            dist--;
        }
        if (dist > 0) {
            let next = $from.node(depth).maybeChild($from.indexAfter(depth));
            while (dist > 0) {
                if (!next || next.isLeaf)
                    return true;
                next = next.firstChild;
                dist--;
            }
        }
        return false;
    }

    function addMark(tr, from, to, mark) {
        let removed = [], added = [];
        let removing, adding;
        tr.doc.nodesBetween(from, to, (node, pos, parent) => {
            if (!node.isInline)
                return;
            let marks = node.marks;
            if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
                let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
                let newSet = mark.addToSet(marks);
                for (let i = 0; i < marks.length; i++) {
                    if (!marks[i].isInSet(newSet)) {
                        if (removing && removing.to == start && removing.mark.eq(marks[i]))
                            removing.to = end;
                        else
                            removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                    }
                }
                if (adding && adding.to == start)
                    adding.to = end;
                else
                    added.push(adding = new AddMarkStep(start, end, mark));
            }
        });
        removed.forEach(s => tr.step(s));
        added.forEach(s => tr.step(s));
    }
    function removeMark(tr, from, to, mark) {
        let matched = [], step = 0;
        tr.doc.nodesBetween(from, to, (node, pos) => {
            if (!node.isInline)
                return;
            step++;
            let toRemove = null;
            if (mark instanceof MarkType) {
                let set = node.marks, found;
                while (found = mark.isInSet(set)) {
                    (toRemove || (toRemove = [])).push(found);
                    set = found.removeFromSet(set);
                }
            }
            else if (mark) {
                if (mark.isInSet(node.marks))
                    toRemove = [mark];
            }
            else {
                toRemove = node.marks;
            }
            if (toRemove && toRemove.length) {
                let end = Math.min(pos + node.nodeSize, to);
                for (let i = 0; i < toRemove.length; i++) {
                    let style = toRemove[i], found;
                    for (let j = 0; j < matched.length; j++) {
                        let m = matched[j];
                        if (m.step == step - 1 && style.eq(matched[j].style))
                            found = m;
                    }
                    if (found) {
                        found.to = end;
                        found.step = step;
                    }
                    else {
                        matched.push({ style, from: Math.max(pos, from), to: end, step });
                    }
                }
            }
        });
        matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
    }
    function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch, clearNewlines = true) {
        let node = tr.doc.nodeAt(pos);
        let replSteps = [], cur = pos + 1;
        for (let i = 0; i < node.childCount; i++) {
            let child = node.child(i), end = cur + child.nodeSize;
            let allowed = match.matchType(child.type);
            if (!allowed) {
                replSteps.push(new ReplaceStep(cur, end, Slice.empty));
            }
            else {
                match = allowed;
                for (let j = 0; j < child.marks.length; j++)
                    if (!parentType.allowsMarkType(child.marks[j].type))
                        tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
                if (clearNewlines && child.isText && parentType.whitespace != "pre") {
                    let m, newline = /\r?\n|\r/g, slice;
                    while (m = newline.exec(child.text)) {
                        if (!slice)
                            slice = new Slice(Fragment.from(parentType.schema.text(" ", parentType.allowedMarks(child.marks))), 0, 0);
                        replSteps.push(new ReplaceStep(cur + m.index, cur + m.index + m[0].length, slice));
                    }
                }
            }
            cur = end;
        }
        if (!match.validEnd) {
            let fill = match.fillBefore(Fragment.empty, true);
            tr.replace(cur, cur, new Slice(fill, 0, 0));
        }
        for (let i = replSteps.length - 1; i >= 0; i--)
            tr.step(replSteps[i]);
    }

    function canCut(node, start, end) {
        return (start == 0 || node.canReplace(start, node.childCount)) &&
            (end == node.childCount || node.canReplace(0, end));
    }
    /**
    Try to find a target depth to which the content in the given range
    can be lifted. Will not go across
    [isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.
    */
    function liftTarget(range) {
        let parent = range.parent;
        let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
        for (let depth = range.depth;; --depth) {
            let node = range.$from.node(depth);
            let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
            if (depth < range.depth && node.canReplace(index, endIndex, content))
                return depth;
            if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
                break;
        }
        return null;
    }
    function lift$1(tr, range, target) {
        let { $from, $to, depth } = range;
        let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
        let start = gapStart, end = gapEnd;
        let before = Fragment.empty, openStart = 0;
        for (let d = depth, splitting = false; d > target; d--)
            if (splitting || $from.index(d) > 0) {
                splitting = true;
                before = Fragment.from($from.node(d).copy(before));
                openStart++;
            }
            else {
                start--;
            }
        let after = Fragment.empty, openEnd = 0;
        for (let d = depth, splitting = false; d > target; d--)
            if (splitting || $to.after(d + 1) < $to.end(d)) {
                splitting = true;
                after = Fragment.from($to.node(d).copy(after));
                openEnd++;
            }
            else {
                end++;
            }
        tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
    }
    /**
    Try to find a valid way to wrap the content in the given range in a
    node of the given type. May introduce extra nodes around and inside
    the wrapper node, if necessary. Returns null if no valid wrapping
    could be found. When `innerRange` is given, that range's content is
    used as the content to fit into the wrapping, instead of the
    content of `range`.
    */
    function findWrapping(range, nodeType, attrs = null, innerRange = range) {
        let around = findWrappingOutside(range, nodeType);
        let inner = around && findWrappingInside(innerRange, nodeType);
        if (!inner)
            return null;
        return around.map(withAttrs)
            .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
    }
    function withAttrs(type) { return { type, attrs: null }; }
    function findWrappingOutside(range, type) {
        let { parent, startIndex, endIndex } = range;
        let around = parent.contentMatchAt(startIndex).findWrapping(type);
        if (!around)
            return null;
        let outer = around.length ? around[0] : type;
        return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
    }
    function findWrappingInside(range, type) {
        let { parent, startIndex, endIndex } = range;
        let inner = parent.child(startIndex);
        let inside = type.contentMatch.findWrapping(inner.type);
        if (!inside)
            return null;
        let lastType = inside.length ? inside[inside.length - 1] : type;
        let innerMatch = lastType.contentMatch;
        for (let i = startIndex; innerMatch && i < endIndex; i++)
            innerMatch = innerMatch.matchType(parent.child(i).type);
        if (!innerMatch || !innerMatch.validEnd)
            return null;
        return inside;
    }
    function wrap(tr, range, wrappers) {
        let content = Fragment.empty;
        for (let i = wrappers.length - 1; i >= 0; i--) {
            if (content.size) {
                let match = wrappers[i].type.contentMatch.matchFragment(content);
                if (!match || !match.validEnd)
                    throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
            }
            content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
        }
        let start = range.start, end = range.end;
        tr.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true));
    }
    function setBlockType$1(tr, from, to, type, attrs) {
        if (!type.isTextblock)
            throw new RangeError("Type given to setBlockType should be a textblock");
        let mapFrom = tr.steps.length;
        tr.doc.nodesBetween(from, to, (node, pos) => {
            if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
                let convertNewlines = null;
                if (type.schema.linebreakReplacement) {
                    let pre = type.whitespace == "pre", supportLinebreak = !!type.contentMatch.matchType(type.schema.linebreakReplacement);
                    if (pre && !supportLinebreak)
                        convertNewlines = false;
                    else if (!pre && supportLinebreak)
                        convertNewlines = true;
                }
                // Ensure all markup that isn't allowed in the new node type is cleared
                if (convertNewlines === false)
                    replaceLinebreaks(tr, node, pos, mapFrom);
                clearIncompatible(tr, tr.mapping.slice(mapFrom).map(pos, 1), type, undefined, convertNewlines === null);
                let mapping = tr.mapping.slice(mapFrom);
                let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
                tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
                if (convertNewlines === true)
                    replaceNewlines(tr, node, pos, mapFrom);
                return false;
            }
        });
    }
    function replaceNewlines(tr, node, pos, mapFrom) {
        node.forEach((child, offset) => {
            if (child.isText) {
                let m, newline = /\r?\n|\r/g;
                while (m = newline.exec(child.text)) {
                    let start = tr.mapping.slice(mapFrom).map(pos + 1 + offset + m.index);
                    tr.replaceWith(start, start + 1, node.type.schema.linebreakReplacement.create());
                }
            }
        });
    }
    function replaceLinebreaks(tr, node, pos, mapFrom) {
        node.forEach((child, offset) => {
            if (child.type == child.type.schema.linebreakReplacement) {
                let start = tr.mapping.slice(mapFrom).map(pos + 1 + offset);
                tr.replaceWith(start, start + 1, node.type.schema.text("\n"));
            }
        });
    }
    function canChangeType(doc, pos, type) {
        let $pos = doc.resolve(pos), index = $pos.index();
        return $pos.parent.canReplaceWith(index, index + 1, type);
    }
    /**
    Change the type, attributes, and/or marks of the node at `pos`.
    When `type` isn't given, the existing node type is preserved,
    */
    function setNodeMarkup(tr, pos, type, attrs, marks) {
        let node = tr.doc.nodeAt(pos);
        if (!node)
            throw new RangeError("No node at given position");
        if (!type)
            type = node.type;
        let newNode = type.create(attrs, null, marks || node.marks);
        if (node.isLeaf)
            return tr.replaceWith(pos, pos + node.nodeSize, newNode);
        if (!type.validContent(node.content))
            throw new RangeError("Invalid content for node type " + type.name);
        tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
    }
    /**
    Check whether splitting at the given position is allowed.
    */
    function canSplit(doc, pos, depth = 1, typesAfter) {
        let $pos = doc.resolve(pos), base = $pos.depth - depth;
        let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
        if (base < 0 || $pos.parent.type.spec.isolating ||
            !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
            !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
            return false;
        for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
            let node = $pos.node(d), index = $pos.index(d);
            if (node.type.spec.isolating)
                return false;
            let rest = node.content.cutByIndex(index, node.childCount);
            let overrideChild = typesAfter && typesAfter[i + 1];
            if (overrideChild)
                rest = rest.replaceChild(0, overrideChild.type.create(overrideChild.attrs));
            let after = (typesAfter && typesAfter[i]) || node;
            if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))
                return false;
        }
        let index = $pos.indexAfter(base);
        let baseType = typesAfter && typesAfter[0];
        return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
    }
    function split(tr, pos, depth = 1, typesAfter) {
        let $pos = tr.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
        for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
            before = Fragment.from($pos.node(d).copy(before));
            let typeAfter = typesAfter && typesAfter[i];
            after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
        }
        tr.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));
    }
    /**
    Test whether the blocks before and after a given position can be
    joined.
    */
    function canJoin(doc, pos) {
        let $pos = doc.resolve(pos), index = $pos.index();
        return joinable($pos.nodeBefore, $pos.nodeAfter) &&
            $pos.parent.canReplace(index, index + 1);
    }
    function joinable(a, b) {
        return !!(a && b && !a.isLeaf && a.canAppend(b));
    }
    /**
    Find an ancestor of the given position that can be joined to the
    block before (or after if `dir` is positive). Returns the joinable
    point, if any.
    */
    function joinPoint(doc, pos, dir = -1) {
        let $pos = doc.resolve(pos);
        for (let d = $pos.depth;; d--) {
            let before, after, index = $pos.index(d);
            if (d == $pos.depth) {
                before = $pos.nodeBefore;
                after = $pos.nodeAfter;
            }
            else if (dir > 0) {
                before = $pos.node(d + 1);
                index++;
                after = $pos.node(d).maybeChild(index);
            }
            else {
                before = $pos.node(d).maybeChild(index - 1);
                after = $pos.node(d + 1);
            }
            if (before && !before.isTextblock && joinable(before, after) &&
                $pos.node(d).canReplace(index, index + 1))
                return pos;
            if (d == 0)
                break;
            pos = dir < 0 ? $pos.before(d) : $pos.after(d);
        }
    }
    function join(tr, pos, depth) {
        let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
        tr.step(step);
    }
    /**
    Try to find a point where a node of the given type can be inserted
    near `pos`, by searching up the node hierarchy when `pos` itself
    isn't a valid place but is at the start or end of a node. Return
    null if no position was found.
    */
    function insertPoint(doc, pos, nodeType) {
        let $pos = doc.resolve(pos);
        if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
            return pos;
        if ($pos.parentOffset == 0)
            for (let d = $pos.depth - 1; d >= 0; d--) {
                let index = $pos.index(d);
                if ($pos.node(d).canReplaceWith(index, index, nodeType))
                    return $pos.before(d + 1);
                if (index > 0)
                    return null;
            }
        if ($pos.parentOffset == $pos.parent.content.size)
            for (let d = $pos.depth - 1; d >= 0; d--) {
                let index = $pos.indexAfter(d);
                if ($pos.node(d).canReplaceWith(index, index, nodeType))
                    return $pos.after(d + 1);
                if (index < $pos.node(d).childCount)
                    return null;
            }
        return null;
    }
    /**
    Finds a position at or around the given position where the given
    slice can be inserted. Will look at parent nodes' nearest boundary
    and try there, even if the original position wasn't directly at the
    start or end of that node. Returns null when no position was found.
    */
    function dropPoint(doc, pos, slice) {
        let $pos = doc.resolve(pos);
        if (!slice.content.size)
            return pos;
        let content = slice.content;
        for (let i = 0; i < slice.openStart; i++)
            content = content.firstChild.content;
        for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
            for (let d = $pos.depth; d >= 0; d--) {
                let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
                let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
                let parent = $pos.node(d), fits = false;
                if (pass == 1) {
                    fits = parent.canReplace(insertPos, insertPos, content);
                }
                else {
                    let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
                    fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
                }
                if (fits)
                    return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
            }
        }
        return null;
    }

    /**
    ‘Fit’ a slice into a given position in the document, producing a
    [step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if
    there's no meaningful way to insert the slice here, or inserting it
    would be a no-op (an empty slice over an empty range).
    */
    function replaceStep(doc, from, to = from, slice = Slice.empty) {
        if (from == to && !slice.size)
            return null;
        let $from = doc.resolve(from), $to = doc.resolve(to);
        // Optimization -- avoid work if it's obvious that it's not needed.
        if (fitsTrivially($from, $to, slice))
            return new ReplaceStep(from, to, slice);
        return new Fitter($from, $to, slice).fit();
    }
    function fitsTrivially($from, $to, slice) {
        return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
            $from.parent.canReplace($from.index(), $to.index(), slice.content);
    }
    // Algorithm for 'placing' the elements of a slice into a gap:
    //
    // We consider the content of each node that is open to the left to be
    // independently placeable. I.e. in <p("foo"), p("bar")>, when the
    // paragraph on the left is open, "foo" can be placed (somewhere on
    // the left side of the replacement gap) independently from p("bar").
    //
    // This class tracks the state of the placement progress in the
    // following properties:
    //
    //  - `frontier` holds a stack of `{type, match}` objects that
    //    represent the open side of the replacement. It starts at
    //    `$from`, then moves forward as content is placed, and is finally
    //    reconciled with `$to`.
    //
    //  - `unplaced` is a slice that represents the content that hasn't
    //    been placed yet.
    //
    //  - `placed` is a fragment of placed content. Its open-start value
    //    is implicit in `$from`, and its open-end value in `frontier`.
    class Fitter {
        constructor($from, $to, unplaced) {
            this.$from = $from;
            this.$to = $to;
            this.unplaced = unplaced;
            this.frontier = [];
            this.placed = Fragment.empty;
            for (let i = 0; i <= $from.depth; i++) {
                let node = $from.node(i);
                this.frontier.push({
                    type: node.type,
                    match: node.contentMatchAt($from.indexAfter(i))
                });
            }
            for (let i = $from.depth; i > 0; i--)
                this.placed = Fragment.from($from.node(i).copy(this.placed));
        }
        get depth() { return this.frontier.length - 1; }
        fit() {
            // As long as there's unplaced content, try to place some of it.
            // If that fails, either increase the open score of the unplaced
            // slice, or drop nodes from it, and then try again.
            while (this.unplaced.size) {
                let fit = this.findFittable();
                if (fit)
                    this.placeNodes(fit);
                else
                    this.openMore() || this.dropNode();
            }
            // When there's inline content directly after the frontier _and_
            // directly after `this.$to`, we must generate a `ReplaceAround`
            // step that pulls that content into the node after the frontier.
            // That means the fitting must be done to the end of the textblock
            // node after `this.$to`, not `this.$to` itself.
            let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
            let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
            if (!$to)
                return null;
            // If closing to `$to` succeeded, create a step
            let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
            while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
                content = content.firstChild.content;
                openStart--;
                openEnd--;
            }
            let slice = new Slice(content, openStart, openEnd);
            if (moveInline > -1)
                return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);
            if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
                return new ReplaceStep($from.pos, $to.pos, slice);
            return null;
        }
        // Find a position on the start spine of `this.unplaced` that has
        // content that can be moved somewhere on the frontier. Returns two
        // depths, one for the slice and one for the frontier.
        findFittable() {
            let startDepth = this.unplaced.openStart;
            for (let cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd; d < startDepth; d++) {
                let node = cur.firstChild;
                if (cur.childCount > 1)
                    openEnd = 0;
                if (node.type.spec.isolating && openEnd <= d) {
                    startDepth = d;
                    break;
                }
                cur = node.content;
            }
            // Only try wrapping nodes (pass 2) after finding a place without
            // wrapping failed.
            for (let pass = 1; pass <= 2; pass++) {
                for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
                    let fragment, parent = null;
                    if (sliceDepth) {
                        parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
                        fragment = parent.content;
                    }
                    else {
                        fragment = this.unplaced.content;
                    }
                    let first = fragment.firstChild;
                    for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
                        let { type, match } = this.frontier[frontierDepth], wrap, inject = null;
                        // In pass 1, if the next node matches, or there is no next
                        // node but the parents look compatible, we've found a
                        // place.
                        if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))
                            : parent && type.compatibleContent(parent.type)))
                            return { sliceDepth, frontierDepth, parent, inject };
                        // In pass 2, look for a set of wrapping nodes that make
                        // `first` fit here.
                        else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
                            return { sliceDepth, frontierDepth, parent, wrap };
                        // Don't continue looking further up if the parent node
                        // would fit here.
                        if (parent && match.matchType(parent.type))
                            break;
                    }
                }
            }
        }
        openMore() {
            let { content, openStart, openEnd } = this.unplaced;
            let inner = contentAt(content, openStart);
            if (!inner.childCount || inner.firstChild.isLeaf)
                return false;
            this.unplaced = new Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
            return true;
        }
        dropNode() {
            let { content, openStart, openEnd } = this.unplaced;
            let inner = contentAt(content, openStart);
            if (inner.childCount <= 1 && openStart > 0) {
                let openAtEnd = content.size - openStart <= openStart + inner.size;
                this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
            }
            else {
                this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
            }
        }
        // Move content from the unplaced slice at `sliceDepth` to the
        // frontier node at `frontierDepth`. Close that frontier node when
        // applicable.
        placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
            while (this.depth > frontierDepth)
                this.closeFrontierNode();
            if (wrap)
                for (let i = 0; i < wrap.length; i++)
                    this.openFrontierNode(wrap[i]);
            let slice = this.unplaced, fragment = parent ? parent.content : slice.content;
            let openStart = slice.openStart - sliceDepth;
            let taken = 0, add = [];
            let { match, type } = this.frontier[frontierDepth];
            if (inject) {
                for (let i = 0; i < inject.childCount; i++)
                    add.push(inject.child(i));
                match = match.matchFragment(inject);
            }
            // Computes the amount of (end) open nodes at the end of the
            // fragment. When 0, the parent is open, but no more. When
            // negative, nothing is open.
            let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
            // Scan over the fragment, fitting as many child nodes as
            // possible.
            while (taken < fragment.childCount) {
                let next = fragment.child(taken), matches = match.matchType(next.type);
                if (!matches)
                    break;
                taken++;
                if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
                    match = matches;
                    add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
                }
            }
            let toEnd = taken == fragment.childCount;
            if (!toEnd)
                openEndCount = -1;
            this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));
            this.frontier[frontierDepth].match = match;
            // If the parent types match, and the entire node was moved, and
            // it's not open, close this frontier node right away.
            if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
                this.closeFrontierNode();
            // Add new frontier nodes for any open nodes at the end.
            for (let i = 0, cur = fragment; i < openEndCount; i++) {
                let node = cur.lastChild;
                this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
                cur = node.content;
            }
            // Update `this.unplaced`. Drop the entire node from which we
            // placed it we got to its end, otherwise just drop the placed
            // nodes.
            this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
                : sliceDepth == 0 ? Slice.empty
                    : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
        }
        mustMoveInline() {
            if (!this.$to.parent.isTextblock)
                return -1;
            let top = this.frontier[this.depth], level;
            if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
                (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))
                return -1;
            let { depth } = this.$to, after = this.$to.after(depth);
            while (depth > 1 && after == this.$to.end(--depth))
                ++after;
            return after;
        }
        findCloseLevel($to) {
            scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
                let { match, type } = this.frontier[i];
                let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
                let fit = contentAfterFits($to, i, type, match, dropInner);
                if (!fit)
                    continue;
                for (let d = i - 1; d >= 0; d--) {
                    let { match, type } = this.frontier[d];
                    let matches = contentAfterFits($to, d, type, match, true);
                    if (!matches || matches.childCount)
                        continue scan;
                }
                return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
            }
        }
        close($to) {
            let close = this.findCloseLevel($to);
            if (!close)
                return null;
            while (this.depth > close.depth)
                this.closeFrontierNode();
            if (close.fit.childCount)
                this.placed = addToFragment(this.placed, close.depth, close.fit);
            $to = close.move;
            for (let d = close.depth + 1; d <= $to.depth; d++) {
                let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
                this.openFrontierNode(node.type, node.attrs, add);
            }
            return $to;
        }
        openFrontierNode(type, attrs = null, content) {
            let top = this.frontier[this.depth];
            top.match = top.match.matchType(type);
            this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));
            this.frontier.push({ type, match: type.contentMatch });
        }
        closeFrontierNode() {
            let open = this.frontier.pop();
            let add = open.match.fillBefore(Fragment.empty, true);
            if (add.childCount)
                this.placed = addToFragment(this.placed, this.frontier.length, add);
        }
    }
    function dropFromFragment(fragment, depth, count) {
        if (depth == 0)
            return fragment.cutByIndex(count, fragment.childCount);
        return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
    }
    function addToFragment(fragment, depth, content) {
        if (depth == 0)
            return fragment.append(content);
        return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
    }
    function contentAt(fragment, depth) {
        for (let i = 0; i < depth; i++)
            fragment = fragment.firstChild.content;
        return fragment;
    }
    function closeNodeStart(node, openStart, openEnd) {
        if (openStart <= 0)
            return node;
        let frag = node.content;
        if (openStart > 1)
            frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
        if (openStart > 0) {
            frag = node.type.contentMatch.fillBefore(frag).append(frag);
            if (openEnd <= 0)
                frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
        }
        return node.copy(frag);
    }
    function contentAfterFits($to, depth, type, match, open) {
        let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
        if (index == node.childCount && !type.compatibleContent(node.type))
            return null;
        let fit = match.fillBefore(node.content, true, index);
        return fit && !invalidMarks(type, node.content, index) ? fit : null;
    }
    function invalidMarks(type, fragment, start) {
        for (let i = start; i < fragment.childCount; i++)
            if (!type.allowsMarks(fragment.child(i).marks))
                return true;
        return false;
    }
    function definesContent(type) {
        return type.spec.defining || type.spec.definingForContent;
    }
    function replaceRange(tr, from, to, slice) {
        if (!slice.size)
            return tr.deleteRange(from, to);
        let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
        if (fitsTrivially($from, $to, slice))
            return tr.step(new ReplaceStep(from, to, slice));
        let targetDepths = coveredDepths($from, tr.doc.resolve(to));
        // Can't replace the whole document, so remove 0 if it's present
        if (targetDepths[targetDepths.length - 1] == 0)
            targetDepths.pop();
        // Negative numbers represent not expansion over the whole node at
        // that depth, but replacing from $from.before(-D) to $to.pos.
        let preferredTarget = -($from.depth + 1);
        targetDepths.unshift(preferredTarget);
        // This loop picks a preferred target depth, if one of the covering
        // depths is not outside of a defining node, and adds negative
        // depths for any depth that has $from at its start and does not
        // cross a defining node.
        for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
            let spec = $from.node(d).type.spec;
            if (spec.defining || spec.definingAsContext || spec.isolating)
                break;
            if (targetDepths.indexOf(d) > -1)
                preferredTarget = d;
            else if ($from.before(d) == pos)
                targetDepths.splice(1, 0, -d);
        }
        // Try to fit each possible depth of the slice into each possible
        // target depth, starting with the preferred depths.
        let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
        let leftNodes = [], preferredDepth = slice.openStart;
        for (let content = slice.content, i = 0;; i++) {
            let node = content.firstChild;
            leftNodes.push(node);
            if (i == slice.openStart)
                break;
            content = node.content;
        }
        // Back up preferredDepth to cover defining textblocks directly
        // above it, possibly skipping a non-defining textblock.
        for (let d = preferredDepth - 1; d >= 0; d--) {
            let leftNode = leftNodes[d], def = definesContent(leftNode.type);
            if (def && !leftNode.sameMarkup($from.node(Math.abs(preferredTarget) - 1)))
                preferredDepth = d;
            else if (def || !leftNode.type.isTextblock)
                break;
        }
        for (let j = slice.openStart; j >= 0; j--) {
            let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
            let insert = leftNodes[openDepth];
            if (!insert)
                continue;
            for (let i = 0; i < targetDepths.length; i++) {
                // Loop over possible expansion levels, starting with the
                // preferred one
                let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
                if (targetDepth < 0) {
                    expand = false;
                    targetDepth = -targetDepth;
                }
                let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
                if (parent.canReplaceWith(index, index, insert.type, insert.marks))
                    return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
            }
        }
        let startSteps = tr.steps.length;
        for (let i = targetDepths.length - 1; i >= 0; i--) {
            tr.replace(from, to, slice);
            if (tr.steps.length > startSteps)
                break;
            let depth = targetDepths[i];
            if (depth < 0)
                continue;
            from = $from.before(depth);
            to = $to.after(depth);
        }
    }
    function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
        if (depth < oldOpen) {
            let first = fragment.firstChild;
            fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
        }
        if (depth > newOpen) {
            let match = parent.contentMatchAt(0);
            let start = match.fillBefore(fragment).append(fragment);
            fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));
        }
        return fragment;
    }
    function replaceRangeWith(tr, from, to, node) {
        if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {
            let point = insertPoint(tr.doc, from, node.type);
            if (point != null)
                from = to = point;
        }
        tr.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0));
    }
    function deleteRange(tr, from, to) {
        let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
        let covered = coveredDepths($from, $to);
        for (let i = 0; i < covered.length; i++) {
            let depth = covered[i], last = i == covered.length - 1;
            if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
                return tr.delete($from.start(depth), $to.end(depth));
            if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
                return tr.delete($from.before(depth), $to.after(depth));
        }
        for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
            if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
                return tr.delete($from.before(d), to);
        }
        tr.delete(from, to);
    }
    // Returns an array of all depths for which $from - $to spans the
    // whole content of the nodes at that depth.
    function coveredDepths($from, $to) {
        let result = [], minDepth = Math.min($from.depth, $to.depth);
        for (let d = minDepth; d >= 0; d--) {
            let start = $from.start(d);
            if (start < $from.pos - ($from.depth - d) ||
                $to.end(d) > $to.pos + ($to.depth - d) ||
                $from.node(d).type.spec.isolating ||
                $to.node(d).type.spec.isolating)
                break;
            if (start == $to.start(d) ||
                (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&
                    d && $to.start(d - 1) == start - 1))
                result.push(d);
        }
        return result;
    }

    /**
    Update an attribute in a specific node.
    */
    class AttrStep extends Step {
        /**
        Construct an attribute step.
        */
        constructor(
        /**
        The position of the target node.
        */
        pos, 
        /**
        The attribute to set.
        */
        attr, 
        // The attribute's new value.
        value) {
            super();
            this.pos = pos;
            this.attr = attr;
            this.value = value;
        }
        apply(doc) {
            let node = doc.nodeAt(this.pos);
            if (!node)
                return StepResult.fail("No node at attribute step's position");
            let attrs = Object.create(null);
            for (let name in node.attrs)
                attrs[name] = node.attrs[name];
            attrs[this.attr] = this.value;
            let updated = node.type.create(attrs, null, node.marks);
            return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
        }
        getMap() {
            return StepMap.empty;
        }
        invert(doc) {
            return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);
        }
        map(mapping) {
            let pos = mapping.mapResult(this.pos, 1);
            return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
        }
        toJSON() {
            return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
        }
        static fromJSON(schema, json) {
            if (typeof json.pos != "number" || typeof json.attr != "string")
                throw new RangeError("Invalid input for AttrStep.fromJSON");
            return new AttrStep(json.pos, json.attr, json.value);
        }
    }
    Step.jsonID("attr", AttrStep);
    /**
    Update an attribute in the doc node.
    */
    class DocAttrStep extends Step {
        /**
        Construct an attribute step.
        */
        constructor(
        /**
        The attribute to set.
        */
        attr, 
        // The attribute's new value.
        value) {
            super();
            this.attr = attr;
            this.value = value;
        }
        apply(doc) {
            let attrs = Object.create(null);
            for (let name in doc.attrs)
                attrs[name] = doc.attrs[name];
            attrs[this.attr] = this.value;
            let updated = doc.type.create(attrs, doc.content, doc.marks);
            return StepResult.ok(updated);
        }
        getMap() {
            return StepMap.empty;
        }
        invert(doc) {
            return new DocAttrStep(this.attr, doc.attrs[this.attr]);
        }
        map(mapping) {
            return this;
        }
        toJSON() {
            return { stepType: "docAttr", attr: this.attr, value: this.value };
        }
        static fromJSON(schema, json) {
            if (typeof json.attr != "string")
                throw new RangeError("Invalid input for DocAttrStep.fromJSON");
            return new DocAttrStep(json.attr, json.value);
        }
    }
    Step.jsonID("docAttr", DocAttrStep);

    /**
    @internal
    */
    let TransformError = class extends Error {
    };
    TransformError = function TransformError(message) {
        let err = Error.call(this, message);
        err.__proto__ = TransformError.prototype;
        return err;
    };
    TransformError.prototype = Object.create(Error.prototype);
    TransformError.prototype.constructor = TransformError;
    TransformError.prototype.name = "TransformError";
    /**
    Abstraction to build up and track an array of
    [steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.

    Most transforming methods return the `Transform` object itself, so
    that they can be chained.
    */
    class Transform {
        /**
        Create a transform that starts with the given document.
        */
        constructor(
        /**
        The current document (the result of applying the steps in the
        transform).
        */
        doc) {
            this.doc = doc;
            /**
            The steps in this transform.
            */
            this.steps = [];
            /**
            The documents before each of the steps.
            */
            this.docs = [];
            /**
            A mapping with the maps for each of the steps in this transform.
            */
            this.mapping = new Mapping;
        }
        /**
        The starting document.
        */
        get before() { return this.docs.length ? this.docs[0] : this.doc; }
        /**
        Apply a new step in this transform, saving the result. Throws an
        error when the step fails.
        */
        step(step) {
            let result = this.maybeStep(step);
            if (result.failed)
                throw new TransformError(result.failed);
            return this;
        }
        /**
        Try to apply a step in this transformation, ignoring it if it
        fails. Returns the step result.
        */
        maybeStep(step) {
            let result = step.apply(this.doc);
            if (!result.failed)
                this.addStep(step, result.doc);
            return result;
        }
        /**
        True when the document has been changed (when there are any
        steps).
        */
        get docChanged() {
            return this.steps.length > 0;
        }
        /**
        @internal
        */
        addStep(step, doc) {
            this.docs.push(this.doc);
            this.steps.push(step);
            this.mapping.appendMap(step.getMap());
            this.doc = doc;
        }
        /**
        Replace the part of the document between `from` and `to` with the
        given `slice`.
        */
        replace(from, to = from, slice = Slice.empty) {
            let step = replaceStep(this.doc, from, to, slice);
            if (step)
                this.step(step);
            return this;
        }
        /**
        Replace the given range with the given content, which may be a
        fragment, node, or array of nodes.
        */
        replaceWith(from, to, content) {
            return this.replace(from, to, new Slice(Fragment.from(content), 0, 0));
        }
        /**
        Delete the content between the given positions.
        */
        delete(from, to) {
            return this.replace(from, to, Slice.empty);
        }
        /**
        Insert the given content at the given position.
        */
        insert(pos, content) {
            return this.replaceWith(pos, pos, content);
        }
        /**
        Replace a range of the document with a given slice, using
        `from`, `to`, and the slice's
        [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
        than fixed start and end points. This method may grow the
        replaced area or close open nodes in the slice in order to get a
        fit that is more in line with WYSIWYG expectations, by dropping
        fully covered parent nodes of the replaced region when they are
        marked [non-defining as
        context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
        open parent node from the slice that _is_ marked as [defining
        its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
        
        This is the method, for example, to handle paste. The similar
        [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
        primitive tool which will _not_ move the start and end of its given
        range, and is useful in situations where you need more precise
        control over what happens.
        */
        replaceRange(from, to, slice) {
            replaceRange(this, from, to, slice);
            return this;
        }
        /**
        Replace the given range with a node, but use `from` and `to` as
        hints, rather than precise positions. When from and to are the same
        and are at the start or end of a parent node in which the given
        node doesn't fit, this method may _move_ them out towards a parent
        that does allow the given node to be placed. When the given range
        completely covers a parent node, this method may completely replace
        that parent node.
        */
        replaceRangeWith(from, to, node) {
            replaceRangeWith(this, from, to, node);
            return this;
        }
        /**
        Delete the given range, expanding it to cover fully covered
        parent nodes until a valid replace is found.
        */
        deleteRange(from, to) {
            deleteRange(this, from, to);
            return this;
        }
        /**
        Split the content in the given range off from its parent, if there
        is sibling content before or after it, and move it up the tree to
        the depth specified by `target`. You'll probably want to use
        [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
        sure the lift is valid.
        */
        lift(range, target) {
            lift$1(this, range, target);
            return this;
        }
        /**
        Join the blocks around the given position. If depth is 2, their
        last and first siblings are also joined, and so on.
        */
        join(pos, depth = 1) {
            join(this, pos, depth);
            return this;
        }
        /**
        Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
        The wrappers are assumed to be valid in this position, and should
        probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
        */
        wrap(range, wrappers) {
            wrap(this, range, wrappers);
            return this;
        }
        /**
        Set the type of all textblocks (partly) between `from` and `to` to
        the given node type with the given attributes.
        */
        setBlockType(from, to = from, type, attrs = null) {
            setBlockType$1(this, from, to, type, attrs);
            return this;
        }
        /**
        Change the type, attributes, and/or marks of the node at `pos`.
        When `type` isn't given, the existing node type is preserved,
        */
        setNodeMarkup(pos, type, attrs = null, marks) {
            setNodeMarkup(this, pos, type, attrs, marks);
            return this;
        }
        /**
        Set a single attribute on a given node to a new value.
        The `pos` addresses the document content. Use `setDocAttribute`
        to set attributes on the document itself.
        */
        setNodeAttribute(pos, attr, value) {
            this.step(new AttrStep(pos, attr, value));
            return this;
        }
        /**
        Set a single attribute on the document to a new value.
        */
        setDocAttribute(attr, value) {
            this.step(new DocAttrStep(attr, value));
            return this;
        }
        /**
        Add a mark to the node at position `pos`.
        */
        addNodeMark(pos, mark) {
            this.step(new AddNodeMarkStep(pos, mark));
            return this;
        }
        /**
        Remove a mark (or a mark of the given type) from the node at
        position `pos`.
        */
        removeNodeMark(pos, mark) {
            if (!(mark instanceof Mark)) {
                let node = this.doc.nodeAt(pos);
                if (!node)
                    throw new RangeError("No node at position " + pos);
                mark = mark.isInSet(node.marks);
                if (!mark)
                    return this;
            }
            this.step(new RemoveNodeMarkStep(pos, mark));
            return this;
        }
        /**
        Split the node at the given position, and optionally, if `depth` is
        greater than one, any number of nodes above that. By default, the
        parts split off will inherit the node type of the original node.
        This can be changed by passing an array of types and attributes to
        use after the split.
        */
        split(pos, depth = 1, typesAfter) {
            split(this, pos, depth, typesAfter);
            return this;
        }
        /**
        Add the given mark to the inline content between `from` and `to`.
        */
        addMark(from, to, mark) {
            addMark(this, from, to, mark);
            return this;
        }
        /**
        Remove marks from inline nodes between `from` and `to`. When
        `mark` is a single mark, remove precisely that mark. When it is
        a mark type, remove all marks of that type. When it is null,
        remove all marks of any type.
        */
        removeMark(from, to, mark) {
            removeMark(this, from, to, mark);
            return this;
        }
        /**
        Removes all marks and nodes from the content of the node at
        `pos` that don't match the given new parent node type. Accepts
        an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
        third argument.
        */
        clearIncompatible(pos, parentType, match) {
            clearIncompatible(this, pos, parentType, match);
            return this;
        }
    }

    const classesById = Object.create(null);
    /**
    Superclass for editor selections. Every selection type should
    extend this. Should not be instantiated directly.
    */
    class Selection {
        /**
        Initialize a selection with the head and anchor and ranges. If no
        ranges are given, constructs a single range across `$anchor` and
        `$head`.
        */
        constructor(
        /**
        The resolved anchor of the selection (the side that stays in
        place when the selection is modified).
        */
        $anchor, 
        /**
        The resolved head of the selection (the side that moves when
        the selection is modified).
        */
        $head, ranges) {
            this.$anchor = $anchor;
            this.$head = $head;
            this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
        }
        /**
        The selection's anchor, as an unresolved position.
        */
        get anchor() { return this.$anchor.pos; }
        /**
        The selection's head.
        */
        get head() { return this.$head.pos; }
        /**
        The lower bound of the selection's main range.
        */
        get from() { return this.$from.pos; }
        /**
        The upper bound of the selection's main range.
        */
        get to() { return this.$to.pos; }
        /**
        The resolved lower  bound of the selection's main range.
        */
        get $from() {
            return this.ranges[0].$from;
        }
        /**
        The resolved upper bound of the selection's main range.
        */
        get $to() {
            return this.ranges[0].$to;
        }
        /**
        Indicates whether the selection contains any content.
        */
        get empty() {
            let ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++)
                if (ranges[i].$from.pos != ranges[i].$to.pos)
                    return false;
            return true;
        }
        /**
        Get the content of this selection as a slice.
        */
        content() {
            return this.$from.doc.slice(this.from, this.to, true);
        }
        /**
        Replace the selection with a slice or, if no slice is given,
        delete the selection. Will append to the given transaction.
        */
        replace(tr, content = Slice.empty) {
            // Put the new selection at the position after the inserted
            // content. When that ended in an inline node, search backwards,
            // to get the position after that node. If not, search forward.
            let lastNode = content.content.lastChild, lastParent = null;
            for (let i = 0; i < content.openEnd; i++) {
                lastParent = lastNode;
                lastNode = lastNode.lastChild;
            }
            let mapFrom = tr.steps.length, ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++) {
                let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
                tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content);
                if (i == 0)
                    selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
            }
        }
        /**
        Replace the selection with the given node, appending the changes
        to the given transaction.
        */
        replaceWith(tr, node) {
            let mapFrom = tr.steps.length, ranges = this.ranges;
            for (let i = 0; i < ranges.length; i++) {
                let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
                let from = mapping.map($from.pos), to = mapping.map($to.pos);
                if (i) {
                    tr.deleteRange(from, to);
                }
                else {
                    tr.replaceRangeWith(from, to, node);
                    selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);
                }
            }
        }
        /**
        Find a valid cursor or leaf node selection starting at the given
        position and searching back if `dir` is negative, and forward if
        positive. When `textOnly` is true, only consider cursor
        selections. Will return null when no valid selection position is
        found.
        */
        static findFrom($pos, dir, textOnly = false) {
            let inner = $pos.parent.inlineContent ? new TextSelection($pos)
                : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
            if (inner)
                return inner;
            for (let depth = $pos.depth - 1; depth >= 0; depth--) {
                let found = dir < 0
                    ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
                    : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
                if (found)
                    return found;
            }
            return null;
        }
        /**
        Find a valid cursor or leaf node selection near the given
        position. Searches forward first by default, but if `bias` is
        negative, it will search backwards first.
        */
        static near($pos, bias = 1) {
            return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
        }
        /**
        Find the cursor or leaf node selection closest to the start of
        the given document. Will return an
        [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
        exists.
        */
        static atStart(doc) {
            return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);
        }
        /**
        Find the cursor or leaf node selection closest to the end of the
        given document.
        */
        static atEnd(doc) {
            return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);
        }
        /**
        Deserialize the JSON representation of a selection. Must be
        implemented for custom classes (as a static class method).
        */
        static fromJSON(doc, json) {
            if (!json || !json.type)
                throw new RangeError("Invalid input for Selection.fromJSON");
            let cls = classesById[json.type];
            if (!cls)
                throw new RangeError(`No selection type ${json.type} defined`);
            return cls.fromJSON(doc, json);
        }
        /**
        To be able to deserialize selections from JSON, custom selection
        classes must register themselves with an ID string, so that they
        can be disambiguated. Try to pick something that's unlikely to
        clash with classes from other modules.
        */
        static jsonID(id, selectionClass) {
            if (id in classesById)
                throw new RangeError("Duplicate use of selection JSON ID " + id);
            classesById[id] = selectionClass;
            selectionClass.prototype.jsonID = id;
            return selectionClass;
        }
        /**
        Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
        which is a value that can be mapped without having access to a
        current document, and later resolved to a real selection for a
        given document again. (This is used mostly by the history to
        track and restore old selections.) The default implementation of
        this method just converts the selection to a text selection and
        returns the bookmark for that.
        */
        getBookmark() {
            return TextSelection.between(this.$anchor, this.$head).getBookmark();
        }
    }
    Selection.prototype.visible = true;
    /**
    Represents a selected range in a document.
    */
    class SelectionRange {
        /**
        Create a range.
        */
        constructor(
        /**
        The lower bound of the range.
        */
        $from, 
        /**
        The upper bound of the range.
        */
        $to) {
            this.$from = $from;
            this.$to = $to;
        }
    }
    let warnedAboutTextSelection = false;
    function checkTextSelection($pos) {
        if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
            warnedAboutTextSelection = true;
            console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
        }
    }
    /**
    A text selection represents a classical editor selection, with a
    head (the moving side) and anchor (immobile side), both of which
    point into textblock nodes. It can be empty (a regular cursor
    position).
    */
    class TextSelection extends Selection {
        /**
        Construct a text selection between the given points.
        */
        constructor($anchor, $head = $anchor) {
            checkTextSelection($anchor);
            checkTextSelection($head);
            super($anchor, $head);
        }
        /**
        Returns a resolved position if this is a cursor selection (an
        empty text selection), and null otherwise.
        */
        get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null; }
        map(doc, mapping) {
            let $head = doc.resolve(mapping.map(this.head));
            if (!$head.parent.inlineContent)
                return Selection.near($head);
            let $anchor = doc.resolve(mapping.map(this.anchor));
            return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
        }
        replace(tr, content = Slice.empty) {
            super.replace(tr, content);
            if (content == Slice.empty) {
                let marks = this.$from.marksAcross(this.$to);
                if (marks)
                    tr.ensureMarks(marks);
            }
        }
        eq(other) {
            return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
        }
        getBookmark() {
            return new TextBookmark(this.anchor, this.head);
        }
        toJSON() {
            return { type: "text", anchor: this.anchor, head: this.head };
        }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid input for TextSelection.fromJSON");
            return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));
        }
        /**
        Create a text selection from non-resolved positions.
        */
        static create(doc, anchor, head = anchor) {
            let $anchor = doc.resolve(anchor);
            return new this($anchor, head == anchor ? $anchor : doc.resolve(head));
        }
        /**
        Return a text selection that spans the given positions or, if
        they aren't text positions, find a text selection near them.
        `bias` determines whether the method searches forward (default)
        or backwards (negative number) first. Will fall back to calling
        [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
        doesn't contain a valid text position.
        */
        static between($anchor, $head, bias) {
            let dPos = $anchor.pos - $head.pos;
            if (!bias || dPos)
                bias = dPos >= 0 ? 1 : -1;
            if (!$head.parent.inlineContent) {
                let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
                if (found)
                    $head = found.$head;
                else
                    return Selection.near($head, bias);
            }
            if (!$anchor.parent.inlineContent) {
                if (dPos == 0) {
                    $anchor = $head;
                }
                else {
                    $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
                    if (($anchor.pos < $head.pos) != (dPos < 0))
                        $anchor = $head;
                }
            }
            return new TextSelection($anchor, $head);
        }
    }
    Selection.jsonID("text", TextSelection);
    class TextBookmark {
        constructor(anchor, head) {
            this.anchor = anchor;
            this.head = head;
        }
        map(mapping) {
            return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
        }
        resolve(doc) {
            return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));
        }
    }
    /**
    A node selection is a selection that points at a single node. All
    nodes marked [selectable](https://prosemirror.net/docs/ref/#model.NodeSpec.selectable) can be the
    target of a node selection. In such a selection, `from` and `to`
    point directly before and after the selected node, `anchor` equals
    `from`, and `head` equals `to`..
    */
    class NodeSelection extends Selection {
        /**
        Create a node selection. Does not verify the validity of its
        argument.
        */
        constructor($pos) {
            let node = $pos.nodeAfter;
            let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
            super($pos, $end);
            this.node = node;
        }
        map(doc, mapping) {
            let { deleted, pos } = mapping.mapResult(this.anchor);
            let $pos = doc.resolve(pos);
            if (deleted)
                return Selection.near($pos);
            return new NodeSelection($pos);
        }
        content() {
            return new Slice(Fragment.from(this.node), 0, 0);
        }
        eq(other) {
            return other instanceof NodeSelection && other.anchor == this.anchor;
        }
        toJSON() {
            return { type: "node", anchor: this.anchor };
        }
        getBookmark() { return new NodeBookmark(this.anchor); }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.anchor != "number")
                throw new RangeError("Invalid input for NodeSelection.fromJSON");
            return new NodeSelection(doc.resolve(json.anchor));
        }
        /**
        Create a node selection from non-resolved positions.
        */
        static create(doc, from) {
            return new NodeSelection(doc.resolve(from));
        }
        /**
        Determines whether the given node may be selected as a node
        selection.
        */
        static isSelectable(node) {
            return !node.isText && node.type.spec.selectable !== false;
        }
    }
    NodeSelection.prototype.visible = false;
    Selection.jsonID("node", NodeSelection);
    class NodeBookmark {
        constructor(anchor) {
            this.anchor = anchor;
        }
        map(mapping) {
            let { deleted, pos } = mapping.mapResult(this.anchor);
            return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
        }
        resolve(doc) {
            let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;
            if (node && NodeSelection.isSelectable(node))
                return new NodeSelection($pos);
            return Selection.near($pos);
        }
    }
    /**
    A selection type that represents selecting the whole document
    (which can not necessarily be expressed with a text selection, when
    there are for example leaf block nodes at the start or end of the
    document).
    */
    class AllSelection extends Selection {
        /**
        Create an all-selection over the given document.
        */
        constructor(doc) {
            super(doc.resolve(0), doc.resolve(doc.content.size));
        }
        replace(tr, content = Slice.empty) {
            if (content == Slice.empty) {
                tr.delete(0, tr.doc.content.size);
                let sel = Selection.atStart(tr.doc);
                if (!sel.eq(tr.selection))
                    tr.setSelection(sel);
            }
            else {
                super.replace(tr, content);
            }
        }
        toJSON() { return { type: "all" }; }
        /**
        @internal
        */
        static fromJSON(doc) { return new AllSelection(doc); }
        map(doc) { return new AllSelection(doc); }
        eq(other) { return other instanceof AllSelection; }
        getBookmark() { return AllBookmark; }
    }
    Selection.jsonID("all", AllSelection);
    const AllBookmark = {
        map() { return this; },
        resolve(doc) { return new AllSelection(doc); }
    };
    // FIXME we'll need some awareness of text direction when scanning for selections
    // Try to find a selection inside the given node. `pos` points at the
    // position where the search starts. When `text` is true, only return
    // text selections.
    function findSelectionIn(doc, node, pos, index, dir, text = false) {
        if (node.inlineContent)
            return TextSelection.create(doc, pos);
        for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
            let child = node.child(i);
            if (!child.isAtom) {
                let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
                if (inner)
                    return inner;
            }
            else if (!text && NodeSelection.isSelectable(child)) {
                return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));
            }
            pos += child.nodeSize * dir;
        }
        return null;
    }
    function selectionToInsertionEnd(tr, startLen, bias) {
        let last = tr.steps.length - 1;
        if (last < startLen)
            return;
        let step = tr.steps[last];
        if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
            return;
        let map = tr.mapping.maps[last], end;
        map.forEach((_from, _to, _newFrom, newTo) => { if (end == null)
            end = newTo; });
        tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
    }

    const UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4;
    /**
    An editor state transaction, which can be applied to a state to
    create an updated state. Use
    [`EditorState.tr`](https://prosemirror.net/docs/ref/#state.EditorState.tr) to create an instance.

    Transactions track changes to the document (they are a subclass of
    [`Transform`](https://prosemirror.net/docs/ref/#transform.Transform)), but also other state changes,
    like selection updates and adjustments of the set of [stored
    marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks). In addition, you can store
    metadata properties in a transaction, which are extra pieces of
    information that client code or plugins can use to describe what a
    transaction represents, so that they can update their [own
    state](https://prosemirror.net/docs/ref/#state.StateField) accordingly.

    The [editor view](https://prosemirror.net/docs/ref/#view.EditorView) uses a few metadata
    properties: it will attach a property `"pointer"` with the value
    `true` to selection transactions directly caused by mouse or touch
    input, a `"composition"` property holding an ID identifying the
    composition that caused it to transactions caused by composed DOM
    input, and a `"uiEvent"` property of that may be `"paste"`,
    `"cut"`, or `"drop"`.
    */
    class Transaction extends Transform {
        /**
        @internal
        */
        constructor(state) {
            super(state.doc);
            // The step count for which the current selection is valid.
            this.curSelectionFor = 0;
            // Bitfield to track which aspects of the state were updated by
            // this transaction.
            this.updated = 0;
            // Object used to store metadata properties for the transaction.
            this.meta = Object.create(null);
            this.time = Date.now();
            this.curSelection = state.selection;
            this.storedMarks = state.storedMarks;
        }
        /**
        The transaction's current selection. This defaults to the editor
        selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
        transaction, but can be overwritten with
        [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
        */
        get selection() {
            if (this.curSelectionFor < this.steps.length) {
                this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
                this.curSelectionFor = this.steps.length;
            }
            return this.curSelection;
        }
        /**
        Update the transaction's current selection. Will determine the
        selection that the editor gets when the transaction is applied.
        */
        setSelection(selection) {
            if (selection.$from.doc != this.doc)
                throw new RangeError("Selection passed to setSelection must point at the current document");
            this.curSelection = selection;
            this.curSelectionFor = this.steps.length;
            this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
            this.storedMarks = null;
            return this;
        }
        /**
        Whether the selection was explicitly updated by this transaction.
        */
        get selectionSet() {
            return (this.updated & UPDATED_SEL) > 0;
        }
        /**
        Set the current stored marks.
        */
        setStoredMarks(marks) {
            this.storedMarks = marks;
            this.updated |= UPDATED_MARKS;
            return this;
        }
        /**
        Make sure the current stored marks or, if that is null, the marks
        at the selection, match the given set of marks. Does nothing if
        this is already the case.
        */
        ensureMarks(marks) {
            if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
                this.setStoredMarks(marks);
            return this;
        }
        /**
        Add a mark to the set of stored marks.
        */
        addStoredMark(mark) {
            return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
        }
        /**
        Remove a mark or mark type from the set of stored marks.
        */
        removeStoredMark(mark) {
            return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
        }
        /**
        Whether the stored marks were explicitly set for this transaction.
        */
        get storedMarksSet() {
            return (this.updated & UPDATED_MARKS) > 0;
        }
        /**
        @internal
        */
        addStep(step, doc) {
            super.addStep(step, doc);
            this.updated = this.updated & ~UPDATED_MARKS;
            this.storedMarks = null;
        }
        /**
        Update the timestamp for the transaction.
        */
        setTime(time) {
            this.time = time;
            return this;
        }
        /**
        Replace the current selection with the given slice.
        */
        replaceSelection(slice) {
            this.selection.replace(this, slice);
            return this;
        }
        /**
        Replace the selection with the given node. When `inheritMarks` is
        true and the content is inline, it inherits the marks from the
        place where it is inserted.
        */
        replaceSelectionWith(node, inheritMarks = true) {
            let selection = this.selection;
            if (inheritMarks)
                node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)));
            selection.replaceWith(this, node);
            return this;
        }
        /**
        Delete the selection.
        */
        deleteSelection() {
            this.selection.replace(this);
            return this;
        }
        /**
        Replace the given range, or the selection if no range is given,
        with a text node containing the given string.
        */
        insertText(text, from, to) {
            let schema = this.doc.type.schema;
            if (from == null) {
                if (!text)
                    return this.deleteSelection();
                return this.replaceSelectionWith(schema.text(text), true);
            }
            else {
                if (to == null)
                    to = from;
                to = to == null ? from : to;
                if (!text)
                    return this.deleteRange(from, to);
                let marks = this.storedMarks;
                if (!marks) {
                    let $from = this.doc.resolve(from);
                    marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
                }
                this.replaceRangeWith(from, to, schema.text(text, marks));
                if (!this.selection.empty)
                    this.setSelection(Selection.near(this.selection.$to));
                return this;
            }
        }
        /**
        Store a metadata property in this transaction, keyed either by
        name or by plugin.
        */
        setMeta(key, value) {
            this.meta[typeof key == "string" ? key : key.key] = value;
            return this;
        }
        /**
        Retrieve a metadata property for a given name or plugin.
        */
        getMeta(key) {
            return this.meta[typeof key == "string" ? key : key.key];
        }
        /**
        Returns true if this transaction doesn't contain any metadata,
        and can thus safely be extended.
        */
        get isGeneric() {
            for (let _ in this.meta)
                return false;
            return true;
        }
        /**
        Indicate that the editor should scroll the selection into view
        when updated to the state produced by this transaction.
        */
        scrollIntoView() {
            this.updated |= UPDATED_SCROLL;
            return this;
        }
        /**
        True when this transaction has had `scrollIntoView` called on it.
        */
        get scrolledIntoView() {
            return (this.updated & UPDATED_SCROLL) > 0;
        }
    }

    function bind(f, self) {
        return !self || !f ? f : f.bind(self);
    }
    class FieldDesc {
        constructor(name, desc, self) {
            this.name = name;
            this.init = bind(desc.init, self);
            this.apply = bind(desc.apply, self);
        }
    }
    const baseFields = [
        new FieldDesc("doc", {
            init(config) { return config.doc || config.schema.topNodeType.createAndFill(); },
            apply(tr) { return tr.doc; }
        }),
        new FieldDesc("selection", {
            init(config, instance) { return config.selection || Selection.atStart(instance.doc); },
            apply(tr) { return tr.selection; }
        }),
        new FieldDesc("storedMarks", {
            init(config) { return config.storedMarks || null; },
            apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null; }
        }),
        new FieldDesc("scrollToSelection", {
            init() { return 0; },
            apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev; }
        })
    ];
    // Object wrapping the part of a state object that stays the same
    // across transactions. Stored in the state's `config` property.
    class Configuration {
        constructor(schema, plugins) {
            this.schema = schema;
            this.plugins = [];
            this.pluginsByKey = Object.create(null);
            this.fields = baseFields.slice();
            if (plugins)
                plugins.forEach(plugin => {
                    if (this.pluginsByKey[plugin.key])
                        throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
                    this.plugins.push(plugin);
                    this.pluginsByKey[plugin.key] = plugin;
                    if (plugin.spec.state)
                        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
                });
        }
    }
    /**
    The state of a ProseMirror editor is represented by an object of
    this type. A state is a persistent data structure—it isn't
    updated, but rather a new state value is computed from an old one
    using the [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) method.

    A state holds a number of built-in fields, and plugins can
    [define](https://prosemirror.net/docs/ref/#state.PluginSpec.state) additional fields.
    */
    class EditorState {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        config) {
            this.config = config;
        }
        /**
        The schema of the state's document.
        */
        get schema() {
            return this.config.schema;
        }
        /**
        The plugins that are active in this state.
        */
        get plugins() {
            return this.config.plugins;
        }
        /**
        Apply the given transaction to produce a new state.
        */
        apply(tr) {
            return this.applyTransaction(tr).state;
        }
        /**
        @internal
        */
        filterTransaction(tr, ignore = -1) {
            for (let i = 0; i < this.config.plugins.length; i++)
                if (i != ignore) {
                    let plugin = this.config.plugins[i];
                    if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))
                        return false;
                }
            return true;
        }
        /**
        Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
        returns the precise transactions that were applied (which might
        be influenced by the [transaction
        hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
        plugins) along with the new state.
        */
        applyTransaction(rootTr) {
            if (!this.filterTransaction(rootTr))
                return { state: this, transactions: [] };
            let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
            // This loop repeatedly gives plugins a chance to respond to
            // transactions as new transactions are added, making sure to only
            // pass the transactions the plugin did not see before.
            for (;;) {
                let haveNew = false;
                for (let i = 0; i < this.config.plugins.length; i++) {
                    let plugin = this.config.plugins[i];
                    if (plugin.spec.appendTransaction) {
                        let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
                        let tr = n < trs.length &&
                            plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
                        if (tr && newState.filterTransaction(tr, i)) {
                            tr.setMeta("appendedTransaction", rootTr);
                            if (!seen) {
                                seen = [];
                                for (let j = 0; j < this.config.plugins.length; j++)
                                    seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });
                            }
                            trs.push(tr);
                            newState = newState.applyInner(tr);
                            haveNew = true;
                        }
                        if (seen)
                            seen[i] = { state: newState, n: trs.length };
                    }
                }
                if (!haveNew)
                    return { state: newState, transactions: trs };
            }
        }
        /**
        @internal
        */
        applyInner(tr) {
            if (!tr.before.eq(this.doc))
                throw new RangeError("Applying a mismatched transaction");
            let newInstance = new EditorState(this.config), fields = this.config.fields;
            for (let i = 0; i < fields.length; i++) {
                let field = fields[i];
                newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
            }
            return newInstance;
        }
        /**
        Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
        */
        get tr() { return new Transaction(this); }
        /**
        Create a new state.
        */
        static create(config) {
            let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
            let instance = new EditorState($config);
            for (let i = 0; i < $config.fields.length; i++)
                instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
            return instance;
        }
        /**
        Create a new state based on this one, but with an adjusted set
        of active plugins. State fields that exist in both sets of
        plugins are kept unchanged. Those that no longer exist are
        dropped, and those that are new are initialized using their
        [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
        configuration object..
        */
        reconfigure(config) {
            let $config = new Configuration(this.schema, config.plugins);
            let fields = $config.fields, instance = new EditorState($config);
            for (let i = 0; i < fields.length; i++) {
                let name = fields[i].name;
                instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
            }
            return instance;
        }
        /**
        Serialize this state to JSON. If you want to serialize the state
        of plugins, pass an object mapping property names to use in the
        resulting JSON object to plugin objects. The argument may also be
        a string or number, in which case it is ignored, to support the
        way `JSON.stringify` calls `toString` methods.
        */
        toJSON(pluginFields) {
            let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
            if (this.storedMarks)
                result.storedMarks = this.storedMarks.map(m => m.toJSON());
            if (pluginFields && typeof pluginFields == 'object')
                for (let prop in pluginFields) {
                    if (prop == "doc" || prop == "selection")
                        throw new RangeError("The JSON fields `doc` and `selection` are reserved");
                    let plugin = pluginFields[prop], state = plugin.spec.state;
                    if (state && state.toJSON)
                        result[prop] = state.toJSON.call(plugin, this[plugin.key]);
                }
            return result;
        }
        /**
        Deserialize a JSON representation of a state. `config` should
        have at least a `schema` field, and should contain array of
        plugins to initialize the state with. `pluginFields` can be used
        to deserialize the state of plugins, by associating plugin
        instances with the property names they use in the JSON object.
        */
        static fromJSON(config, json, pluginFields) {
            if (!json)
                throw new RangeError("Invalid input for EditorState.fromJSON");
            if (!config.schema)
                throw new RangeError("Required config field 'schema' missing");
            let $config = new Configuration(config.schema, config.plugins);
            let instance = new EditorState($config);
            $config.fields.forEach(field => {
                if (field.name == "doc") {
                    instance.doc = Node$1.fromJSON(config.schema, json.doc);
                }
                else if (field.name == "selection") {
                    instance.selection = Selection.fromJSON(instance.doc, json.selection);
                }
                else if (field.name == "storedMarks") {
                    if (json.storedMarks)
                        instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
                }
                else {
                    if (pluginFields)
                        for (let prop in pluginFields) {
                            let plugin = pluginFields[prop], state = plugin.spec.state;
                            if (plugin.key == field.name && state && state.fromJSON &&
                                Object.prototype.hasOwnProperty.call(json, prop)) {
                                instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
                                return;
                            }
                        }
                    instance[field.name] = field.init(config, instance);
                }
            });
            return instance;
        }
    }

    function bindProps(obj, self, target) {
        for (let prop in obj) {
            let val = obj[prop];
            if (val instanceof Function)
                val = val.bind(self);
            else if (prop == "handleDOMEvents")
                val = bindProps(val, self, {});
            target[prop] = val;
        }
        return target;
    }
    /**
    Plugins bundle functionality that can be added to an editor.
    They are part of the [editor state](https://prosemirror.net/docs/ref/#state.EditorState) and
    may influence that state and the view that contains it.
    */
    class Plugin {
        /**
        Create a plugin.
        */
        constructor(
        /**
        The plugin's [spec object](https://prosemirror.net/docs/ref/#state.PluginSpec).
        */
        spec) {
            this.spec = spec;
            /**
            The [props](https://prosemirror.net/docs/ref/#view.EditorProps) exported by this plugin.
            */
            this.props = {};
            if (spec.props)
                bindProps(spec.props, this, this.props);
            this.key = spec.key ? spec.key.key : createKey("plugin");
        }
        /**
        Extract the plugin's state field from an editor state.
        */
        getState(state) { return state[this.key]; }
    }
    const keys = Object.create(null);
    function createKey(name) {
        if (name in keys)
            return name + "$" + ++keys[name];
        keys[name] = 0;
        return name + "$";
    }
    /**
    A key is used to [tag](https://prosemirror.net/docs/ref/#state.PluginSpec.key) plugins in a way
    that makes it possible to find them, given an editor state.
    Assigning a key does mean only one plugin of that type can be
    active in a state.
    */
    class PluginKey {
        /**
        Create a plugin key.
        */
        constructor(name = "key") { this.key = createKey(name); }
        /**
        Get the active plugin with this key, if any, from an editor
        state.
        */
        get(state) { return state.config.pluginsByKey[this.key]; }
        /**
        Get the plugin's state from an editor state.
        */
        getState(state) { return state[this.key]; }
    }

    const domIndex = function (node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    };
    const parentNode = function (node) {
        let parent = node.assignedSlot || node.parentNode;
        return parent && parent.nodeType == 11 ? parent.host : parent;
    };
    let reusedRange = null;
    // Note that this will always return the same range, because DOM range
    // objects are every expensive, and keep slowing down subsequent DOM
    // updates, for some reason.
    const textRange = function (node, from, to) {
        let range = reusedRange || (reusedRange = document.createRange());
        range.setEnd(node, to == null ? node.nodeValue.length : to);
        range.setStart(node, from || 0);
        return range;
    };
    const clearReusedRange = function () {
        reusedRange = null;
    };
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    const isEquivalentPosition = function (node, off, targetNode, targetOff) {
        return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1));
    };
    const atomElements = /^(img|br|input|textarea|hr)$/i;
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : nodeSize(node))) {
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) ||
                    node.contentEditable == "false")
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.contentEditable == "false")
                    return false;
                off = dir < 0 ? nodeSize(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function nodeSize(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function textNodeBefore$1(node, offset) {
        for (;;) {
            if (node.nodeType == 3 && offset)
                return node;
            if (node.nodeType == 1 && offset > 0) {
                if (node.contentEditable == "false")
                    return null;
                node = node.childNodes[offset - 1];
                offset = nodeSize(node);
            }
            else if (node.parentNode && !hasBlockDesc(node)) {
                offset = domIndex(node);
                node = node.parentNode;
            }
            else {
                return null;
            }
        }
    }
    function textNodeAfter$1(node, offset) {
        for (;;) {
            if (node.nodeType == 3 && offset < node.nodeValue.length)
                return node;
            if (node.nodeType == 1 && offset < node.childNodes.length) {
                if (node.contentEditable == "false")
                    return null;
                node = node.childNodes[offset];
                offset = 0;
            }
            else if (node.parentNode && !hasBlockDesc(node)) {
                offset = domIndex(node) + 1;
                node = node.parentNode;
            }
            else {
                return null;
            }
        }
    }
    function isOnEdge(node, offset, parent) {
        for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {
            if (node == parent)
                return true;
            let index = domIndex(node);
            node = node.parentNode;
            if (!node)
                return false;
            atStart = atStart && index == 0;
            atEnd = atEnd && index == nodeSize(node);
        }
    }
    function hasBlockDesc(dom) {
        let desc;
        for (let cur = dom; cur; cur = cur.parentNode)
            if (desc = cur.pmViewDesc)
                break;
        return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
    }
    // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
    // (isCollapsed inappropriately returns true in shadow dom)
    const selectionCollapsed = function (domSel) {
        return domSel.focusNode && isEquivalentPosition(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);
    };
    function keyEvent(keyCode, key) {
        let event = document.createEvent("Event");
        event.initEvent("keydown", true, true);
        event.keyCode = keyCode;
        event.key = event.code = key;
        return event;
    }
    function deepActiveElement(doc) {
        let elt = doc.activeElement;
        while (elt && elt.shadowRoot)
            elt = elt.shadowRoot.activeElement;
        return elt;
    }
    function caretFromPoint(doc, x, y) {
        if (doc.caretPositionFromPoint) {
            try { // Firefox throws for this call in hard-to-predict circumstances (#994)
                let pos = doc.caretPositionFromPoint(x, y);
                if (pos)
                    return { node: pos.offsetNode, offset: pos.offset };
            }
            catch (_) { }
        }
        if (doc.caretRangeFromPoint) {
            let range = doc.caretRangeFromPoint(x, y);
            if (range)
                return { node: range.startContainer, offset: range.startOffset };
        }
    }

    const nav = typeof navigator != "undefined" ? navigator : null;
    const doc = typeof document != "undefined" ? document : null;
    const agent = (nav && nav.userAgent) || "";
    const ie_edge = /Edge\/(\d+)/.exec(agent);
    const ie_upto10 = /MSIE \d/.exec(agent);
    const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
    const gecko = !ie && /gecko\/(\d+)/i.test(agent);
    gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
    const _chrome = !ie && /Chrome\/(\d+)/.exec(agent);
    const chrome = !!_chrome;
    const chrome_version = _chrome ? +_chrome[1] : 0;
    const safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);
    // Is true for both iOS and iPadOS for convenience
    const ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
    const mac$3 = ios || (nav ? /Mac/.test(nav.platform) : false);
    const windows = nav ? /Win/.test(nav.platform) : false;
    const android = /Android \d/.test(agent);
    const webkit = !!doc && "webkitFontSmoothing" in doc.documentElement.style;
    const webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;

    function windowRect(doc) {
        let vp = doc.defaultView && doc.defaultView.visualViewport;
        if (vp)
            return {
                left: 0, right: vp.width,
                top: 0, bottom: vp.height
            };
        return { left: 0, right: doc.documentElement.clientWidth,
            top: 0, bottom: doc.documentElement.clientHeight };
    }
    function getSide(value, side) {
        return typeof value == "number" ? value : value[side];
    }
    function clientRect(node) {
        let rect = node.getBoundingClientRect();
        // Adjust for elements with style "transform: scale()"
        let scaleX = (rect.width / node.offsetWidth) || 1;
        let scaleY = (rect.height / node.offsetHeight) || 1;
        // Make sure scrollbar width isn't included in the rectangle
        return { left: rect.left, right: rect.left + node.clientWidth * scaleX,
            top: rect.top, bottom: rect.top + node.clientHeight * scaleY };
    }
    function scrollRectIntoView(view, rect, startDOM) {
        let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
        let doc = view.dom.ownerDocument;
        for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {
            if (!parent)
                break;
            if (parent.nodeType != 1)
                continue;
            let elt = parent;
            let atTop = elt == doc.body;
            let bounding = atTop ? windowRect(doc) : clientRect(elt);
            let moveX = 0, moveY = 0;
            if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
                moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
            else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
                moveY = rect.bottom - rect.top > bounding.bottom - bounding.top
                    ? rect.top + getSide(scrollMargin, "top") - bounding.top
                    : rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
            if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
                moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
            else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
                moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
            if (moveX || moveY) {
                if (atTop) {
                    doc.defaultView.scrollBy(moveX, moveY);
                }
                else {
                    let startX = elt.scrollLeft, startY = elt.scrollTop;
                    if (moveY)
                        elt.scrollTop += moveY;
                    if (moveX)
                        elt.scrollLeft += moveX;
                    let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
                    rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
                }
            }
            if (atTop || /^(fixed|sticky)$/.test(getComputedStyle(parent).position))
                break;
        }
    }
    // Store the scroll position of the editor's parent nodes, along with
    // the top position of an element near the top of the editor, which
    // will be used to make sure the visible viewport remains stable even
    // when the size of the content above changes.
    function storeScrollPos(view) {
        let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
        let refDOM, refTop;
        for (let x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
            let dom = view.root.elementFromPoint(x, y);
            if (!dom || dom == view.dom || !view.dom.contains(dom))
                continue;
            let localRect = dom.getBoundingClientRect();
            if (localRect.top >= startY - 20) {
                refDOM = dom;
                refTop = localRect.top;
                break;
            }
        }
        return { refDOM: refDOM, refTop: refTop, stack: scrollStack(view.dom) };
    }
    function scrollStack(dom) {
        let stack = [], doc = dom.ownerDocument;
        for (let cur = dom; cur; cur = parentNode(cur)) {
            stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
            if (dom == doc)
                break;
        }
        return stack;
    }
    // Reset the scroll position of the editor's parent nodes to that what
    // it was before, when storeScrollPos was called.
    function resetScrollPos({ refDOM, refTop, stack }) {
        let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
        restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
    }
    function restoreScrollStack(stack, dTop) {
        for (let i = 0; i < stack.length; i++) {
            let { dom, top, left } = stack[i];
            if (dom.scrollTop != top + dTop)
                dom.scrollTop = top + dTop;
            if (dom.scrollLeft != left)
                dom.scrollLeft = left;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stored = scrollStack(dom);
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            restoreScrollStack(stored, 0);
        }
    }
    function findOffsetInNode(node, coords) {
        let closest, dxClosest = 2e8, coordsClosest, offset = 0;
        let rowBot = coords.top, rowTop = coords.top;
        let firstBelow, coordsBelow;
        for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
            let rects;
            if (child.nodeType == 1)
                rects = child.getClientRects();
            else if (child.nodeType == 3)
                rects = textRange(child).getClientRects();
            else
                continue;
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (rect.top <= rowBot && rect.bottom >= rowTop) {
                    rowBot = Math.max(rect.bottom, rowBot);
                    rowTop = Math.min(rect.top, rowTop);
                    let dx = rect.left > coords.left ? rect.left - coords.left
                        : rect.right < coords.left ? coords.left - rect.right : 0;
                    if (dx < dxClosest) {
                        closest = child;
                        dxClosest = dx;
                        coordsClosest = dx && closest.nodeType == 3 ? {
                            left: rect.right < coords.left ? rect.right : rect.left,
                            top: coords.top
                        } : coords;
                        if (child.nodeType == 1 && dx)
                            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
                        continue;
                    }
                }
                else if (rect.top > coords.top && !firstBelow && rect.left <= coords.left && rect.right >= coords.left) {
                    firstBelow = child;
                    coordsBelow = { left: Math.max(rect.left, Math.min(rect.right, coords.left)), top: rect.top };
                }
                if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                    coords.left >= rect.left && coords.top >= rect.bottom))
                    offset = childIndex + 1;
            }
        }
        if (!closest && firstBelow) {
            closest = firstBelow;
            coordsClosest = coordsBelow;
            dxClosest = 0;
        }
        if (closest && closest.nodeType == 3)
            return findOffsetInText(closest, coordsClosest);
        if (!closest || (dxClosest && closest.nodeType == 1))
            return { node, offset };
        return findOffsetInNode(closest, coordsClosest);
    }
    function findOffsetInText(node, coords) {
        let len = node.nodeValue.length;
        let range = document.createRange();
        for (let i = 0; i < len; i++) {
            range.setEnd(node, i + 1);
            range.setStart(node, i);
            let rect = singleRect(range, 1);
            if (rect.top == rect.bottom)
                continue;
            if (inRect(coords, rect))
                return { node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
        }
        return { node, offset: 0 };
    }
    function inRect(coords, rect) {
        return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 &&
            coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
    }
    function targetKludge(dom, coords) {
        let parent = dom.parentNode;
        if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
            return parent;
        return dom;
    }
    function posFromElement(view, elt, coords) {
        let { node, offset } = findOffsetInNode(elt, coords), bias = -1;
        if (node.nodeType == 1 && !node.firstChild) {
            let rect = node.getBoundingClientRect();
            bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
        }
        return view.docView.posFromDOM(node, offset, bias);
    }
    function posFromCaret(view, node, offset, coords) {
        // Browser (in caretPosition/RangeFromPoint) will agressively
        // normalize towards nearby inline nodes. Since we are interested in
        // positions between block nodes too, we first walk up the hierarchy
        // of nodes to see if there are block nodes that the coordinates
        // fall outside of. If so, we take the position before/after that
        // block. If not, we call `posFromDOM` on the raw node/offset.
        let outsideBlock = -1;
        for (let cur = node, sawBlock = false;;) {
            if (cur == view.dom)
                break;
            let desc = view.docView.nearestDesc(cur, true);
            if (!desc)
                return null;
            if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent && !sawBlock || !desc.contentDOM)) {
                let rect = desc.dom.getBoundingClientRect();
                if (desc.node.isBlock && desc.parent && !sawBlock) {
                    sawBlock = true;
                    if (rect.left > coords.left || rect.top > coords.top)
                        outsideBlock = desc.posBefore;
                    else if (rect.right < coords.left || rect.bottom < coords.top)
                        outsideBlock = desc.posAfter;
                }
                if (!desc.contentDOM && outsideBlock < 0 && !desc.node.isText) {
                    // If we are inside a leaf, return the side of the leaf closer to the coords
                    let before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2
                        : coords.left < (rect.left + rect.right) / 2;
                    return before ? desc.posBefore : desc.posAfter;
                }
            }
            cur = desc.dom.parentNode;
        }
        return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node, offset, -1);
    }
    function elementFromPoint(element, coords, box) {
        let len = element.childNodes.length;
        if (len && box.top < box.bottom) {
            for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {
                let child = element.childNodes[i];
                if (child.nodeType == 1) {
                    let rects = child.getClientRects();
                    for (let j = 0; j < rects.length; j++) {
                        let rect = rects[j];
                        if (inRect(coords, rect))
                            return elementFromPoint(child, coords, rect);
                    }
                }
                if ((i = (i + 1) % len) == startI)
                    break;
            }
        }
        return element;
    }
    // Given an x,y position on the editor, get the position in the document.
    function posAtCoords(view, coords) {
        let doc = view.dom.ownerDocument, node, offset = 0;
        let caret = caretFromPoint(doc, coords.left, coords.top);
        if (caret)
            ({ node, offset } = caret);
        let elt = (view.root.elementFromPoint ? view.root : doc)
            .elementFromPoint(coords.left, coords.top);
        let pos;
        if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
            let box = view.dom.getBoundingClientRect();
            if (!inRect(coords, box))
                return null;
            elt = elementFromPoint(view.dom, coords, box);
            if (!elt)
                return null;
        }
        // Safari's caretRangeFromPoint returns nonsense when on a draggable element
        if (safari) {
            for (let p = elt; node && p; p = parentNode(p))
                if (p.draggable)
                    node = undefined;
        }
        elt = targetKludge(elt, coords);
        if (node) {
            if (gecko && node.nodeType == 1) {
                // Firefox will sometimes return offsets into <input> nodes, which
                // have no actual children, from caretPositionFromPoint (#953)
                offset = Math.min(offset, node.childNodes.length);
                // It'll also move the returned position before image nodes,
                // even if those are behind it.
                if (offset < node.childNodes.length) {
                    let next = node.childNodes[offset], box;
                    if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left &&
                        box.bottom > coords.top)
                        offset++;
                }
            }
            let prev;
            // When clicking above the right side of an uneditable node, Chrome will report a cursor position after that node.
            if (webkit && offset && node.nodeType == 1 && (prev = node.childNodes[offset - 1]).nodeType == 1 &&
                prev.contentEditable == "false" && prev.getBoundingClientRect().top >= coords.top)
                offset--;
            // Suspiciously specific kludge to work around caret*FromPoint
            // never returning a position at the end of the document
            if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
                coords.top > node.lastChild.getBoundingClientRect().bottom)
                pos = view.state.doc.content.size;
            // Ignore positions directly after a BR, since caret*FromPoint
            // 'round up' positions that would be more accurately placed
            // before the BR node.
            else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
                pos = posFromCaret(view, node, offset, coords);
        }
        if (pos == null)
            pos = posFromElement(view, elt, coords);
        let desc = view.docView.nearestDesc(elt, true);
        return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
    }
    function nonZero(rect) {
        return rect.top < rect.bottom || rect.left < rect.right;
    }
    function singleRect(target, bias) {
        let rects = target.getClientRects();
        if (rects.length) {
            let first = rects[bias < 0 ? 0 : rects.length - 1];
            if (nonZero(first))
                return first;
        }
        return Array.prototype.find.call(rects, nonZero) || target.getBoundingClientRect();
    }
    const BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
    // Given a position in the document model, get a bounding box of the
    // character at that position, relative to the window.
    function coordsAtPos(view, pos, side) {
        let { node, offset, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
        let supportEmptyRange = webkit || gecko;
        if (node.nodeType == 3) {
            // These browsers support querying empty text ranges. Prefer that in
            // bidi context or when at the end of a node.
            if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
                let rect = singleRect(textRange(node, offset, offset), side);
                // Firefox returns bad results (the position before the space)
                // when querying a position directly after line-broken
                // whitespace. Detect this situation and and kludge around it
                if (gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
                    let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
                    if (rectBefore.top == rect.top) {
                        let rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
                        if (rectAfter.top != rect.top)
                            return flattenV(rectAfter, rectAfter.left < rectBefore.left);
                    }
                }
                return rect;
            }
            else {
                let from = offset, to = offset, takeSide = side < 0 ? 1 : -1;
                if (side < 0 && !offset) {
                    to++;
                    takeSide = -1;
                }
                else if (side >= 0 && offset == node.nodeValue.length) {
                    from--;
                    takeSide = 1;
                }
                else if (side < 0) {
                    from--;
                }
                else {
                    to++;
                }
                return flattenV(singleRect(textRange(node, from, to), takeSide), takeSide < 0);
            }
        }
        let $dom = view.state.doc.resolve(pos - (atom || 0));
        // Return a horizontal line in block context
        if (!$dom.parent.inlineContent) {
            if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
                let before = node.childNodes[offset - 1];
                if (before.nodeType == 1)
                    return flattenH(before.getBoundingClientRect(), false);
            }
            if (atom == null && offset < nodeSize(node)) {
                let after = node.childNodes[offset];
                if (after.nodeType == 1)
                    return flattenH(after.getBoundingClientRect(), true);
            }
            return flattenH(node.getBoundingClientRect(), side >= 0);
        }
        // Inline, not in text node (this is not Bidi-safe)
        if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
            let before = node.childNodes[offset - 1];
            let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))
                // BR nodes tend to only return the rectangle before them.
                // Only use them if they are the last element in their parent
                : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
            if (target)
                return flattenV(singleRect(target, 1), false);
        }
        if (atom == null && offset < nodeSize(node)) {
            let after = node.childNodes[offset];
            while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
                after = after.nextSibling;
            let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))
                : after.nodeType == 1 ? after : null;
            if (target)
                return flattenV(singleRect(target, -1), true);
        }
        // All else failed, just try to get a rectangle for the target node
        return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0);
    }
    function flattenV(rect, left) {
        if (rect.width == 0)
            return rect;
        let x = left ? rect.left : rect.right;
        return { top: rect.top, bottom: rect.bottom, left: x, right: x };
    }
    function flattenH(rect, top) {
        if (rect.height == 0)
            return rect;
        let y = top ? rect.top : rect.bottom;
        return { top: y, bottom: y, left: rect.left, right: rect.right };
    }
    function withFlushedState(view, state, f) {
        let viewState = view.state, active = view.root.activeElement;
        if (viewState != state)
            view.updateState(state);
        if (active != view.dom)
            view.focus();
        try {
            return f();
        }
        finally {
            if (viewState != state)
                view.updateState(viewState);
            if (active != view.dom && active)
                active.focus();
        }
    }
    // Whether vertical position motion in a given direction
    // from a position would leave a text block.
    function endOfTextblockVertical(view, state, dir) {
        let sel = state.selection;
        let $pos = dir == "up" ? sel.$from : sel.$to;
        return withFlushedState(view, state, () => {
            let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
            for (;;) {
                let nearest = view.docView.nearestDesc(dom, true);
                if (!nearest)
                    break;
                if (nearest.node.isBlock) {
                    dom = nearest.contentDOM || nearest.dom;
                    break;
                }
                dom = nearest.dom.parentNode;
            }
            let coords = coordsAtPos(view, $pos.pos, 1);
            for (let child = dom.firstChild; child; child = child.nextSibling) {
                let boxes;
                if (child.nodeType == 1)
                    boxes = child.getClientRects();
                else if (child.nodeType == 3)
                    boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
                else
                    continue;
                for (let i = 0; i < boxes.length; i++) {
                    let box = boxes[i];
                    if (box.bottom > box.top + 1 &&
                        (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2
                            : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
                        return false;
                }
            }
            return true;
        });
    }
    const maybeRTL = /[\u0590-\u08ac]/;
    function endOfTextblockHorizontal(view, state, dir) {
        let { $head } = state.selection;
        if (!$head.parent.isTextblock)
            return false;
        let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
        let sel = view.domSelection();
        // If the textblock is all LTR, or the browser doesn't support
        // Selection.modify (Edge), fall back to a primitive approach
        if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
            return dir == "left" || dir == "backward" ? atStart : atEnd;
        return withFlushedState(view, state, () => {
            // This is a huge hack, but appears to be the best we can
            // currently do: use `Selection.modify` to move the selection by
            // one character, and see if that moves the cursor out of the
            // textblock (or doesn't move it at all, when at the start/end of
            // the document).
            let { focusNode: oldNode, focusOffset: oldOff, anchorNode, anchorOffset } = view.domSelectionRange();
            let oldBidiLevel = sel.caretBidiLevel // Only for Firefox
            ;
            sel.modify("move", dir, "character");
            let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
            let { focusNode: newNode, focusOffset: newOff } = view.domSelectionRange();
            let result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) ||
                (oldNode == newNode && oldOff == newOff);
            // Restore the previous selection
            try {
                sel.collapse(anchorNode, anchorOffset);
                if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend)
                    sel.extend(oldNode, oldOff);
            }
            catch (_) { }
            if (oldBidiLevel != null)
                sel.caretBidiLevel = oldBidiLevel;
            return result;
        });
    }
    let cachedState = null;
    let cachedDir = null;
    let cachedResult = false;
    function endOfTextblock(view, state, dir) {
        if (cachedState == state && cachedDir == dir)
            return cachedResult;
        cachedState = state;
        cachedDir = dir;
        return cachedResult = dir == "up" || dir == "down"
            ? endOfTextblockVertical(view, state, dir)
            : endOfTextblockHorizontal(view, state, dir);
    }

    // View descriptions are data structures that describe the DOM that is
    // used to represent the editor's content. They are used for:
    //
    // - Incremental redrawing when the document changes
    //
    // - Figuring out what part of the document a given DOM position
    //   corresponds to
    //
    // - Wiring in custom implementations of the editing interface for a
    //   given node
    //
    // They form a doubly-linked mutable tree, starting at `view.docView`.
    const NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3;
    // Superclass for the various kinds of descriptions. Defines their
    // basic structure and shared methods.
    class ViewDesc {
        constructor(parent, children, dom, 
        // This is the node that holds the child views. It may be null for
        // descs that don't have children.
        contentDOM) {
            this.parent = parent;
            this.children = children;
            this.dom = dom;
            this.contentDOM = contentDOM;
            this.dirty = NOT_DIRTY;
            // An expando property on the DOM node provides a link back to its
            // description.
            dom.pmViewDesc = this;
        }
        // Used to check whether a given description corresponds to a
        // widget/mark/node.
        matchesWidget(widget) { return false; }
        matchesMark(mark) { return false; }
        matchesNode(node, outerDeco, innerDeco) { return false; }
        matchesHack(nodeName) { return false; }
        // When parsing in-editor content (in domchange.js), we allow
        // descriptions to determine the parse rules that should be used to
        // parse them.
        parseRule() { return null; }
        // Used by the editor's event handler to ignore events that come
        // from certain descs.
        stopEvent(event) { return false; }
        // The size of the content represented by this desc.
        get size() {
            let size = 0;
            for (let i = 0; i < this.children.length; i++)
                size += this.children[i].size;
            return size;
        }
        // For block nodes, this represents the space taken up by their
        // start/end tokens.
        get border() { return 0; }
        destroy() {
            this.parent = undefined;
            if (this.dom.pmViewDesc == this)
                this.dom.pmViewDesc = undefined;
            for (let i = 0; i < this.children.length; i++)
                this.children[i].destroy();
        }
        posBeforeChild(child) {
            for (let i = 0, pos = this.posAtStart;; i++) {
                let cur = this.children[i];
                if (cur == child)
                    return pos;
                pos += cur.size;
            }
        }
        get posBefore() {
            return this.parent.posBeforeChild(this);
        }
        get posAtStart() {
            return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
        }
        get posAfter() {
            return this.posBefore + this.size;
        }
        get posAtEnd() {
            return this.posAtStart + this.size - 2 * this.border;
        }
        localPosFromDOM(dom, offset, bias) {
            // If the DOM position is in the content, use the child desc after
            // it to figure out a position.
            if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
                if (bias < 0) {
                    let domBefore, desc;
                    if (dom == this.contentDOM) {
                        domBefore = dom.childNodes[offset - 1];
                    }
                    else {
                        while (dom.parentNode != this.contentDOM)
                            dom = dom.parentNode;
                        domBefore = dom.previousSibling;
                    }
                    while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
                        domBefore = domBefore.previousSibling;
                    return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
                }
                else {
                    let domAfter, desc;
                    if (dom == this.contentDOM) {
                        domAfter = dom.childNodes[offset];
                    }
                    else {
                        while (dom.parentNode != this.contentDOM)
                            dom = dom.parentNode;
                        domAfter = dom.nextSibling;
                    }
                    while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
                        domAfter = domAfter.nextSibling;
                    return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
                }
            }
            // Otherwise, use various heuristics, falling back on the bias
            // parameter, to determine whether to return the position at the
            // start or at the end of this view desc.
            let atEnd;
            if (dom == this.dom && this.contentDOM) {
                atEnd = offset > domIndex(this.contentDOM);
            }
            else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
                atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
            }
            else if (this.dom.firstChild) {
                if (offset == 0)
                    for (let search = dom;; search = search.parentNode) {
                        if (search == this.dom) {
                            atEnd = false;
                            break;
                        }
                        if (search.previousSibling)
                            break;
                    }
                if (atEnd == null && offset == dom.childNodes.length)
                    for (let search = dom;; search = search.parentNode) {
                        if (search == this.dom) {
                            atEnd = true;
                            break;
                        }
                        if (search.nextSibling)
                            break;
                    }
            }
            return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
        }
        nearestDesc(dom, onlyNodes = false) {
            for (let first = true, cur = dom; cur; cur = cur.parentNode) {
                let desc = this.getDesc(cur), nodeDOM;
                if (desc && (!onlyNodes || desc.node)) {
                    // If dom is outside of this desc's nodeDOM, don't count it.
                    if (first && (nodeDOM = desc.nodeDOM) &&
                        !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
                        first = false;
                    else
                        return desc;
                }
            }
        }
        getDesc(dom) {
            let desc = dom.pmViewDesc;
            for (let cur = desc; cur; cur = cur.parent)
                if (cur == this)
                    return desc;
        }
        posFromDOM(dom, offset, bias) {
            for (let scan = dom; scan; scan = scan.parentNode) {
                let desc = this.getDesc(scan);
                if (desc)
                    return desc.localPosFromDOM(dom, offset, bias);
            }
            return -1;
        }
        // Find the desc for the node after the given pos, if any. (When a
        // parent node overrode rendering, there might not be one.)
        descAt(pos) {
            for (let i = 0, offset = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (offset == pos && end != offset) {
                    while (!child.border && child.children.length)
                        child = child.children[0];
                    return child;
                }
                if (pos < end)
                    return child.descAt(pos - offset - child.border);
                offset = end;
            }
        }
        domFromPos(pos, side) {
            if (!this.contentDOM)
                return { node: this.dom, offset: 0, atom: pos + 1 };
            // First find the position in the child array
            let i = 0, offset = 0;
            for (let curPos = 0; i < this.children.length; i++) {
                let child = this.children[i], end = curPos + child.size;
                if (end > pos || child instanceof TrailingHackViewDesc) {
                    offset = pos - curPos;
                    break;
                }
                curPos = end;
            }
            // If this points into the middle of a child, call through
            if (offset)
                return this.children[i].domFromPos(offset - this.children[i].border, side);
            // Go back if there were any zero-length widgets with side >= 0 before this point
            for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) { }
            // Scan towards the first useable node
            if (side <= 0) {
                let prev, enter = true;
                for (;; i--, enter = false) {
                    prev = i ? this.children[i - 1] : null;
                    if (!prev || prev.dom.parentNode == this.contentDOM)
                        break;
                }
                if (prev && side && enter && !prev.border && !prev.domAtom)
                    return prev.domFromPos(prev.size, side);
                return { node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0 };
            }
            else {
                let next, enter = true;
                for (;; i++, enter = false) {
                    next = i < this.children.length ? this.children[i] : null;
                    if (!next || next.dom.parentNode == this.contentDOM)
                        break;
                }
                if (next && enter && !next.border && !next.domAtom)
                    return next.domFromPos(0, side);
                return { node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length };
            }
        }
        // Used to find a DOM range in a single parent for a given changed
        // range.
        parseRange(from, to, base = 0) {
            if (this.children.length == 0)
                return { node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
            let fromOffset = -1, toOffset = -1;
            for (let offset = base, i = 0;; i++) {
                let child = this.children[i], end = offset + child.size;
                if (fromOffset == -1 && from <= end) {
                    let childBase = offset + child.border;
                    // FIXME maybe descend mark views to parse a narrower range?
                    if (from >= childBase && to <= end - child.border && child.node &&
                        child.contentDOM && this.contentDOM.contains(child.contentDOM))
                        return child.parseRange(from, to, childBase);
                    from = offset;
                    for (let j = i; j > 0; j--) {
                        let prev = this.children[j - 1];
                        if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
                            fromOffset = domIndex(prev.dom) + 1;
                            break;
                        }
                        from -= prev.size;
                    }
                    if (fromOffset == -1)
                        fromOffset = 0;
                }
                if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
                    to = end;
                    for (let j = i + 1; j < this.children.length; j++) {
                        let next = this.children[j];
                        if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
                            toOffset = domIndex(next.dom);
                            break;
                        }
                        to += next.size;
                    }
                    if (toOffset == -1)
                        toOffset = this.contentDOM.childNodes.length;
                    break;
                }
                offset = end;
            }
            return { node: this.contentDOM, from, to, fromOffset, toOffset };
        }
        emptyChildAt(side) {
            if (this.border || !this.contentDOM || !this.children.length)
                return false;
            let child = this.children[side < 0 ? 0 : this.children.length - 1];
            return child.size == 0 || child.emptyChildAt(side);
        }
        domAfterPos(pos) {
            let { node, offset } = this.domFromPos(pos, 0);
            if (node.nodeType != 1 || offset == node.childNodes.length)
                throw new RangeError("No node after pos " + pos);
            return node.childNodes[offset];
        }
        // View descs are responsible for setting any selection that falls
        // entirely inside of them, so that custom implementations can do
        // custom things with the selection. Note that this falls apart when
        // a selection starts in such a node and ends in another, in which
        // case we just use whatever domFromPos produces as a best effort.
        setSelection(anchor, head, root, force = false) {
            // If the selection falls entirely in a child, give it to that child
            let from = Math.min(anchor, head), to = Math.max(anchor, head);
            for (let i = 0, offset = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (from > offset && to < end)
                    return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
                offset = end;
            }
            let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
            let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
            let domSel = root.getSelection();
            let brKludge = false;
            // On Firefox, using Selection.collapse to put the cursor after a
            // BR node for some reason doesn't always work (#1073). On Safari,
            // the cursor sometimes inexplicable visually lags behind its
            // reported position in such situations (#1092).
            if ((gecko || safari) && anchor == head) {
                let { node, offset } = anchorDOM;
                if (node.nodeType == 3) {
                    brKludge = !!(offset && node.nodeValue[offset - 1] == "\n");
                    // Issue #1128
                    if (brKludge && offset == node.nodeValue.length) {
                        for (let scan = node, after; scan; scan = scan.parentNode) {
                            if (after = scan.nextSibling) {
                                if (after.nodeName == "BR")
                                    anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
                                break;
                            }
                            let desc = scan.pmViewDesc;
                            if (desc && desc.node && desc.node.isBlock)
                                break;
                        }
                    }
                }
                else {
                    let prev = node.childNodes[offset - 1];
                    brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
                }
            }
            // Firefox can act strangely when the selection is in front of an
            // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536
            if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
                let after = domSel.focusNode.childNodes[domSel.focusOffset];
                if (after && after.contentEditable == "false")
                    force = true;
            }
            if (!(force || brKludge && safari) &&
                isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
                isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
                return;
            // Selection.extend can be used to create an 'inverted' selection
            // (one where the focus is before the anchor), but not all
            // browsers support it yet.
            let domSelExtended = false;
            if ((domSel.extend || anchor == head) && !brKludge) {
                domSel.collapse(anchorDOM.node, anchorDOM.offset);
                try {
                    if (anchor != head)
                        domSel.extend(headDOM.node, headDOM.offset);
                    domSelExtended = true;
                }
                catch (_) {
                    // In some cases with Chrome the selection is empty after calling
                    // collapse, even when it should be valid. This appears to be a bug, but
                    // it is difficult to isolate. If this happens fallback to the old path
                    // without using extend.
                    // Similarly, this could crash on Safari if the editor is hidden, and
                    // there was no selection.
                }
            }
            if (!domSelExtended) {
                if (anchor > head) {
                    let tmp = anchorDOM;
                    anchorDOM = headDOM;
                    headDOM = tmp;
                }
                let range = document.createRange();
                range.setEnd(headDOM.node, headDOM.offset);
                range.setStart(anchorDOM.node, anchorDOM.offset);
                domSel.removeAllRanges();
                domSel.addRange(range);
            }
        }
        ignoreMutation(mutation) {
            return !this.contentDOM && mutation.type != "selection";
        }
        get contentLost() {
            return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
        }
        // Remove a subtree of the element tree that has been touched
        // by a DOM change, so that the next update will redraw it.
        markDirty(from, to) {
            for (let offset = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = offset + child.size;
                if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
                    let startInside = offset + child.border, endInside = end - child.border;
                    if (from >= startInside && to <= endInside) {
                        this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
                        if (from == startInside && to == endInside &&
                            (child.contentLost || child.dom.parentNode != this.contentDOM))
                            child.dirty = NODE_DIRTY;
                        else
                            child.markDirty(from - startInside, to - startInside);
                        return;
                    }
                    else {
                        child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length
                            ? CONTENT_DIRTY : NODE_DIRTY;
                    }
                }
                offset = end;
            }
            this.dirty = CONTENT_DIRTY;
        }
        markParentsDirty() {
            let level = 1;
            for (let node = this.parent; node; node = node.parent, level++) {
                let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
                if (node.dirty < dirty)
                    node.dirty = dirty;
            }
        }
        get domAtom() { return false; }
        get ignoreForCoords() { return false; }
        isText(text) { return false; }
    }
    // A widget desc represents a widget decoration, which is a DOM node
    // drawn between the document nodes.
    class WidgetViewDesc extends ViewDesc {
        constructor(parent, widget, view, pos) {
            let self, dom = widget.type.toDOM;
            if (typeof dom == "function")
                dom = dom(view, () => {
                    if (!self)
                        return pos;
                    if (self.parent)
                        return self.parent.posBeforeChild(self);
                });
            if (!widget.type.spec.raw) {
                if (dom.nodeType != 1) {
                    let wrap = document.createElement("span");
                    wrap.appendChild(dom);
                    dom = wrap;
                }
                dom.contentEditable = "false";
                dom.classList.add("ProseMirror-widget");
            }
            super(parent, [], dom, null);
            this.widget = widget;
            this.widget = widget;
            self = this;
        }
        matchesWidget(widget) {
            return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
        }
        parseRule() { return { ignore: true }; }
        stopEvent(event) {
            let stop = this.widget.spec.stopEvent;
            return stop ? stop(event) : false;
        }
        ignoreMutation(mutation) {
            return mutation.type != "selection" || this.widget.spec.ignoreSelection;
        }
        destroy() {
            this.widget.type.destroy(this.dom);
            super.destroy();
        }
        get domAtom() { return true; }
        get side() { return this.widget.type.side; }
    }
    class CompositionViewDesc extends ViewDesc {
        constructor(parent, dom, textDOM, text) {
            super(parent, [], dom, null);
            this.textDOM = textDOM;
            this.text = text;
        }
        get size() { return this.text.length; }
        localPosFromDOM(dom, offset) {
            if (dom != this.textDOM)
                return this.posAtStart + (offset ? this.size : 0);
            return this.posAtStart + offset;
        }
        domFromPos(pos) {
            return { node: this.textDOM, offset: pos };
        }
        ignoreMutation(mut) {
            return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue;
        }
    }
    // A mark desc represents a mark. May have multiple children,
    // depending on how the mark is split. Note that marks are drawn using
    // a fixed nesting order, for simplicity and predictability, so in
    // some cases they will be split more often than would appear
    // necessary.
    class MarkViewDesc extends ViewDesc {
        constructor(parent, mark, dom, contentDOM) {
            super(parent, [], dom, contentDOM);
            this.mark = mark;
        }
        static create(parent, mark, inline, view) {
            let custom = view.nodeViews[mark.type.name];
            let spec = custom && custom(mark, view, inline);
            if (!spec || !spec.dom)
                spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
            return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
        }
        parseRule() {
            if ((this.dirty & NODE_DIRTY) || this.mark.type.spec.reparseInView)
                return null;
            return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
        }
        matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark); }
        markDirty(from, to) {
            super.markDirty(from, to);
            // Move dirty info to nearest node view
            if (this.dirty != NOT_DIRTY) {
                let parent = this.parent;
                while (!parent.node)
                    parent = parent.parent;
                if (parent.dirty < this.dirty)
                    parent.dirty = this.dirty;
                this.dirty = NOT_DIRTY;
            }
        }
        slice(from, to, view) {
            let copy = MarkViewDesc.create(this.parent, this.mark, true, view);
            let nodes = this.children, size = this.size;
            if (to < size)
                nodes = replaceNodes(nodes, to, size, view);
            if (from > 0)
                nodes = replaceNodes(nodes, 0, from, view);
            for (let i = 0; i < nodes.length; i++)
                nodes[i].parent = copy;
            copy.children = nodes;
            return copy;
        }
    }
    // Node view descs are the main, most common type of view desc, and
    // correspond to an actual node in the document. Unlike mark descs,
    // they populate their child array themselves.
    class NodeViewDesc extends ViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
            super(parent, [], dom, contentDOM);
            this.node = node;
            this.outerDeco = outerDeco;
            this.innerDeco = innerDeco;
            this.nodeDOM = nodeDOM;
        }
        // By default, a node is rendered using the `toDOM` method from the
        // node type spec. But client code can use the `nodeViews` spec to
        // supply a custom node view, which can influence various aspects of
        // the way the node works.
        //
        // (Using subclassing for this was intentionally decided against,
        // since it'd require exposing a whole slew of finicky
        // implementation details to the user code that they probably will
        // never need.)
        static create(parent, node, outerDeco, innerDeco, view, pos) {
            let custom = view.nodeViews[node.type.name], descObj;
            let spec = custom && custom(node, view, () => {
                // (This is a function that allows the custom view to find its
                // own position)
                if (!descObj)
                    return pos;
                if (descObj.parent)
                    return descObj.parent.posBeforeChild(descObj);
            }, outerDeco, innerDeco);
            let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
            if (node.isText) {
                if (!dom)
                    dom = document.createTextNode(node.text);
                else if (dom.nodeType != 3)
                    throw new RangeError("Text must be rendered as a DOM text node");
            }
            else if (!dom) {
                ({ dom, contentDOM } = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)));
            }
            if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
                if (!dom.hasAttribute("contenteditable"))
                    dom.contentEditable = "false";
                if (node.type.spec.draggable)
                    dom.draggable = true;
            }
            let nodeDOM = dom;
            dom = applyOuterDeco(dom, outerDeco, node);
            if (spec)
                return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
            else if (node.isText)
                return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
            else
                return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
        }
        parseRule() {
            // Experimental kludge to allow opt-in re-parsing of nodes
            if (this.node.type.spec.reparseInView)
                return null;
            // FIXME the assumption that this can always return the current
            // attrs means that if the user somehow manages to change the
            // attrs in the dom, that won't be picked up. Not entirely sure
            // whether this is a problem
            let rule = { node: this.node.type.name, attrs: this.node.attrs };
            if (this.node.type.whitespace == "pre")
                rule.preserveWhitespace = "full";
            if (!this.contentDOM) {
                rule.getContent = () => this.node.content;
            }
            else if (!this.contentLost) {
                rule.contentElement = this.contentDOM;
            }
            else {
                // Chrome likes to randomly recreate parent nodes when
                // backspacing things. When that happens, this tries to find the
                // new parent.
                for (let i = this.children.length - 1; i >= 0; i--) {
                    let child = this.children[i];
                    if (this.dom.contains(child.dom.parentNode)) {
                        rule.contentElement = child.dom.parentNode;
                        break;
                    }
                }
                if (!rule.contentElement)
                    rule.getContent = () => Fragment.empty;
            }
            return rule;
        }
        matchesNode(node, outerDeco, innerDeco) {
            return this.dirty == NOT_DIRTY && node.eq(this.node) &&
                sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
        }
        get size() { return this.node.nodeSize; }
        get border() { return this.node.isLeaf ? 0 : 1; }
        // Syncs `this.children` to match `this.node.content` and the local
        // decorations, possibly introducing nesting for marks. Then, in a
        // separate step, syncs the DOM inside `this.contentDOM` to
        // `this.children`.
        updateChildren(view, pos) {
            let inline = this.node.inlineContent, off = pos;
            let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
            let localComposition = composition && composition.pos > -1 ? composition : null;
            let compositionInChild = composition && composition.pos < 0;
            let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
            iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
                if (widget.spec.marks)
                    updater.syncToMarks(widget.spec.marks, inline, view);
                else if (widget.type.side >= 0 && !insideNode)
                    updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view);
                // If the next node is a desc matching this widget, reuse it,
                // otherwise insert the widget as a new view desc.
                updater.placeWidget(widget, view, off);
            }, (child, outerDeco, innerDeco, i) => {
                // Make sure the wrapping mark descs match the node's marks.
                updater.syncToMarks(child.marks, inline, view);
                // Try several strategies for drawing this node
                let compIndex;
                if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ;
                else if (compositionInChild && view.state.selection.from > off &&
                    view.state.selection.to < off + child.nodeSize &&
                    (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&
                    updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ;
                else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i, off)) ;
                else {
                    // Add it as a new view
                    updater.addNode(child, outerDeco, innerDeco, view, off);
                }
                off += child.nodeSize;
            });
            // Drop all remaining descs after the current position.
            updater.syncToMarks([], inline, view);
            if (this.node.isTextblock)
                updater.addTextblockHacks();
            updater.destroyRest();
            // Sync the DOM if anything changed
            if (updater.changed || this.dirty == CONTENT_DIRTY) {
                // May have to protect focused DOM from being changed if a composition is active
                if (localComposition)
                    this.protectLocalComposition(view, localComposition);
                renderDescs(this.contentDOM, this.children, view);
                if (ios)
                    iosHacks(this.dom);
            }
        }
        localCompositionInfo(view, pos) {
            // Only do something if both the selection and a focused text node
            // are inside of this node
            let { from, to } = view.state.selection;
            if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size)
                return null;
            let textNode = view.input.compositionNode;
            if (!textNode || !this.dom.contains(textNode.parentNode))
                return null;
            if (this.node.inlineContent) {
                // Find the text in the focused node in the node, stop if it's not
                // there (may have been modified through other means, in which
                // case it should overwritten)
                let text = textNode.nodeValue;
                let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);
                return textPos < 0 ? null : { node: textNode, pos: textPos, text };
            }
            else {
                return { node: textNode, pos: -1, text: "" };
            }
        }
        protectLocalComposition(view, { node, pos, text }) {
            // The node is already part of a local view desc, leave it there
            if (this.getDesc(node))
                return;
            // Create a composition view for the orphaned nodes
            let topNode = node;
            for (;; topNode = topNode.parentNode) {
                if (topNode.parentNode == this.contentDOM)
                    break;
                while (topNode.previousSibling)
                    topNode.parentNode.removeChild(topNode.previousSibling);
                while (topNode.nextSibling)
                    topNode.parentNode.removeChild(topNode.nextSibling);
                if (topNode.pmViewDesc)
                    topNode.pmViewDesc = undefined;
            }
            let desc = new CompositionViewDesc(this, topNode, node, text);
            view.input.compositionNodes.push(desc);
            // Patch up this.children to contain the composition view
            this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
        }
        // If this desc must be updated to match the given node decoration,
        // do so and return true.
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY ||
                !node.sameMarkup(this.node))
                return false;
            this.updateInner(node, outerDeco, innerDeco, view);
            return true;
        }
        updateInner(node, outerDeco, innerDeco, view) {
            this.updateOuterDeco(outerDeco);
            this.node = node;
            this.innerDeco = innerDeco;
            if (this.contentDOM)
                this.updateChildren(view, this.posAtStart);
            this.dirty = NOT_DIRTY;
        }
        updateOuterDeco(outerDeco) {
            if (sameOuterDeco(outerDeco, this.outerDeco))
                return;
            let needsWrap = this.nodeDOM.nodeType != 1;
            let oldDOM = this.dom;
            this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
            if (this.dom != oldDOM) {
                oldDOM.pmViewDesc = undefined;
                this.dom.pmViewDesc = this;
            }
            this.outerDeco = outerDeco;
        }
        // Mark this node as being the selected node.
        selectNode() {
            if (this.nodeDOM.nodeType == 1)
                this.nodeDOM.classList.add("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable)
                this.dom.draggable = true;
        }
        // Remove selected node marking from this node.
        deselectNode() {
            if (this.nodeDOM.nodeType == 1)
                this.nodeDOM.classList.remove("ProseMirror-selectednode");
            if (this.contentDOM || !this.node.type.spec.draggable)
                this.dom.removeAttribute("draggable");
        }
        get domAtom() { return this.node.isAtom; }
    }
    // Create a view desc for the top-level document node, to be exported
    // and used by the view class.
    function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
        applyOuterDeco(dom, outerDeco, doc);
        let docView = new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
        if (docView.contentDOM)
            docView.updateChildren(view, 0);
        return docView;
    }
    class TextViewDesc extends NodeViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
            super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
        }
        parseRule() {
            let skip = this.nodeDOM.parentNode;
            while (skip && skip != this.dom && !skip.pmIsDeco)
                skip = skip.parentNode;
            return { skip: (skip || true) };
        }
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
                !node.sameMarkup(this.node))
                return false;
            this.updateOuterDeco(outerDeco);
            if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
                this.nodeDOM.nodeValue = node.text;
                if (view.trackWrites == this.nodeDOM)
                    view.trackWrites = null;
            }
            this.node = node;
            this.dirty = NOT_DIRTY;
            return true;
        }
        inParent() {
            let parentDOM = this.parent.contentDOM;
            for (let n = this.nodeDOM; n; n = n.parentNode)
                if (n == parentDOM)
                    return true;
            return false;
        }
        domFromPos(pos) {
            return { node: this.nodeDOM, offset: pos };
        }
        localPosFromDOM(dom, offset, bias) {
            if (dom == this.nodeDOM)
                return this.posAtStart + Math.min(offset, this.node.text.length);
            return super.localPosFromDOM(dom, offset, bias);
        }
        ignoreMutation(mutation) {
            return mutation.type != "characterData" && mutation.type != "selection";
        }
        slice(from, to, view) {
            let node = this.node.cut(from, to), dom = document.createTextNode(node.text);
            return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);
        }
        markDirty(from, to) {
            super.markDirty(from, to);
            if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))
                this.dirty = NODE_DIRTY;
        }
        get domAtom() { return false; }
        isText(text) { return this.node.text == text; }
    }
    // A dummy desc used to tag trailing BR or IMG nodes created to work
    // around contentEditable terribleness.
    class TrailingHackViewDesc extends ViewDesc {
        parseRule() { return { ignore: true }; }
        matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName; }
        get domAtom() { return true; }
        get ignoreForCoords() { return this.dom.nodeName == "IMG"; }
    }
    // A separate subclass is used for customized node views, so that the
    // extra checks only have to be made for nodes that are actually
    // customized.
    class CustomNodeViewDesc extends NodeViewDesc {
        constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
            super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
            this.spec = spec;
        }
        // A custom `update` method gets to decide whether the update goes
        // through. If it does, and there's a `contentDOM` node, our logic
        // updates the children.
        update(node, outerDeco, innerDeco, view) {
            if (this.dirty == NODE_DIRTY)
                return false;
            if (this.spec.update) {
                let result = this.spec.update(node, outerDeco, innerDeco);
                if (result)
                    this.updateInner(node, outerDeco, innerDeco, view);
                return result;
            }
            else if (!this.contentDOM && !node.isLeaf) {
                return false;
            }
            else {
                return super.update(node, outerDeco, innerDeco, view);
            }
        }
        selectNode() {
            this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
        }
        deselectNode() {
            this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
        }
        setSelection(anchor, head, root, force) {
            this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
                : super.setSelection(anchor, head, root, force);
        }
        destroy() {
            if (this.spec.destroy)
                this.spec.destroy();
            super.destroy();
        }
        stopEvent(event) {
            return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
        }
        ignoreMutation(mutation) {
            return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
        }
    }
    // Sync the content of the given DOM node with the nodes associated
    // with the given array of view descs, recursing into mark descs
    // because this should sync the subtree for a whole node at a time.
    function renderDescs(parentDOM, descs, view) {
        let dom = parentDOM.firstChild, written = false;
        for (let i = 0; i < descs.length; i++) {
            let desc = descs[i], childDOM = desc.dom;
            if (childDOM.parentNode == parentDOM) {
                while (childDOM != dom) {
                    dom = rm(dom);
                    written = true;
                }
                dom = dom.nextSibling;
            }
            else {
                written = true;
                parentDOM.insertBefore(childDOM, dom);
            }
            if (desc instanceof MarkViewDesc) {
                let pos = dom ? dom.previousSibling : parentDOM.lastChild;
                renderDescs(desc.contentDOM, desc.children, view);
                dom = pos ? pos.nextSibling : parentDOM.firstChild;
            }
        }
        while (dom) {
            dom = rm(dom);
            written = true;
        }
        if (written && view.trackWrites == parentDOM)
            view.trackWrites = null;
    }
    const OuterDecoLevel = function (nodeName) {
        if (nodeName)
            this.nodeName = nodeName;
    };
    OuterDecoLevel.prototype = Object.create(null);
    const noDeco = [new OuterDecoLevel];
    function computeOuterDeco(outerDeco, node, needsWrap) {
        if (outerDeco.length == 0)
            return noDeco;
        let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top];
        for (let i = 0; i < outerDeco.length; i++) {
            let attrs = outerDeco[i].type.attrs;
            if (!attrs)
                continue;
            if (attrs.nodeName)
                result.push(top = new OuterDecoLevel(attrs.nodeName));
            for (let name in attrs) {
                let val = attrs[name];
                if (val == null)
                    continue;
                if (needsWrap && result.length == 1)
                    result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div"));
                if (name == "class")
                    top.class = (top.class ? top.class + " " : "") + val;
                else if (name == "style")
                    top.style = (top.style ? top.style + ";" : "") + val;
                else if (name != "nodeName")
                    top[name] = val;
            }
        }
        return result;
    }
    function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
        // Shortcut for trivial case
        if (prevComputed == noDeco && curComputed == noDeco)
            return nodeDOM;
        let curDOM = nodeDOM;
        for (let i = 0; i < curComputed.length; i++) {
            let deco = curComputed[i], prev = prevComputed[i];
            if (i) {
                let parent;
                if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
                    (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
                    curDOM = parent;
                }
                else {
                    parent = document.createElement(deco.nodeName);
                    parent.pmIsDeco = true;
                    parent.appendChild(curDOM);
                    prev = noDeco[0];
                    curDOM = parent;
                }
            }
            patchAttributes(curDOM, prev || noDeco[0], deco);
        }
        return curDOM;
    }
    function patchAttributes(dom, prev, cur) {
        for (let name in prev)
            if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
                dom.removeAttribute(name);
        for (let name in cur)
            if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev[name])
                dom.setAttribute(name, cur[name]);
        if (prev.class != cur.class) {
            let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
            let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
            for (let i = 0; i < prevList.length; i++)
                if (curList.indexOf(prevList[i]) == -1)
                    dom.classList.remove(prevList[i]);
            for (let i = 0; i < curList.length; i++)
                if (prevList.indexOf(curList[i]) == -1)
                    dom.classList.add(curList[i]);
            if (dom.classList.length == 0)
                dom.removeAttribute("class");
        }
        if (prev.style != cur.style) {
            if (prev.style) {
                let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
                while (m = prop.exec(prev.style))
                    dom.style.removeProperty(m[1]);
            }
            if (cur.style)
                dom.style.cssText += cur.style;
        }
    }
    function applyOuterDeco(dom, deco, node) {
        return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
    }
    function sameOuterDeco(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].type.eq(b[i].type))
                return false;
        return true;
    }
    // Remove a DOM node and return its next sibling.
    function rm(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    // Helper class for incrementally updating a tree of mark descs and
    // the widget and node descs inside of them.
    class ViewTreeUpdater {
        constructor(top, lock, view) {
            this.lock = lock;
            this.view = view;
            // Index into `this.top`'s child array, represents the current
            // update position.
            this.index = 0;
            // When entering a mark, the current top and index are pushed
            // onto this.
            this.stack = [];
            // Tracks whether anything was changed
            this.changed = false;
            this.top = top;
            this.preMatch = preMatch(top.node.content, top);
        }
        // Destroy and remove the children between the given indices in
        // `this.top`.
        destroyBetween(start, end) {
            if (start == end)
                return;
            for (let i = start; i < end; i++)
                this.top.children[i].destroy();
            this.top.children.splice(start, end - start);
            this.changed = true;
        }
        // Destroy all remaining children in `this.top`.
        destroyRest() {
            this.destroyBetween(this.index, this.top.children.length);
        }
        // Sync the current stack of mark descs with the given array of
        // marks, reusing existing mark descs when possible.
        syncToMarks(marks, inline, view) {
            let keep = 0, depth = this.stack.length >> 1;
            let maxKeep = Math.min(depth, marks.length);
            while (keep < maxKeep &&
                (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1])
                    .matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
                keep++;
            while (keep < depth) {
                this.destroyRest();
                this.top.dirty = NOT_DIRTY;
                this.index = this.stack.pop();
                this.top = this.stack.pop();
                depth--;
            }
            while (depth < marks.length) {
                this.stack.push(this.top, this.index + 1);
                let found = -1;
                for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
                    let next = this.top.children[i];
                    if (next.matchesMark(marks[depth]) && !this.isLocked(next.dom)) {
                        found = i;
                        break;
                    }
                }
                if (found > -1) {
                    if (found > this.index) {
                        this.changed = true;
                        this.destroyBetween(this.index, found);
                    }
                    this.top = this.top.children[this.index];
                }
                else {
                    let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
                    this.top.children.splice(this.index, 0, markDesc);
                    this.top = markDesc;
                    this.changed = true;
                }
                this.index = 0;
                depth++;
            }
        }
        // Try to find a node desc matching the given data. Skip over it and
        // return true when successful.
        findNodeMatch(node, outerDeco, innerDeco, index) {
            let found = -1, targetDesc;
            if (index >= this.preMatch.index &&
                (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&
                targetDesc.matchesNode(node, outerDeco, innerDeco)) {
                found = this.top.children.indexOf(targetDesc, this.index);
            }
            else {
                for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
                    let child = this.top.children[i];
                    if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
                        found = i;
                        break;
                    }
                }
            }
            if (found < 0)
                return false;
            this.destroyBetween(this.index, found);
            this.index++;
            return true;
        }
        updateNodeAt(node, outerDeco, innerDeco, index, view) {
            let child = this.top.children[index];
            if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
                child.dirty = CONTENT_DIRTY;
            if (!child.update(node, outerDeco, innerDeco, view))
                return false;
            this.destroyBetween(this.index, index);
            this.index++;
            return true;
        }
        findIndexWithChild(domNode) {
            for (;;) {
                let parent = domNode.parentNode;
                if (!parent)
                    return -1;
                if (parent == this.top.contentDOM) {
                    let desc = domNode.pmViewDesc;
                    if (desc)
                        for (let i = this.index; i < this.top.children.length; i++) {
                            if (this.top.children[i] == desc)
                                return i;
                        }
                    return -1;
                }
                domNode = parent;
            }
        }
        // Try to update the next node, if any, to the given data. Checks
        // pre-matches to avoid overwriting nodes that could still be used.
        updateNextNode(node, outerDeco, innerDeco, view, index, pos) {
            for (let i = this.index; i < this.top.children.length; i++) {
                let next = this.top.children[i];
                if (next instanceof NodeViewDesc) {
                    let preMatch = this.preMatch.matched.get(next);
                    if (preMatch != null && preMatch != index)
                        return false;
                    let nextDOM = next.dom, updated;
                    // Can't update if nextDOM is or contains this.lock, except if
                    // it's a text node whose content already matches the new text
                    // and whose decorations match the new ones.
                    let locked = this.isLocked(nextDOM) &&
                        !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&
                            next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
                    if (!locked && next.update(node, outerDeco, innerDeco, view)) {
                        this.destroyBetween(this.index, i);
                        if (next.dom != nextDOM)
                            this.changed = true;
                        this.index++;
                        return true;
                    }
                    else if (!locked && (updated = this.recreateWrapper(next, node, outerDeco, innerDeco, view, pos))) {
                        this.top.children[this.index] = updated;
                        if (updated.contentDOM) {
                            updated.dirty = CONTENT_DIRTY;
                            updated.updateChildren(view, pos + 1);
                            updated.dirty = NOT_DIRTY;
                        }
                        this.changed = true;
                        this.index++;
                        return true;
                    }
                    break;
                }
            }
            return false;
        }
        // When a node with content is replaced by a different node with
        // identical content, move over its children.
        recreateWrapper(next, node, outerDeco, innerDeco, view, pos) {
            if (next.dirty || node.isAtom || !next.children.length ||
                !next.node.content.eq(node.content))
                return null;
            let wrapper = NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos);
            if (wrapper.contentDOM) {
                wrapper.children = next.children;
                next.children = [];
                for (let ch of wrapper.children)
                    ch.parent = wrapper;
            }
            next.destroy();
            return wrapper;
        }
        // Insert the node as a newly created node desc.
        addNode(node, outerDeco, innerDeco, view, pos) {
            let desc = NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos);
            if (desc.contentDOM)
                desc.updateChildren(view, pos + 1);
            this.top.children.splice(this.index++, 0, desc);
            this.changed = true;
        }
        placeWidget(widget, view, pos) {
            let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
            if (next && next.matchesWidget(widget) &&
                (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
                this.index++;
            }
            else {
                let desc = new WidgetViewDesc(this.top, widget, view, pos);
                this.top.children.splice(this.index++, 0, desc);
                this.changed = true;
            }
        }
        // Make sure a textblock looks and behaves correctly in
        // contentEditable.
        addTextblockHacks() {
            let lastChild = this.top.children[this.index - 1], parent = this.top;
            while (lastChild instanceof MarkViewDesc) {
                parent = lastChild;
                lastChild = parent.children[parent.children.length - 1];
            }
            if (!lastChild || // Empty textblock
                !(lastChild instanceof TextViewDesc) ||
                /\n$/.test(lastChild.node.text) ||
                (this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text))) {
                // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)
                if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
                    this.addHackNode("IMG", parent);
                this.addHackNode("BR", this.top);
            }
        }
        addHackNode(nodeName, parent) {
            if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
                this.index++;
            }
            else {
                let dom = document.createElement(nodeName);
                if (nodeName == "IMG") {
                    dom.className = "ProseMirror-separator";
                    dom.alt = "";
                }
                if (nodeName == "BR")
                    dom.className = "ProseMirror-trailingBreak";
                let hack = new TrailingHackViewDesc(this.top, [], dom, null);
                if (parent != this.top)
                    parent.children.push(hack);
                else
                    parent.children.splice(this.index++, 0, hack);
                this.changed = true;
            }
        }
        isLocked(node) {
            return this.lock && (node == this.lock || node.nodeType == 1 && node.contains(this.lock.parentNode));
        }
    }
    // Iterate from the end of the fragment and array of descs to find
    // directly matching ones, in order to avoid overeagerly reusing those
    // for other nodes. Returns the fragment index of the first node that
    // is part of the sequence of matched nodes at the end of the
    // fragment.
    function preMatch(frag, parentDesc) {
        let curDesc = parentDesc, descI = curDesc.children.length;
        let fI = frag.childCount, matched = new Map, matches = [];
        outer: while (fI > 0) {
            let desc;
            for (;;) {
                if (descI) {
                    let next = curDesc.children[descI - 1];
                    if (next instanceof MarkViewDesc) {
                        curDesc = next;
                        descI = next.children.length;
                    }
                    else {
                        desc = next;
                        descI--;
                        break;
                    }
                }
                else if (curDesc == parentDesc) {
                    break outer;
                }
                else {
                    // FIXME
                    descI = curDesc.parent.children.indexOf(curDesc);
                    curDesc = curDesc.parent;
                }
            }
            let node = desc.node;
            if (!node)
                continue;
            if (node != frag.child(fI - 1))
                break;
            --fI;
            matched.set(desc, fI);
            matches.push(desc);
        }
        return { index: fI, matched, matches: matches.reverse() };
    }
    function compareSide(a, b) {
        return a.type.side - b.type.side;
    }
    // This function abstracts iterating over the nodes and decorations in
    // a fragment. Calls `onNode` for each node, with its local and child
    // decorations. Splits text nodes when there is a decoration starting
    // or ending inside of them. Calls `onWidget` for each widget.
    function iterDeco(parent, deco, onWidget, onNode) {
        let locals = deco.locals(parent), offset = 0;
        // Simple, cheap variant for when there are no local decorations
        if (locals.length == 0) {
            for (let i = 0; i < parent.childCount; i++) {
                let child = parent.child(i);
                onNode(child, locals, deco.forChild(offset, child), i);
                offset += child.nodeSize;
            }
            return;
        }
        let decoIndex = 0, active = [], restNode = null;
        for (let parentIndex = 0;;) {
            let widget, widgets;
            while (decoIndex < locals.length && locals[decoIndex].to == offset) {
                let next = locals[decoIndex++];
                if (next.widget) {
                    if (!widget)
                        widget = next;
                    else
                        (widgets || (widgets = [widget])).push(next);
                }
            }
            if (widget) {
                if (widgets) {
                    widgets.sort(compareSide);
                    for (let i = 0; i < widgets.length; i++)
                        onWidget(widgets[i], parentIndex, !!restNode);
                }
                else {
                    onWidget(widget, parentIndex, !!restNode);
                }
            }
            let child, index;
            if (restNode) {
                index = -1;
                child = restNode;
                restNode = null;
            }
            else if (parentIndex < parent.childCount) {
                index = parentIndex;
                child = parent.child(parentIndex++);
            }
            else {
                break;
            }
            for (let i = 0; i < active.length; i++)
                if (active[i].to <= offset)
                    active.splice(i--, 1);
            while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
                active.push(locals[decoIndex++]);
            let end = offset + child.nodeSize;
            if (child.isText) {
                let cutAt = end;
                if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
                    cutAt = locals[decoIndex].from;
                for (let i = 0; i < active.length; i++)
                    if (active[i].to < cutAt)
                        cutAt = active[i].to;
                if (cutAt < end) {
                    restNode = child.cut(cutAt - offset);
                    child = child.cut(0, cutAt - offset);
                    end = cutAt;
                    index = -1;
                }
            }
            else {
                while (decoIndex < locals.length && locals[decoIndex].to < end)
                    decoIndex++;
            }
            let outerDeco = child.isInline && !child.isLeaf ? active.filter(d => !d.inline) : active.slice();
            onNode(child, outerDeco, deco.forChild(offset, child), index);
            offset = end;
        }
    }
    // List markers in Mobile Safari will mysteriously disappear
    // sometimes. This works around that.
    function iosHacks(dom) {
        if (dom.nodeName == "UL" || dom.nodeName == "OL") {
            let oldCSS = dom.style.cssText;
            dom.style.cssText = oldCSS + "; list-style: square !important";
            window.getComputedStyle(dom).listStyle;
            dom.style.cssText = oldCSS;
        }
    }
    // Find a piece of text in an inline fragment, overlapping from-to
    function findTextInFragment(frag, text, from, to) {
        for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {
            let child = frag.child(i++), childStart = pos;
            pos += child.nodeSize;
            if (!child.isText)
                continue;
            let str = child.text;
            while (i < frag.childCount) {
                let next = frag.child(i++);
                pos += next.nodeSize;
                if (!next.isText)
                    break;
                str += next.text;
            }
            if (pos >= from) {
                if (pos >= to && str.slice(to - text.length - childStart, to - childStart) == text)
                    return to - text.length;
                let found = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
                if (found >= 0 && found + text.length + childStart >= from)
                    return childStart + found;
                if (from == to && str.length >= (to + text.length) - childStart &&
                    str.slice(to - childStart, to - childStart + text.length) == text)
                    return to;
            }
        }
        return -1;
    }
    // Replace range from-to in an array of view descs with replacement
    // (may be null to just delete). This goes very much against the grain
    // of the rest of this code, which tends to create nodes with the
    // right shape in one go, rather than messing with them after
    // creation, but is necessary in the composition hack.
    function replaceNodes(nodes, from, to, view, replacement) {
        let result = [];
        for (let i = 0, off = 0; i < nodes.length; i++) {
            let child = nodes[i], start = off, end = off += child.size;
            if (start >= to || end <= from) {
                result.push(child);
            }
            else {
                if (start < from)
                    result.push(child.slice(0, from - start, view));
                if (replacement) {
                    result.push(replacement);
                    replacement = undefined;
                }
                if (end > to)
                    result.push(child.slice(to - start, child.size, view));
            }
        }
        return result;
    }

    function selectionFromDOM(view, origin = null) {
        let domSel = view.domSelectionRange(), doc = view.state.doc;
        if (!domSel.focusNode)
            return null;
        let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
        let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
        if (head < 0)
            return null;
        let $head = doc.resolve(head), $anchor, selection;
        if (selectionCollapsed(domSel)) {
            $anchor = $head;
            while (nearestDesc && !nearestDesc.node)
                nearestDesc = nearestDesc.parent;
            let nearestDescNode = nearestDesc.node;
            if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent
                && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
                let pos = nearestDesc.posBefore;
                selection = new NodeSelection(head == pos ? $head : doc.resolve(pos));
            }
        }
        else {
            let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
            if (anchor < 0)
                return null;
            $anchor = doc.resolve(anchor);
        }
        if (!selection) {
            let bias = origin == "pointer" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
            selection = selectionBetween(view, $anchor, $head, bias);
        }
        return selection;
    }
    function editorOwnsSelection(view) {
        return view.editable ? view.hasFocus() :
            hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
    }
    function selectionToDOM(view, force = false) {
        let sel = view.state.selection;
        syncNodeSelection(view, sel);
        if (!editorOwnsSelection(view))
            return;
        // The delayed drag selection causes issues with Cell Selections
        // in Safari. And the drag selection delay is to workarond issues
        // which only present in Chrome.
        if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
            let domSel = view.domSelectionRange(), curSel = view.domObserver.currentSelection;
            if (domSel.anchorNode && curSel.anchorNode &&
                isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
                view.input.mouseDown.delayedSelectionSync = true;
                view.domObserver.setCurSelection();
                return;
            }
        }
        view.domObserver.disconnectSelection();
        if (view.cursorWrapper) {
            selectCursorWrapper(view);
        }
        else {
            let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
            if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
                if (!sel.$from.parent.inlineContent)
                    resetEditableFrom = temporarilyEditableNear(view, sel.from);
                if (!sel.empty && !sel.$from.parent.inlineContent)
                    resetEditableTo = temporarilyEditableNear(view, sel.to);
            }
            view.docView.setSelection(anchor, head, view.root, force);
            if (brokenSelectBetweenUneditable) {
                if (resetEditableFrom)
                    resetEditable(resetEditableFrom);
                if (resetEditableTo)
                    resetEditable(resetEditableTo);
            }
            if (sel.visible) {
                view.dom.classList.remove("ProseMirror-hideselection");
            }
            else {
                view.dom.classList.add("ProseMirror-hideselection");
                if ("onselectionchange" in document)
                    removeClassOnSelectionChange(view);
            }
        }
        view.domObserver.setCurSelection();
        view.domObserver.connectSelection();
    }
    // Kludge to work around Webkit not allowing a selection to start/end
    // between non-editable block nodes. We briefly make something
    // editable, set the selection, then set it uneditable again.
    const brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
    function temporarilyEditableNear(view, pos) {
        let { node, offset } = view.docView.domFromPos(pos, 0);
        let after = offset < node.childNodes.length ? node.childNodes[offset] : null;
        let before = offset ? node.childNodes[offset - 1] : null;
        if (safari && after && after.contentEditable == "false")
            return setEditable(after);
        if ((!after || after.contentEditable == "false") &&
            (!before || before.contentEditable == "false")) {
            if (after)
                return setEditable(after);
            else if (before)
                return setEditable(before);
        }
    }
    function setEditable(element) {
        element.contentEditable = "true";
        if (safari && element.draggable) {
            element.draggable = false;
            element.wasDraggable = true;
        }
        return element;
    }
    function resetEditable(element) {
        element.contentEditable = "false";
        if (element.wasDraggable) {
            element.draggable = true;
            element.wasDraggable = null;
        }
    }
    function removeClassOnSelectionChange(view) {
        let doc = view.dom.ownerDocument;
        doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
        let domSel = view.domSelectionRange();
        let node = domSel.anchorNode, offset = domSel.anchorOffset;
        doc.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
            if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
                doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
                setTimeout(() => {
                    if (!editorOwnsSelection(view) || view.state.selection.visible)
                        view.dom.classList.remove("ProseMirror-hideselection");
                }, 20);
            }
        });
    }
    function selectCursorWrapper(view) {
        let domSel = view.domSelection(), range = document.createRange();
        let node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
        if (img)
            range.setEnd(node.parentNode, domIndex(node) + 1);
        else
            range.setEnd(node, 0);
        range.collapse(false);
        domSel.removeAllRanges();
        domSel.addRange(range);
        // Kludge to kill 'control selection' in IE11 when selecting an
        // invisible cursor wrapper, since that would result in those weird
        // resize handles and a selection that considers the absolutely
        // positioned wrapper, rather than the root editable node, the
        // focused element.
        if (!img && !view.state.selection.visible && ie && ie_version <= 11) {
            node.disabled = true;
            node.disabled = false;
        }
    }
    function syncNodeSelection(view, sel) {
        if (sel instanceof NodeSelection) {
            let desc = view.docView.descAt(sel.from);
            if (desc != view.lastSelectedViewDesc) {
                clearNodeSelection(view);
                if (desc)
                    desc.selectNode();
                view.lastSelectedViewDesc = desc;
            }
        }
        else {
            clearNodeSelection(view);
        }
    }
    // Clear all DOM statefulness of the last node selection.
    function clearNodeSelection(view) {
        if (view.lastSelectedViewDesc) {
            if (view.lastSelectedViewDesc.parent)
                view.lastSelectedViewDesc.deselectNode();
            view.lastSelectedViewDesc = undefined;
        }
    }
    function selectionBetween(view, $anchor, $head, bias) {
        return view.someProp("createSelectionBetween", f => f(view, $anchor, $head))
            || TextSelection.between($anchor, $head, bias);
    }
    function hasFocusAndSelection(view) {
        if (view.editable && !view.hasFocus())
            return false;
        return hasSelection(view);
    }
    function hasSelection(view) {
        let sel = view.domSelectionRange();
        if (!sel.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
                (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
        }
        catch (_) {
            return false;
        }
    }
    function anchorInRightPlace(view) {
        let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
        let domSel = view.domSelectionRange();
        return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
    }

    function moveSelectionBlock(state, dir) {
        let { $anchor, $head } = state.selection;
        let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
        let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
        return $start && Selection.findFrom($start, dir);
    }
    function apply(view, sel) {
        view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
        return true;
    }
    function selectHorizontally(view, dir, mods) {
        let sel = view.state.selection;
        if (sel instanceof TextSelection) {
            if (mods.indexOf("s") > -1) {
                let { $head } = sel, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter;
                if (!node || node.isText || !node.isLeaf)
                    return false;
                let $newHead = view.state.doc.resolve($head.pos + node.nodeSize * (dir < 0 ? -1 : 1));
                return apply(view, new TextSelection(sel.$anchor, $newHead));
            }
            else if (!sel.empty) {
                return false;
            }
            else if (view.endOfTextblock(dir > 0 ? "forward" : "backward")) {
                let next = moveSelectionBlock(view.state, dir);
                if (next && (next instanceof NodeSelection))
                    return apply(view, next);
                return false;
            }
            else if (!(mac$3 && mods.indexOf("m") > -1)) {
                let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
                if (!node || node.isText)
                    return false;
                let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
                if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
                    return false;
                if (NodeSelection.isSelectable(node)) {
                    return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
                }
                else if (webkit) {
                    // Chrome and Safari will introduce extra pointless cursor
                    // positions around inline uneditable nodes, so we have to
                    // take over and move the cursor past them (#937)
                    return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)));
                }
                else {
                    return false;
                }
            }
        }
        else if (sel instanceof NodeSelection && sel.node.isInline) {
            return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
        }
        else {
            let next = moveSelectionBlock(view.state, dir);
            if (next)
                return apply(view, next);
            return false;
        }
    }
    function nodeLen(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function isIgnorable(dom, dir) {
        let desc = dom.pmViewDesc;
        return desc && desc.size == 0 && (dir < 0 || dom.nextSibling || dom.nodeName != "BR");
    }
    function skipIgnoredNodes(view, dir) {
        return dir < 0 ? skipIgnoredNodesBefore(view) : skipIgnoredNodesAfter(view);
    }
    // Make sure the cursor isn't directly after one or more ignored
    // nodes, which will confuse the browser's cursor motion logic.
    function skipIgnoredNodesBefore(view) {
        let sel = view.domSelectionRange();
        let node = sel.focusNode, offset = sel.focusOffset;
        if (!node)
            return;
        let moveNode, moveOffset, force = false;
        // Gecko will do odd things when the selection is directly in front
        // of a non-editable node, so in that case, move it into the next
        // node if possible. Issue prosemirror/prosemirror#832.
        if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset], -1))
            force = true;
        for (;;) {
            if (offset > 0) {
                if (node.nodeType != 1) {
                    break;
                }
                else {
                    let before = node.childNodes[offset - 1];
                    if (isIgnorable(before, -1)) {
                        moveNode = node;
                        moveOffset = --offset;
                    }
                    else if (before.nodeType == 3) {
                        node = before;
                        offset = node.nodeValue.length;
                    }
                    else
                        break;
                }
            }
            else if (isBlockNode(node)) {
                break;
            }
            else {
                let prev = node.previousSibling;
                while (prev && isIgnorable(prev, -1)) {
                    moveNode = node.parentNode;
                    moveOffset = domIndex(prev);
                    prev = prev.previousSibling;
                }
                if (!prev) {
                    node = node.parentNode;
                    if (node == view.dom)
                        break;
                    offset = 0;
                }
                else {
                    node = prev;
                    offset = nodeLen(node);
                }
            }
        }
        if (force)
            setSelFocus(view, node, offset);
        else if (moveNode)
            setSelFocus(view, moveNode, moveOffset);
    }
    // Make sure the cursor isn't directly before one or more ignored
    // nodes.
    function skipIgnoredNodesAfter(view) {
        let sel = view.domSelectionRange();
        let node = sel.focusNode, offset = sel.focusOffset;
        if (!node)
            return;
        let len = nodeLen(node);
        let moveNode, moveOffset;
        for (;;) {
            if (offset < len) {
                if (node.nodeType != 1)
                    break;
                let after = node.childNodes[offset];
                if (isIgnorable(after, 1)) {
                    moveNode = node;
                    moveOffset = ++offset;
                }
                else
                    break;
            }
            else if (isBlockNode(node)) {
                break;
            }
            else {
                let next = node.nextSibling;
                while (next && isIgnorable(next, 1)) {
                    moveNode = next.parentNode;
                    moveOffset = domIndex(next) + 1;
                    next = next.nextSibling;
                }
                if (!next) {
                    node = node.parentNode;
                    if (node == view.dom)
                        break;
                    offset = len = 0;
                }
                else {
                    node = next;
                    offset = 0;
                    len = nodeLen(node);
                }
            }
        }
        if (moveNode)
            setSelFocus(view, moveNode, moveOffset);
    }
    function isBlockNode(dom) {
        let desc = dom.pmViewDesc;
        return desc && desc.node && desc.node.isBlock;
    }
    function textNodeAfter(node, offset) {
        while (node && offset == node.childNodes.length && !hasBlockDesc(node)) {
            offset = domIndex(node) + 1;
            node = node.parentNode;
        }
        while (node && offset < node.childNodes.length) {
            let next = node.childNodes[offset];
            if (next.nodeType == 3)
                return next;
            if (next.nodeType == 1 && next.contentEditable == "false")
                break;
            node = next;
            offset = 0;
        }
    }
    function textNodeBefore(node, offset) {
        while (node && !offset && !hasBlockDesc(node)) {
            offset = domIndex(node);
            node = node.parentNode;
        }
        while (node && offset) {
            let next = node.childNodes[offset - 1];
            if (next.nodeType == 3)
                return next;
            if (next.nodeType == 1 && next.contentEditable == "false")
                break;
            node = next;
            offset = node.childNodes.length;
        }
    }
    function setSelFocus(view, node, offset) {
        if (node.nodeType != 3) {
            let before, after;
            if (after = textNodeAfter(node, offset)) {
                node = after;
                offset = 0;
            }
            else if (before = textNodeBefore(node, offset)) {
                node = before;
                offset = before.nodeValue.length;
            }
        }
        let sel = view.domSelection();
        if (selectionCollapsed(sel)) {
            let range = document.createRange();
            range.setEnd(node, offset);
            range.setStart(node, offset);
            sel.removeAllRanges();
            sel.addRange(range);
        }
        else if (sel.extend) {
            sel.extend(node, offset);
        }
        view.domObserver.setCurSelection();
        let { state } = view;
        // If no state update ends up happening, reset the selection.
        setTimeout(() => {
            if (view.state == state)
                selectionToDOM(view);
        }, 50);
    }
    function findDirection(view, pos) {
        let $pos = view.state.doc.resolve(pos);
        if (!(chrome || windows) && $pos.parent.inlineContent) {
            let coords = view.coordsAtPos(pos);
            if (pos > $pos.start()) {
                let before = view.coordsAtPos(pos - 1);
                let mid = (before.top + before.bottom) / 2;
                if (mid > coords.top && mid < coords.bottom && Math.abs(before.left - coords.left) > 1)
                    return before.left < coords.left ? "ltr" : "rtl";
            }
            if (pos < $pos.end()) {
                let after = view.coordsAtPos(pos + 1);
                let mid = (after.top + after.bottom) / 2;
                if (mid > coords.top && mid < coords.bottom && Math.abs(after.left - coords.left) > 1)
                    return after.left > coords.left ? "ltr" : "rtl";
            }
        }
        let computed = getComputedStyle(view.dom).direction;
        return computed == "rtl" ? "rtl" : "ltr";
    }
    // Check whether vertical selection motion would involve node
    // selections. If so, apply it (if not, the result is left to the
    // browser)
    function selectVertically(view, dir, mods) {
        let sel = view.state.selection;
        if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
            return false;
        if (mac$3 && mods.indexOf("m") > -1)
            return false;
        let { $from, $to } = sel;
        if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
            let next = moveSelectionBlock(view.state, dir);
            if (next && (next instanceof NodeSelection))
                return apply(view, next);
        }
        if (!$from.parent.inlineContent) {
            let side = dir < 0 ? $from : $to;
            let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
            return beyond ? apply(view, beyond) : false;
        }
        return false;
    }
    function stopNativeHorizontalDelete(view, dir) {
        if (!(view.state.selection instanceof TextSelection))
            return true;
        let { $head, $anchor, empty } = view.state.selection;
        if (!$head.sameParent($anchor))
            return true;
        if (!empty)
            return false;
        if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
            return true;
        let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
        if (nextNode && !nextNode.isText) {
            let tr = view.state.tr;
            if (dir < 0)
                tr.delete($head.pos - nextNode.nodeSize, $head.pos);
            else
                tr.delete($head.pos, $head.pos + nextNode.nodeSize);
            view.dispatch(tr);
            return true;
        }
        return false;
    }
    function switchEditable(view, node, state) {
        view.domObserver.stop();
        node.contentEditable = state;
        view.domObserver.start();
    }
    // Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
    // In which Safari (and at some point in the past, Chrome) does really
    // wrong things when the down arrow is pressed when the cursor is
    // directly at the start of a textblock and has an uneditable node
    // after it
    function safariDownArrowBug(view) {
        if (!safari || view.state.selection.$head.parentOffset > 0)
            return false;
        let { focusNode, focusOffset } = view.domSelectionRange();
        if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
            focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
            let child = focusNode.firstChild;
            switchEditable(view, child, "true");
            setTimeout(() => switchEditable(view, child, "false"), 20);
        }
        return false;
    }
    // A backdrop key mapping used to make sure we always suppress keys
    // that have a dangerous default effect, even if the commands they are
    // bound to return false, and to make sure that cursor-motion keys
    // find a cursor (as opposed to a node selection) when pressed. For
    // cursor-motion keys, the code in the handlers also takes care of
    // block selections.
    function getMods(event) {
        let result = "";
        if (event.ctrlKey)
            result += "c";
        if (event.metaKey)
            result += "m";
        if (event.altKey)
            result += "a";
        if (event.shiftKey)
            result += "s";
        return result;
    }
    function captureKeyDown(view, event) {
        let code = event.keyCode, mods = getMods(event);
        if (code == 8 || (mac$3 && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
            return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodes(view, -1);
        }
        else if ((code == 46 && !event.shiftKey) || (mac$3 && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
            return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodes(view, 1);
        }
        else if (code == 13 || code == 27) { // Enter, Esc
            return true;
        }
        else if (code == 37 || (mac$3 && code == 66 && mods == "c")) { // Left arrow, Ctrl-b on Mac
            let dir = code == 37 ? (findDirection(view, view.state.selection.from) == "ltr" ? -1 : 1) : -1;
            return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
        }
        else if (code == 39 || (mac$3 && code == 70 && mods == "c")) { // Right arrow, Ctrl-f on Mac
            let dir = code == 39 ? (findDirection(view, view.state.selection.from) == "ltr" ? 1 : -1) : 1;
            return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
        }
        else if (code == 38 || (mac$3 && code == 80 && mods == "c")) { // Up arrow, Ctrl-p on Mac
            return selectVertically(view, -1, mods) || skipIgnoredNodes(view, -1);
        }
        else if (code == 40 || (mac$3 && code == 78 && mods == "c")) { // Down arrow, Ctrl-n on Mac
            return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodes(view, 1);
        }
        else if (mods == (mac$3 ? "m" : "c") &&
            (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
            return true;
        }
        return false;
    }

    function serializeForClipboard(view, slice) {
        view.someProp("transformCopied", f => { slice = f(slice, view); });
        let context = [], { content, openStart, openEnd } = slice;
        while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
            openStart--;
            openEnd--;
            let node = content.firstChild;
            context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
            content = node.content;
        }
        let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
        let doc = detachedDoc(), wrap = doc.createElement("div");
        wrap.appendChild(serializer.serializeFragment(content, { document: doc }));
        let firstChild = wrap.firstChild, needsWrap, wrappers = 0;
        while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
            for (let i = needsWrap.length - 1; i >= 0; i--) {
                let wrapper = doc.createElement(needsWrap[i]);
                while (wrap.firstChild)
                    wrapper.appendChild(wrap.firstChild);
                wrap.appendChild(wrapper);
                wrappers++;
            }
            firstChild = wrap.firstChild;
        }
        if (firstChild && firstChild.nodeType == 1)
            firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
        let text = view.someProp("clipboardTextSerializer", f => f(slice, view)) ||
            slice.content.textBetween(0, slice.content.size, "\n\n");
        return { dom: wrap, text, slice };
    }
    // Read a slice of content from the clipboard (or drop data).
    function parseFromClipboard(view, text, html, plainText, $context) {
        let inCode = $context.parent.type.spec.code;
        let dom, slice;
        if (!html && !text)
            return null;
        let asText = text && (plainText || inCode || !html);
        if (asText) {
            view.someProp("transformPastedText", f => { text = f(text, inCode || plainText, view); });
            if (inCode)
                return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
            let parsed = view.someProp("clipboardTextParser", f => f(text, $context, plainText, view));
            if (parsed) {
                slice = parsed;
            }
            else {
                let marks = $context.marks();
                let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
                dom = document.createElement("div");
                text.split(/(?:\r\n?|\n)+/).forEach(block => {
                    let p = dom.appendChild(document.createElement("p"));
                    if (block)
                        p.appendChild(serializer.serializeNode(schema.text(block, marks)));
                });
            }
        }
        else {
            view.someProp("transformPastedHTML", f => { html = f(html, view); });
            dom = readHTML(html);
            if (webkit)
                restoreReplacedSpaces(dom);
        }
        let contextNode = dom && dom.querySelector("[data-pm-slice]");
        let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
        if (sliceData && sliceData[3])
            for (let i = +sliceData[3]; i > 0; i--) {
                let child = dom.firstChild;
                while (child && child.nodeType != 1)
                    child = child.nextSibling;
                if (!child)
                    break;
                dom = child;
            }
        if (!slice) {
            let parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
            slice = parser.parseSlice(dom, {
                preserveWhitespace: !!(asText || sliceData),
                context: $context,
                ruleFromNode(dom) {
                    if (dom.nodeName == "BR" && !dom.nextSibling &&
                        dom.parentNode && !inlineParents.test(dom.parentNode.nodeName))
                        return { ignore: true };
                    return null;
                }
            });
        }
        if (sliceData) {
            slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[4]);
        }
        else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
            slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), true);
            if (slice.openStart || slice.openEnd) {
                let openStart = 0, openEnd = 0;
                for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) { }
                for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating; openEnd++, node = node.lastChild) { }
                slice = closeSlice(slice, openStart, openEnd);
            }
        }
        view.someProp("transformPasted", f => { slice = f(slice, view); });
        return slice;
    }
    const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
    // Takes a slice parsed with parseSlice, which means there hasn't been
    // any content-expression checking done on the top nodes, tries to
    // find a parent node in the current context that might fit the nodes,
    // and if successful, rebuilds the slice so that it fits into that parent.
    //
    // This addresses the problem that Transform.replace expects a
    // coherent slice, and will fail to place a set of siblings that don't
    // fit anywhere in the schema.
    function normalizeSiblings(fragment, $context) {
        if (fragment.childCount < 2)
            return fragment;
        for (let d = $context.depth; d >= 0; d--) {
            let parent = $context.node(d);
            let match = parent.contentMatchAt($context.index(d));
            let lastWrap, result = [];
            fragment.forEach(node => {
                if (!result)
                    return;
                let wrap = match.findWrapping(node.type), inLast;
                if (!wrap)
                    return result = null;
                if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
                    result[result.length - 1] = inLast;
                }
                else {
                    if (result.length)
                        result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
                    let wrapped = withWrappers(node, wrap);
                    result.push(wrapped);
                    match = match.matchType(wrapped.type);
                    lastWrap = wrap;
                }
            });
            if (result)
                return Fragment.from(result);
        }
        return fragment;
    }
    function withWrappers(node, wrap, from = 0) {
        for (let i = wrap.length - 1; i >= from; i--)
            node = wrap[i].create(null, Fragment.from(node));
        return node;
    }
    // Used to group adjacent nodes wrapped in similar parents by
    // normalizeSiblings into the same parent node
    function addToSibling(wrap, lastWrap, node, sibling, depth) {
        if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
            let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
            if (inner)
                return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
            let match = sibling.contentMatchAt(sibling.childCount);
            if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))
                return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))));
        }
    }
    function closeRight(node, depth) {
        if (depth == 0)
            return node;
        let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
        let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true);
        return node.copy(fragment.append(fill));
    }
    function closeRange(fragment, side, from, to, depth, openEnd) {
        let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
        if (fragment.childCount > 1)
            openEnd = 0;
        if (depth < to - 1)
            inner = closeRange(inner, side, from, to, depth + 1, openEnd);
        if (depth >= from)
            inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, openEnd <= depth).append(inner)
                : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true));
        return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));
    }
    function closeSlice(slice, openStart, openEnd) {
        if (openStart < slice.openStart)
            slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd);
        if (openEnd < slice.openEnd)
            slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd);
        return slice;
    }
    // Trick from jQuery -- some elements must be wrapped in other
    // elements for innerHTML to work. I.e. if you do `div.innerHTML =
    // "<td>..</td>"` the table cells are ignored.
    const wrapMap = {
        thead: ["table"],
        tbody: ["table"],
        tfoot: ["table"],
        caption: ["table"],
        colgroup: ["table"],
        col: ["table", "colgroup"],
        tr: ["table", "tbody"],
        td: ["table", "tbody", "tr"],
        th: ["table", "tbody", "tr"]
    };
    let _detachedDoc = null;
    function detachedDoc() {
        return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
    }
    function readHTML(html) {
        let metas = /^(\s*<meta [^>]*>)*/.exec(html);
        if (metas)
            html = html.slice(metas[0].length);
        let elt = detachedDoc().createElement("div");
        let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap;
        if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])
            html = wrap.map(n => "<" + n + ">").join("") + html + wrap.map(n => "</" + n + ">").reverse().join("");
        elt.innerHTML = html;
        if (wrap)
            for (let i = 0; i < wrap.length; i++)
                elt = elt.querySelector(wrap[i]) || elt;
        return elt;
    }
    // Webkit browsers do some hard-to-predict replacement of regular
    // spaces with non-breaking spaces when putting content on the
    // clipboard. This tries to convert such non-breaking spaces (which
    // will be wrapped in a plain span on Chrome, a span with class
    // Apple-converted-space on Safari) back to regular spaces.
    function restoreReplacedSpaces(dom) {
        let nodes = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
        for (let i = 0; i < nodes.length; i++) {
            let node = nodes[i];
            if (node.childNodes.length == 1 && node.textContent == "\u00a0" && node.parentNode)
                node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node);
        }
    }
    function addContext(slice, context) {
        if (!slice.size)
            return slice;
        let schema = slice.content.firstChild.type.schema, array;
        try {
            array = JSON.parse(context);
        }
        catch (e) {
            return slice;
        }
        let { content, openStart, openEnd } = slice;
        for (let i = array.length - 2; i >= 0; i -= 2) {
            let type = schema.nodes[array[i]];
            if (!type || type.hasRequiredAttrs())
                break;
            content = Fragment.from(type.create(array[i + 1], content));
            openStart++;
            openEnd++;
        }
        return new Slice(content, openStart, openEnd);
    }

    // A collection of DOM events that occur within the editor, and callback functions
    // to invoke when the event fires.
    const handlers = {};
    const editHandlers = {};
    const passiveHandlers = { touchstart: true, touchmove: true };
    class InputState {
        constructor() {
            this.shiftKey = false;
            this.mouseDown = null;
            this.lastKeyCode = null;
            this.lastKeyCodeTime = 0;
            this.lastClick = { time: 0, x: 0, y: 0, type: "" };
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastIOSEnter = 0;
            this.lastIOSEnterFallbackTimeout = -1;
            this.lastFocus = 0;
            this.lastTouch = 0;
            this.lastAndroidDelete = 0;
            this.composing = false;
            this.compositionNode = null;
            this.composingTimeout = -1;
            this.compositionNodes = [];
            this.compositionEndedAt = -2e8;
            this.compositionID = 1;
            // Set to a composition ID when there are pending changes at compositionend
            this.compositionPendingChanges = 0;
            this.domChangeCount = 0;
            this.eventHandlers = Object.create(null);
            this.hideSelectionGuard = null;
        }
    }
    function initInput(view) {
        for (let event in handlers) {
            let handler = handlers[event];
            view.dom.addEventListener(event, view.input.eventHandlers[event] = (event) => {
                if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
                    (view.editable || !(event.type in editHandlers)))
                    handler(view, event);
            }, passiveHandlers[event] ? { passive: true } : undefined);
        }
        // On Safari, for reasons beyond my understanding, adding an input
        // event handler makes an issue where the composition vanishes when
        // you press enter go away.
        if (safari)
            view.dom.addEventListener("input", () => null);
        ensureListeners(view);
    }
    function setSelectionOrigin(view, origin) {
        view.input.lastSelectionOrigin = origin;
        view.input.lastSelectionTime = Date.now();
    }
    function destroyInput(view) {
        view.domObserver.stop();
        for (let type in view.input.eventHandlers)
            view.dom.removeEventListener(type, view.input.eventHandlers[type]);
        clearTimeout(view.input.composingTimeout);
        clearTimeout(view.input.lastIOSEnterFallbackTimeout);
    }
    function ensureListeners(view) {
        view.someProp("handleDOMEvents", currentHandlers => {
            for (let type in currentHandlers)
                if (!view.input.eventHandlers[type])
                    view.dom.addEventListener(type, view.input.eventHandlers[type] = event => runCustomHandler(view, event));
        });
    }
    function runCustomHandler(view, event) {
        return view.someProp("handleDOMEvents", handlers => {
            let handler = handlers[event.type];
            return handler ? handler(view, event) || event.defaultPrevented : false;
        });
    }
    function eventBelongsToView(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target; node != view.dom; node = node.parentNode)
            if (!node || node.nodeType == 11 ||
                (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))
                return false;
        return true;
    }
    function dispatchEvent(view, event) {
        if (!runCustomHandler(view, event) && handlers[event.type] &&
            (view.editable || !(event.type in editHandlers)))
            handlers[event.type](view, event);
    }
    editHandlers.keydown = (view, _event) => {
        let event = _event;
        view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
        if (inOrNearComposition(view, event))
            return;
        view.input.lastKeyCode = event.keyCode;
        view.input.lastKeyCodeTime = Date.now();
        // Suppress enter key events on Chrome Android, because those tend
        // to be part of a confused sequence of composition events fired,
        // and handling them eagerly tends to corrupt the input.
        if (android && chrome && event.keyCode == 13)
            return;
        if (event.keyCode != 229)
            view.domObserver.forceFlush();
        // On iOS, if we preventDefault enter key presses, the virtual
        // keyboard gets confused. So the hack here is to set a flag that
        // makes the DOM change code recognize that what just happens should
        // be replaced by whatever the Enter key handlers do.
        if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
            let now = Date.now();
            view.input.lastIOSEnter = now;
            view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
                if (view.input.lastIOSEnter == now) {
                    view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")));
                    view.input.lastIOSEnter = 0;
                }
            }, 200);
        }
        else if (view.someProp("handleKeyDown", f => f(view, event)) || captureKeyDown(view, event)) {
            event.preventDefault();
        }
        else {
            setSelectionOrigin(view, "key");
        }
    };
    editHandlers.keyup = (view, event) => {
        if (event.keyCode == 16)
            view.input.shiftKey = false;
    };
    editHandlers.keypress = (view, _event) => {
        let event = _event;
        if (inOrNearComposition(view, event) || !event.charCode ||
            event.ctrlKey && !event.altKey || mac$3 && event.metaKey)
            return;
        if (view.someProp("handleKeyPress", f => f(view, event))) {
            event.preventDefault();
            return;
        }
        let sel = view.state.selection;
        if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
            let text = String.fromCharCode(event.charCode);
            if (!/[\r\n]/.test(text) && !view.someProp("handleTextInput", f => f(view, sel.$from.pos, sel.$to.pos, text)))
                view.dispatch(view.state.tr.insertText(text).scrollIntoView());
            event.preventDefault();
        }
    };
    function eventCoords(event) { return { left: event.clientX, top: event.clientY }; }
    function isNear(event, click) {
        let dx = click.x - event.clientX, dy = click.y - event.clientY;
        return dx * dx + dy * dy < 100;
    }
    function runHandlerOnContext(view, propName, pos, inside, event) {
        if (inside == -1)
            return false;
        let $pos = view.state.doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
                : f(view, pos, $pos.node(i), $pos.before(i), event, false)))
                return true;
        }
        return false;
    }
    function updateSelection(view, selection, origin) {
        if (!view.focused)
            view.focus();
        let tr = view.state.tr.setSelection(selection);
        if (origin == "pointer")
            tr.setMeta("pointer", true);
        view.dispatch(tr);
    }
    function selectClickedLeaf(view, inside) {
        if (inside == -1)
            return false;
        let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
        if (node && node.isAtom && NodeSelection.isSelectable(node)) {
            updateSelection(view, new NodeSelection($pos), "pointer");
            return true;
        }
        return false;
    }
    function selectClickedNode(view, inside) {
        if (inside == -1)
            return false;
        let sel = view.state.selection, selectedNode, selectAt;
        if (sel instanceof NodeSelection)
            selectedNode = sel.node;
        let $pos = view.state.doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
            if (NodeSelection.isSelectable(node)) {
                if (selectedNode && sel.$from.depth > 0 &&
                    i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
                    selectAt = $pos.before(sel.$from.depth);
                else
                    selectAt = $pos.before(i);
                break;
            }
        }
        if (selectAt != null) {
            updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
            return true;
        }
        else {
            return false;
        }
    }
    function handleSingleClick(view, pos, inside, event, selectNode) {
        return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
            view.someProp("handleClick", f => f(view, pos, event)) ||
            (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
    }
    function handleDoubleClick(view, pos, inside, event) {
        return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
            view.someProp("handleDoubleClick", f => f(view, pos, event));
    }
    function handleTripleClick(view, pos, inside, event) {
        return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
            view.someProp("handleTripleClick", f => f(view, pos, event)) ||
            defaultTripleClick(view, inside, event);
    }
    function defaultTripleClick(view, inside, event) {
        if (event.button != 0)
            return false;
        let doc = view.state.doc;
        if (inside == -1) {
            if (doc.inlineContent) {
                updateSelection(view, TextSelection.create(doc, 0, doc.content.size), "pointer");
                return true;
            }
            return false;
        }
        let $pos = doc.resolve(inside);
        for (let i = $pos.depth + 1; i > 0; i--) {
            let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
            let nodePos = $pos.before(i);
            if (node.inlineContent)
                updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), "pointer");
            else if (NodeSelection.isSelectable(node))
                updateSelection(view, NodeSelection.create(doc, nodePos), "pointer");
            else
                continue;
            return true;
        }
    }
    function forceDOMFlush(view) {
        return endComposition(view);
    }
    const selectNodeModifier = mac$3 ? "metaKey" : "ctrlKey";
    handlers.mousedown = (view, _event) => {
        let event = _event;
        view.input.shiftKey = event.shiftKey;
        let flushed = forceDOMFlush(view);
        let now = Date.now(), type = "singleClick";
        if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
            if (view.input.lastClick.type == "singleClick")
                type = "doubleClick";
            else if (view.input.lastClick.type == "doubleClick")
                type = "tripleClick";
        }
        view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
        let pos = view.posAtCoords(eventCoords(event));
        if (!pos)
            return;
        if (type == "singleClick") {
            if (view.input.mouseDown)
                view.input.mouseDown.done();
            view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
        }
        else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
            event.preventDefault();
        }
        else {
            setSelectionOrigin(view, "pointer");
        }
    };
    class MouseDown {
        constructor(view, pos, event, flushed) {
            this.view = view;
            this.pos = pos;
            this.event = event;
            this.flushed = flushed;
            this.delayedSelectionSync = false;
            this.mightDrag = null;
            this.startDoc = view.state.doc;
            this.selectNode = !!event[selectNodeModifier];
            this.allowDefault = event.shiftKey;
            let targetNode, targetPos;
            if (pos.inside > -1) {
                targetNode = view.state.doc.nodeAt(pos.inside);
                targetPos = pos.inside;
            }
            else {
                let $pos = view.state.doc.resolve(pos.pos);
                targetNode = $pos.parent;
                targetPos = $pos.depth ? $pos.before() : 0;
            }
            const target = flushed ? null : event.target;
            const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
            this.target = targetDesc ? targetDesc.dom : null;
            let { selection } = view.state;
            if (event.button == 0 &&
                targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
                selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
                this.mightDrag = {
                    node: targetNode,
                    pos: targetPos,
                    addAttr: !!(this.target && !this.target.draggable),
                    setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
                };
            if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
                this.view.domObserver.stop();
                if (this.mightDrag.addAttr)
                    this.target.draggable = true;
                if (this.mightDrag.setUneditable)
                    setTimeout(() => {
                        if (this.view.input.mouseDown == this)
                            this.target.setAttribute("contentEditable", "false");
                    }, 20);
                this.view.domObserver.start();
            }
            view.root.addEventListener("mouseup", this.up = this.up.bind(this));
            view.root.addEventListener("mousemove", this.move = this.move.bind(this));
            setSelectionOrigin(view, "pointer");
        }
        done() {
            this.view.root.removeEventListener("mouseup", this.up);
            this.view.root.removeEventListener("mousemove", this.move);
            if (this.mightDrag && this.target) {
                this.view.domObserver.stop();
                if (this.mightDrag.addAttr)
                    this.target.removeAttribute("draggable");
                if (this.mightDrag.setUneditable)
                    this.target.removeAttribute("contentEditable");
                this.view.domObserver.start();
            }
            if (this.delayedSelectionSync)
                setTimeout(() => selectionToDOM(this.view));
            this.view.input.mouseDown = null;
        }
        up(event) {
            this.done();
            if (!this.view.dom.contains(event.target))
                return;
            let pos = this.pos;
            if (this.view.state.doc != this.startDoc)
                pos = this.view.posAtCoords(eventCoords(event));
            this.updateAllowDefault(event);
            if (this.allowDefault || !pos) {
                setSelectionOrigin(this.view, "pointer");
            }
            else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
                event.preventDefault();
            }
            else if (event.button == 0 &&
                (this.flushed ||
                    // Safari ignores clicks on draggable elements
                    (safari && this.mightDrag && !this.mightDrag.node.isAtom) ||
                    // Chrome will sometimes treat a node selection as a
                    // cursor, but still report that the node is selected
                    // when asked through getSelection. You'll then get a
                    // situation where clicking at the point where that
                    // (hidden) cursor is doesn't change the selection, and
                    // thus doesn't get a reaction from ProseMirror. This
                    // works around that.
                    (chrome && !this.view.state.selection.visible &&
                        Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {
                updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
                event.preventDefault();
            }
            else {
                setSelectionOrigin(this.view, "pointer");
            }
        }
        move(event) {
            this.updateAllowDefault(event);
            setSelectionOrigin(this.view, "pointer");
            if (event.buttons == 0)
                this.done();
        }
        updateAllowDefault(event) {
            if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
                Math.abs(this.event.y - event.clientY) > 4))
                this.allowDefault = true;
        }
    }
    handlers.touchstart = view => {
        view.input.lastTouch = Date.now();
        forceDOMFlush(view);
        setSelectionOrigin(view, "pointer");
    };
    handlers.touchmove = view => {
        view.input.lastTouch = Date.now();
        setSelectionOrigin(view, "pointer");
    };
    handlers.contextmenu = view => forceDOMFlush(view);
    function inOrNearComposition(view, event) {
        if (view.composing)
            return true;
        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
        // On Japanese input method editors (IMEs), the Enter key is used to confirm character
        // selection. On Safari, when Enter is pressed, compositionend and keydown events are
        // emitted. The keydown event triggers newline insertion, which we don't want.
        // This method returns true if the keydown event should be ignored.
        // We only ignore it once, as pressing Enter a second time *should* insert a newline.
        // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
        // This guards against the case where compositionend is triggered without the keyboard
        // (e.g. character confirmation may be done with the mouse), and keydown is triggered
        // afterwards- we wouldn't want to ignore the keydown event in this case.
        if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
            view.input.compositionEndedAt = -2e8;
            return true;
        }
        return false;
    }
    // Drop active composition after 5 seconds of inactivity on Android
    const timeoutComposition = android ? 5000 : -1;
    editHandlers.compositionstart = editHandlers.compositionupdate = view => {
        if (!view.composing) {
            view.domObserver.flush();
            let { state } = view, $pos = state.selection.$from;
            if (state.selection.empty &&
                (state.storedMarks ||
                    (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {
                // Need to wrap the cursor in mark nodes different from the ones in the DOM context
                view.markCursor = view.state.storedMarks || $pos.marks();
                endComposition(view, true);
                view.markCursor = null;
            }
            else {
                endComposition(view);
                // In firefox, if the cursor is after but outside a marked node,
                // the inserted text won't inherit the marks. So this moves it
                // inside if necessary.
                if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
                    let sel = view.domSelectionRange();
                    for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {
                        let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
                        if (!before)
                            break;
                        if (before.nodeType == 3) {
                            view.domSelection().collapse(before, before.nodeValue.length);
                            break;
                        }
                        else {
                            node = before;
                            offset = -1;
                        }
                    }
                }
            }
            view.input.composing = true;
        }
        scheduleComposeEnd(view, timeoutComposition);
    };
    editHandlers.compositionend = (view, event) => {
        if (view.composing) {
            view.input.composing = false;
            view.input.compositionEndedAt = event.timeStamp;
            view.input.compositionPendingChanges = view.domObserver.pendingRecords().length ? view.input.compositionID : 0;
            view.input.compositionNode = null;
            if (view.input.compositionPendingChanges)
                Promise.resolve().then(() => view.domObserver.flush());
            view.input.compositionID++;
            scheduleComposeEnd(view, 20);
        }
    };
    function scheduleComposeEnd(view, delay) {
        clearTimeout(view.input.composingTimeout);
        if (delay > -1)
            view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
    }
    function clearComposition(view) {
        if (view.composing) {
            view.input.composing = false;
            view.input.compositionEndedAt = timestampFromCustomEvent();
        }
        while (view.input.compositionNodes.length > 0)
            view.input.compositionNodes.pop().markParentsDirty();
    }
    function findCompositionNode(view) {
        let sel = view.domSelectionRange();
        if (!sel.focusNode)
            return null;
        let textBefore = textNodeBefore$1(sel.focusNode, sel.focusOffset);
        let textAfter = textNodeAfter$1(sel.focusNode, sel.focusOffset);
        if (textBefore && textAfter && textBefore != textAfter) {
            let descAfter = textAfter.pmViewDesc;
            if (!descAfter || !descAfter.isText(textAfter.nodeValue)) {
                return textAfter;
            }
            else if (view.input.compositionNode == textAfter) {
                let descBefore = textBefore.pmViewDesc;
                if (!(!descBefore || !descBefore.isText(textBefore.nodeValue)))
                    return textAfter;
            }
        }
        return textBefore || textAfter;
    }
    function timestampFromCustomEvent() {
        let event = document.createEvent("Event");
        event.initEvent("event", true, true);
        return event.timeStamp;
    }
    /**
    @internal
    */
    function endComposition(view, forceUpdate = false) {
        if (android && view.domObserver.flushingSoon >= 0)
            return;
        view.domObserver.forceFlush();
        clearComposition(view);
        if (forceUpdate || view.docView && view.docView.dirty) {
            let sel = selectionFromDOM(view);
            if (sel && !sel.eq(view.state.selection))
                view.dispatch(view.state.tr.setSelection(sel));
            else
                view.updateState(view.state);
            return true;
        }
        return false;
    }
    function captureCopy(view, dom) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        if (!view.dom.parentNode)
            return;
        let wrap = view.dom.parentNode.appendChild(document.createElement("div"));
        wrap.appendChild(dom);
        wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
        let sel = getSelection(), range = document.createRange();
        range.selectNodeContents(dom);
        // Done because IE will fire a selectionchange moving the selection
        // to its start when removeAllRanges is called and the editor still
        // has focus (which will mess up the editor's selection state).
        view.dom.blur();
        sel.removeAllRanges();
        sel.addRange(range);
        setTimeout(() => {
            if (wrap.parentNode)
                wrap.parentNode.removeChild(wrap);
            view.focus();
        }, 50);
    }
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (ie && ie_version < 15) ||
        (ios && webkit_version < 604);
    handlers.copy = editHandlers.cut = (view, _event) => {
        let event = _event;
        let sel = view.state.selection, cut = event.type == "cut";
        if (sel.empty)
            return;
        // IE and Edge's clipboard interface is completely broken
        let data = brokenClipboardAPI ? null : event.clipboardData;
        let slice = sel.content(), { dom, text } = serializeForClipboard(view, slice);
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/html", dom.innerHTML);
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, dom);
        }
        if (cut)
            view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
    };
    function sliceSingleNode(slice) {
        return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;
    }
    function capturePaste(view, event) {
        if (!view.dom.parentNode)
            return;
        let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
        let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
        if (!plainText)
            target.contentEditable = "true";
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        let plain = view.input.shiftKey && view.input.lastKeyCode != 45;
        setTimeout(() => {
            view.focus();
            if (target.parentNode)
                target.parentNode.removeChild(target);
            if (plainText)
                doPaste(view, target.value, null, plain, event);
            else
                doPaste(view, target.textContent, target.innerHTML, plain, event);
        }, 50);
    }
    function doPaste(view, text, html, preferPlain, event) {
        let slice = parseFromClipboard(view, text, html, preferPlain, view.state.selection.$from);
        if (view.someProp("handlePaste", f => f(view, event, slice || Slice.empty)))
            return true;
        if (!slice)
            return false;
        let singleNode = sliceSingleNode(slice);
        let tr = singleNode
            ? view.state.tr.replaceSelectionWith(singleNode, preferPlain)
            : view.state.tr.replaceSelection(slice);
        view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
        return true;
    }
    function getText(clipboardData) {
        let text = clipboardData.getData("text/plain") || clipboardData.getData("Text");
        if (text)
            return text;
        let uris = clipboardData.getData("text/uri-list");
        return uris ? uris.replace(/\r?\n/g, " ") : "";
    }
    editHandlers.paste = (view, _event) => {
        let event = _event;
        // Handling paste from JavaScript during composition is very poorly
        // handled by browsers, so as a dodgy but preferable kludge, we just
        // let the browser do its native thing there, except on Android,
        // where the editor is almost always composing.
        if (view.composing && !android)
            return;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        let plain = view.input.shiftKey && view.input.lastKeyCode != 45;
        if (data && doPaste(view, getText(data), data.getData("text/html"), plain, event))
            event.preventDefault();
        else
            capturePaste(view, event);
    };
    class Dragging {
        constructor(slice, move, node) {
            this.slice = slice;
            this.move = move;
            this.node = node;
        }
    }
    const dragCopyModifier = mac$3 ? "altKey" : "ctrlKey";
    handlers.dragstart = (view, _event) => {
        let event = _event;
        let mouseDown = view.input.mouseDown;
        if (mouseDown)
            mouseDown.done();
        if (!event.dataTransfer)
            return;
        let sel = view.state.selection;
        let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
        let node;
        if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to)) ;
        else if (mouseDown && mouseDown.mightDrag) {
            node = NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos);
        }
        else if (event.target && event.target.nodeType == 1) {
            let desc = view.docView.nearestDesc(event.target, true);
            if (desc && desc.node.type.spec.draggable && desc != view.docView)
                node = NodeSelection.create(view.state.doc, desc.posBefore);
        }
        let draggedSlice = (node || view.state.selection).content();
        let { dom, text, slice } = serializeForClipboard(view, draggedSlice);
        event.dataTransfer.clearData();
        event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
        // See https://github.com/ProseMirror/prosemirror/issues/1156
        event.dataTransfer.effectAllowed = "copyMove";
        if (!brokenClipboardAPI)
            event.dataTransfer.setData("text/plain", text);
        view.dragging = new Dragging(slice, !event[dragCopyModifier], node);
    };
    handlers.dragend = view => {
        let dragging = view.dragging;
        window.setTimeout(() => {
            if (view.dragging == dragging)
                view.dragging = null;
        }, 50);
    };
    editHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault();
    editHandlers.drop = (view, _event) => {
        let event = _event;
        let dragging = view.dragging;
        view.dragging = null;
        if (!event.dataTransfer)
            return;
        let eventPos = view.posAtCoords(eventCoords(event));
        if (!eventPos)
            return;
        let $mouse = view.state.doc.resolve(eventPos.pos);
        let slice = dragging && dragging.slice;
        if (slice) {
            view.someProp("transformPasted", f => { slice = f(slice, view); });
        }
        else {
            slice = parseFromClipboard(view, getText(event.dataTransfer), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
        }
        let move = !!(dragging && !event[dragCopyModifier]);
        if (view.someProp("handleDrop", f => f(view, event, slice || Slice.empty, move))) {
            event.preventDefault();
            return;
        }
        if (!slice)
            return;
        event.preventDefault();
        let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos;
        if (insertPos == null)
            insertPos = $mouse.pos;
        let tr = view.state.tr;
        if (move) {
            let { node } = dragging;
            if (node)
                node.replace(tr);
            else
                tr.deleteSelection();
        }
        let pos = tr.mapping.map(insertPos);
        let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
        let beforeInsert = tr.doc;
        if (isNode)
            tr.replaceRangeWith(pos, pos, slice.content.firstChild);
        else
            tr.replaceRange(pos, pos, slice);
        if (tr.doc.eq(beforeInsert))
            return;
        let $pos = tr.doc.resolve(pos);
        if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&
            $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
            tr.setSelection(new NodeSelection($pos));
        }
        else {
            let end = tr.mapping.map(insertPos);
            tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
            tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
        }
        view.focus();
        view.dispatch(tr.setMeta("uiEvent", "drop"));
    };
    handlers.focus = view => {
        view.input.lastFocus = Date.now();
        if (!view.focused) {
            view.domObserver.stop();
            view.dom.classList.add("ProseMirror-focused");
            view.domObserver.start();
            view.focused = true;
            setTimeout(() => {
                if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange()))
                    selectionToDOM(view);
            }, 20);
        }
    };
    handlers.blur = (view, _event) => {
        let event = _event;
        if (view.focused) {
            view.domObserver.stop();
            view.dom.classList.remove("ProseMirror-focused");
            view.domObserver.start();
            if (event.relatedTarget && view.dom.contains(event.relatedTarget))
                view.domObserver.currentSelection.clear();
            view.focused = false;
        }
    };
    handlers.beforeinput = (view, _event) => {
        let event = _event;
        // We should probably do more with beforeinput events, but support
        // is so spotty that I'm still waiting to see where they are going.
        // Very specific hack to deal with backspace sometimes failing on
        // Chrome Android when after an uneditable node.
        if (chrome && android && event.inputType == "deleteContentBackward") {
            view.domObserver.flushSoon();
            let { domChangeCount } = view.input;
            setTimeout(() => {
                if (view.input.domChangeCount != domChangeCount)
                    return; // Event already had some effect
                // This bug tends to close the virtual keyboard, so we refocus
                view.dom.blur();
                view.focus();
                if (view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace"))))
                    return;
                let { $cursor } = view.state.selection;
                // Crude approximation of backspace behavior when no command handled it
                if ($cursor && $cursor.pos > 0)
                    view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
            }, 50);
        }
    };
    // Make sure all handlers get registered
    for (let prop in editHandlers)
        handlers[prop] = editHandlers[prop];

    function compareObjs(a, b) {
        if (a == b)
            return true;
        for (let p in a)
            if (a[p] !== b[p])
                return false;
        for (let p in b)
            if (!(p in a))
                return false;
        return true;
    }
    class WidgetType {
        constructor(toDOM, spec) {
            this.toDOM = toDOM;
            this.spec = spec || noSpec;
            this.side = this.spec.side || 0;
        }
        map(mapping, span, offset, oldOffset) {
            let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
            return deleted ? null : new Decoration(pos - offset, pos - offset, this);
        }
        valid() { return true; }
        eq(other) {
            return this == other ||
                (other instanceof WidgetType &&
                    (this.spec.key && this.spec.key == other.spec.key ||
                        this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)));
        }
        destroy(node) {
            if (this.spec.destroy)
                this.spec.destroy(node);
        }
    }
    class InlineType {
        constructor(attrs, spec) {
            this.attrs = attrs;
            this.spec = spec || noSpec;
        }
        map(mapping, span, offset, oldOffset) {
            let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
            let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
            return from >= to ? null : new Decoration(from, to, this);
        }
        valid(_, span) { return span.from < span.to; }
        eq(other) {
            return this == other ||
                (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
                    compareObjs(this.spec, other.spec));
        }
        static is(span) { return span.type instanceof InlineType; }
        destroy() { }
    }
    class NodeType {
        constructor(attrs, spec) {
            this.attrs = attrs;
            this.spec = spec || noSpec;
        }
        map(mapping, span, offset, oldOffset) {
            let from = mapping.mapResult(span.from + oldOffset, 1);
            if (from.deleted)
                return null;
            let to = mapping.mapResult(span.to + oldOffset, -1);
            if (to.deleted || to.pos <= from.pos)
                return null;
            return new Decoration(from.pos - offset, to.pos - offset, this);
        }
        valid(node, span) {
            let { index, offset } = node.content.findIndex(span.from), child;
            return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;
        }
        eq(other) {
            return this == other ||
                (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&
                    compareObjs(this.spec, other.spec));
        }
        destroy() { }
    }
    /**
    Decoration objects can be provided to the view through the
    [`decorations` prop](https://prosemirror.net/docs/ref/#view.EditorProps.decorations). They come in
    several variants—see the static members of this class for details.
    */
    class Decoration {
        /**
        @internal
        */
        constructor(
        /**
        The start position of the decoration.
        */
        from, 
        /**
        The end position. Will be the same as `from` for [widget
        decorations](https://prosemirror.net/docs/ref/#view.Decoration^widget).
        */
        to, 
        /**
        @internal
        */
        type) {
            this.from = from;
            this.to = to;
            this.type = type;
        }
        /**
        @internal
        */
        copy(from, to) {
            return new Decoration(from, to, this.type);
        }
        /**
        @internal
        */
        eq(other, offset = 0) {
            return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
        }
        /**
        @internal
        */
        map(mapping, offset, oldOffset) {
            return this.type.map(mapping, this, offset, oldOffset);
        }
        /**
        Creates a widget decoration, which is a DOM node that's shown in
        the document at the given position. It is recommended that you
        delay rendering the widget by passing a function that will be
        called when the widget is actually drawn in a view, but you can
        also directly pass a DOM node. `getPos` can be used to find the
        widget's current document position.
        */
        static widget(pos, toDOM, spec) {
            return new Decoration(pos, pos, new WidgetType(toDOM, spec));
        }
        /**
        Creates an inline decoration, which adds the given attributes to
        each inline node between `from` and `to`.
        */
        static inline(from, to, attrs, spec) {
            return new Decoration(from, to, new InlineType(attrs, spec));
        }
        /**
        Creates a node decoration. `from` and `to` should point precisely
        before and after a node in the document. That node, and only that
        node, will receive the given attributes.
        */
        static node(from, to, attrs, spec) {
            return new Decoration(from, to, new NodeType(attrs, spec));
        }
        /**
        The spec provided when creating this decoration. Can be useful
        if you've stored extra information in that object.
        */
        get spec() { return this.type.spec; }
        /**
        @internal
        */
        get inline() { return this.type instanceof InlineType; }
        /**
        @internal
        */
        get widget() { return this.type instanceof WidgetType; }
    }
    const none = [], noSpec = {};
    /**
    A collection of [decorations](https://prosemirror.net/docs/ref/#view.Decoration), organized in such
    a way that the drawing algorithm can efficiently use and compare
    them. This is a persistent data structure—it is not modified,
    updates create a new value.
    */
    class DecorationSet {
        /**
        @internal
        */
        constructor(local, children) {
            this.local = local.length ? local : none;
            this.children = children.length ? children : none;
        }
        /**
        Create a set of decorations, using the structure of the given
        document. This will consume (modify) the `decorations` array, so
        you must make a copy if you want need to preserve that.
        */
        static create(doc, decorations) {
            return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty;
        }
        /**
        Find all decorations in this set which touch the given range
        (including decorations that start or end directly at the
        boundaries) and match the given predicate on their spec. When
        `start` and `end` are omitted, all decorations in the set are
        considered. When `predicate` isn't given, all decorations are
        assumed to match.
        */
        find(start, end, predicate) {
            let result = [];
            this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
            return result;
        }
        findInner(start, end, result, offset, predicate) {
            for (let i = 0; i < this.local.length; i++) {
                let span = this.local[i];
                if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
                    result.push(span.copy(span.from + offset, span.to + offset));
            }
            for (let i = 0; i < this.children.length; i += 3) {
                if (this.children[i] < end && this.children[i + 1] > start) {
                    let childOff = this.children[i] + 1;
                    this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
                }
            }
        }
        /**
        Map the set of decorations in response to a change in the
        document.
        */
        map(mapping, doc, options) {
            if (this == empty || mapping.maps.length == 0)
                return this;
            return this.mapInner(mapping, doc, 0, 0, options || noSpec);
        }
        /**
        @internal
        */
        mapInner(mapping, node, offset, oldOffset, options) {
            let newLocal;
            for (let i = 0; i < this.local.length; i++) {
                let mapped = this.local[i].map(mapping, offset, oldOffset);
                if (mapped && mapped.type.valid(node, mapped))
                    (newLocal || (newLocal = [])).push(mapped);
                else if (options.onRemove)
                    options.onRemove(this.local[i].spec);
            }
            if (this.children.length)
                return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);
            else
                return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty;
        }
        /**
        Add the given array of decorations to the ones in the set,
        producing a new set. Consumes the `decorations` array. Needs
        access to the current document to create the appropriate tree
        structure.
        */
        add(doc, decorations) {
            if (!decorations.length)
                return this;
            if (this == empty)
                return DecorationSet.create(doc, decorations);
            return this.addInner(doc, decorations, 0);
        }
        addInner(doc, decorations, offset) {
            let children, childIndex = 0;
            doc.forEach((childNode, childOffset) => {
                let baseOffset = childOffset + offset, found;
                if (!(found = takeSpansForNode(decorations, childNode, baseOffset)))
                    return;
                if (!children)
                    children = this.children.slice();
                while (childIndex < children.length && children[childIndex] < childOffset)
                    childIndex += 3;
                if (children[childIndex] == childOffset)
                    children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);
                else
                    children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));
                childIndex += 3;
            });
            let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
            for (let i = 0; i < local.length; i++)
                if (!local[i].type.valid(doc, local[i]))
                    local.splice(i--, 1);
            return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
        }
        /**
        Create a new set that contains the decorations in this set, minus
        the ones in the given array.
        */
        remove(decorations) {
            if (decorations.length == 0 || this == empty)
                return this;
            return this.removeInner(decorations, 0);
        }
        removeInner(decorations, offset) {
            let children = this.children, local = this.local;
            for (let i = 0; i < children.length; i += 3) {
                let found;
                let from = children[i] + offset, to = children[i + 1] + offset;
                for (let j = 0, span; j < decorations.length; j++)
                    if (span = decorations[j]) {
                        if (span.from > from && span.to < to) {
                            decorations[j] = null;
                            (found || (found = [])).push(span);
                        }
                    }
                if (!found)
                    continue;
                if (children == this.children)
                    children = this.children.slice();
                let removed = children[i + 2].removeInner(found, from + 1);
                if (removed != empty) {
                    children[i + 2] = removed;
                }
                else {
                    children.splice(i, 3);
                    i -= 3;
                }
            }
            if (local.length)
                for (let i = 0, span; i < decorations.length; i++)
                    if (span = decorations[i]) {
                        for (let j = 0; j < local.length; j++)
                            if (local[j].eq(span, offset)) {
                                if (local == this.local)
                                    local = this.local.slice();
                                local.splice(j--, 1);
                            }
                    }
            if (children == this.children && local == this.local)
                return this;
            return local.length || children.length ? new DecorationSet(local, children) : empty;
        }
        forChild(offset, node) {
            if (this == empty)
                return this;
            if (node.isLeaf)
                return DecorationSet.empty;
            let child, local;
            for (let i = 0; i < this.children.length; i += 3)
                if (this.children[i] >= offset) {
                    if (this.children[i] == offset)
                        child = this.children[i + 2];
                    break;
                }
            let start = offset + 1, end = start + node.content.size;
            for (let i = 0; i < this.local.length; i++) {
                let dec = this.local[i];
                if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
                    let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
                    if (from < to)
                        (local || (local = [])).push(dec.copy(from, to));
                }
            }
            if (local) {
                let localSet = new DecorationSet(local.sort(byPos), none);
                return child ? new DecorationGroup([localSet, child]) : localSet;
            }
            return child || empty;
        }
        /**
        @internal
        */
        eq(other) {
            if (this == other)
                return true;
            if (!(other instanceof DecorationSet) ||
                this.local.length != other.local.length ||
                this.children.length != other.children.length)
                return false;
            for (let i = 0; i < this.local.length; i++)
                if (!this.local[i].eq(other.local[i]))
                    return false;
            for (let i = 0; i < this.children.length; i += 3)
                if (this.children[i] != other.children[i] ||
                    this.children[i + 1] != other.children[i + 1] ||
                    !this.children[i + 2].eq(other.children[i + 2]))
                    return false;
            return true;
        }
        /**
        @internal
        */
        locals(node) {
            return removeOverlap(this.localsInner(node));
        }
        /**
        @internal
        */
        localsInner(node) {
            if (this == empty)
                return none;
            if (node.inlineContent || !this.local.some(InlineType.is))
                return this.local;
            let result = [];
            for (let i = 0; i < this.local.length; i++) {
                if (!(this.local[i].type instanceof InlineType))
                    result.push(this.local[i]);
            }
            return result;
        }
    }
    /**
    The empty set of decorations.
    */
    DecorationSet.empty = new DecorationSet([], []);
    /**
    @internal
    */
    DecorationSet.removeOverlap = removeOverlap;
    const empty = DecorationSet.empty;
    // An abstraction that allows the code dealing with decorations to
    // treat multiple DecorationSet objects as if it were a single object
    // with (a subset of) the same interface.
    class DecorationGroup {
        constructor(members) {
            this.members = members;
        }
        map(mapping, doc) {
            const mappedDecos = this.members.map(member => member.map(mapping, doc, noSpec));
            return DecorationGroup.from(mappedDecos);
        }
        forChild(offset, child) {
            if (child.isLeaf)
                return DecorationSet.empty;
            let found = [];
            for (let i = 0; i < this.members.length; i++) {
                let result = this.members[i].forChild(offset, child);
                if (result == empty)
                    continue;
                if (result instanceof DecorationGroup)
                    found = found.concat(result.members);
                else
                    found.push(result);
            }
            return DecorationGroup.from(found);
        }
        eq(other) {
            if (!(other instanceof DecorationGroup) ||
                other.members.length != this.members.length)
                return false;
            for (let i = 0; i < this.members.length; i++)
                if (!this.members[i].eq(other.members[i]))
                    return false;
            return true;
        }
        locals(node) {
            let result, sorted = true;
            for (let i = 0; i < this.members.length; i++) {
                let locals = this.members[i].localsInner(node);
                if (!locals.length)
                    continue;
                if (!result) {
                    result = locals;
                }
                else {
                    if (sorted) {
                        result = result.slice();
                        sorted = false;
                    }
                    for (let j = 0; j < locals.length; j++)
                        result.push(locals[j]);
                }
            }
            return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
        }
        // Create a group for the given array of decoration sets, or return
        // a single set when possible.
        static from(members) {
            switch (members.length) {
                case 0: return empty;
                case 1: return members[0];
                default: return new DecorationGroup(members.every(m => m instanceof DecorationSet) ? members :
                    members.reduce((r, m) => r.concat(m instanceof DecorationSet ? m : m.members), []));
            }
        }
    }
    function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
        let children = oldChildren.slice();
        // Mark the children that are directly touched by changes, and
        // move those that are after the changes.
        for (let i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {
            let moved = 0;
            mapping.maps[i].forEach((oldStart, oldEnd, newStart, newEnd) => {
                let dSize = (newEnd - newStart) - (oldEnd - oldStart);
                for (let i = 0; i < children.length; i += 3) {
                    let end = children[i + 1];
                    if (end < 0 || oldStart > end + baseOffset - moved)
                        continue;
                    let start = children[i] + baseOffset - moved;
                    if (oldEnd >= start) {
                        children[i + 1] = oldStart <= start ? -2 : -1;
                    }
                    else if (oldStart >= baseOffset && dSize) {
                        children[i] += dSize;
                        children[i + 1] += dSize;
                    }
                }
                moved += dSize;
            });
            baseOffset = mapping.maps[i].map(baseOffset, -1);
        }
        // Find the child nodes that still correspond to a single node,
        // recursively call mapInner on them and update their positions.
        let mustRebuild = false;
        for (let i = 0; i < children.length; i += 3)
            if (children[i + 1] < 0) { // Touched nodes
                if (children[i + 1] == -2) {
                    mustRebuild = true;
                    children[i + 1] = -1;
                    continue;
                }
                let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset;
                if (fromLocal < 0 || fromLocal >= node.content.size) {
                    mustRebuild = true;
                    continue;
                }
                // Must read oldChildren because children was tagged with -1
                let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset;
                let { index, offset: childOffset } = node.content.findIndex(fromLocal);
                let childNode = node.maybeChild(index);
                if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
                    let mapped = children[i + 2]
                        .mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options);
                    if (mapped != empty) {
                        children[i] = fromLocal;
                        children[i + 1] = toLocal;
                        children[i + 2] = mapped;
                    }
                    else {
                        children[i + 1] = -2;
                        mustRebuild = true;
                    }
                }
                else {
                    mustRebuild = true;
                }
            }
        // Remaining children must be collected and rebuilt into the appropriate structure
        if (mustRebuild) {
            let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
            let built = buildTree(decorations, node, 0, options);
            newLocal = built.local;
            for (let i = 0; i < children.length; i += 3)
                if (children[i + 1] < 0) {
                    children.splice(i, 3);
                    i -= 3;
                }
            for (let i = 0, j = 0; i < built.children.length; i += 3) {
                let from = built.children[i];
                while (j < children.length && children[j] < from)
                    j += 3;
                children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
            }
        }
        return new DecorationSet(newLocal.sort(byPos), children);
    }
    function moveSpans(spans, offset) {
        if (!offset || !spans.length)
            return spans;
        let result = [];
        for (let i = 0; i < spans.length; i++) {
            let span = spans[i];
            result.push(new Decoration(span.from + offset, span.to + offset, span.type));
        }
        return result;
    }
    function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
        // Gather all decorations from the remaining marked children
        function gather(set, oldOffset) {
            for (let i = 0; i < set.local.length; i++) {
                let mapped = set.local[i].map(mapping, offset, oldOffset);
                if (mapped)
                    decorations.push(mapped);
                else if (options.onRemove)
                    options.onRemove(set.local[i].spec);
            }
            for (let i = 0; i < set.children.length; i += 3)
                gather(set.children[i + 2], set.children[i] + oldOffset + 1);
        }
        for (let i = 0; i < children.length; i += 3)
            if (children[i + 1] == -1)
                gather(children[i + 2], oldChildren[i] + oldOffset + 1);
        return decorations;
    }
    function takeSpansForNode(spans, node, offset) {
        if (node.isLeaf)
            return null;
        let end = offset + node.nodeSize, found = null;
        for (let i = 0, span; i < spans.length; i++) {
            if ((span = spans[i]) && span.from > offset && span.to < end) {
                (found || (found = [])).push(span);
                spans[i] = null;
            }
        }
        return found;
    }
    function withoutNulls(array) {
        let result = [];
        for (let i = 0; i < array.length; i++)
            if (array[i] != null)
                result.push(array[i]);
        return result;
    }
    // Build up a tree that corresponds to a set of decorations. `offset`
    // is a base offset that should be subtracted from the `from` and `to`
    // positions in the spans (so that we don't have to allocate new spans
    // for recursive calls).
    function buildTree(spans, node, offset, options) {
        let children = [], hasNulls = false;
        node.forEach((childNode, localStart) => {
            let found = takeSpansForNode(spans, childNode, localStart + offset);
            if (found) {
                hasNulls = true;
                let subtree = buildTree(found, childNode, offset + localStart + 1, options);
                if (subtree != empty)
                    children.push(localStart, localStart + childNode.nodeSize, subtree);
            }
        });
        let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
        for (let i = 0; i < locals.length; i++)
            if (!locals[i].type.valid(node, locals[i])) {
                if (options.onRemove)
                    options.onRemove(locals[i].spec);
                locals.splice(i--, 1);
            }
        return locals.length || children.length ? new DecorationSet(locals, children) : empty;
    }
    // Used to sort decorations so that ones with a low start position
    // come first, and within a set with the same start position, those
    // with an smaller end position come first.
    function byPos(a, b) {
        return a.from - b.from || a.to - b.to;
    }
    // Scan a sorted array of decorations for partially overlapping spans,
    // and split those so that only fully overlapping spans are left (to
    // make subsequent rendering easier). Will return the input array if
    // no partially overlapping spans are found (the common case).
    function removeOverlap(spans) {
        let working = spans;
        for (let i = 0; i < working.length - 1; i++) {
            let span = working[i];
            if (span.from != span.to)
                for (let j = i + 1; j < working.length; j++) {
                    let next = working[j];
                    if (next.from == span.from) {
                        if (next.to != span.to) {
                            if (working == spans)
                                working = spans.slice();
                            // Followed by a partially overlapping larger span. Split that
                            // span.
                            working[j] = next.copy(next.from, span.to);
                            insertAhead(working, j + 1, next.copy(span.to, next.to));
                        }
                        continue;
                    }
                    else {
                        if (next.from < span.to) {
                            if (working == spans)
                                working = spans.slice();
                            // The end of this one overlaps with a subsequent span. Split
                            // this one.
                            working[i] = span.copy(span.from, next.from);
                            insertAhead(working, j, span.copy(next.from, span.to));
                        }
                        break;
                    }
                }
        }
        return working;
    }
    function insertAhead(array, i, deco) {
        while (i < array.length && byPos(deco, array[i]) > 0)
            i++;
        array.splice(i, 0, deco);
    }
    // Get the decorations associated with the current props of a view.
    function viewDecorations(view) {
        let found = [];
        view.someProp("decorations", f => {
            let result = f(view.state);
            if (result && result != empty)
                found.push(result);
        });
        if (view.cursorWrapper)
            found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
        return DecorationGroup.from(found);
    }

    const observeOptions = {
        childList: true,
        characterData: true,
        characterDataOldValue: true,
        attributes: true,
        attributeOldValue: true,
        subtree: true
    };
    // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
    const useCharData = ie && ie_version <= 11;
    class SelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        set(sel) {
            this.anchorNode = sel.anchorNode;
            this.anchorOffset = sel.anchorOffset;
            this.focusNode = sel.focusNode;
            this.focusOffset = sel.focusOffset;
        }
        clear() {
            this.anchorNode = this.focusNode = null;
        }
        eq(sel) {
            return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&
                sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
        }
    }
    class DOMObserver {
        constructor(view, handleDOMChange) {
            this.view = view;
            this.handleDOMChange = handleDOMChange;
            this.queue = [];
            this.flushingSoon = -1;
            this.observer = null;
            this.currentSelection = new SelectionState;
            this.onCharData = null;
            this.suppressingSelectionUpdates = false;
            this.observer = window.MutationObserver &&
                new window.MutationObserver(mutations => {
                    for (let i = 0; i < mutations.length; i++)
                        this.queue.push(mutations[i]);
                    // IE11 will sometimes (on backspacing out a single character
                    // text node after a BR node) call the observer callback
                    // before actually updating the DOM, which will cause
                    // ProseMirror to miss the change (see #930)
                    if (ie && ie_version <= 11 && mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                        this.flushSoon();
                    else
                        this.flush();
                });
            if (useCharData) {
                this.onCharData = e => {
                    this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
                    this.flushSoon();
                };
            }
            this.onSelectionChange = this.onSelectionChange.bind(this);
        }
        flushSoon() {
            if (this.flushingSoon < 0)
                this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush(); }, 20);
        }
        forceFlush() {
            if (this.flushingSoon > -1) {
                window.clearTimeout(this.flushingSoon);
                this.flushingSoon = -1;
                this.flush();
            }
        }
        start() {
            if (this.observer) {
                this.observer.takeRecords();
                this.observer.observe(this.view.dom, observeOptions);
            }
            if (this.onCharData)
                this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.connectSelection();
        }
        stop() {
            if (this.observer) {
                let take = this.observer.takeRecords();
                if (take.length) {
                    for (let i = 0; i < take.length; i++)
                        this.queue.push(take[i]);
                    window.setTimeout(() => this.flush(), 20);
                }
                this.observer.disconnect();
            }
            if (this.onCharData)
                this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
            this.disconnectSelection();
        }
        connectSelection() {
            this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
        }
        disconnectSelection() {
            this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
        }
        suppressSelectionUpdates() {
            this.suppressingSelectionUpdates = true;
            setTimeout(() => this.suppressingSelectionUpdates = false, 50);
        }
        onSelectionChange() {
            if (!hasFocusAndSelection(this.view))
                return;
            if (this.suppressingSelectionUpdates)
                return selectionToDOM(this.view);
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            if (ie && ie_version <= 11 && !this.view.state.selection.empty) {
                let sel = this.view.domSelectionRange();
                // Selection.isCollapsed isn't reliable on IE
                if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                    return this.flushSoon();
            }
            this.flush();
        }
        setCurSelection() {
            this.currentSelection.set(this.view.domSelectionRange());
        }
        ignoreSelectionChange(sel) {
            if (!sel.focusNode)
                return true;
            let ancestors = new Set, container;
            for (let scan = sel.focusNode; scan; scan = parentNode(scan))
                ancestors.add(scan);
            for (let scan = sel.anchorNode; scan; scan = parentNode(scan))
                if (ancestors.has(scan)) {
                    container = scan;
                    break;
                }
            let desc = container && this.view.docView.nearestDesc(container);
            if (desc && desc.ignoreMutation({
                type: "selection",
                target: container.nodeType == 3 ? container.parentNode : container
            })) {
                this.setCurSelection();
                return true;
            }
        }
        pendingRecords() {
            if (this.observer)
                for (let mut of this.observer.takeRecords())
                    this.queue.push(mut);
            return this.queue;
        }
        flush() {
            let { view } = this;
            if (!view.docView || this.flushingSoon > -1)
                return;
            let mutations = this.pendingRecords();
            if (mutations.length)
                this.queue = [];
            let sel = view.domSelectionRange();
            let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
            let from = -1, to = -1, typeOver = false, added = [];
            if (view.editable) {
                for (let i = 0; i < mutations.length; i++) {
                    let result = this.registerMutation(mutations[i], added);
                    if (result) {
                        from = from < 0 ? result.from : Math.min(result.from, from);
                        to = to < 0 ? result.to : Math.max(result.to, to);
                        if (result.typeOver)
                            typeOver = true;
                    }
                }
            }
            if (gecko && added.length > 1) {
                let brs = added.filter(n => n.nodeName == "BR");
                if (brs.length == 2) {
                    let a = brs[0], b = brs[1];
                    if (a.parentNode && a.parentNode.parentNode == b.parentNode)
                        b.remove();
                    else
                        a.remove();
                }
            }
            let readSel = null;
            // If it looks like the browser has reset the selection to the
            // start of the document after focus, restore the selection from
            // the state
            if (from < 0 && newSel && view.input.lastFocus > Date.now() - 200 &&
                Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 &&
                selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) &&
                readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
                view.input.lastFocus = 0;
                selectionToDOM(view);
                this.currentSelection.set(sel);
                view.scrollToSelection();
            }
            else if (from > -1 || newSel) {
                if (from > -1) {
                    view.docView.markDirty(from, to);
                    checkCSS(view);
                }
                this.handleDOMChange(from, to, typeOver, added);
                if (view.docView && view.docView.dirty)
                    view.updateState(view.state);
                else if (!this.currentSelection.eq(sel))
                    selectionToDOM(view);
                this.currentSelection.set(sel);
            }
        }
        registerMutation(mut, added) {
            // Ignore mutations inside nodes that were already noted as inserted
            if (added.indexOf(mut.target) > -1)
                return null;
            let desc = this.view.docView.nearestDesc(mut.target);
            if (mut.type == "attributes" &&
                (desc == this.view.docView || mut.attributeName == "contenteditable" ||
                    // Firefox sometimes fires spurious events for null/empty styles
                    (mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style"))))
                return null;
            if (!desc || desc.ignoreMutation(mut))
                return null;
            if (mut.type == "childList") {
                for (let i = 0; i < mut.addedNodes.length; i++)
                    added.push(mut.addedNodes[i]);
                if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
                    return { from: desc.posBefore, to: desc.posAfter };
                let prev = mut.previousSibling, next = mut.nextSibling;
                if (ie && ie_version <= 11 && mut.addedNodes.length) {
                    // IE11 gives us incorrect next/prev siblings for some
                    // insertions, so if there are added nodes, recompute those
                    for (let i = 0; i < mut.addedNodes.length; i++) {
                        let { previousSibling, nextSibling } = mut.addedNodes[i];
                        if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
                            prev = previousSibling;
                        if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
                            next = nextSibling;
                    }
                }
                let fromOffset = prev && prev.parentNode == mut.target
                    ? domIndex(prev) + 1 : 0;
                let from = desc.localPosFromDOM(mut.target, fromOffset, -1);
                let toOffset = next && next.parentNode == mut.target
                    ? domIndex(next) : mut.target.childNodes.length;
                let to = desc.localPosFromDOM(mut.target, toOffset, 1);
                return { from, to };
            }
            else if (mut.type == "attributes") {
                return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
            }
            else { // "characterData"
                return {
                    from: desc.posAtStart,
                    to: desc.posAtEnd,
                    // An event was generated for a text change that didn't change
                    // any text. Mark the dom change to fall back to assuming the
                    // selection was typed over with an identical value if it can't
                    // find another change.
                    typeOver: mut.target.nodeValue == mut.oldValue
                };
            }
        }
    }
    let cssChecked = new WeakMap();
    let cssCheckWarned = false;
    function checkCSS(view) {
        if (cssChecked.has(view))
            return;
        cssChecked.set(view, null);
        if (['normal', 'nowrap', 'pre-line'].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
            view.requiresGeckoHackNode = gecko;
            if (cssCheckWarned)
                return;
            console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
            cssCheckWarned = true;
        }
    }
    function rangeToSelectionRange(view, range) {
        let anchorNode = range.startContainer, anchorOffset = range.startOffset;
        let focusNode = range.endContainer, focusOffset = range.endOffset;
        let currentAnchor = view.domAtPos(view.state.selection.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }
    // Used to work around a Safari Selection/shadow DOM bug
    // Based on https://github.com/codemirror/dev/issues/414 fix
    function safariShadowSelectionRange(view, selection) {
        if (selection.getComposedRanges) {
            let range = selection.getComposedRanges(view.root)[0];
            if (range)
                return rangeToSelectionRange(view, range);
        }
        let found;
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        // Because Safari (at least in 2018-2022) doesn't provide regular
        // access to the selection inside a shadowRoot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        view.dom.addEventListener("beforeinput", read, true);
        document.execCommand("indent");
        view.dom.removeEventListener("beforeinput", read, true);
        return found ? rangeToSelectionRange(view, found) : null;
    }

    // Note that all referencing and parsing is done with the
    // start-of-operation selection and document, since that's the one
    // that the DOM represents. If any changes came in in the meantime,
    // the modification is mapped over those before it is applied, in
    // readDOMChange.
    function parseBetween(view, from_, to_) {
        let { node: parent, fromOffset, toOffset, from, to } = view.docView.parseRange(from_, to_);
        let domSel = view.domSelectionRange();
        let find;
        let anchor = domSel.anchorNode;
        if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
            find = [{ node: anchor, offset: domSel.anchorOffset }];
            if (!selectionCollapsed(domSel))
                find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
        }
        // Work around issue in Chrome where backspacing sometimes replaces
        // the deleted content with a random BR node (issues #799, #831)
        if (chrome && view.input.lastKeyCode === 8) {
            for (let off = toOffset; off > fromOffset; off--) {
                let node = parent.childNodes[off - 1], desc = node.pmViewDesc;
                if (node.nodeName == "BR" && !desc) {
                    toOffset = off;
                    break;
                }
                if (!desc || desc.size)
                    break;
            }
        }
        let startDoc = view.state.doc;
        let parser = view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
        let $from = startDoc.resolve(from);
        let sel = null, doc = parser.parse(parent, {
            topNode: $from.parent,
            topMatch: $from.parent.contentMatchAt($from.index()),
            topOpen: true,
            from: fromOffset,
            to: toOffset,
            preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
            findPositions: find,
            ruleFromNode,
            context: $from
        });
        if (find && find[0].pos != null) {
            let anchor = find[0].pos, head = find[1] && find[1].pos;
            if (head == null)
                head = anchor;
            sel = { anchor: anchor + from, head: head + from };
        }
        return { doc, sel, from, to };
    }
    function ruleFromNode(dom) {
        let desc = dom.pmViewDesc;
        if (desc) {
            return desc.parseRule();
        }
        else if (dom.nodeName == "BR" && dom.parentNode) {
            // Safari replaces the list item or table cell with a BR
            // directly in the list node (?!) if you delete the last
            // character in a list item or table cell (#708, #862)
            if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
                let skip = document.createElement("div");
                skip.appendChild(document.createElement("li"));
                return { skip };
            }
            else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
                return { ignore: true };
            }
        }
        else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
            return { ignore: true };
        }
        return null;
    }
    const isInline = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
    function readDOMChange(view, from, to, typeOver, addedNodes) {
        let compositionID = view.input.compositionPendingChanges || (view.composing ? view.input.compositionID : 0);
        view.input.compositionPendingChanges = 0;
        if (from < 0) {
            let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
            let newSel = selectionFromDOM(view, origin);
            if (newSel && !view.state.selection.eq(newSel)) {
                if (chrome && android &&
                    view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime &&
                    view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter"))))
                    return;
                let tr = view.state.tr.setSelection(newSel);
                if (origin == "pointer")
                    tr.setMeta("pointer", true);
                else if (origin == "key")
                    tr.scrollIntoView();
                if (compositionID)
                    tr.setMeta("composition", compositionID);
                view.dispatch(tr);
            }
            return;
        }
        let $before = view.state.doc.resolve(from);
        let shared = $before.sharedDepth(to);
        from = $before.before(shared + 1);
        to = view.state.doc.resolve(to).after(shared + 1);
        let sel = view.state.selection;
        let parse = parseBetween(view, from, to);
        let doc = view.state.doc, compare = doc.slice(parse.from, parse.to);
        let preferredPos, preferredSide;
        // Prefer anchoring to end when Backspace is pressed
        if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
            preferredPos = view.state.selection.to;
            preferredSide = "end";
        }
        else {
            preferredPos = view.state.selection.from;
            preferredSide = "start";
        }
        view.input.lastKeyCode = null;
        let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
        if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) &&
            addedNodes.some(n => n.nodeType == 1 && !isInline.test(n.nodeName)) &&
            (!change || change.endA >= change.endB) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
            view.input.lastIOSEnter = 0;
            return;
        }
        if (!change) {
            if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&
                !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
                change = { start: sel.from, endA: sel.to, endB: sel.to };
            }
            else {
                if (parse.sel) {
                    let sel = resolveSelection(view, view.state.doc, parse.sel);
                    if (sel && !sel.eq(view.state.selection)) {
                        let tr = view.state.tr.setSelection(sel);
                        if (compositionID)
                            tr.setMeta("composition", compositionID);
                        view.dispatch(tr);
                    }
                }
                return;
            }
        }
        view.input.domChangeCount++;
        // Handle the case where overwriting a selection by typing matches
        // the start or end of the selected content, creating a change
        // that's smaller than what was actually overwritten.
        if (view.state.selection.from < view.state.selection.to &&
            change.start == change.endB &&
            view.state.selection instanceof TextSelection) {
            if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 &&
                view.state.selection.from >= parse.from) {
                change.start = view.state.selection.from;
            }
            else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 &&
                view.state.selection.to <= parse.to) {
                change.endB += (view.state.selection.to - change.endA);
                change.endA = view.state.selection.to;
            }
        }
        // IE11 will insert a non-breaking space _ahead_ of the space after
        // the cursor space when adding a space before another space. When
        // that happened, adjust the change to cover the space instead.
        if (ie && ie_version <= 11 && change.endB == change.start + 1 &&
            change.endA == change.start && change.start > parse.from &&
            parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == " \u00a0") {
            change.start--;
            change.endA--;
            change.endB--;
        }
        let $from = parse.doc.resolveNoCache(change.start - parse.from);
        let $to = parse.doc.resolveNoCache(change.endB - parse.from);
        let $fromA = doc.resolve(change.start);
        let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
        let nextSel;
        // If this looks like the effect of pressing Enter (or was recorded
        // as being an iOS enter press), just dispatch an Enter key instead.
        if (((ios && view.input.lastIOSEnter > Date.now() - 225 &&
            (!inlineChange || addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P"))) ||
            (!inlineChange && $from.pos < parse.doc.content.size && !$from.sameParent($to) &&
                (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
                nextSel.head == $to.pos)) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
            view.input.lastIOSEnter = 0;
            return;
        }
        // Same for backspace
        if (view.state.selection.anchor > change.start &&
            looksLikeBackspace(doc, change.start, change.endA, $from, $to) &&
            view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace")))) {
            if (android && chrome)
                view.domObserver.suppressSelectionUpdates(); // #820
            return;
        }
        // Chrome Android will occasionally, during composition, delete the
        // entire composition and then immediately insert it again. This is
        // used to detect that situation.
        if (chrome && android && change.endB == change.start)
            view.input.lastAndroidDelete = Date.now();
        // This tries to detect Android virtual keyboard
        // enter-and-pick-suggestion action. That sometimes (see issue
        // #1059) first fires a DOM mutation, before moving the selection to
        // the newly created block. And then, because ProseMirror cleans up
        // the DOM selection, it gives up moving the selection entirely,
        // leaving the cursor in the wrong place. When that happens, we drop
        // the new paragraph from the initial change, and fire a simulated
        // enter key afterwards.
        if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&
            parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
            change.endB -= 2;
            $to = parse.doc.resolveNoCache(change.endB - parse.from);
            setTimeout(() => {
                view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
            }, 20);
        }
        let chFrom = change.start, chTo = change.endA;
        let tr, storedMarks, markChange;
        if (inlineChange) {
            if ($from.pos == $to.pos) { // Deletion
                // IE11 sometimes weirdly moves the DOM selection around after
                // backspacing out the first element in a textblock
                if (ie && ie_version <= 11 && $from.parentOffset == 0) {
                    view.domObserver.suppressSelectionUpdates();
                    setTimeout(() => selectionToDOM(view), 20);
                }
                tr = view.state.tr.delete(chFrom, chTo);
                storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
            }
            else if ( // Adding or removing a mark
            change.endA == change.endB &&
                (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))) {
                tr = view.state.tr;
                if (markChange.type == "add")
                    tr.addMark(chFrom, chTo, markChange.mark);
                else
                    tr.removeMark(chFrom, chTo, markChange.mark);
            }
            else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
                // Both positions in the same text node -- simply insert text
                let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
                if (view.someProp("handleTextInput", f => f(view, chFrom, chTo, text)))
                    return;
                tr = view.state.tr.insertText(text, chFrom, chTo);
            }
        }
        if (!tr)
            tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
        if (parse.sel) {
            let sel = resolveSelection(view, tr.doc, parse.sel);
            // Chrome Android will sometimes, during composition, report the
            // selection in the wrong place. If it looks like that is
            // happening, don't update the selection.
            // Edge just doesn't move the cursor forward when you start typing
            // in an empty block or between br nodes.
            if (sel && !(chrome && android && view.composing && sel.empty &&
                (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) &&
                (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||
                ie && sel.empty && sel.head == chFrom))
                tr.setSelection(sel);
        }
        if (storedMarks)
            tr.ensureMarks(storedMarks);
        if (compositionID)
            tr.setMeta("composition", compositionID);
        view.dispatch(tr.scrollIntoView());
    }
    function resolveSelection(view, doc, parsedSel) {
        if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size)
            return null;
        return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head));
    }
    // Given two same-length, non-empty fragments of inline content,
    // determine whether the first could be created from the second by
    // removing or adding a single mark type.
    function isMarkChange(cur, prev) {
        let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
        let added = curMarks, removed = prevMarks, type, mark, update;
        for (let i = 0; i < prevMarks.length; i++)
            added = prevMarks[i].removeFromSet(added);
        for (let i = 0; i < curMarks.length; i++)
            removed = curMarks[i].removeFromSet(removed);
        if (added.length == 1 && removed.length == 0) {
            mark = added[0];
            type = "add";
            update = (node) => node.mark(mark.addToSet(node.marks));
        }
        else if (added.length == 0 && removed.length == 1) {
            mark = removed[0];
            type = "remove";
            update = (node) => node.mark(mark.removeFromSet(node.marks));
        }
        else {
            return null;
        }
        let updated = [];
        for (let i = 0; i < prev.childCount; i++)
            updated.push(update(prev.child(i)));
        if (Fragment.from(updated).eq(cur))
            return { mark, type };
    }
    function looksLikeBackspace(old, start, end, $newStart, $newEnd) {
        if ( // The content must have shrunk
        end - start <= $newEnd.pos - $newStart.pos ||
            // newEnd must point directly at or after the end of the block that newStart points into
            skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
            return false;
        let $start = old.resolve(start);
        // Handle the case where, rather than joining blocks, the change just removed an entire block
        if (!$newStart.parent.isTextblock) {
            let after = $start.nodeAfter;
            return after != null && end == start + after.nodeSize;
        }
        // Start must be at the end of a block
        if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
            return false;
        let $next = old.resolve(skipClosingAndOpening($start, true, true));
        // The next textblock must start before end and end near it
        if (!$next.parent.isTextblock || $next.pos > end ||
            skipClosingAndOpening($next, true, false) < end)
            return false;
        // The fragments after the join point must match
        return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
    }
    function skipClosingAndOpening($pos, fromEnd, mayOpen) {
        let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
        while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
            depth--;
            end++;
            fromEnd = false;
        }
        if (mayOpen) {
            let next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
            while (next && !next.isLeaf) {
                next = next.firstChild;
                end++;
            }
        }
        return end;
    }
    function findDiff(a, b, pos, preferredPos, preferredSide) {
        let start = a.findDiffStart(b, pos);
        if (start == null)
            return null;
        let { a: endA, b: endB } = a.findDiffEnd(b, pos + a.size, pos + b.size);
        if (preferredSide == "end") {
            let adjust = Math.max(0, start - Math.min(endA, endB));
            preferredPos -= endA + adjust - start;
        }
        if (endA < start && a.size < b.size) {
            let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
            start -= move;
            if (start && start < b.size && isSurrogatePair(b.textBetween(start - 1, start + 1)))
                start += move ? 1 : -1;
            endB = start + (endB - endA);
            endA = start;
        }
        else if (endB < start) {
            let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
            start -= move;
            if (start && start < a.size && isSurrogatePair(a.textBetween(start - 1, start + 1)))
                start += move ? 1 : -1;
            endA = start + (endA - endB);
            endB = start;
        }
        return { start, endA, endB };
    }
    function isSurrogatePair(str) {
        if (str.length != 2)
            return false;
        let a = str.charCodeAt(0), b = str.charCodeAt(1);
        return a >= 0xDC00 && a <= 0xDFFF && b >= 0xD800 && b <= 0xDBFF;
    }
    /**
    An editor view manages the DOM structure that represents an
    editable document. Its state and behavior are determined by its
    [props](https://prosemirror.net/docs/ref/#view.DirectEditorProps).
    */
    class EditorView {
        /**
        Create a view. `place` may be a DOM node that the editor should
        be appended to, a function that will place it into the document,
        or an object whose `mount` property holds the node to use as the
        document container. If it is `null`, the editor will not be
        added to the document.
        */
        constructor(place, props) {
            this._root = null;
            /**
            @internal
            */
            this.focused = false;
            /**
            Kludge used to work around a Chrome bug @internal
            */
            this.trackWrites = null;
            this.mounted = false;
            /**
            @internal
            */
            this.markCursor = null;
            /**
            @internal
            */
            this.cursorWrapper = null;
            /**
            @internal
            */
            this.lastSelectedViewDesc = undefined;
            /**
            @internal
            */
            this.input = new InputState;
            this.prevDirectPlugins = [];
            this.pluginViews = [];
            /**
            Holds `true` when a hack node is needed in Firefox to prevent the
            [space is eaten issue](https://github.com/ProseMirror/prosemirror/issues/651)
            @internal
            */
            this.requiresGeckoHackNode = false;
            /**
            When editor content is being dragged, this object contains
            information about the dragged slice and whether it is being
            copied or moved. At any other time, it is null.
            */
            this.dragging = null;
            this._props = props;
            this.state = props.state;
            this.directPlugins = props.plugins || [];
            this.directPlugins.forEach(checkStateComponent);
            this.dispatch = this.dispatch.bind(this);
            this.dom = (place && place.mount) || document.createElement("div");
            if (place) {
                if (place.appendChild)
                    place.appendChild(this.dom);
                else if (typeof place == "function")
                    place(this.dom);
                else if (place.mount)
                    this.mounted = true;
            }
            this.editable = getEditable(this);
            updateCursorWrapper(this);
            this.nodeViews = buildNodeViews(this);
            this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
            this.domObserver = new DOMObserver(this, (from, to, typeOver, added) => readDOMChange(this, from, to, typeOver, added));
            this.domObserver.start();
            initInput(this);
            this.updatePluginViews();
        }
        /**
        Holds `true` when a
        [composition](https://w3c.github.io/uievents/#events-compositionevents)
        is active.
        */
        get composing() { return this.input.composing; }
        /**
        The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
        */
        get props() {
            if (this._props.state != this.state) {
                let prev = this._props;
                this._props = {};
                for (let name in prev)
                    this._props[name] = prev[name];
                this._props.state = this.state;
            }
            return this._props;
        }
        /**
        Update the view's props. Will immediately cause an update to
        the DOM.
        */
        update(props) {
            if (props.handleDOMEvents != this._props.handleDOMEvents)
                ensureListeners(this);
            let prevProps = this._props;
            this._props = props;
            if (props.plugins) {
                props.plugins.forEach(checkStateComponent);
                this.directPlugins = props.plugins;
            }
            this.updateStateInner(props.state, prevProps);
        }
        /**
        Update the view by updating existing props object with the object
        given as argument. Equivalent to `view.update(Object.assign({},
        view.props, props))`.
        */
        setProps(props) {
            let updated = {};
            for (let name in this._props)
                updated[name] = this._props[name];
            updated.state = this.state;
            for (let name in props)
                updated[name] = props[name];
            this.update(updated);
        }
        /**
        Update the editor's `state` prop, without touching any of the
        other props.
        */
        updateState(state) {
            this.updateStateInner(state, this._props);
        }
        updateStateInner(state, prevProps) {
            var _a;
            let prev = this.state, redraw = false, updateSel = false;
            // When stored marks are added, stop composition, so that they can
            // be displayed.
            if (state.storedMarks && this.composing) {
                clearComposition(this);
                updateSel = true;
            }
            this.state = state;
            let pluginsChanged = prev.plugins != state.plugins || this._props.plugins != prevProps.plugins;
            if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
                let nodeViews = buildNodeViews(this);
                if (changedNodeViews(nodeViews, this.nodeViews)) {
                    this.nodeViews = nodeViews;
                    redraw = true;
                }
            }
            if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
                ensureListeners(this);
            }
            this.editable = getEditable(this);
            updateCursorWrapper(this);
            let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
            let scroll = prev.plugins != state.plugins && !prev.doc.eq(state.doc) ? "reset"
                : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
            let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
            if (updateDoc || !state.selection.eq(prev.selection))
                updateSel = true;
            let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
            if (updateSel) {
                this.domObserver.stop();
                // Work around an issue in Chrome, IE, and Edge where changing
                // the DOM around an active selection puts it into a broken
                // state where the thing the user sees differs from the
                // selection reported by the Selection object (#710, #973,
                // #1011, #1013, #1035).
                let forceSelUpdate = updateDoc && (ie || chrome) && !this.composing &&
                    !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
                if (updateDoc) {
                    // If the node that the selection points into is written to,
                    // Chrome sometimes starts misreporting the selection, so this
                    // tracks that and forces a selection reset when our update
                    // did write to the node.
                    let chromeKludge = chrome ? (this.trackWrites = this.domSelectionRange().focusNode) : null;
                    if (this.composing)
                        this.input.compositionNode = findCompositionNode(this);
                    if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
                        this.docView.updateOuterDeco(outerDeco);
                        this.docView.destroy();
                        this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
                    }
                    if (chromeKludge && !this.trackWrites)
                        forceSelUpdate = true;
                }
                // Work around for an issue where an update arriving right between
                // a DOM selection change and the "selectionchange" event for it
                // can cause a spurious DOM selection update, disrupting mouse
                // drag selection.
                if (forceSelUpdate ||
                    !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) &&
                        anchorInRightPlace(this))) {
                    selectionToDOM(this, forceSelUpdate);
                }
                else {
                    syncNodeSelection(this, state.selection);
                    this.domObserver.setCurSelection();
                }
                this.domObserver.start();
            }
            this.updatePluginViews(prev);
            if (((_a = this.dragging) === null || _a === void 0 ? void 0 : _a.node) && !prev.doc.eq(state.doc))
                this.updateDraggedNode(this.dragging, prev);
            if (scroll == "reset") {
                this.dom.scrollTop = 0;
            }
            else if (scroll == "to selection") {
                this.scrollToSelection();
            }
            else if (oldScrollPos) {
                resetScrollPos(oldScrollPos);
            }
        }
        /**
        @internal
        */
        scrollToSelection() {
            let startDOM = this.domSelectionRange().focusNode;
            if (this.someProp("handleScrollToSelection", f => f(this))) ;
            else if (this.state.selection instanceof NodeSelection) {
                let target = this.docView.domAfterPos(this.state.selection.from);
                if (target.nodeType == 1)
                    scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
            }
            else {
                scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
            }
        }
        destroyPluginViews() {
            let view;
            while (view = this.pluginViews.pop())
                if (view.destroy)
                    view.destroy();
        }
        updatePluginViews(prevState) {
            if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
                this.prevDirectPlugins = this.directPlugins;
                this.destroyPluginViews();
                for (let i = 0; i < this.directPlugins.length; i++) {
                    let plugin = this.directPlugins[i];
                    if (plugin.spec.view)
                        this.pluginViews.push(plugin.spec.view(this));
                }
                for (let i = 0; i < this.state.plugins.length; i++) {
                    let plugin = this.state.plugins[i];
                    if (plugin.spec.view)
                        this.pluginViews.push(plugin.spec.view(this));
                }
            }
            else {
                for (let i = 0; i < this.pluginViews.length; i++) {
                    let pluginView = this.pluginViews[i];
                    if (pluginView.update)
                        pluginView.update(this, prevState);
                }
            }
        }
        updateDraggedNode(dragging, prev) {
            let sel = dragging.node, found = -1;
            if (this.state.doc.nodeAt(sel.from) == sel.node) {
                found = sel.from;
            }
            else {
                let movedPos = sel.from + (this.state.doc.content.size - prev.doc.content.size);
                let moved = movedPos > 0 && this.state.doc.nodeAt(movedPos);
                if (moved == sel.node)
                    found = movedPos;
            }
            this.dragging = new Dragging(dragging.slice, dragging.move, found < 0 ? undefined : NodeSelection.create(this.state.doc, found));
        }
        someProp(propName, f) {
            let prop = this._props && this._props[propName], value;
            if (prop != null && (value = f ? f(prop) : prop))
                return value;
            for (let i = 0; i < this.directPlugins.length; i++) {
                let prop = this.directPlugins[i].props[propName];
                if (prop != null && (value = f ? f(prop) : prop))
                    return value;
            }
            let plugins = this.state.plugins;
            if (plugins)
                for (let i = 0; i < plugins.length; i++) {
                    let prop = plugins[i].props[propName];
                    if (prop != null && (value = f ? f(prop) : prop))
                        return value;
                }
        }
        /**
        Query whether the view has focus.
        */
        hasFocus() {
            // Work around IE not handling focus correctly if resize handles are shown.
            // If the cursor is inside an element with resize handles, activeElement
            // will be that element instead of this.dom.
            if (ie) {
                // If activeElement is within this.dom, and there are no other elements
                // setting `contenteditable` to false in between, treat it as focused.
                let node = this.root.activeElement;
                if (node == this.dom)
                    return true;
                if (!node || !this.dom.contains(node))
                    return false;
                while (node && this.dom != node && this.dom.contains(node)) {
                    if (node.contentEditable == 'false')
                        return false;
                    node = node.parentElement;
                }
                return true;
            }
            return this.root.activeElement == this.dom;
        }
        /**
        Focus the editor.
        */
        focus() {
            this.domObserver.stop();
            if (this.editable)
                focusPreventScroll(this.dom);
            selectionToDOM(this);
            this.domObserver.start();
        }
        /**
        Get the document root in which the editor exists. This will
        usually be the top-level `document`, but might be a [shadow
        DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
        root if the editor is inside one.
        */
        get root() {
            let cached = this._root;
            if (cached == null)
                for (let search = this.dom.parentNode; search; search = search.parentNode) {
                    if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
                        if (!search.getSelection)
                            Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
                        return this._root = search;
                    }
                }
            return cached || document;
        }
        /**
        When an existing editor view is moved to a new document or
        shadow tree, call this to make it recompute its root.
        */
        updateRoot() {
            this._root = null;
        }
        /**
        Given a pair of viewport coordinates, return the document
        position that corresponds to them. May return null if the given
        coordinates aren't inside of the editor. When an object is
        returned, its `pos` property is the position nearest to the
        coordinates, and its `inside` property holds the position of the
        inner node that the position falls inside of, or -1 if it is at
        the top level, not in any node.
        */
        posAtCoords(coords) {
            return posAtCoords(this, coords);
        }
        /**
        Returns the viewport rectangle at a given document position.
        `left` and `right` will be the same number, as this returns a
        flat cursor-ish rectangle. If the position is between two things
        that aren't directly adjacent, `side` determines which element
        is used. When < 0, the element before the position is used,
        otherwise the element after.
        */
        coordsAtPos(pos, side = 1) {
            return coordsAtPos(this, pos, side);
        }
        /**
        Find the DOM position that corresponds to the given document
        position. When `side` is negative, find the position as close as
        possible to the content before the position. When positive,
        prefer positions close to the content after the position. When
        zero, prefer as shallow a position as possible.
        
        Note that you should **not** mutate the editor's internal DOM,
        only inspect it (and even that is usually not necessary).
        */
        domAtPos(pos, side = 0) {
            return this.docView.domFromPos(pos, side);
        }
        /**
        Find the DOM node that represents the document node after the
        given position. May return `null` when the position doesn't point
        in front of a node or if the node is inside an opaque node view.
        
        This is intended to be able to call things like
        `getBoundingClientRect` on that DOM node. Do **not** mutate the
        editor DOM directly, or add styling this way, since that will be
        immediately overriden by the editor as it redraws the node.
        */
        nodeDOM(pos) {
            let desc = this.docView.descAt(pos);
            return desc ? desc.nodeDOM : null;
        }
        /**
        Find the document position that corresponds to a given DOM
        position. (Whenever possible, it is preferable to inspect the
        document structure directly, rather than poking around in the
        DOM, but sometimes—for example when interpreting an event
        target—you don't have a choice.)
        
        The `bias` parameter can be used to influence which side of a DOM
        node to use when the position is inside a leaf node.
        */
        posAtDOM(node, offset, bias = -1) {
            let pos = this.docView.posFromDOM(node, offset, bias);
            if (pos == null)
                throw new RangeError("DOM position not inside the editor");
            return pos;
        }
        /**
        Find out whether the selection is at the end of a textblock when
        moving in a given direction. When, for example, given `"left"`,
        it will return true if moving left from the current cursor
        position would leave that position's parent textblock. Will apply
        to the view's current state by default, but it is possible to
        pass a different state.
        */
        endOfTextblock(dir, state) {
            return endOfTextblock(this, state || this.state, dir);
        }
        /**
        Run the editor's paste logic with the given HTML string. The
        `event`, if given, will be passed to the
        [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
        */
        pasteHTML(html, event) {
            return doPaste(this, "", html, false, event || new ClipboardEvent("paste"));
        }
        /**
        Run the editor's paste logic with the given plain-text input.
        */
        pasteText(text, event) {
            return doPaste(this, text, null, true, event || new ClipboardEvent("paste"));
        }
        /**
        Removes the editor from the DOM and destroys all [node
        views](https://prosemirror.net/docs/ref/#view.NodeView).
        */
        destroy() {
            if (!this.docView)
                return;
            destroyInput(this);
            this.destroyPluginViews();
            if (this.mounted) {
                this.docView.update(this.state.doc, [], viewDecorations(this), this);
                this.dom.textContent = "";
            }
            else if (this.dom.parentNode) {
                this.dom.parentNode.removeChild(this.dom);
            }
            this.docView.destroy();
            this.docView = null;
            clearReusedRange();
        }
        /**
        This is true when the view has been
        [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
        used anymore).
        */
        get isDestroyed() {
            return this.docView == null;
        }
        /**
        Used for testing.
        */
        dispatchEvent(event) {
            return dispatchEvent(this, event);
        }
        /**
        Dispatch a transaction. Will call
        [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
        when given, and otherwise defaults to applying the transaction to
        the current state and calling
        [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
        This method is bound to the view instance, so that it can be
        easily passed around.
        */
        dispatch(tr) {
            let dispatchTransaction = this._props.dispatchTransaction;
            if (dispatchTransaction)
                dispatchTransaction.call(this, tr);
            else
                this.updateState(this.state.apply(tr));
        }
        /**
        @internal
        */
        domSelectionRange() {
            let sel = this.domSelection();
            return safari && this.root.nodeType === 11 &&
                deepActiveElement(this.dom.ownerDocument) == this.dom && safariShadowSelectionRange(this, sel) || sel;
        }
        /**
        @internal
        */
        domSelection() {
            return this.root.getSelection();
        }
    }
    function computeDocDeco(view) {
        let attrs = Object.create(null);
        attrs.class = "ProseMirror";
        attrs.contenteditable = String(view.editable);
        view.someProp("attributes", value => {
            if (typeof value == "function")
                value = value(view.state);
            if (value)
                for (let attr in value) {
                    if (attr == "class")
                        attrs.class += " " + value[attr];
                    else if (attr == "style")
                        attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
                    else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
                        attrs[attr] = String(value[attr]);
                }
        });
        if (!attrs.translate)
            attrs.translate = "no";
        return [Decoration.node(0, view.state.doc.content.size, attrs)];
    }
    function updateCursorWrapper(view) {
        if (view.markCursor) {
            let dom = document.createElement("img");
            dom.className = "ProseMirror-separator";
            dom.setAttribute("mark-placeholder", "true");
            dom.setAttribute("alt", "");
            view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
        }
        else {
            view.cursorWrapper = null;
        }
    }
    function getEditable(view) {
        return !view.someProp("editable", value => value(view.state) === false);
    }
    function selectionContextChanged(sel1, sel2) {
        let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
        return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
    }
    function buildNodeViews(view) {
        let result = Object.create(null);
        function add(obj) {
            for (let prop in obj)
                if (!Object.prototype.hasOwnProperty.call(result, prop))
                    result[prop] = obj[prop];
        }
        view.someProp("nodeViews", add);
        view.someProp("markViews", add);
        return result;
    }
    function changedNodeViews(a, b) {
        let nA = 0, nB = 0;
        for (let prop in a) {
            if (a[prop] != b[prop])
                return true;
            nA++;
        }
        for (let _ in b)
            nB++;
        return nA != nB;
    }
    function checkStateComponent(plugin) {
        if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
            throw new RangeError("Plugins passed directly to the view must not have a state component");
    }

    const pDOM = ["p", 0], blockquoteDOM = ["blockquote", 0], hrDOM = ["hr"], preDOM = ["pre", ["code", 0]], brDOM = ["br"];
    /**
    [Specs](https://prosemirror.net/docs/ref/#model.NodeSpec) for the nodes defined in this schema.
    */
    const nodes = {
        /**
        NodeSpec The top level document node.
        */
        doc: {
            content: "block+"
        },
        /**
        A plain paragraph textblock. Represented in the DOM
        as a `<p>` element.
        */
        paragraph: {
            content: "inline*",
            group: "block",
            parseDOM: [{ tag: "p" }],
            toDOM() { return pDOM; }
        },
        /**
        A blockquote (`<blockquote>`) wrapping one or more blocks.
        */
        blockquote: {
            content: "block+",
            group: "block",
            defining: true,
            parseDOM: [{ tag: "blockquote" }],
            toDOM() { return blockquoteDOM; }
        },
        /**
        A horizontal rule (`<hr>`).
        */
        horizontal_rule: {
            group: "block",
            parseDOM: [{ tag: "hr" }],
            toDOM() { return hrDOM; }
        },
        /**
        A heading textblock, with a `level` attribute that
        should hold the number 1 to 6. Parsed and serialized as `<h1>` to
        `<h6>` elements.
        */
        heading: {
            attrs: { level: { default: 1 } },
            content: "inline*",
            group: "block",
            defining: true,
            parseDOM: [{ tag: "h1", attrs: { level: 1 } },
                { tag: "h2", attrs: { level: 2 } },
                { tag: "h3", attrs: { level: 3 } },
                { tag: "h4", attrs: { level: 4 } },
                { tag: "h5", attrs: { level: 5 } },
                { tag: "h6", attrs: { level: 6 } }],
            toDOM(node) { return ["h" + node.attrs.level, 0]; }
        },
        /**
        A code listing. Disallows marks or non-text inline
        nodes by default. Represented as a `<pre>` element with a
        `<code>` element inside of it.
        */
        code_block: {
            content: "text*",
            marks: "",
            group: "block",
            code: true,
            defining: true,
            parseDOM: [{ tag: "pre", preserveWhitespace: "full" }],
            toDOM() { return preDOM; }
        },
        /**
        The text node.
        */
        text: {
            group: "inline"
        },
        /**
        An inline image (`<img>`) node. Supports `src`,
        `alt`, and `href` attributes. The latter two default to the empty
        string.
        */
        image: {
            inline: true,
            attrs: {
                src: {},
                alt: { default: null },
                title: { default: null }
            },
            group: "inline",
            draggable: true,
            parseDOM: [{ tag: "img[src]", getAttrs(dom) {
                        return {
                            src: dom.getAttribute("src"),
                            title: dom.getAttribute("title"),
                            alt: dom.getAttribute("alt")
                        };
                    } }],
            toDOM(node) { let { src, alt, title } = node.attrs; return ["img", { src, alt, title }]; }
        },
        /**
        A hard line break, represented in the DOM as `<br>`.
        */
        hard_break: {
            inline: true,
            group: "inline",
            selectable: false,
            parseDOM: [{ tag: "br" }],
            toDOM() { return brDOM; }
        }
    };
    const emDOM = ["em", 0], strongDOM = ["strong", 0], codeDOM = ["code", 0];
    /**
    [Specs](https://prosemirror.net/docs/ref/#model.MarkSpec) for the marks in the schema.
    */
    const marks = {
        /**
        A link. Has `href` and `title` attributes. `title`
        defaults to the empty string. Rendered and parsed as an `<a>`
        element.
        */
        link: {
            attrs: {
                href: {},
                title: { default: null }
            },
            inclusive: false,
            parseDOM: [{ tag: "a[href]", getAttrs(dom) {
                        return { href: dom.getAttribute("href"), title: dom.getAttribute("title") };
                    } }],
            toDOM(node) { let { href, title } = node.attrs; return ["a", { href, title }, 0]; }
        },
        /**
        An emphasis mark. Rendered as an `<em>` element. Has parse rules
        that also match `<i>` and `font-style: italic`.
        */
        em: {
            parseDOM: [
                { tag: "i" }, { tag: "em" },
                { style: "font-style=italic" },
                { style: "font-style=normal", clearMark: m => m.type.name == "em" }
            ],
            toDOM() { return emDOM; }
        },
        /**
        A strong mark. Rendered as `<strong>`, parse rules also match
        `<b>` and `font-weight: bold`.
        */
        strong: {
            parseDOM: [
                { tag: "strong" },
                // This works around a Google Docs misbehavior where
                // pasted content will be inexplicably wrapped in `<b>`
                // tags with a font-weight normal.
                { tag: "b", getAttrs: (node) => node.style.fontWeight != "normal" && null },
                { style: "font-weight=400", clearMark: m => m.type.name == "strong" },
                { style: "font-weight", getAttrs: (value) => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null },
            ],
            toDOM() { return strongDOM; }
        },
        /**
        Code font mark. Represented as a `<code>` element.
        */
        code: {
            parseDOM: [{ tag: "code" }],
            toDOM() { return codeDOM; }
        }
    };
    /**
    This schema roughly corresponds to the document schema used by
    [CommonMark](http://commonmark.org/), minus the list elements,
    which are defined in the [`prosemirror-schema-list`](https://prosemirror.net/docs/ref/#schema-list)
    module.

    To reuse elements from this schema, extend or read from its
    `spec.nodes` and `spec.marks` [properties](https://prosemirror.net/docs/ref/#model.Schema.spec).
    */
    const schema = new Schema({ nodes, marks });

    const olDOM = ["ol", 0], ulDOM = ["ul", 0], liDOM = ["li", 0];
    /**
    An ordered list [node spec](https://prosemirror.net/docs/ref/#model.NodeSpec). Has a single
    attribute, `order`, which determines the number at which the list
    starts counting, and defaults to 1. Represented as an `<ol>`
    element.
    */
    const orderedList = {
        attrs: { order: { default: 1 } },
        parseDOM: [{ tag: "ol", getAttrs(dom) {
                    return { order: dom.hasAttribute("start") ? +dom.getAttribute("start") : 1 };
                } }],
        toDOM(node) {
            return node.attrs.order == 1 ? olDOM : ["ol", { start: node.attrs.order }, 0];
        }
    };
    /**
    A bullet list node spec, represented in the DOM as `<ul>`.
    */
    const bulletList = {
        parseDOM: [{ tag: "ul" }],
        toDOM() { return ulDOM; }
    };
    /**
    A list item (`<li>`) spec.
    */
    const listItem = {
        parseDOM: [{ tag: "li" }],
        toDOM() { return liDOM; },
        defining: true
    };
    function add$1(obj, props) {
        let copy = {};
        for (let prop in obj)
            copy[prop] = obj[prop];
        for (let prop in props)
            copy[prop] = props[prop];
        return copy;
    }
    /**
    Convenience function for adding list-related node types to a map
    specifying the nodes for a schema. Adds
    [`orderedList`](https://prosemirror.net/docs/ref/#schema-list.orderedList) as `"ordered_list"`,
    [`bulletList`](https://prosemirror.net/docs/ref/#schema-list.bulletList) as `"bullet_list"`, and
    [`listItem`](https://prosemirror.net/docs/ref/#schema-list.listItem) as `"list_item"`.

    `itemContent` determines the content expression for the list items.
    If you want the commands defined in this module to apply to your
    list structure, it should have a shape like `"paragraph block*"` or
    `"paragraph (ordered_list | bullet_list)*"`. `listGroup` can be
    given to assign a group name to the list node types, for example
    `"block"`.
    */
    function addListNodes(nodes, itemContent, listGroup) {
        return nodes.append({
            ordered_list: add$1(orderedList, { content: "list_item+", group: listGroup }),
            bullet_list: add$1(bulletList, { content: "list_item+", group: listGroup }),
            list_item: add$1(listItem, { content: itemContent })
        });
    }
    /**
    Returns a command function that wraps the selection in a list with
    the given type an attributes. If `dispatch` is null, only return a
    value to indicate whether this is possible, but don't actually
    perform the change.
    */
    function wrapInList(listType, attrs = null) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to), doJoin = false, outerRange = range;
            if (!range)
                return false;
            // This is at the top of an existing list item
            if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
                // Don't do anything if this is the top of the list
                if ($from.index(range.depth - 1) == 0)
                    return false;
                let $insert = state.doc.resolve(range.start - 2);
                outerRange = new NodeRange($insert, $insert, range.depth);
                if (range.endIndex < range.parent.childCount)
                    range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
                doJoin = true;
            }
            let wrap = findWrapping(outerRange, listType, attrs, range);
            if (!wrap)
                return false;
            if (dispatch)
                dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView());
            return true;
        };
    }
    function doWrapInList(tr, range, wrappers, joinBefore, listType) {
        let content = Fragment.empty;
        for (let i = wrappers.length - 1; i >= 0; i--)
            content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
        tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));
        let found = 0;
        for (let i = 0; i < wrappers.length; i++)
            if (wrappers[i].type == listType)
                found = i + 1;
        let splitDepth = wrappers.length - found;
        let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;
        for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {
            if (!first && canSplit(tr.doc, splitPos, splitDepth)) {
                tr.split(splitPos, splitDepth);
                splitPos += 2 * splitDepth;
            }
            splitPos += parent.child(i).nodeSize;
        }
        return tr;
    }
    /**
    Build a command that splits a non-empty textblock at the top level
    of a list item by also splitting that list item.
    */
    function splitListItem(itemType, itemAttrs) {
        return function (state, dispatch) {
            let { $from, $to, node } = state.selection;
            if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to))
                return false;
            let grandParent = $from.node(-1);
            if (grandParent.type != itemType)
                return false;
            if ($from.parent.content.size == 0 && $from.node(-1).childCount == $from.indexAfter(-1)) {
                // In an empty block. If this is a nested list, the wrapping
                // list item should be split. Otherwise, bail out and let next
                // command handle lifting.
                if ($from.depth == 3 || $from.node(-3).type != itemType ||
                    $from.index(-2) != $from.node(-2).childCount - 1)
                    return false;
                if (dispatch) {
                    let wrap = Fragment.empty;
                    let depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
                    // Build a fragment containing empty versions of the structure
                    // from the outer list item to the parent node of the cursor
                    for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d--)
                        wrap = Fragment.from($from.node(d).copy(wrap));
                    let depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1
                        : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
                    // Add a second list item with an empty default start node
                    wrap = wrap.append(Fragment.from(itemType.createAndFill()));
                    let start = $from.before($from.depth - (depthBefore - 1));
                    let tr = state.tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));
                    let sel = -1;
                    tr.doc.nodesBetween(start, tr.doc.content.size, (node, pos) => {
                        if (sel > -1)
                            return false;
                        if (node.isTextblock && node.content.size == 0)
                            sel = pos + 1;
                    });
                    if (sel > -1)
                        tr.setSelection(Selection.near(tr.doc.resolve(sel)));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
            let nextType = $to.pos == $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
            let tr = state.tr.delete($from.pos, $to.pos);
            let types = nextType ? [itemAttrs ? { type: itemType, attrs: itemAttrs } : null, { type: nextType }] : undefined;
            if (!canSplit(tr.doc, $from.pos, 2, types))
                return false;
            if (dispatch)
                dispatch(tr.split($from.pos, 2, types).scrollIntoView());
            return true;
        };
    }
    /**
    Create a command to lift the list item around the selection up into
    a wrapping list.
    */
    function liftListItem(itemType) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
            if (!range)
                return false;
            if (!dispatch)
                return true;
            if ($from.node(range.depth - 1).type == itemType) // Inside a parent list
                return liftToOuterList(state, dispatch, itemType, range);
            else // Outer list node
                return liftOutOfList(state, dispatch, range);
        };
    }
    function liftToOuterList(state, dispatch, itemType, range) {
        let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);
        if (end < endOfList) {
            // There are siblings after the lifted items, which must become
            // children of the last item
            tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
            range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
        }
        const target = liftTarget(range);
        if (target == null)
            return false;
        tr.lift(range, target);
        let after = tr.mapping.map(end, -1) - 1;
        if (canJoin(tr.doc, after))
            tr.join(after);
        dispatch(tr.scrollIntoView());
        return true;
    }
    function liftOutOfList(state, dispatch, range) {
        let tr = state.tr, list = range.parent;
        // Merge the list items into a single big item
        for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {
            pos -= list.child(i).nodeSize;
            tr.delete(pos - 1, pos + 1);
        }
        let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;
        if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
            return false;
        let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;
        let parent = $start.node(-1), indexBefore = $start.index(-1);
        if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))
            return false;
        let start = $start.pos, end = start + item.nodeSize;
        // Strip off the surrounding list. At the sides where we're not at
        // the end of the list, the existing list is closed. At sides where
        // this is the end, it is overwritten to its end.
        tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))
            .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
        dispatch(tr.scrollIntoView());
        return true;
    }
    /**
    Create a command to sink the list item around the selection down
    into an inner list.
    */
    function sinkListItem(itemType) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
            if (!range)
                return false;
            let startIndex = range.startIndex;
            if (startIndex == 0)
                return false;
            let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
            if (nodeBefore.type != itemType)
                return false;
            if (dispatch) {
                let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
                let inner = Fragment.from(nestedBefore ? itemType.create() : null);
                let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
                let before = range.start, after = range.end;
                dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true))
                    .scrollIntoView());
            }
            return true;
        };
    }

    const mac$2 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
    function normalizeKeyName(name) {
        let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; i++) {
            let mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (mac$2)
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function normalize(map) {
        let copy = Object.create(null);
        for (let prop in map)
            copy[normalizeKeyName(prop)] = map[prop];
        return copy;
    }
    function modifiers(name, event, shift = true) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    /**
    Create a keymap plugin for the given set of bindings.

    Bindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style
    functions, which will be called with `(EditorState, dispatch,
    EditorView)` arguments, and should return true when they've handled
    the key. Note that the view argument isn't part of the command
    protocol, but can be used as an escape hatch if a binding needs to
    directly interact with the UI.

    Key names may be strings like `"Shift-Ctrl-Enter"`—a key
    identifier prefixed with zero or more modifiers. Key identifiers
    are based on the strings that can appear in
    [`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).
    Use lowercase letters to refer to letter keys (or uppercase letters
    if you want shift to be held). You may use `"Space"` as an alias
    for the `" "` name.

    Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or
    `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or
    `Meta-`) are recognized. For characters that are created by holding
    shift, the `Shift-` prefix is implied, and should not be added
    explicitly.

    You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on
    other platforms.

    You can add multiple keymap plugins to an editor. The order in
    which they appear determines their precedence (the ones early in
    the array get to dispatch first).
    */
    function keymap(bindings) {
        return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
    }
    /**
    Given a set of bindings (using the same format as
    [`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown
    handler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.
    */
    function keydownHandler(bindings) {
        let map = normalize(bindings);
        return function (view, event) {
            let name = keyName(event), baseName, direct = map[modifiers(name, event)];
            if (direct && direct(view.state, view.dispatch, view))
                return true;
            // A character key
            if (name.length == 1 && name != " ") {
                if (event.shiftKey) {
                    // In case the name was already modified by shift, try looking
                    // it up without its shift modifier
                    let noShift = map[modifiers(name, event, false)];
                    if (noShift && noShift(view.state, view.dispatch, view))
                        return true;
                }
                if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&
                    (baseName = base[event.keyCode]) && baseName != name) {
                    // Try falling back to the keyCode when there's a modifier
                    // active or the character produced isn't ASCII, and our table
                    // produces a different name from the the keyCode. See #668,
                    // #1060
                    let fromCode = map[modifiers(baseName, event)];
                    if (fromCode && fromCode(view.state, view.dispatch, view))
                        return true;
                }
            }
            return false;
        };
    }

    var GOOD_LEAF_SIZE = 200;

    // :: class<T> A rope sequence is a persistent sequence data structure
    // that supports appending, prepending, and slicing without doing a
    // full copy. It is represented as a mostly-balanced tree.
    var RopeSequence = function RopeSequence () {};

    RopeSequence.prototype.append = function append (other) {
      if (!other.length) { return this }
      other = RopeSequence.from(other);

      return (!this.length && other) ||
        (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||
        (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||
        this.appendInner(other)
    };

    // :: (union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Prepend an array or other rope to this one, returning a new rope.
    RopeSequence.prototype.prepend = function prepend (other) {
      if (!other.length) { return this }
      return RopeSequence.from(other).append(this)
    };

    RopeSequence.prototype.appendInner = function appendInner (other) {
      return new Append(this, other)
    };

    // :: (?number, ?number) → RopeSequence<T>
    // Create a rope repesenting a sub-sequence of this rope.
    RopeSequence.prototype.slice = function slice (from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      if (from >= to) { return RopeSequence.empty }
      return this.sliceInner(Math.max(0, from), Math.min(this.length, to))
    };

    // :: (number) → T
    // Retrieve the element at the given position from this rope.
    RopeSequence.prototype.get = function get (i) {
      if (i < 0 || i >= this.length) { return undefined }
      return this.getInner(i)
    };

    // :: ((element: T, index: number) → ?bool, ?number, ?number)
    // Call the given function for each element between the given
    // indices. This tends to be more efficient than looping over the
    // indices and calling `get`, because it doesn't have to descend the
    // tree for every element.
    RopeSequence.prototype.forEach = function forEach (f, from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      if (from <= to)
        { this.forEachInner(f, from, to, 0); }
      else
        { this.forEachInvertedInner(f, from, to, 0); }
    };

    // :: ((element: T, index: number) → U, ?number, ?number) → [U]
    // Map the given functions over the elements of the rope, producing
    // a flat array.
    RopeSequence.prototype.map = function map (f, from, to) {
        if ( from === void 0 ) from = 0;
        if ( to === void 0 ) to = this.length;

      var result = [];
      this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);
      return result
    };

    // :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>
    // Create a rope representing the given array, or return the rope
    // itself if a rope was given.
    RopeSequence.from = function from (values) {
      if (values instanceof RopeSequence) { return values }
      return values && values.length ? new Leaf(values) : RopeSequence.empty
    };

    var Leaf = /*@__PURE__*/(function (RopeSequence) {
      function Leaf(values) {
        RopeSequence.call(this);
        this.values = values;
      }

      if ( RopeSequence ) Leaf.__proto__ = RopeSequence;
      Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );
      Leaf.prototype.constructor = Leaf;

      var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };

      Leaf.prototype.flatten = function flatten () {
        return this.values
      };

      Leaf.prototype.sliceInner = function sliceInner (from, to) {
        if (from == 0 && to == this.length) { return this }
        return new Leaf(this.values.slice(from, to))
      };

      Leaf.prototype.getInner = function getInner (i) {
        return this.values[i]
      };

      Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {
        for (var i = from; i < to; i++)
          { if (f(this.values[i], start + i) === false) { return false } }
      };

      Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
        for (var i = from - 1; i >= to; i--)
          { if (f(this.values[i], start + i) === false) { return false } }
      };

      Leaf.prototype.leafAppend = function leafAppend (other) {
        if (this.length + other.length <= GOOD_LEAF_SIZE)
          { return new Leaf(this.values.concat(other.flatten())) }
      };

      Leaf.prototype.leafPrepend = function leafPrepend (other) {
        if (this.length + other.length <= GOOD_LEAF_SIZE)
          { return new Leaf(other.flatten().concat(this.values)) }
      };

      prototypeAccessors.length.get = function () { return this.values.length };

      prototypeAccessors.depth.get = function () { return 0 };

      Object.defineProperties( Leaf.prototype, prototypeAccessors );

      return Leaf;
    }(RopeSequence));

    // :: RopeSequence
    // The empty rope sequence.
    RopeSequence.empty = new Leaf([]);

    var Append = /*@__PURE__*/(function (RopeSequence) {
      function Append(left, right) {
        RopeSequence.call(this);
        this.left = left;
        this.right = right;
        this.length = left.length + right.length;
        this.depth = Math.max(left.depth, right.depth) + 1;
      }

      if ( RopeSequence ) Append.__proto__ = RopeSequence;
      Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );
      Append.prototype.constructor = Append;

      Append.prototype.flatten = function flatten () {
        return this.left.flatten().concat(this.right.flatten())
      };

      Append.prototype.getInner = function getInner (i) {
        return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)
      };

      Append.prototype.forEachInner = function forEachInner (f, from, to, start) {
        var leftLen = this.left.length;
        if (from < leftLen &&
            this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)
          { return false }
        if (to > leftLen &&
            this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)
          { return false }
      };

      Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
        var leftLen = this.left.length;
        if (from > leftLen &&
            this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)
          { return false }
        if (to < leftLen &&
            this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)
          { return false }
      };

      Append.prototype.sliceInner = function sliceInner (from, to) {
        if (from == 0 && to == this.length) { return this }
        var leftLen = this.left.length;
        if (to <= leftLen) { return this.left.slice(from, to) }
        if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }
        return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))
      };

      Append.prototype.leafAppend = function leafAppend (other) {
        var inner = this.right.leafAppend(other);
        if (inner) { return new Append(this.left, inner) }
      };

      Append.prototype.leafPrepend = function leafPrepend (other) {
        var inner = this.left.leafPrepend(other);
        if (inner) { return new Append(inner, this.right) }
      };

      Append.prototype.appendInner = function appendInner (other) {
        if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)
          { return new Append(this.left, new Append(this.right, other)) }
        return new Append(this, other)
      };

      return Append;
    }(RopeSequence));

    // ProseMirror's history isn't simply a way to roll back to a previous
    // state, because ProseMirror supports applying changes without adding
    // them to the history (for example during collaboration).
    //
    // To this end, each 'Branch' (one for the undo history and one for
    // the redo history) keeps an array of 'Items', which can optionally
    // hold a step (an actual undoable change), and always hold a position
    // map (which is needed to move changes below them to apply to the
    // current document).
    //
    // An item that has both a step and a selection bookmark is the start
    // of an 'event' — a group of changes that will be undone or redone at
    // once. (It stores only the bookmark, since that way we don't have to
    // provide a document until the selection is actually applied, which
    // is useful when compressing.)
    // Used to schedule history compression
    const max_empty_items = 500;
    class Branch {
        constructor(items, eventCount) {
            this.items = items;
            this.eventCount = eventCount;
        }
        // Pop the latest event off the branch's history and apply it
        // to a document transform.
        popEvent(state, preserveItems) {
            if (this.eventCount == 0)
                return null;
            let end = this.items.length;
            for (;; end--) {
                let next = this.items.get(end - 1);
                if (next.selection) {
                    --end;
                    break;
                }
            }
            let remap, mapFrom;
            if (preserveItems) {
                remap = this.remapping(end, this.items.length);
                mapFrom = remap.maps.length;
            }
            let transform = state.tr;
            let selection, remaining;
            let addAfter = [], addBefore = [];
            this.items.forEach((item, i) => {
                if (!item.step) {
                    if (!remap) {
                        remap = this.remapping(end, i + 1);
                        mapFrom = remap.maps.length;
                    }
                    mapFrom--;
                    addBefore.push(item);
                    return;
                }
                if (remap) {
                    addBefore.push(new Item$1(item.map));
                    let step = item.step.map(remap.slice(mapFrom)), map;
                    if (step && transform.maybeStep(step).doc) {
                        map = transform.mapping.maps[transform.mapping.maps.length - 1];
                        addAfter.push(new Item$1(map, undefined, undefined, addAfter.length + addBefore.length));
                    }
                    mapFrom--;
                    if (map)
                        remap.appendMap(map, mapFrom);
                }
                else {
                    transform.maybeStep(item.step);
                }
                if (item.selection) {
                    selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
                    remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
                    return false;
                }
            }, this.items.length, 0);
            return { remaining: remaining, transform, selection: selection };
        }
        // Create a new branch with the given transform added.
        addTransform(transform, selection, histOptions, preserveItems) {
            let newItems = [], eventCount = this.eventCount;
            let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
            for (let i = 0; i < transform.steps.length; i++) {
                let step = transform.steps[i].invert(transform.docs[i]);
                let item = new Item$1(transform.mapping.maps[i], step, selection), merged;
                if (merged = lastItem && lastItem.merge(item)) {
                    item = merged;
                    if (i)
                        newItems.pop();
                    else
                        oldItems = oldItems.slice(0, oldItems.length - 1);
                }
                newItems.push(item);
                if (selection) {
                    eventCount++;
                    selection = undefined;
                }
                if (!preserveItems)
                    lastItem = item;
            }
            let overflow = eventCount - histOptions.depth;
            if (overflow > DEPTH_OVERFLOW) {
                oldItems = cutOffEvents(oldItems, overflow);
                eventCount -= overflow;
            }
            return new Branch(oldItems.append(newItems), eventCount);
        }
        remapping(from, to) {
            let maps = new Mapping;
            this.items.forEach((item, i) => {
                let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from
                    ? maps.maps.length - item.mirrorOffset : undefined;
                maps.appendMap(item.map, mirrorPos);
            }, from, to);
            return maps;
        }
        addMaps(array) {
            if (this.eventCount == 0)
                return this;
            return new Branch(this.items.append(array.map(map => new Item$1(map))), this.eventCount);
        }
        // When the collab module receives remote changes, the history has
        // to know about those, so that it can adjust the steps that were
        // rebased on top of the remote changes, and include the position
        // maps for the remote changes in its array of items.
        rebased(rebasedTransform, rebasedCount) {
            if (!this.eventCount)
                return this;
            let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
            let mapping = rebasedTransform.mapping;
            let newUntil = rebasedTransform.steps.length;
            let eventCount = this.eventCount;
            this.items.forEach(item => { if (item.selection)
                eventCount--; }, start);
            let iRebased = rebasedCount;
            this.items.forEach(item => {
                let pos = mapping.getMirror(--iRebased);
                if (pos == null)
                    return;
                newUntil = Math.min(newUntil, pos);
                let map = mapping.maps[pos];
                if (item.step) {
                    let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
                    let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
                    if (selection)
                        eventCount++;
                    rebasedItems.push(new Item$1(map, step, selection));
                }
                else {
                    rebasedItems.push(new Item$1(map));
                }
            }, start);
            let newMaps = [];
            for (let i = rebasedCount; i < newUntil; i++)
                newMaps.push(new Item$1(mapping.maps[i]));
            let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
            let branch = new Branch(items, eventCount);
            if (branch.emptyItemCount() > max_empty_items)
                branch = branch.compress(this.items.length - rebasedItems.length);
            return branch;
        }
        emptyItemCount() {
            let count = 0;
            this.items.forEach(item => { if (!item.step)
                count++; });
            return count;
        }
        // Compressing a branch means rewriting it to push the air (map-only
        // items) out. During collaboration, these naturally accumulate
        // because each remote change adds one. The `upto` argument is used
        // to ensure that only the items below a given level are compressed,
        // because `rebased` relies on a clean, untouched set of items in
        // order to associate old items with rebased steps.
        compress(upto = this.items.length) {
            let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
            let items = [], events = 0;
            this.items.forEach((item, i) => {
                if (i >= upto) {
                    items.push(item);
                    if (item.selection)
                        events++;
                }
                else if (item.step) {
                    let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();
                    mapFrom--;
                    if (map)
                        remap.appendMap(map, mapFrom);
                    if (step) {
                        let selection = item.selection && item.selection.map(remap.slice(mapFrom));
                        if (selection)
                            events++;
                        let newItem = new Item$1(map.invert(), step, selection), merged, last = items.length - 1;
                        if (merged = items.length && items[last].merge(newItem))
                            items[last] = merged;
                        else
                            items.push(newItem);
                    }
                }
                else if (item.map) {
                    mapFrom--;
                }
            }, this.items.length, 0);
            return new Branch(RopeSequence.from(items.reverse()), events);
        }
    }
    Branch.empty = new Branch(RopeSequence.empty, 0);
    function cutOffEvents(items, n) {
        let cutPoint;
        items.forEach((item, i) => {
            if (item.selection && (n-- == 0)) {
                cutPoint = i;
                return false;
            }
        });
        return items.slice(cutPoint);
    }
    let Item$1 = class Item {
        constructor(
        // The (forward) step map for this item.
        map, 
        // The inverted step
        step, 
        // If this is non-null, this item is the start of a group, and
        // this selection is the starting selection for the group (the one
        // that was active before the first step was applied)
        selection, 
        // If this item is the inverse of a previous mapping on the stack,
        // this points at the inverse's offset
        mirrorOffset) {
            this.map = map;
            this.step = step;
            this.selection = selection;
            this.mirrorOffset = mirrorOffset;
        }
        merge(other) {
            if (this.step && other.step && !other.selection) {
                let step = other.step.merge(this.step);
                if (step)
                    return new Item(step.getMap().invert(), step, this.selection);
            }
        }
    };
    // The value of the state field that tracks undo/redo history for that
    // state. Will be stored in the plugin state when the history plugin
    // is active.
    class HistoryState {
        constructor(done, undone, prevRanges, prevTime, prevComposition) {
            this.done = done;
            this.undone = undone;
            this.prevRanges = prevRanges;
            this.prevTime = prevTime;
            this.prevComposition = prevComposition;
        }
    }
    const DEPTH_OVERFLOW = 20;
    // Record a transformation in undo history.
    function applyTransaction(history, state, tr, options) {
        let historyTr = tr.getMeta(historyKey), rebased;
        if (historyTr)
            return historyTr.historyState;
        if (tr.getMeta(closeHistoryKey))
            history = new HistoryState(history.done, history.undone, null, 0, -1);
        let appended = tr.getMeta("appendedTransaction");
        if (tr.steps.length == 0) {
            return history;
        }
        else if (appended && appended.getMeta(historyKey)) {
            if (appended.getMeta(historyKey).redo)
                return new HistoryState(history.done.addTransform(tr, undefined, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime, history.prevComposition);
            else
                return new HistoryState(history.done, history.undone.addTransform(tr, undefined, options, mustPreserveItems(state)), null, history.prevTime, history.prevComposition);
        }
        else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
            // Group transforms that occur in quick succession into one event.
            let composition = tr.getMeta("composition");
            let newGroup = history.prevTime == 0 ||
                (!appended && history.prevComposition != composition &&
                    (history.prevTime < (tr.time || 0) - options.newGroupDelay || !isAdjacentTo(tr, history.prevRanges)));
            let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
            return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : undefined, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time, composition == null ? history.prevComposition : composition);
        }
        else if (rebased = tr.getMeta("rebased")) {
            // Used by the collab module to tell the history that some of its
            // content has been rebased.
            return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime, history.prevComposition);
        }
        else {
            return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime, history.prevComposition);
        }
    }
    function isAdjacentTo(transform, prevRanges) {
        if (!prevRanges)
            return false;
        if (!transform.docChanged)
            return true;
        let adjacent = false;
        transform.mapping.maps[0].forEach((start, end) => {
            for (let i = 0; i < prevRanges.length; i += 2)
                if (start <= prevRanges[i + 1] && end >= prevRanges[i])
                    adjacent = true;
        });
        return adjacent;
    }
    function rangesFor(map) {
        let result = [];
        map.forEach((_from, _to, from, to) => result.push(from, to));
        return result;
    }
    function mapRanges(ranges, mapping) {
        if (!ranges)
            return null;
        let result = [];
        for (let i = 0; i < ranges.length; i += 2) {
            let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
            if (from <= to)
                result.push(from, to);
        }
        return result;
    }
    // Apply the latest event from one branch to the document and shift the event
    // onto the other branch.
    function histTransaction(history, state, redo) {
        let preserveItems = mustPreserveItems(state);
        let histOptions = historyKey.get(state).spec.config;
        let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);
        if (!pop)
            return null;
        let selection = pop.selection.resolve(pop.transform.doc);
        let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
        let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0, -1);
        return pop.transform.setSelection(selection).setMeta(historyKey, { redo, historyState: newHist });
    }
    let cachedPreserveItems = false, cachedPreserveItemsPlugins = null;
    // Check whether any plugin in the given state has a
    // `historyPreserveItems` property in its spec, in which case we must
    // preserve steps exactly as they came in, so that they can be
    // rebased.
    function mustPreserveItems(state) {
        let plugins = state.plugins;
        if (cachedPreserveItemsPlugins != plugins) {
            cachedPreserveItems = false;
            cachedPreserveItemsPlugins = plugins;
            for (let i = 0; i < plugins.length; i++)
                if (plugins[i].spec.historyPreserveItems) {
                    cachedPreserveItems = true;
                    break;
                }
        }
        return cachedPreserveItems;
    }
    const historyKey = new PluginKey("history");
    const closeHistoryKey = new PluginKey("closeHistory");
    /**
    Returns a plugin that enables the undo history for an editor. The
    plugin will track undo and redo stacks, which can be used with the
    [`undo`](https://prosemirror.net/docs/ref/#history.undo) and [`redo`](https://prosemirror.net/docs/ref/#history.redo) commands.

    You can set an `"addToHistory"` [metadata
    property](https://prosemirror.net/docs/ref/#state.Transaction.setMeta) of `false` on a transaction
    to prevent it from being rolled back by undo.
    */
    function history(config = {}) {
        config = { depth: config.depth || 100,
            newGroupDelay: config.newGroupDelay || 500 };
        return new Plugin({
            key: historyKey,
            state: {
                init() {
                    return new HistoryState(Branch.empty, Branch.empty, null, 0, -1);
                },
                apply(tr, hist, state) {
                    return applyTransaction(hist, state, tr, config);
                }
            },
            config,
            props: {
                handleDOMEvents: {
                    beforeinput(view, e) {
                        let inputType = e.inputType;
                        let command = inputType == "historyUndo" ? undo : inputType == "historyRedo" ? redo : null;
                        if (!command)
                            return false;
                        e.preventDefault();
                        return command(view.state, view.dispatch);
                    }
                }
            }
        });
    }
    function buildCommand(redo, scroll) {
        return (state, dispatch) => {
            let hist = historyKey.getState(state);
            if (!hist || (redo ? hist.undone : hist.done).eventCount == 0)
                return false;
            if (dispatch) {
                let tr = histTransaction(hist, state, redo);
                if (tr)
                    dispatch(scroll ? tr.scrollIntoView() : tr);
            }
            return true;
        };
    }
    /**
    A command function that undoes the last change, if any.
    */
    const undo = buildCommand(false, true);
    /**
    A command function that redoes the last undone change, if any.
    */
    const redo = buildCommand(true, true);

    /**
    Delete the selection, if there is one.
    */
    const deleteSelection = (state, dispatch) => {
        if (state.selection.empty)
            return false;
        if (dispatch)
            dispatch(state.tr.deleteSelection().scrollIntoView());
        return true;
    };
    function atBlockStart(state, view) {
        let { $cursor } = state.selection;
        if (!$cursor || (view ? !view.endOfTextblock("backward", state)
            : $cursor.parentOffset > 0))
            return null;
        return $cursor;
    }
    /**
    If the selection is empty and at the start of a textblock, try to
    reduce the distance between that block and the one before it—if
    there's a block directly before it that can be joined, join them.
    If not, try to move the selected block closer to the next one in
    the document structure by lifting it out of its parent or moving it
    into a parent of the previous block. Will use the view for accurate
    (bidi-aware) start-of-textblock detection if given.
    */
    const joinBackward = (state, dispatch, view) => {
        let $cursor = atBlockStart(state, view);
        if (!$cursor)
            return false;
        let $cut = findCutBefore($cursor);
        // If there is no node before this, try to lift
        if (!$cut) {
            let range = $cursor.blockRange(), target = range && liftTarget(range);
            if (target == null)
                return false;
            if (dispatch)
                dispatch(state.tr.lift(range, target).scrollIntoView());
            return true;
        }
        let before = $cut.nodeBefore;
        // Apply the joining algorithm
        if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
            return true;
        // If the node below has no content and the node above is
        // selectable, delete the node below and select the one above.
        if ($cursor.parent.content.size == 0 &&
            (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
            let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
            if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                if (dispatch) {
                    let tr = state.tr.step(delStep);
                    tr.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)
                        : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        // If the node before is an atom, delete it
        if (before.isAtom && $cut.depth == $cursor.depth - 1) {
            if (dispatch)
                dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
            return true;
        }
        return false;
    };
    function textblockAt(node, side, only = false) {
        for (let scan = node; scan; scan = (side == "start" ? scan.firstChild : scan.lastChild)) {
            if (scan.isTextblock)
                return true;
            if (only && scan.childCount != 1)
                return false;
        }
        return false;
    }
    /**
    When the selection is empty and at the start of a textblock, select
    the node before that textblock, if possible. This is intended to be
    bound to keys like backspace, after
    [`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting
    commands, as a fall-back behavior when the schema doesn't allow
    deletion at the selected point.
    */
    const selectNodeBackward = (state, dispatch, view) => {
        let { $head, empty } = state.selection, $cut = $head;
        if (!empty)
            return false;
        if ($head.parent.isTextblock) {
            if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
                return false;
            $cut = findCutBefore($head);
        }
        let node = $cut && $cut.nodeBefore;
        if (!node || !NodeSelection.isSelectable(node))
            return false;
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());
        return true;
    };
    function findCutBefore($pos) {
        if (!$pos.parent.type.spec.isolating)
            for (let i = $pos.depth - 1; i >= 0; i--) {
                if ($pos.index(i) > 0)
                    return $pos.doc.resolve($pos.before(i + 1));
                if ($pos.node(i).type.spec.isolating)
                    break;
            }
        return null;
    }
    function atBlockEnd(state, view) {
        let { $cursor } = state.selection;
        if (!$cursor || (view ? !view.endOfTextblock("forward", state)
            : $cursor.parentOffset < $cursor.parent.content.size))
            return null;
        return $cursor;
    }
    /**
    If the selection is empty and the cursor is at the end of a
    textblock, try to reduce or remove the boundary between that block
    and the one after it, either by joining them or by moving the other
    block closer to this one in the tree structure. Will use the view
    for accurate start-of-textblock detection if given.
    */
    const joinForward = (state, dispatch, view) => {
        let $cursor = atBlockEnd(state, view);
        if (!$cursor)
            return false;
        let $cut = findCutAfter($cursor);
        // If there is no node after this, there's nothing to do
        if (!$cut)
            return false;
        let after = $cut.nodeAfter;
        // Try the joining algorithm
        if (deleteBarrier(state, $cut, dispatch))
            return true;
        // If the node above has no content and the node below is
        // selectable, delete the node above and select the one below.
        if ($cursor.parent.content.size == 0 &&
            (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
            let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
            if (delStep && delStep.slice.size < delStep.to - delStep.from) {
                if (dispatch) {
                    let tr = state.tr.step(delStep);
                    tr.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
                        : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        // If the next node is an atom, delete it
        if (after.isAtom && $cut.depth == $cursor.depth - 1) {
            if (dispatch)
                dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
            return true;
        }
        return false;
    };
    /**
    When the selection is empty and at the end of a textblock, select
    the node coming after that textblock, if possible. This is intended
    to be bound to keys like delete, after
    [`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting
    commands, to provide a fall-back behavior when the schema doesn't
    allow deletion at the selected point.
    */
    const selectNodeForward = (state, dispatch, view) => {
        let { $head, empty } = state.selection, $cut = $head;
        if (!empty)
            return false;
        if ($head.parent.isTextblock) {
            if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
                return false;
            $cut = findCutAfter($head);
        }
        let node = $cut && $cut.nodeAfter;
        if (!node || !NodeSelection.isSelectable(node))
            return false;
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
        return true;
    };
    function findCutAfter($pos) {
        if (!$pos.parent.type.spec.isolating)
            for (let i = $pos.depth - 1; i >= 0; i--) {
                let parent = $pos.node(i);
                if ($pos.index(i) + 1 < parent.childCount)
                    return $pos.doc.resolve($pos.after(i + 1));
                if (parent.type.spec.isolating)
                    break;
            }
        return null;
    }
    /**
    Join the selected block or, if there is a text selection, the
    closest ancestor block of the selection that can be joined, with
    the sibling above it.
    */
    const joinUp = (state, dispatch) => {
        let sel = state.selection, nodeSel = sel instanceof NodeSelection, point;
        if (nodeSel) {
            if (sel.node.isTextblock || !canJoin(state.doc, sel.from))
                return false;
            point = sel.from;
        }
        else {
            point = joinPoint(state.doc, sel.from, -1);
            if (point == null)
                return false;
        }
        if (dispatch) {
            let tr = state.tr.join(point);
            if (nodeSel)
                tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    Join the selected block, or the closest ancestor of the selection
    that can be joined, with the sibling after it.
    */
    const joinDown = (state, dispatch) => {
        let sel = state.selection, point;
        if (sel instanceof NodeSelection) {
            if (sel.node.isTextblock || !canJoin(state.doc, sel.to))
                return false;
            point = sel.to;
        }
        else {
            point = joinPoint(state.doc, sel.to, 1);
            if (point == null)
                return false;
        }
        if (dispatch)
            dispatch(state.tr.join(point).scrollIntoView());
        return true;
    };
    /**
    Lift the selected block, or the closest ancestor block of the
    selection that can be lifted, out of its parent node.
    */
    const lift = (state, dispatch) => {
        let { $from, $to } = state.selection;
        let range = $from.blockRange($to), target = range && liftTarget(range);
        if (target == null)
            return false;
        if (dispatch)
            dispatch(state.tr.lift(range, target).scrollIntoView());
        return true;
    };
    /**
    If the selection is in a node whose type has a truthy
    [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the
    selection with a newline character.
    */
    const newlineInCode = (state, dispatch) => {
        let { $head, $anchor } = state.selection;
        if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
            return false;
        if (dispatch)
            dispatch(state.tr.insertText("\n").scrollIntoView());
        return true;
    };
    function defaultBlockAt(match) {
        for (let i = 0; i < match.edgeCount; i++) {
            let { type } = match.edge(i);
            if (type.isTextblock && !type.hasRequiredAttrs())
                return type;
        }
        return null;
    }
    /**
    When the selection is in a node with a truthy
    [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a
    default block after the code block, and move the cursor there.
    */
    const exitCode = (state, dispatch) => {
        let { $head, $anchor } = state.selection;
        if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
            return false;
        let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
        if (!type || !above.canReplaceWith(after, after, type))
            return false;
        if (dispatch) {
            let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
            tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    If a block node is selected, create an empty paragraph before (if
    it is its parent's first child) or after it.
    */
    const createParagraphNear = (state, dispatch) => {
        let sel = state.selection, { $from, $to } = sel;
        if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
            return false;
        let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
        if (!type || !type.isTextblock)
            return false;
        if (dispatch) {
            let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
            let tr = state.tr.insert(side, type.createAndFill());
            tr.setSelection(TextSelection.create(tr.doc, side + 1));
            dispatch(tr.scrollIntoView());
        }
        return true;
    };
    /**
    If the cursor is in an empty textblock that can be lifted, lift the
    block.
    */
    const liftEmptyBlock = (state, dispatch) => {
        let { $cursor } = state.selection;
        if (!$cursor || $cursor.parent.content.size)
            return false;
        if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
            let before = $cursor.before();
            if (canSplit(state.doc, before)) {
                if (dispatch)
                    dispatch(state.tr.split(before).scrollIntoView());
                return true;
            }
        }
        let range = $cursor.blockRange(), target = range && liftTarget(range);
        if (target == null)
            return false;
        if (dispatch)
            dispatch(state.tr.lift(range, target).scrollIntoView());
        return true;
    };
    /**
    Create a variant of [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock) that uses
    a custom function to determine the type of the newly split off block.
    */
    function splitBlockAs(splitNode) {
        return (state, dispatch) => {
            let { $from, $to } = state.selection;
            if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {
                if (!$from.parentOffset || !canSplit(state.doc, $from.pos))
                    return false;
                if (dispatch)
                    dispatch(state.tr.split($from.pos).scrollIntoView());
                return true;
            }
            if (!$from.parent.isBlock)
                return false;
            if (dispatch) {
                let atEnd = $to.parentOffset == $to.parent.content.size;
                let tr = state.tr;
                if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)
                    tr.deleteSelection();
                let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
                let splitType = splitNode && splitNode($to.parent, atEnd);
                let types = splitType ? [splitType] : atEnd && deflt ? [{ type: deflt }] : undefined;
                let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
                if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {
                    if (deflt)
                        types = [{ type: deflt }];
                    can = true;
                }
                if (can) {
                    tr.split(tr.mapping.map($from.pos), 1, types);
                    if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
                        let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);
                        if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
                            tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                    }
                }
                dispatch(tr.scrollIntoView());
            }
            return true;
        };
    }
    /**
    Split the parent block of the selection. If the selection is a text
    selection, also delete its content.
    */
    const splitBlock = splitBlockAs();
    /**
    Move the selection to the node wrapping the current selection, if
    any. (Will not select the document node.)
    */
    const selectParentNode = (state, dispatch) => {
        let { $from, to } = state.selection, pos;
        let same = $from.sharedDepth(to);
        if (same == 0)
            return false;
        pos = $from.before(same);
        if (dispatch)
            dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
        return true;
    };
    /**
    Select the whole document.
    */
    const selectAll = (state, dispatch) => {
        if (dispatch)
            dispatch(state.tr.setSelection(new AllSelection(state.doc)));
        return true;
    };
    function joinMaybeClear(state, $pos, dispatch) {
        let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
        if (!before || !after || !before.type.compatibleContent(after.type))
            return false;
        if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
            if (dispatch)
                dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
            return true;
        }
        if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
            return false;
        if (dispatch)
            dispatch(state.tr
                .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))
                .join($pos.pos)
                .scrollIntoView());
        return true;
    }
    function deleteBarrier(state, $cut, dispatch) {
        let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
        if (before.type.spec.isolating || after.type.spec.isolating)
            return false;
        if (joinMaybeClear(state, $cut, dispatch))
            return true;
        let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
        if (canDelAfter &&
            (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&
            match.matchType(conn[0] || after.type).validEnd) {
            if (dispatch) {
                let end = $cut.pos + after.nodeSize, wrap = Fragment.empty;
                for (let i = conn.length - 1; i >= 0; i--)
                    wrap = Fragment.from(conn[i].create(null, wrap));
                wrap = Fragment.from(before.copy(wrap));
                let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));
                let joinAt = end + 2 * conn.length;
                if (canJoin(tr.doc, joinAt))
                    tr.join(joinAt);
                dispatch(tr.scrollIntoView());
            }
            return true;
        }
        let selAfter = Selection.findFrom($cut, 1);
        let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
        if (target != null && target >= $cut.depth) {
            if (dispatch)
                dispatch(state.tr.lift(range, target).scrollIntoView());
            return true;
        }
        if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
            let at = before, wrap = [];
            for (;;) {
                wrap.push(at);
                if (at.isTextblock)
                    break;
                at = at.lastChild;
            }
            let afterText = after, afterDepth = 1;
            for (; !afterText.isTextblock; afterText = afterText.firstChild)
                afterDepth++;
            if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
                if (dispatch) {
                    let end = Fragment.empty;
                    for (let i = wrap.length - 1; i >= 0; i--)
                        end = Fragment.from(wrap[i].copy(end));
                    let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap.length, 0), 0, true));
                    dispatch(tr.scrollIntoView());
                }
                return true;
            }
        }
        return false;
    }
    function selectTextblockSide(side) {
        return function (state, dispatch) {
            let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
            let depth = $pos.depth;
            while ($pos.node(depth).isInline) {
                if (!depth)
                    return false;
                depth--;
            }
            if (!$pos.node(depth).isTextblock)
                return false;
            if (dispatch)
                dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
            return true;
        };
    }
    /**
    Moves the cursor to the start of current text block.
    */
    const selectTextblockStart = selectTextblockSide(-1);
    /**
    Moves the cursor to the end of current text block.
    */
    const selectTextblockEnd = selectTextblockSide(1);
    // Parameterized commands
    /**
    Wrap the selection in a node of the given type with the given
    attributes.
    */
    function wrapIn(nodeType, attrs = null) {
        return function (state, dispatch) {
            let { $from, $to } = state.selection;
            let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
            if (!wrapping)
                return false;
            if (dispatch)
                dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
            return true;
        };
    }
    /**
    Returns a command that tries to set the selected textblocks to the
    given node type with the given attributes.
    */
    function setBlockType(nodeType, attrs = null) {
        return function (state, dispatch) {
            let applicable = false;
            for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {
                let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];
                state.doc.nodesBetween(from, to, (node, pos) => {
                    if (applicable)
                        return false;
                    if (!node.isTextblock || node.hasMarkup(nodeType, attrs))
                        return;
                    if (node.type == nodeType) {
                        applicable = true;
                    }
                    else {
                        let $pos = state.doc.resolve(pos), index = $pos.index();
                        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
                    }
                });
            }
            if (!applicable)
                return false;
            if (dispatch) {
                let tr = state.tr;
                for (let i = 0; i < state.selection.ranges.length; i++) {
                    let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];
                    tr.setBlockType(from, to, nodeType, attrs);
                }
                dispatch(tr.scrollIntoView());
            }
            return true;
        };
    }
    function markApplies(doc, ranges, type) {
        for (let i = 0; i < ranges.length; i++) {
            let { $from, $to } = ranges[i];
            let can = $from.depth == 0 ? doc.inlineContent && doc.type.allowsMarkType(type) : false;
            doc.nodesBetween($from.pos, $to.pos, node => {
                if (can)
                    return false;
                can = node.inlineContent && node.type.allowsMarkType(type);
            });
            if (can)
                return true;
        }
        return false;
    }
    /**
    Create a command function that toggles the given mark with the
    given attributes. Will return `false` when the current selection
    doesn't support that mark. This will remove the mark if any marks
    of that type exist in the selection, or add it otherwise. If the
    selection is empty, this applies to the [stored
    marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks) instead of a range of the
    document.
    */
    function toggleMark(markType, attrs = null) {
        return function (state, dispatch) {
            let { empty, $cursor, ranges } = state.selection;
            if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType))
                return false;
            if (dispatch) {
                if ($cursor) {
                    if (markType.isInSet(state.storedMarks || $cursor.marks()))
                        dispatch(state.tr.removeStoredMark(markType));
                    else
                        dispatch(state.tr.addStoredMark(markType.create(attrs)));
                }
                else {
                    let has = false, tr = state.tr;
                    for (let i = 0; !has && i < ranges.length; i++) {
                        let { $from, $to } = ranges[i];
                        has = state.doc.rangeHasMark($from.pos, $to.pos, markType);
                    }
                    for (let i = 0; i < ranges.length; i++) {
                        let { $from, $to } = ranges[i];
                        if (has) {
                            tr.removeMark($from.pos, $to.pos, markType);
                        }
                        else {
                            let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;
                            let spaceStart = start && start.isText ? /^\s*/.exec(start.text)[0].length : 0;
                            let spaceEnd = end && end.isText ? /\s*$/.exec(end.text)[0].length : 0;
                            if (from + spaceStart < to) {
                                from += spaceStart;
                                to -= spaceEnd;
                            }
                            tr.addMark(from, to, markType.create(attrs));
                        }
                    }
                    dispatch(tr.scrollIntoView());
                }
            }
            return true;
        };
    }
    /**
    Combine a number of command functions into a single function (which
    calls them one by one until one returns true).
    */
    function chainCommands(...commands) {
        return function (state, dispatch, view) {
            for (let i = 0; i < commands.length; i++)
                if (commands[i](state, dispatch, view))
                    return true;
            return false;
        };
    }
    let backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
    let del = chainCommands(deleteSelection, joinForward, selectNodeForward);
    /**
    A basic keymap containing bindings not specific to any schema.
    Binds the following keys (when multiple commands are listed, they
    are chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):

    * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`
    * **Mod-Enter** to `exitCode`
    * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`
    * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`
    * **Mod-a** to `selectAll`
    */
    const pcBaseKeymap = {
        "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
        "Mod-Enter": exitCode,
        "Backspace": backspace,
        "Mod-Backspace": backspace,
        "Shift-Backspace": backspace,
        "Delete": del,
        "Mod-Delete": del,
        "Mod-a": selectAll
    };
    /**
    A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,
    **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and
    **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like
    Ctrl-Delete.
    */
    const macBaseKeymap = {
        "Ctrl-h": pcBaseKeymap["Backspace"],
        "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
        "Ctrl-d": pcBaseKeymap["Delete"],
        "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
        "Alt-Delete": pcBaseKeymap["Mod-Delete"],
        "Alt-d": pcBaseKeymap["Mod-Delete"],
        "Ctrl-a": selectTextblockStart,
        "Ctrl-e": selectTextblockEnd
    };
    for (let key in pcBaseKeymap)
        macBaseKeymap[key] = pcBaseKeymap[key];
    const mac$1 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)
        // @ts-ignore
        : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;
    /**
    Depending on the detected platform, this will hold
    [`pcBasekeymap`](https://prosemirror.net/docs/ref/#commands.pcBaseKeymap) or
    [`macBaseKeymap`](https://prosemirror.net/docs/ref/#commands.macBaseKeymap).
    */
    const baseKeymap = mac$1 ? macBaseKeymap : pcBaseKeymap;

    /**
    Create a plugin that, when added to a ProseMirror instance,
    causes a decoration to show up at the drop position when something
    is dragged over the editor.

    Nodes may add a `disableDropCursor` property to their spec to
    control the showing of a drop cursor inside them. This may be a
    boolean or a function, which will be called with a view and a
    position, and should return a boolean.
    */
    function dropCursor(options = {}) {
        return new Plugin({
            view(editorView) { return new DropCursorView(editorView, options); }
        });
    }
    class DropCursorView {
        constructor(editorView, options) {
            var _a;
            this.editorView = editorView;
            this.cursorPos = null;
            this.element = null;
            this.timeout = -1;
            this.width = (_a = options.width) !== null && _a !== void 0 ? _a : 1;
            this.color = options.color === false ? undefined : (options.color || "black");
            this.class = options.class;
            this.handlers = ["dragover", "dragend", "drop", "dragleave"].map(name => {
                let handler = (e) => { this[name](e); };
                editorView.dom.addEventListener(name, handler);
                return { name, handler };
            });
        }
        destroy() {
            this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));
        }
        update(editorView, prevState) {
            if (this.cursorPos != null && prevState.doc != editorView.state.doc) {
                if (this.cursorPos > editorView.state.doc.content.size)
                    this.setCursor(null);
                else
                    this.updateOverlay();
            }
        }
        setCursor(pos) {
            if (pos == this.cursorPos)
                return;
            this.cursorPos = pos;
            if (pos == null) {
                this.element.parentNode.removeChild(this.element);
                this.element = null;
            }
            else {
                this.updateOverlay();
            }
        }
        updateOverlay() {
            let $pos = this.editorView.state.doc.resolve(this.cursorPos);
            let isBlock = !$pos.parent.inlineContent, rect;
            if (isBlock) {
                let before = $pos.nodeBefore, after = $pos.nodeAfter;
                if (before || after) {
                    let node = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));
                    if (node) {
                        let nodeRect = node.getBoundingClientRect();
                        let top = before ? nodeRect.bottom : nodeRect.top;
                        if (before && after)
                            top = (top + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;
                        rect = { left: nodeRect.left, right: nodeRect.right, top: top - this.width / 2, bottom: top + this.width / 2 };
                    }
                }
            }
            if (!rect) {
                let coords = this.editorView.coordsAtPos(this.cursorPos);
                rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };
            }
            let parent = this.editorView.dom.offsetParent;
            if (!this.element) {
                this.element = parent.appendChild(document.createElement("div"));
                if (this.class)
                    this.element.className = this.class;
                this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none;";
                if (this.color) {
                    this.element.style.backgroundColor = this.color;
                }
            }
            this.element.classList.toggle("prosemirror-dropcursor-block", isBlock);
            this.element.classList.toggle("prosemirror-dropcursor-inline", !isBlock);
            let parentLeft, parentTop;
            if (!parent || parent == document.body && getComputedStyle(parent).position == "static") {
                parentLeft = -pageXOffset;
                parentTop = -pageYOffset;
            }
            else {
                let rect = parent.getBoundingClientRect();
                parentLeft = rect.left - parent.scrollLeft;
                parentTop = rect.top - parent.scrollTop;
            }
            this.element.style.left = (rect.left - parentLeft) + "px";
            this.element.style.top = (rect.top - parentTop) + "px";
            this.element.style.width = (rect.right - rect.left) + "px";
            this.element.style.height = (rect.bottom - rect.top) + "px";
        }
        scheduleRemoval(timeout) {
            clearTimeout(this.timeout);
            this.timeout = setTimeout(() => this.setCursor(null), timeout);
        }
        dragover(event) {
            if (!this.editorView.editable)
                return;
            let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });
            let node = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);
            let disableDropCursor = node && node.type.spec.disableDropCursor;
            let disabled = typeof disableDropCursor == "function" ? disableDropCursor(this.editorView, pos, event) : disableDropCursor;
            if (pos && !disabled) {
                let target = pos.pos;
                if (this.editorView.dragging && this.editorView.dragging.slice) {
                    let point = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);
                    if (point != null)
                        target = point;
                }
                this.setCursor(target);
                this.scheduleRemoval(5000);
            }
        }
        dragend() {
            this.scheduleRemoval(20);
        }
        drop() {
            this.scheduleRemoval(20);
        }
        dragleave(event) {
            if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))
                this.setCursor(null);
        }
    }

    /**
    Gap cursor selections are represented using this class. Its
    `$anchor` and `$head` properties both point at the cursor position.
    */
    class GapCursor extends Selection {
        /**
        Create a gap cursor.
        */
        constructor($pos) {
            super($pos, $pos);
        }
        map(doc, mapping) {
            let $pos = doc.resolve(mapping.map(this.head));
            return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
        }
        content() { return Slice.empty; }
        eq(other) {
            return other instanceof GapCursor && other.head == this.head;
        }
        toJSON() {
            return { type: "gapcursor", pos: this.head };
        }
        /**
        @internal
        */
        static fromJSON(doc, json) {
            if (typeof json.pos != "number")
                throw new RangeError("Invalid input for GapCursor.fromJSON");
            return new GapCursor(doc.resolve(json.pos));
        }
        /**
        @internal
        */
        getBookmark() { return new GapBookmark(this.anchor); }
        /**
        @internal
        */
        static valid($pos) {
            let parent = $pos.parent;
            if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))
                return false;
            let override = parent.type.spec.allowGapCursor;
            if (override != null)
                return override;
            let deflt = parent.contentMatchAt($pos.index()).defaultType;
            return deflt && deflt.isTextblock;
        }
        /**
        @internal
        */
        static findGapCursorFrom($pos, dir, mustMove = false) {
            search: for (;;) {
                if (!mustMove && GapCursor.valid($pos))
                    return $pos;
                let pos = $pos.pos, next = null;
                // Scan up from this position
                for (let d = $pos.depth;; d--) {
                    let parent = $pos.node(d);
                    if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
                        next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
                        break;
                    }
                    else if (d == 0) {
                        return null;
                    }
                    pos += dir;
                    let $cur = $pos.doc.resolve(pos);
                    if (GapCursor.valid($cur))
                        return $cur;
                }
                // And then down into the next node
                for (;;) {
                    let inside = dir > 0 ? next.firstChild : next.lastChild;
                    if (!inside) {
                        if (next.isAtom && !next.isText && !NodeSelection.isSelectable(next)) {
                            $pos = $pos.doc.resolve(pos + next.nodeSize * dir);
                            mustMove = false;
                            continue search;
                        }
                        break;
                    }
                    next = inside;
                    pos += dir;
                    let $cur = $pos.doc.resolve(pos);
                    if (GapCursor.valid($cur))
                        return $cur;
                }
                return null;
            }
        }
    }
    GapCursor.prototype.visible = false;
    GapCursor.findFrom = GapCursor.findGapCursorFrom;
    Selection.jsonID("gapcursor", GapCursor);
    class GapBookmark {
        constructor(pos) {
            this.pos = pos;
        }
        map(mapping) {
            return new GapBookmark(mapping.map(this.pos));
        }
        resolve(doc) {
            let $pos = doc.resolve(this.pos);
            return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
        }
    }
    function closedBefore($pos) {
        for (let d = $pos.depth; d >= 0; d--) {
            let index = $pos.index(d), parent = $pos.node(d);
            // At the start of this parent, look at next one
            if (index == 0) {
                if (parent.type.spec.isolating)
                    return true;
                continue;
            }
            // See if the node before (or its first ancestor) is closed
            for (let before = parent.child(index - 1);; before = before.lastChild) {
                if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating)
                    return true;
                if (before.inlineContent)
                    return false;
            }
        }
        // Hit start of document
        return true;
    }
    function closedAfter($pos) {
        for (let d = $pos.depth; d >= 0; d--) {
            let index = $pos.indexAfter(d), parent = $pos.node(d);
            if (index == parent.childCount) {
                if (parent.type.spec.isolating)
                    return true;
                continue;
            }
            for (let after = parent.child(index);; after = after.firstChild) {
                if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating)
                    return true;
                if (after.inlineContent)
                    return false;
            }
        }
        return true;
    }

    /**
    Create a gap cursor plugin. When enabled, this will capture clicks
    near and arrow-key-motion past places that don't have a normally
    selectable position nearby, and create a gap cursor selection for
    them. The cursor is drawn as an element with class
    `ProseMirror-gapcursor`. You can either include
    `style/gapcursor.css` from the package's directory or add your own
    styles to make it visible.
    */
    function gapCursor() {
        return new Plugin({
            props: {
                decorations: drawGapCursor,
                createSelectionBetween(_view, $anchor, $head) {
                    return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
                },
                handleClick,
                handleKeyDown,
                handleDOMEvents: { beforeinput: beforeinput }
            }
        });
    }
    const handleKeyDown = keydownHandler({
        "ArrowLeft": arrow("horiz", -1),
        "ArrowRight": arrow("horiz", 1),
        "ArrowUp": arrow("vert", -1),
        "ArrowDown": arrow("vert", 1)
    });
    function arrow(axis, dir) {
        const dirStr = axis == "vert" ? (dir > 0 ? "down" : "up") : (dir > 0 ? "right" : "left");
        return function (state, dispatch, view) {
            let sel = state.selection;
            let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;
            if (sel instanceof TextSelection) {
                if (!view.endOfTextblock(dirStr) || $start.depth == 0)
                    return false;
                mustMove = false;
                $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
            }
            let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
            if (!$found)
                return false;
            if (dispatch)
                dispatch(state.tr.setSelection(new GapCursor($found)));
            return true;
        };
    }
    function handleClick(view, pos, event) {
        if (!view || !view.editable)
            return false;
        let $pos = view.state.doc.resolve(pos);
        if (!GapCursor.valid($pos))
            return false;
        let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });
        if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))
            return false;
        view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
        return true;
    }
    // This is a hack that, when a composition starts while a gap cursor
    // is active, quickly creates an inline context for the composition to
    // happen in, to avoid it being aborted by the DOM selection being
    // moved into a valid position.
    function beforeinput(view, event) {
        if (event.inputType != "insertCompositionText" || !(view.state.selection instanceof GapCursor))
            return false;
        let { $from } = view.state.selection;
        let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
        if (!insert)
            return false;
        let frag = Fragment.empty;
        for (let i = insert.length - 1; i >= 0; i--)
            frag = Fragment.from(insert[i].createAndFill(null, frag));
        let tr = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));
        tr.setSelection(TextSelection.near(tr.doc.resolve($from.pos + 1)));
        view.dispatch(tr);
        return false;
    }
    function drawGapCursor(state) {
        if (!(state.selection instanceof GapCursor))
            return null;
        let node = document.createElement("div");
        node.className = "ProseMirror-gapcursor";
        return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node, { key: "gapcursor" })]);
    }

    function crelt() {
      var elt = arguments[0];
      if (typeof elt == "string") elt = document.createElement(elt);
      var i = 1, next = arguments[1];
      if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
        for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
          var value = next[name];
          if (typeof value == "string") elt.setAttribute(name, value);
          else if (value != null) elt[name] = value;
        }
        i++;
      }
      for (; i < arguments.length; i++) add(elt, arguments[i]);
      return elt
    }

    function add(elt, child) {
      if (typeof child == "string") {
        elt.appendChild(document.createTextNode(child));
      } else if (child == null) ; else if (child.nodeType != null) {
        elt.appendChild(child);
      } else if (Array.isArray(child)) {
        for (var i = 0; i < child.length; i++) add(elt, child[i]);
      } else {
        throw new RangeError("Unsupported child node: " + child)
      }
    }

    const SVG = "http://www.w3.org/2000/svg";
    const XLINK = "http://www.w3.org/1999/xlink";
    const prefix$2 = "ProseMirror-icon";
    function hashPath(path) {
        let hash = 0;
        for (let i = 0; i < path.length; i++)
            hash = (((hash << 5) - hash) + path.charCodeAt(i)) | 0;
        return hash;
    }
    function getIcon(root, icon) {
        let doc = (root.nodeType == 9 ? root : root.ownerDocument) || document;
        let node = doc.createElement("div");
        node.className = prefix$2;
        if (icon.path) {
            let { path, width, height } = icon;
            let name = "pm-icon-" + hashPath(path).toString(16);
            if (!doc.getElementById(name))
                buildSVG(root, name, icon);
            let svg = node.appendChild(doc.createElementNS(SVG, "svg"));
            svg.style.width = (width / height) + "em";
            let use = svg.appendChild(doc.createElementNS(SVG, "use"));
            use.setAttributeNS(XLINK, "href", /([^#]*)/.exec(doc.location.toString())[1] + "#" + name);
        }
        else if (icon.dom) {
            node.appendChild(icon.dom.cloneNode(true));
        }
        else {
            let { text, css } = icon;
            node.appendChild(doc.createElement("span")).textContent = text || '';
            if (css)
                node.firstChild.style.cssText = css;
        }
        return node;
    }
    function buildSVG(root, name, data) {
        let [doc, top] = root.nodeType == 9 ? [root, root.body] : [root.ownerDocument || document, root];
        let collection = doc.getElementById(prefix$2 + "-collection");
        if (!collection) {
            collection = doc.createElementNS(SVG, "svg");
            collection.id = prefix$2 + "-collection";
            collection.style.display = "none";
            top.insertBefore(collection, top.firstChild);
        }
        let sym = doc.createElementNS(SVG, "symbol");
        sym.id = name;
        sym.setAttribute("viewBox", "0 0 " + data.width + " " + data.height);
        let path = sym.appendChild(doc.createElementNS(SVG, "path"));
        path.setAttribute("d", data.path);
        collection.appendChild(sym);
    }

    const prefix$1 = "ProseMirror-menu";
    /**
    An icon or label that, when clicked, executes a command.
    */
    class MenuItem {
        /**
        Create a menu item.
        */
        constructor(
        /**
        The spec used to create this item.
        */
        spec) {
            this.spec = spec;
        }
        /**
        Renders the icon according to its [display
        spec](https://prosemirror.net/docs/ref/#menu.MenuItemSpec.display), and adds an event handler which
        executes the command when the representation is clicked.
        */
        render(view) {
            let spec = this.spec;
            let dom = spec.render ? spec.render(view)
                : spec.icon ? getIcon(view.root, spec.icon)
                    : spec.label ? crelt("div", null, translate(view, spec.label))
                        : null;
            if (!dom)
                throw new RangeError("MenuItem without icon or label property");
            if (spec.title) {
                const title = (typeof spec.title === "function" ? spec.title(view.state) : spec.title);
                dom.setAttribute("title", translate(view, title));
            }
            if (spec.class)
                dom.classList.add(spec.class);
            if (spec.css)
                dom.style.cssText += spec.css;
            dom.addEventListener("mousedown", e => {
                e.preventDefault();
                if (!dom.classList.contains(prefix$1 + "-disabled"))
                    spec.run(view.state, view.dispatch, view, e);
            });
            function update(state) {
                if (spec.select) {
                    let selected = spec.select(state);
                    dom.style.display = selected ? "" : "none";
                    if (!selected)
                        return false;
                }
                let enabled = true;
                if (spec.enable) {
                    enabled = spec.enable(state) || false;
                    setClass(dom, prefix$1 + "-disabled", !enabled);
                }
                if (spec.active) {
                    let active = enabled && spec.active(state) || false;
                    setClass(dom, prefix$1 + "-active", active);
                }
                return true;
            }
            return { dom, update };
        }
    }
    function translate(view, text) {
        return view._props.translate ? view._props.translate(text) : text;
    }
    let lastMenuEvent = { time: 0, node: null };
    function markMenuEvent(e) {
        lastMenuEvent.time = Date.now();
        lastMenuEvent.node = e.target;
    }
    function isMenuEvent(wrapper) {
        return Date.now() - 100 < lastMenuEvent.time &&
            lastMenuEvent.node && wrapper.contains(lastMenuEvent.node);
    }
    /**
    A drop-down menu, displayed as a label with a downwards-pointing
    triangle to the right of it.
    */
    class Dropdown {
        /**
        Create a dropdown wrapping the elements.
        */
        constructor(content, 
        /**
        @internal
        */
        options = {}) {
            this.options = options;
            this.options = options || {};
            this.content = Array.isArray(content) ? content : [content];
        }
        /**
        Render the dropdown menu and sub-items.
        */
        render(view) {
            let content = renderDropdownItems(this.content, view);
            let win = view.dom.ownerDocument.defaultView || window;
            let label = crelt("div", { class: prefix$1 + "-dropdown " + (this.options.class || ""),
                style: this.options.css }, translate(view, this.options.label || ""));
            if (this.options.title)
                label.setAttribute("title", translate(view, this.options.title));
            let wrap = crelt("div", { class: prefix$1 + "-dropdown-wrap" }, label);
            let open = null;
            let listeningOnClose = null;
            let close = () => {
                if (open && open.close()) {
                    open = null;
                    win.removeEventListener("mousedown", listeningOnClose);
                }
            };
            label.addEventListener("mousedown", e => {
                e.preventDefault();
                markMenuEvent(e);
                if (open) {
                    close();
                }
                else {
                    open = this.expand(wrap, content.dom);
                    win.addEventListener("mousedown", listeningOnClose = () => {
                        if (!isMenuEvent(wrap))
                            close();
                    });
                }
            });
            function update(state) {
                let inner = content.update(state);
                wrap.style.display = inner ? "" : "none";
                return inner;
            }
            return { dom: wrap, update };
        }
        /**
        @internal
        */
        expand(dom, items) {
            let menuDOM = crelt("div", { class: prefix$1 + "-dropdown-menu " + (this.options.class || "") }, items);
            let done = false;
            function close() {
                if (done)
                    return false;
                done = true;
                dom.removeChild(menuDOM);
                return true;
            }
            dom.appendChild(menuDOM);
            return { close, node: menuDOM };
        }
    }
    function renderDropdownItems(items, view) {
        let rendered = [], updates = [];
        for (let i = 0; i < items.length; i++) {
            let { dom, update } = items[i].render(view);
            rendered.push(crelt("div", { class: prefix$1 + "-dropdown-item" }, dom));
            updates.push(update);
        }
        return { dom: rendered, update: combineUpdates(updates, rendered) };
    }
    function combineUpdates(updates, nodes) {
        return (state) => {
            let something = false;
            for (let i = 0; i < updates.length; i++) {
                let up = updates[i](state);
                nodes[i].style.display = up ? "" : "none";
                if (up)
                    something = true;
            }
            return something;
        };
    }
    /**
    Represents a submenu wrapping a group of elements that start
    hidden and expand to the right when hovered over or tapped.
    */
    class DropdownSubmenu {
        /**
        Creates a submenu for the given group of menu elements. The
        following options are recognized:
        */
        constructor(content, 
        /**
        @internal
        */
        options = {}) {
            this.options = options;
            this.content = Array.isArray(content) ? content : [content];
        }
        /**
        Renders the submenu.
        */
        render(view) {
            let items = renderDropdownItems(this.content, view);
            let win = view.dom.ownerDocument.defaultView || window;
            let label = crelt("div", { class: prefix$1 + "-submenu-label" }, translate(view, this.options.label || ""));
            let wrap = crelt("div", { class: prefix$1 + "-submenu-wrap" }, label, crelt("div", { class: prefix$1 + "-submenu" }, items.dom));
            let listeningOnClose = null;
            label.addEventListener("mousedown", e => {
                e.preventDefault();
                markMenuEvent(e);
                setClass(wrap, prefix$1 + "-submenu-wrap-active", false);
                if (!listeningOnClose)
                    win.addEventListener("mousedown", listeningOnClose = () => {
                        if (!isMenuEvent(wrap)) {
                            wrap.classList.remove(prefix$1 + "-submenu-wrap-active");
                            win.removeEventListener("mousedown", listeningOnClose);
                            listeningOnClose = null;
                        }
                    });
            });
            function update(state) {
                let inner = items.update(state);
                wrap.style.display = inner ? "" : "none";
                return inner;
            }
            return { dom: wrap, update };
        }
    }
    /**
    Render the given, possibly nested, array of menu elements into a
    document fragment, placing separators between them (and ensuring no
    superfluous separators appear when some of the groups turn out to
    be empty).
    */
    function renderGrouped(view, content) {
        let result = document.createDocumentFragment();
        let updates = [], separators = [];
        for (let i = 0; i < content.length; i++) {
            let items = content[i], localUpdates = [], localNodes = [];
            for (let j = 0; j < items.length; j++) {
                let { dom, update } = items[j].render(view);
                let span = crelt("span", { class: prefix$1 + "item" }, dom);
                result.appendChild(span);
                localNodes.push(span);
                localUpdates.push(update);
            }
            if (localUpdates.length) {
                updates.push(combineUpdates(localUpdates, localNodes));
                if (i < content.length - 1)
                    separators.push(result.appendChild(separator()));
            }
        }
        function update(state) {
            let something = false, needSep = false;
            for (let i = 0; i < updates.length; i++) {
                let hasContent = updates[i](state);
                if (i)
                    separators[i - 1].style.display = needSep && hasContent ? "" : "none";
                needSep = hasContent;
                if (hasContent)
                    something = true;
            }
            return something;
        }
        return { dom: result, update };
    }
    function separator() {
        return crelt("span", { class: prefix$1 + "separator" });
    }
    /**
    A set of basic editor-related icons. Contains the properties
    `join`, `lift`, `selectParentNode`, `undo`, `redo`, `strong`, `em`,
    `code`, `link`, `bulletList`, `orderedList`, and `blockquote`, each
    holding an object that can be used as the `icon` option to
    `MenuItem`.
    */
    const icons = {
        join: {
            width: 800, height: 900,
            path: "M0 75h800v125h-800z M0 825h800v-125h-800z M250 400h100v-100h100v100h100v100h-100v100h-100v-100h-100z"
        },
        lift: {
            width: 1024, height: 1024,
            path: "M219 310v329q0 7-5 12t-12 5q-8 0-13-5l-164-164q-5-5-5-13t5-13l164-164q5-5 13-5 7 0 12 5t5 12zM1024 749v109q0 7-5 12t-12 5h-987q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h987q7 0 12 5t5 12zM1024 530v109q0 7-5 12t-12 5h-621q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h621q7 0 12 5t5 12zM1024 310v109q0 7-5 12t-12 5h-621q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h621q7 0 12 5t5 12zM1024 91v109q0 7-5 12t-12 5h-987q-7 0-12-5t-5-12v-109q0-7 5-12t12-5h987q7 0 12 5t5 12z"
        },
        selectParentNode: { text: "\u2b1a", css: "font-weight: bold" },
        undo: {
            width: 1024, height: 1024,
            path: "M761 1024c113-206 132-520-313-509v253l-384-384 384-384v248c534-13 594 472 313 775z"
        },
        redo: {
            width: 1024, height: 1024,
            path: "M576 248v-248l384 384-384 384v-253c-446-10-427 303-313 509-280-303-221-789 313-775z"
        },
        strong: {
            width: 805, height: 1024,
            path: "M317 869q42 18 80 18 214 0 214-191 0-65-23-102-15-25-35-42t-38-26-46-14-48-6-54-1q-41 0-57 5 0 30-0 90t-0 90q0 4-0 38t-0 55 2 47 6 38zM309 442q24 4 62 4 46 0 81-7t62-25 42-51 14-81q0-40-16-70t-45-46-61-24-70-8q-28 0-74 7 0 28 2 86t2 86q0 15-0 45t-0 45q0 26 0 39zM0 950l1-53q8-2 48-9t60-15q4-6 7-15t4-19 3-18 1-21 0-19v-37q0-561-12-585-2-4-12-8t-25-6-28-4-27-2-17-1l-2-47q56-1 194-6t213-5q13 0 39 0t38 0q40 0 78 7t73 24 61 40 42 59 16 78q0 29-9 54t-22 41-36 32-41 25-48 22q88 20 146 76t58 141q0 57-20 102t-53 74-78 48-93 27-100 8q-25 0-75-1t-75-1q-60 0-175 6t-132 6z"
        },
        em: {
            width: 585, height: 1024,
            path: "M0 949l9-48q3-1 46-12t63-21q16-20 23-57 0-4 35-165t65-310 29-169v-14q-13-7-31-10t-39-4-33-3l10-58q18 1 68 3t85 4 68 1q27 0 56-1t69-4 56-3q-2 22-10 50-17 5-58 16t-62 19q-4 10-8 24t-5 22-4 26-3 24q-15 84-50 239t-44 203q-1 5-7 33t-11 51-9 47-3 32l0 10q9 2 105 17-1 25-9 56-6 0-18 0t-18 0q-16 0-49-5t-49-5q-78-1-117-1-29 0-81 5t-69 6z"
        },
        code: {
            width: 896, height: 1024,
            path: "M608 192l-96 96 224 224-224 224 96 96 288-320-288-320zM288 192l-288 320 288 320 96-96-224-224 224-224-96-96z"
        },
        link: {
            width: 951, height: 1024,
            path: "M832 694q0-22-16-38l-118-118q-16-16-38-16-24 0-41 18 1 1 10 10t12 12 8 10 7 14 2 15q0 22-16 38t-38 16q-8 0-15-2t-14-7-10-8-12-12-10-10q-18 17-18 41 0 22 16 38l117 118q15 15 38 15 22 0 38-14l84-83q16-16 16-38zM430 292q0-22-16-38l-117-118q-16-16-38-16-22 0-38 15l-84 83q-16 16-16 38 0 22 16 38l118 118q15 15 38 15 24 0 41-17-1-1-10-10t-12-12-8-10-7-14-2-15q0-22 16-38t38-16q8 0 15 2t14 7 10 8 12 12 10 10q18-17 18-41zM941 694q0 68-48 116l-84 83q-47 47-116 47-69 0-116-48l-117-118q-47-47-47-116 0-70 50-119l-50-50q-49 50-118 50-68 0-116-48l-118-118q-48-48-48-116t48-116l84-83q47-47 116-47 69 0 116 48l117 118q47 47 47 116 0 70-50 119l50 50q49-50 118-50 68 0 116 48l118 118q48 48 48 116z"
        },
        bulletList: {
            width: 768, height: 896,
            path: "M0 512h128v-128h-128v128zM0 256h128v-128h-128v128zM0 768h128v-128h-128v128zM256 512h512v-128h-512v128zM256 256h512v-128h-512v128zM256 768h512v-128h-512v128z"
        },
        orderedList: {
            width: 768, height: 896,
            path: "M320 512h448v-128h-448v128zM320 768h448v-128h-448v128zM320 128v128h448v-128h-448zM79 384h78v-256h-36l-85 23v50l43-2v185zM189 590c0-36-12-78-96-78-33 0-64 6-83 16l1 66c21-10 42-15 67-15s32 11 32 28c0 26-30 58-110 112v50h192v-67l-91 2c49-30 87-66 87-113l1-1z"
        },
        blockquote: {
            width: 640, height: 896,
            path: "M0 448v256h256v-256h-128c0 0 0-128 128-128v-128c0 0-256 0-256 256zM640 320v-128c0 0-256 0-256 256v256h256v-256h-128c0 0 0-128 128-128z"
        }
    };
    /**
    Menu item for the `joinUp` command.
    */
    const joinUpItem = new MenuItem({
        title: "Join with above block",
        run: joinUp,
        select: state => joinUp(state),
        icon: icons.join
    });
    /**
    Menu item for the `lift` command.
    */
    const liftItem = new MenuItem({
        title: "Lift out of enclosing block",
        run: lift,
        select: state => lift(state),
        icon: icons.lift
    });
    /**
    Menu item for the `selectParentNode` command.
    */
    const selectParentNodeItem = new MenuItem({
        title: "Select parent node",
        run: selectParentNode,
        select: state => selectParentNode(state),
        icon: icons.selectParentNode
    });
    /**
    Menu item for the `undo` command.
    */
    let undoItem = new MenuItem({
        title: "Undo last change",
        run: undo,
        enable: state => undo(state),
        icon: icons.undo
    });
    /**
    Menu item for the `redo` command.
    */
    let redoItem = new MenuItem({
        title: "Redo last undone change",
        run: redo,
        enable: state => redo(state),
        icon: icons.redo
    });
    /**
    Build a menu item for wrapping the selection in a given node type.
    Adds `run` and `select` properties to the ones present in
    `options`. `options.attrs` may be an object that provides
    attributes for the wrapping node.
    */
    function wrapItem(nodeType, options) {
        let passedOptions = {
            run(state, dispatch) {
                return wrapIn(nodeType, options.attrs)(state, dispatch);
            },
            select(state) {
                return wrapIn(nodeType, options.attrs)(state);
            }
        };
        for (let prop in options)
            passedOptions[prop] = options[prop];
        return new MenuItem(passedOptions);
    }
    /**
    Build a menu item for changing the type of the textblock around the
    selection to the given type. Provides `run`, `active`, and `select`
    properties. Others must be given in `options`. `options.attrs` may
    be an object to provide the attributes for the textblock node.
    */
    function blockTypeItem(nodeType, options) {
        let command = setBlockType(nodeType, options.attrs);
        let passedOptions = {
            run: command,
            enable(state) { return command(state); },
            active(state) {
                let { $from, to, node } = state.selection;
                if (node)
                    return node.hasMarkup(nodeType, options.attrs);
                return to <= $from.end() && $from.parent.hasMarkup(nodeType, options.attrs);
            }
        };
        for (let prop in options)
            passedOptions[prop] = options[prop];
        return new MenuItem(passedOptions);
    }
    // Work around classList.toggle being broken in IE11
    function setClass(dom, cls, on) {
        if (on)
            dom.classList.add(cls);
        else
            dom.classList.remove(cls);
    }

    const prefix$3 = "ProseMirror-menubar";
    function isIOS() {
        if (typeof navigator == "undefined")
            return false;
        let agent = navigator.userAgent;
        return !/Edge\/\d/.test(agent) && /AppleWebKit/.test(agent) && /Mobile\/\w+/.test(agent);
    }
    /**
    A plugin that will place a menu bar above the editor. Note that
    this involves wrapping the editor in an additional `<div>`.
    */
    function menuBar(options) {
        return new Plugin({
            view(editorView) { return new MenuBarView(editorView, options); }
        });
    }
    class MenuBarView {
        constructor(editorView, options) {
            this.editorView = editorView;
            this.options = options;
            this.spacer = null;
            this.maxHeight = 0;
            this.widthForMaxHeight = 0;
            this.floating = false;
            this.scrollHandler = null;
            this.wrapper = crelt("div", { class: prefix$3 + "-wrapper" });
            this.menu = this.wrapper.appendChild(crelt("div", { class: prefix$3 }));
            this.menu.className = prefix$3;
            if (editorView.dom.parentNode)
                editorView.dom.parentNode.replaceChild(this.wrapper, editorView.dom);
            this.wrapper.appendChild(editorView.dom);
            let { dom, update } = renderGrouped(this.editorView, this.options.content);
            this.contentUpdate = update;
            this.menu.appendChild(dom);
            this.update();
            if (options.floating && !isIOS()) {
                this.updateFloat();
                let potentialScrollers = getAllWrapping(this.wrapper);
                this.scrollHandler = (e) => {
                    let root = this.editorView.root;
                    if (!(root.body || root).contains(this.wrapper))
                        potentialScrollers.forEach(el => el.removeEventListener("scroll", this.scrollHandler));
                    else
                        this.updateFloat(e.target.getBoundingClientRect ? e.target : undefined);
                };
                potentialScrollers.forEach(el => el.addEventListener('scroll', this.scrollHandler));
            }
        }
        update() {
            this.contentUpdate(this.editorView.state);
            if (this.floating) {
                this.updateScrollCursor();
            }
            else {
                if (this.menu.offsetWidth != this.widthForMaxHeight) {
                    this.widthForMaxHeight = this.menu.offsetWidth;
                    this.maxHeight = 0;
                }
                if (this.menu.offsetHeight > this.maxHeight) {
                    this.maxHeight = this.menu.offsetHeight;
                    this.menu.style.minHeight = this.maxHeight + "px";
                }
            }
        }
        updateScrollCursor() {
            let selection = this.editorView.root.getSelection();
            if (!selection.focusNode)
                return;
            let rects = selection.getRangeAt(0).getClientRects();
            let selRect = rects[selectionIsInverted(selection) ? 0 : rects.length - 1];
            if (!selRect)
                return;
            let menuRect = this.menu.getBoundingClientRect();
            if (selRect.top < menuRect.bottom && selRect.bottom > menuRect.top) {
                let scrollable = findWrappingScrollable(this.wrapper);
                if (scrollable)
                    scrollable.scrollTop -= (menuRect.bottom - selRect.top);
            }
        }
        updateFloat(scrollAncestor) {
            let parent = this.wrapper, editorRect = parent.getBoundingClientRect(), top = scrollAncestor ? Math.max(0, scrollAncestor.getBoundingClientRect().top) : 0;
            if (this.floating) {
                if (editorRect.top >= top || editorRect.bottom < this.menu.offsetHeight + 10) {
                    this.floating = false;
                    this.menu.style.position = this.menu.style.left = this.menu.style.top = this.menu.style.width = "";
                    this.menu.style.display = "";
                    this.spacer.parentNode.removeChild(this.spacer);
                    this.spacer = null;
                }
                else {
                    let border = (parent.offsetWidth - parent.clientWidth) / 2;
                    this.menu.style.left = (editorRect.left + border) + "px";
                    this.menu.style.display = editorRect.top > (this.editorView.dom.ownerDocument.defaultView || window).innerHeight
                        ? "none" : "";
                    if (scrollAncestor)
                        this.menu.style.top = top + "px";
                }
            }
            else {
                if (editorRect.top < top && editorRect.bottom >= this.menu.offsetHeight + 10) {
                    this.floating = true;
                    let menuRect = this.menu.getBoundingClientRect();
                    this.menu.style.left = menuRect.left + "px";
                    this.menu.style.width = menuRect.width + "px";
                    if (scrollAncestor)
                        this.menu.style.top = top + "px";
                    this.menu.style.position = "fixed";
                    this.spacer = crelt("div", { class: prefix$3 + "-spacer", style: `height: ${menuRect.height}px` });
                    parent.insertBefore(this.spacer, this.menu);
                }
            }
        }
        destroy() {
            if (this.wrapper.parentNode)
                this.wrapper.parentNode.replaceChild(this.editorView.dom, this.wrapper);
        }
    }
    // Not precise, but close enough
    function selectionIsInverted(selection) {
        if (selection.anchorNode == selection.focusNode)
            return selection.anchorOffset > selection.focusOffset;
        return selection.anchorNode.compareDocumentPosition(selection.focusNode) == Node.DOCUMENT_POSITION_FOLLOWING;
    }
    function findWrappingScrollable(node) {
        for (let cur = node.parentNode; cur; cur = cur.parentNode)
            if (cur.scrollHeight > cur.clientHeight)
                return cur;
    }
    function getAllWrapping(node) {
        let res = [node.ownerDocument.defaultView || window];
        for (let cur = node.parentNode; cur; cur = cur.parentNode)
            res.push(cur);
        return res;
    }

    /**
    Input rules are regular expressions describing a piece of text
    that, when typed, causes something to happen. This might be
    changing two dashes into an emdash, wrapping a paragraph starting
    with `"> "` into a blockquote, or something entirely different.
    */
    class InputRule {
        // :: (RegExp, union<string, (state: EditorState, match: [string], start: number, end: number) → ?Transaction>)
        /**
        Create an input rule. The rule applies when the user typed
        something and the text directly in front of the cursor matches
        `match`, which should end with `$`.
        
        The `handler` can be a string, in which case the matched text, or
        the first matched group in the regexp, is replaced by that
        string.
        
        Or a it can be a function, which will be called with the match
        array produced by
        [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec),
        as well as the start and end of the matched range, and which can
        return a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) that describes the
        rule's effect, or null to indicate the input was not handled.
        */
        constructor(
        /**
        @internal
        */
        match, handler, options = {}) {
            this.match = match;
            this.match = match;
            this.handler = typeof handler == "string" ? stringHandler(handler) : handler;
            this.undoable = options.undoable !== false;
            this.inCode = options.inCode || false;
        }
    }
    function stringHandler(string) {
        return function (state, match, start, end) {
            let insert = string;
            if (match[1]) {
                let offset = match[0].lastIndexOf(match[1]);
                insert += match[0].slice(offset + match[1].length);
                start += offset;
                let cutOff = start - end;
                if (cutOff > 0) {
                    insert = match[0].slice(offset - cutOff, offset) + insert;
                    start = end;
                }
            }
            return state.tr.insertText(insert, start, end);
        };
    }
    const MAX_MATCH = 500;
    /**
    Create an input rules plugin. When enabled, it will cause text
    input that matches any of the given rules to trigger the rule's
    action.
    */
    function inputRules({ rules }) {
        let plugin = new Plugin({
            state: {
                init() { return null; },
                apply(tr, prev) {
                    let stored = tr.getMeta(this);
                    if (stored)
                        return stored;
                    return tr.selectionSet || tr.docChanged ? null : prev;
                }
            },
            props: {
                handleTextInput(view, from, to, text) {
                    return run(view, from, to, text, rules, plugin);
                },
                handleDOMEvents: {
                    compositionend: (view) => {
                        setTimeout(() => {
                            let { $cursor } = view.state.selection;
                            if ($cursor)
                                run(view, $cursor.pos, $cursor.pos, "", rules, plugin);
                        });
                    }
                }
            },
            isInputRules: true
        });
        return plugin;
    }
    function run(view, from, to, text, rules, plugin) {
        if (view.composing)
            return false;
        let state = view.state, $from = state.doc.resolve(from);
        let textBefore = $from.parent.textBetween(Math.max(0, $from.parentOffset - MAX_MATCH), $from.parentOffset, null, "\ufffc") + text;
        for (let i = 0; i < rules.length; i++) {
            let rule = rules[i];
            if ($from.parent.type.spec.code) {
                if (!rule.inCode)
                    continue;
            }
            else if (rule.inCode === "only") {
                continue;
            }
            let match = rule.match.exec(textBefore);
            let tr = match && rule.handler(state, match, from - (match[0].length - text.length), to);
            if (!tr)
                continue;
            if (rule.undoable)
                tr.setMeta(plugin, { transform: tr, from, to, text });
            view.dispatch(tr);
            return true;
        }
        return false;
    }
    /**
    This is a command that will undo an input rule, if applying such a
    rule was the last thing that the user did.
    */
    const undoInputRule = (state, dispatch) => {
        let plugins = state.plugins;
        for (let i = 0; i < plugins.length; i++) {
            let plugin = plugins[i], undoable;
            if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
                if (dispatch) {
                    let tr = state.tr, toUndo = undoable.transform;
                    for (let j = toUndo.steps.length - 1; j >= 0; j--)
                        tr.step(toUndo.steps[j].invert(toUndo.docs[j]));
                    if (undoable.text) {
                        let marks = tr.doc.resolve(undoable.from).marks();
                        tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));
                    }
                    else {
                        tr.delete(undoable.from, undoable.to);
                    }
                    dispatch(tr);
                }
                return true;
            }
        }
        return false;
    };

    /**
    Converts double dashes to an emdash.
    */
    const emDash = new InputRule(/--$/, "—");
    /**
    Converts three dots to an ellipsis character.
    */
    const ellipsis = new InputRule(/\.\.\.$/, "…");
    /**
    “Smart” opening double quotes.
    */
    const openDoubleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/, "“");
    /**
    “Smart” closing double quotes.
    */
    const closeDoubleQuote = new InputRule(/"$/, "”");
    /**
    “Smart” opening single quotes.
    */
    const openSingleQuote = new InputRule(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/, "‘");
    /**
    “Smart” closing single quotes.
    */
    const closeSingleQuote = new InputRule(/'$/, "’");
    /**
    Smart-quote related input rules.
    */
    const smartQuotes = [openDoubleQuote, closeDoubleQuote, openSingleQuote, closeSingleQuote];

    /**
    Build an input rule for automatically wrapping a textblock when a
    given string is typed. The `regexp` argument is
    directly passed through to the `InputRule` constructor. You'll
    probably want the regexp to start with `^`, so that the pattern can
    only occur at the start of a textblock.

    `nodeType` is the type of node to wrap in. If it needs attributes,
    you can either pass them directly, or pass a function that will
    compute them from the regular expression match.

    By default, if there's a node with the same type above the newly
    wrapped node, the rule will try to [join](https://prosemirror.net/docs/ref/#transform.Transform.join) those
    two nodes. You can pass a join predicate, which takes a regular
    expression match and the node before the wrapped node, and can
    return a boolean to indicate whether a join should happen.
    */
    function wrappingInputRule(regexp, nodeType, getAttrs = null, joinPredicate) {
        return new InputRule(regexp, (state, match, start, end) => {
            let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
            let tr = state.tr.delete(start, end);
            let $start = tr.doc.resolve(start), range = $start.blockRange(), wrapping = range && findWrapping(range, nodeType, attrs);
            if (!wrapping)
                return null;
            tr.wrap(range, wrapping);
            let before = tr.doc.resolve(start - 1).nodeBefore;
            if (before && before.type == nodeType && canJoin(tr.doc, start - 1) &&
                (!joinPredicate || joinPredicate(match, before)))
                tr.join(start - 1);
            return tr;
        });
    }
    /**
    Build an input rule that changes the type of a textblock when the
    matched text is typed into it. You'll usually want to start your
    regexp with `^` to that it is only matched at the start of a
    textblock. The optional `getAttrs` parameter can be used to compute
    the new node's attributes, and works the same as in the
    `wrappingInputRule` function.
    */
    function textblockTypeInputRule(regexp, nodeType, getAttrs = null) {
        return new InputRule(regexp, (state, match, start, end) => {
            let $start = state.doc.resolve(start);
            let attrs = getAttrs instanceof Function ? getAttrs(match) : getAttrs;
            if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), nodeType))
                return null;
            return state.tr
                .delete(start, end)
                .setBlockType(start, start, nodeType, attrs);
        });
    }

    const prefix = "ProseMirror-prompt";
    function openPrompt(options) {
        let wrapper = document.body.appendChild(document.createElement("div"));
        wrapper.className = prefix;
        let mouseOutside = (e) => { if (!wrapper.contains(e.target))
            close(); };
        setTimeout(() => window.addEventListener("mousedown", mouseOutside), 50);
        let close = () => {
            window.removeEventListener("mousedown", mouseOutside);
            if (wrapper.parentNode)
                wrapper.parentNode.removeChild(wrapper);
        };
        let domFields = [];
        for (let name in options.fields)
            domFields.push(options.fields[name].render());
        let submitButton = document.createElement("button");
        submitButton.type = "submit";
        submitButton.className = prefix + "-submit";
        submitButton.textContent = "OK";
        let cancelButton = document.createElement("button");
        cancelButton.type = "button";
        cancelButton.className = prefix + "-cancel";
        cancelButton.textContent = "Cancel";
        cancelButton.addEventListener("click", close);
        let form = wrapper.appendChild(document.createElement("form"));
        if (options.title)
            form.appendChild(document.createElement("h5")).textContent = options.title;
        domFields.forEach(field => {
            form.appendChild(document.createElement("div")).appendChild(field);
        });
        let buttons = form.appendChild(document.createElement("div"));
        buttons.className = prefix + "-buttons";
        buttons.appendChild(submitButton);
        buttons.appendChild(document.createTextNode(" "));
        buttons.appendChild(cancelButton);
        let box = wrapper.getBoundingClientRect();
        wrapper.style.top = ((window.innerHeight - box.height) / 2) + "px";
        wrapper.style.left = ((window.innerWidth - box.width) / 2) + "px";
        let submit = () => {
            let params = getValues(options.fields, domFields);
            if (params) {
                close();
                options.callback(params);
            }
        };
        form.addEventListener("submit", e => {
            e.preventDefault();
            submit();
        });
        form.addEventListener("keydown", e => {
            if (e.keyCode == 27) {
                e.preventDefault();
                close();
            }
            else if (e.keyCode == 13 && !(e.ctrlKey || e.metaKey || e.shiftKey)) {
                e.preventDefault();
                submit();
            }
            else if (e.keyCode == 9) {
                window.setTimeout(() => {
                    if (!wrapper.contains(document.activeElement))
                        close();
                }, 500);
            }
        });
        let input = form.elements[0];
        if (input)
            input.focus();
    }
    function getValues(fields, domFields) {
        let result = Object.create(null), i = 0;
        for (let name in fields) {
            let field = fields[name], dom = domFields[i++];
            let value = field.read(dom), bad = field.validate(value);
            if (bad) {
                reportInvalid(dom, bad);
                return null;
            }
            result[name] = field.clean(value);
        }
        return result;
    }
    function reportInvalid(dom, message) {
        // FIXME this is awful and needs a lot more work
        let parent = dom.parentNode;
        let msg = parent.appendChild(document.createElement("div"));
        msg.style.left = (dom.offsetLeft + dom.offsetWidth + 2) + "px";
        msg.style.top = (dom.offsetTop - 5) + "px";
        msg.className = "ProseMirror-invalid";
        msg.textContent = message;
        setTimeout(() => parent.removeChild(msg), 1500);
    }
    /**
    The type of field that `openPrompt` expects to be passed to it.
    */
    class Field {
        /**
        Create a field with the given options. Options support by all
        field types are:
        */
        constructor(
        /**
        @internal
        */
        options) {
            this.options = options;
        }
        /**
        Read the field's value from its DOM node.
        */
        read(dom) { return dom.value; }
        /**
        A field-type-specific validation function.
        */
        validateType(value) { return null; }
        /**
        @internal
        */
        validate(value) {
            if (!value && this.options.required)
                return "Required field";
            return this.validateType(value) || (this.options.validate ? this.options.validate(value) : null);
        }
        clean(value) {
            return this.options.clean ? this.options.clean(value) : value;
        }
    }
    /**
    A field class for single-line text fields.
    */
    let TextField$1 = class TextField extends Field {
        render() {
            let input = document.createElement("input");
            input.type = "text";
            input.placeholder = this.options.label;
            input.value = this.options.value || "";
            input.autocomplete = "off";
            return input;
        }
    };

    // Helpers to create specific types of items
    function canInsert(state, nodeType) {
        let $from = state.selection.$from;
        for (let d = $from.depth; d >= 0; d--) {
            let index = $from.index(d);
            if ($from.node(d).canReplaceWith(index, index, nodeType))
                return true;
        }
        return false;
    }
    function insertImageItem(nodeType) {
        return new MenuItem({
            title: "Insert image",
            label: "Image",
            enable(state) { return canInsert(state, nodeType); },
            run(state, _, view) {
                let { from, to } = state.selection, attrs = null;
                if (state.selection instanceof NodeSelection && state.selection.node.type == nodeType)
                    attrs = state.selection.node.attrs;
                openPrompt({
                    title: "Insert image",
                    fields: {
                        src: new TextField$1({ label: "Location", required: true, value: attrs && attrs.src }),
                        title: new TextField$1({ label: "Title", value: attrs && attrs.title }),
                        alt: new TextField$1({ label: "Description",
                            value: attrs ? attrs.alt : state.doc.textBetween(from, to, " ") })
                    },
                    callback(attrs) {
                        view.dispatch(view.state.tr.replaceSelectionWith(nodeType.createAndFill(attrs)));
                        view.focus();
                    }
                });
            }
        });
    }
    function cmdItem(cmd, options) {
        let passedOptions = {
            label: options.title,
            run: cmd
        };
        for (let prop in options)
            passedOptions[prop] = options[prop];
        if (!options.enable && !options.select)
            passedOptions[options.enable ? "enable" : "select"] = state => cmd(state);
        return new MenuItem(passedOptions);
    }
    function markActive(state, type) {
        let { from, $from, to, empty } = state.selection;
        if (empty)
            return !!type.isInSet(state.storedMarks || $from.marks());
        else
            return state.doc.rangeHasMark(from, to, type);
    }
    function markItem(markType, options) {
        let passedOptions = {
            active(state) { return markActive(state, markType); }
        };
        for (let prop in options)
            passedOptions[prop] = options[prop];
        return cmdItem(toggleMark(markType), passedOptions);
    }
    function linkItem(markType) {
        return new MenuItem({
            title: "Add or remove link",
            icon: icons.link,
            active(state) { return markActive(state, markType); },
            enable(state) { return !state.selection.empty; },
            run(state, dispatch, view) {
                if (markActive(state, markType)) {
                    toggleMark(markType)(state, dispatch);
                    return true;
                }
                openPrompt({
                    title: "Create a link",
                    fields: {
                        href: new TextField$1({
                            label: "Link target",
                            required: true
                        }),
                        title: new TextField$1({ label: "Title" })
                    },
                    callback(attrs) {
                        toggleMark(markType, attrs)(view.state, view.dispatch);
                        view.focus();
                    }
                });
            }
        });
    }
    function wrapListItem(nodeType, options) {
        return cmdItem(wrapInList(nodeType, options.attrs), options);
    }
    /**
    Given a schema, look for default mark and node types in it and
    return an object with relevant menu items relating to those marks.
    */
    function buildMenuItems(schema) {
        let r = {};
        let mark;
        if (mark = schema.marks.strong)
            r.toggleStrong = markItem(mark, { title: "Toggle strong style", icon: icons.strong });
        if (mark = schema.marks.em)
            r.toggleEm = markItem(mark, { title: "Toggle emphasis", icon: icons.em });
        if (mark = schema.marks.code)
            r.toggleCode = markItem(mark, { title: "Toggle code font", icon: icons.code });
        if (mark = schema.marks.link)
            r.toggleLink = linkItem(mark);
        let node;
        if (node = schema.nodes.image)
            r.insertImage = insertImageItem(node);
        if (node = schema.nodes.bullet_list)
            r.wrapBulletList = wrapListItem(node, {
                title: "Wrap in bullet list",
                icon: icons.bulletList
            });
        if (node = schema.nodes.ordered_list)
            r.wrapOrderedList = wrapListItem(node, {
                title: "Wrap in ordered list",
                icon: icons.orderedList
            });
        if (node = schema.nodes.blockquote)
            r.wrapBlockQuote = wrapItem(node, {
                title: "Wrap in block quote",
                icon: icons.blockquote
            });
        if (node = schema.nodes.paragraph)
            r.makeParagraph = blockTypeItem(node, {
                title: "Change to paragraph",
                label: "Plain"
            });
        if (node = schema.nodes.code_block)
            r.makeCodeBlock = blockTypeItem(node, {
                title: "Change to code block",
                label: "Code"
            });
        if (node = schema.nodes.heading)
            for (let i = 1; i <= 10; i++)
                r["makeHead" + i] = blockTypeItem(node, {
                    title: "Change to heading " + i,
                    label: "Level " + i,
                    attrs: { level: i }
                });
        if (node = schema.nodes.horizontal_rule) {
            let hr = node;
            r.insertHorizontalRule = new MenuItem({
                title: "Insert horizontal rule",
                label: "Horizontal rule",
                enable(state) { return canInsert(state, hr); },
                run(state, dispatch) { dispatch(state.tr.replaceSelectionWith(hr.create())); }
            });
        }
        let cut = (arr) => arr.filter(x => x);
        r.insertMenu = new Dropdown(cut([r.insertImage, r.insertHorizontalRule]), { label: "Insert" });
        r.typeMenu = new Dropdown(cut([r.makeParagraph, r.makeCodeBlock, r.makeHead1 && new DropdownSubmenu(cut([
                r.makeHead1, r.makeHead2, r.makeHead3, r.makeHead4, r.makeHead5, r.makeHead6
            ]), { label: "Heading" })]), { label: "Type..." });
        r.inlineMenu = [cut([r.toggleStrong, r.toggleEm, r.toggleCode, r.toggleLink])];
        r.blockMenu = [cut([r.wrapBulletList, r.wrapOrderedList, r.wrapBlockQuote, joinUpItem,
                liftItem, selectParentNodeItem])];
        r.fullMenu = r.inlineMenu.concat([[r.insertMenu, r.typeMenu]], [[undoItem, redoItem]], r.blockMenu);
        return r;
    }

    const mac = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
    /**
    Inspect the given schema looking for marks and nodes from the
    basic schema, and if found, add key bindings related to them.
    This will add:

    * **Mod-b** for toggling [strong](https://prosemirror.net/docs/ref/#schema-basic.StrongMark)
    * **Mod-i** for toggling [emphasis](https://prosemirror.net/docs/ref/#schema-basic.EmMark)
    * **Mod-`** for toggling [code font](https://prosemirror.net/docs/ref/#schema-basic.CodeMark)
    * **Ctrl-Shift-0** for making the current textblock a paragraph
    * **Ctrl-Shift-1** to **Ctrl-Shift-Digit6** for making the current
      textblock a heading of the corresponding level
    * **Ctrl-Shift-Backslash** to make the current textblock a code block
    * **Ctrl-Shift-8** to wrap the selection in an ordered list
    * **Ctrl-Shift-9** to wrap the selection in a bullet list
    * **Ctrl->** to wrap the selection in a block quote
    * **Enter** to split a non-empty textblock in a list item while at
      the same time splitting the list item
    * **Mod-Enter** to insert a hard break
    * **Mod-_** to insert a horizontal rule
    * **Backspace** to undo an input rule
    * **Alt-ArrowUp** to `joinUp`
    * **Alt-ArrowDown** to `joinDown`
    * **Mod-BracketLeft** to `lift`
    * **Escape** to `selectParentNode`

    You can suppress or map these bindings by passing a `mapKeys`
    argument, which maps key names (say `"Mod-B"` to either `false`, to
    remove the binding, or a new key name string.
    */
    function buildKeymap(schema, mapKeys) {
        let keys = {}, type;
        function bind(key, cmd) {
            if (mapKeys) {
                let mapped = mapKeys[key];
                if (mapped === false)
                    return;
                if (mapped)
                    key = mapped;
            }
            keys[key] = cmd;
        }
        bind("Mod-z", undo);
        bind("Shift-Mod-z", redo);
        bind("Backspace", undoInputRule);
        if (!mac)
            bind("Mod-y", redo);
        bind("Alt-ArrowUp", joinUp);
        bind("Alt-ArrowDown", joinDown);
        bind("Mod-BracketLeft", lift);
        bind("Escape", selectParentNode);
        if (type = schema.marks.strong) {
            bind("Mod-b", toggleMark(type));
            bind("Mod-B", toggleMark(type));
        }
        if (type = schema.marks.em) {
            bind("Mod-i", toggleMark(type));
            bind("Mod-I", toggleMark(type));
        }
        if (type = schema.marks.code)
            bind("Mod-`", toggleMark(type));
        if (type = schema.nodes.bullet_list)
            bind("Shift-Ctrl-8", wrapInList(type));
        if (type = schema.nodes.ordered_list)
            bind("Shift-Ctrl-9", wrapInList(type));
        if (type = schema.nodes.blockquote)
            bind("Ctrl->", wrapIn(type));
        if (type = schema.nodes.hard_break) {
            let br = type, cmd = chainCommands(exitCode, (state, dispatch) => {
                if (dispatch)
                    dispatch(state.tr.replaceSelectionWith(br.create()).scrollIntoView());
                return true;
            });
            bind("Mod-Enter", cmd);
            bind("Shift-Enter", cmd);
            if (mac)
                bind("Ctrl-Enter", cmd);
        }
        if (type = schema.nodes.list_item) {
            bind("Enter", splitListItem(type));
            bind("Mod-[", liftListItem(type));
            bind("Mod-]", sinkListItem(type));
        }
        if (type = schema.nodes.paragraph)
            bind("Shift-Ctrl-0", setBlockType(type));
        if (type = schema.nodes.code_block)
            bind("Shift-Ctrl-\\", setBlockType(type));
        if (type = schema.nodes.heading)
            for (let i = 1; i <= 6; i++)
                bind("Shift-Ctrl-" + i, setBlockType(type, { level: i }));
        if (type = schema.nodes.horizontal_rule) {
            let hr = type;
            bind("Mod-_", (state, dispatch) => {
                if (dispatch)
                    dispatch(state.tr.replaceSelectionWith(hr.create()).scrollIntoView());
                return true;
            });
        }
        return keys;
    }

    /**
    Given a blockquote node type, returns an input rule that turns `"> "`
    at the start of a textblock into a blockquote.
    */
    function blockQuoteRule(nodeType) {
        return wrappingInputRule(/^\s*>\s$/, nodeType);
    }
    /**
    Given a list node type, returns an input rule that turns a number
    followed by a dot at the start of a textblock into an ordered list.
    */
    function orderedListRule(nodeType) {
        return wrappingInputRule(/^(\d+)\.\s$/, nodeType, match => ({ order: +match[1] }), (match, node) => node.childCount + node.attrs.order == +match[1]);
    }
    /**
    Given a list node type, returns an input rule that turns a bullet
    (dash, plush, or asterisk) at the start of a textblock into a
    bullet list.
    */
    function bulletListRule(nodeType) {
        return wrappingInputRule(/^\s*([-+*])\s$/, nodeType);
    }
    /**
    Given a code block node type, returns an input rule that turns a
    textblock starting with three backticks into a code block.
    */
    function codeBlockRule(nodeType) {
        return textblockTypeInputRule(/^```$/, nodeType);
    }
    /**
    Given a node type and a maximum level, creates an input rule that
    turns up to that number of `#` characters followed by a space at
    the start of a textblock into a heading whose level corresponds to
    the number of `#` signs.
    */
    function headingRule(nodeType, maxLevel) {
        return textblockTypeInputRule(new RegExp("^(#{1," + maxLevel + "})\\s$"), nodeType, match => ({ level: match[1].length }));
    }
    /**
    A set of input rules for creating the basic block quotes, lists,
    code blocks, and heading.
    */
    function buildInputRules(schema) {
        let rules = smartQuotes.concat(ellipsis, emDash), type;
        if (type = schema.nodes.blockquote)
            rules.push(blockQuoteRule(type));
        if (type = schema.nodes.ordered_list)
            rules.push(orderedListRule(type));
        if (type = schema.nodes.bullet_list)
            rules.push(bulletListRule(type));
        if (type = schema.nodes.code_block)
            rules.push(codeBlockRule(type));
        if (type = schema.nodes.heading)
            rules.push(headingRule(type, 6));
        return inputRules({ rules });
    }

    /**
    Create an array of plugins pre-configured for the given schema.
    The resulting array will include the following plugins:

     * Input rules for smart quotes and creating the block types in the
       schema using markdown conventions (say `"> "` to create a
       blockquote)

     * A keymap that defines keys to create and manipulate the nodes in the
       schema

     * A keymap binding the default keys provided by the
       prosemirror-commands module

     * The undo history plugin

     * The drop cursor plugin

     * The gap cursor plugin

     * A custom plugin that adds a `menuContent` prop for the
       prosemirror-menu wrapper, and a CSS class that enables the
       additional styling defined in `style/style.css` in this package

    Probably only useful for quickly setting up a passable
    editor—you'll need more control over your settings in most
    real-world situations.
    */
    function exampleSetup(options) {
        let plugins = [
            buildInputRules(options.schema),
            keymap(buildKeymap(options.schema, options.mapKeys)),
            keymap(baseKeymap),
            dropCursor(),
            gapCursor()
        ];
        if (options.menuBar !== false)
            plugins.push(menuBar({ floating: options.floatingMenu !== false,
                content: options.menuContent || buildMenuItems(options.schema).fullMenu }));
        if (options.history !== false)
            plugins.push(history());
        return plugins.concat(new Plugin({
            props: {
                attributes: { class: "ProseMirror-example-setup-style" }
            }
        }));
    }

    var __defProp$C = Object.defineProperty;
    var __name$C = (target, value) => __defProp$C(target, "name", { value, configurable: true });
    const ProseMirror = /* @__PURE__ */ __name$C((props) => {
      const editorRef = wp.element.useRef(null);
      const [value, setValue] = wp.element.useState(props.value);
      const {
        labelProps,
        inputProps,
        descriptionProps
      } = $2d73ec29415bd339$export$712718f7aec83d5(props, editorRef);
      wp.element.useEffect(() => {
        setValue(props.value);
      }, [props.value]);
      wp.element.useEffect(() => {
        const mySchema = new Schema({
          nodes: addListNodes(schema.spec.nodes, "paragraph block*", "block"),
          marks: schema.spec.marks
        });
        const plugins = exampleSetup({ schema: mySchema });
        const editorWrapper = document.createElement("div");
        const contentDiv = document.createElement("div");
        contentDiv.innerHTML = value;
        editorWrapper.appendChild(contentDiv);
        const doc = DOMParser.fromSchema(mySchema).parse(contentDiv, { preserveWhitespace: true });
        const state = EditorState.create({ doc, plugins });
        const editorView = new EditorView(editorRef.current, {
          state,
          dispatchTransaction: (transaction) => {
            const newState = editorView.state.apply(transaction);
            editorView.updateState(newState);
            editorView.dom.onblur = () => {
              const rendered = editorView.dom.innerHTML;
              setValue(rendered);
            };
          }
        });
        return () => editorView.destroy();
      }, []);
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-editor" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("input", { ...inputProps, type: "hidden", name: props.name, value }), /* @__PURE__ */ wp.element.createElement("div", { ref: editorRef }), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "ProseMirror");

    var __defProp$B = Object.defineProperty;
    var __name$B = (target, value) => __defProp$B(target, "name", { value, configurable: true });
    const TinyMce = /* @__PURE__ */ __name$B((props) => {
      const ref = wp.element.useRef();
      const {
        labelProps,
        inputProps,
        descriptionProps
      } = $2d73ec29415bd339$export$712718f7aec83d5(props, ref);
      const [value, setValue] = wp.element.useState(props.value);
      wp.element.useEffect(() => {
        setValue(props.value);
      }, [props.value]);
      wp.element.useEffect(() => {
        setTimeout(() => {
          tinyMCE.init({
            target: ref.current,
            // Customize editor options: https://www.tiny.cloud/docs/general-configuration-guide/basic-setup/
            setup: function(editor) {
              editor.on("input", () => setValue(editor.getContent()));
            }
          });
        });
      }, []);
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-editor" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("textarea", { ref, ...inputProps }, value), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "TinyMce");

    var __defProp$A = Object.defineProperty;
    var __name$A = (target, value) => __defProp$A(target, "name", { value, configurable: true });
    var Editor = /* @__PURE__ */ __name$A((props) => {
      const { editor } = props;
      if (editor === "tinymce") {
        return /* @__PURE__ */ wp.element.createElement(TinyMce, { ...props });
      } else {
        return /* @__PURE__ */ wp.element.createElement(ProseMirror, { ...props });
      }
    }, "default");

    var __defProp$z = Object.defineProperty;
    var __name$z = (target, value) => __defProp$z(target, "name", { value, configurable: true });
    const getDependentFields = /* @__PURE__ */ __name$z((props) => {
      const fields = {};
      for (const name in props) {
        const value = props[name];
        if (typeof value === "object" && !Array.isArray(value)) {
          const subfields = getDependentFields(value);
          const hasSubfields = Object.keys(subfields).length === 0;
          if (hasSubfields)
            continue;
          for (const triggerSubfield in subfields) {
            if (!fields[triggerSubfield])
              fields[triggerSubfield] = {};
            fields[triggerSubfield][name] = {
              __isWrapped: true,
              ...subfields[triggerSubfield]
            };
          }
        }
        if (typeof value !== "string")
          continue;
        const triggerField = getDependentValue(value);
        if (!triggerField)
          continue;
        if (!fields[triggerField.name])
          fields[triggerField.name] = {};
        fields[triggerField.name][name] = triggerField.config;
      }
      return fields;
    }, "getDependentFields");
    const isDependentString = /* @__PURE__ */ __name$z((string) => string.startsWith("{{") && string.endsWith("}}"), "isDependentString");
    const getDependentValue = /* @__PURE__ */ __name$z((string) => {
      if (!isDependentString(string))
        return false;
      const dependentString = string.slice(2, string.length - 2).trim();
      const isPartial = dependentString.includes(".");
      if (!isPartial)
        return {
          name: dependentString,
          config: { __returnedType: "full" }
        };
      const [name, attribute] = dependentString.split(".");
      return {
        name,
        config: {
          __returnedType: "partial",
          __returnedAttribute: attribute
        }
      };
    }, "getDependentValue");
    const getFieldValue = /* @__PURE__ */ __name$z((config, getValue) => config.__returnedType === "partial" ? getValue()?.[config.__returnedAttribute] : getValue(), "getFieldValue");
    const mergeDependentProps = /* @__PURE__ */ __name$z((props, dependentFields, getValue) => {
      if (dependentFields === false)
        return { ...props };
      const mergedProps = { ...props };
      for (const fieldName in dependentFields) {
        const attributes = dependentFields[fieldName];
        for (const attributeName in attributes) {
          const config = attributes[attributeName];
          if (config.__isWrapped) {
            for (const subattributeName in config) {
              if (subattributeName === "__isWrapped")
                continue;
              const subattributeValue = getFieldValue(
                config[subattributeName],
                () => getValue(fieldName)
              );
              mergedProps[attributeName] = {
                ...mergedProps[attributeName],
                [subattributeName]: subattributeValue
              };
            }
            continue;
          }
          mergedProps[attributeName] = getFieldValue(
            config,
            () => getValue(fieldName)
          );
        }
      }
      return mergedProps;
    }, "mergeDependentProps");

    var __defProp$y = Object.defineProperty;
    var __name$y = (target, value) => __defProp$y(target, "name", { value, configurable: true });
    const DependendWrapper = /* @__PURE__ */ __name$y(({
      itemProps,
      refresh,
      data,
      children
    }) => {
      const childProps = Object.assign({}, itemProps);
      delete childProps.value;
      delete childProps.onChange;
      delete childProps.class;
      delete childProps.wrapper;
      const dependentFields = wp.element.useMemo(() => itemProps.dependent ? Object.assign({}, getDependentFields(itemProps)) : false, []);
      const maybeUpdateProps = /* @__PURE__ */ __name$y((fieldName) => {
        if (!itemProps.dependent || !dependentFields)
          return;
        if (!Object.keys(dependentFields).includes(fieldName))
          return;
        refresh();
      }, "maybeUpdateProps");
      const dependentWatcher = wp.element.useCallback((field) => {
        if (field.props?.itemType === "subfield")
          return;
        maybeUpdateProps(field.name);
      }, []);
      wp.element.useEffect(() => {
        const callback = addEventListener("valueChange", dependentWatcher);
        return () => removeEventListener("valueChange", callback);
      }, [dependentWatcher]);
      wp.element.useEffect(() => {
        if (data.watcher) {
          data.watcher((fieldName) => {
            maybeUpdateProps(fieldName);
          });
        }
      }, [dependentWatcher]);
      const formatedProps = wp.element.useMemo(() => mergeDependentProps(
        childProps,
        dependentFields,
        data.getValue
      ), []);
      return children(formatedProps);
    }, "DependendWrapper");

    var __defProp$x = Object.defineProperty;
    var __name$x = (target, value) => __defProp$x(target, "name", { value, configurable: true });
    const evaluateCondition = /* @__PURE__ */ __name$x((condition) => {
      const partResults = [];
      if (condition.length === 0)
        return true;
      for (const lho in condition) {
        const parts = condition[lho];
        if (["_and", "_or"].includes(lho)) {
          const partResultsInner = parts.map(evaluateCondition);
          if (partResultsInner.length === 0) {
            partResults.push(false);
            continue;
          }
          switch (lho) {
            case "_or":
              partResults.push(partResultsInner.filter(Boolean).length > 0);
              break;
            case "_and":
              partResults.push(partResultsInner.length === partResultsInner.filter(Boolean).length);
              break;
          }
          continue;
        }
        Object.entries(parts).forEach(([op, rho]) => {
          switch (op) {
            case "_eq":
              partResults.push(lho == rho);
              break;
            case "_neq":
              partResults.push(lho != rho);
              break;
            case "_lt":
              partResults.push(lho < rho);
              break;
            case "_gt":
              partResults.push(lho > rho);
              break;
            case "_lte":
              partResults.push(lho <= rho);
              break;
            case "_gte":
              partResults.push(lho >= rho);
              break;
            case "_in":
              partResults.push(rho.includes(lho));
              break;
            case "_nin":
              partResults.push(!rho.includes(lho));
              break;
            case "_contains":
              partResults.push(lho.includes(rho));
              break;
            case "_ncontains":
              partResults.push(!lho.includes(rho));
              break;
            case "_re":
              partResults.push(new RegExp(rho).test(lho));
              break;
            default:
              partResults.push(false);
          }
        });
      }
      return partResults.length > 0 && partResults.length === partResults.filter(Boolean).length;
    }, "evaluateCondition");

    var __defProp$w = Object.defineProperty;
    var __name$w = (target, value) => __defProp$w(target, "name", { value, configurable: true });
    const evaluateFieldVisibility = /* @__PURE__ */ __name$w((fieldConditions, getValue) => {
      fieldConditions = typeof fieldConditions === "object" ? replaceFieldValue(fieldConditions, getValue) : {};
      return evaluateCondition(fieldConditions);
    }, "evaluateFieldVisibility");
    const replaceFieldValue = /* @__PURE__ */ __name$w((conditions, getValue) => {
      const formatedConditions = {};
      for (const name in conditions) {
        if (["_and", "_or"].includes(name)) {
          formatedConditions[name] = conditions[name].map(
            (field) => replaceFieldValue(field, getValue)
          );
          continue;
        }
        let fieldValue = "";
        const isPartial = name.includes(".");
        if (isPartial) {
          const [fieldName, fieldAttribute] = name.split(".");
          fieldValue = getValue(fieldName)[fieldAttribute] ?? "";
        } else {
          fieldValue = getValue(name);
        }
        formatedConditions[fieldValue] = conditions[name];
      }
      return formatedConditions;
    }, "replaceFieldValue");
    const getTriggerFields = /* @__PURE__ */ __name$w((conditions) => {
      const fields = [];
      for (const name in conditions) {
        if (["_and", "_or"].includes(name)) {
          for (const part in conditions[name]) {
            fields.push(
              getTriggerFields(conditions[name][part])
            );
          }
          continue;
        }
        fields.push(name);
      }
      return fields.flat().map(
        (name) => name.split(".")[0]
        // . is used when accessing value of an object
      );
    }, "getTriggerFields");

    var __defProp$v = Object.defineProperty;
    var __name$v = (target, value) => __defProp$v(target, "name", { value, configurable: true });
    const VisibilityWrapper = /* @__PURE__ */ __name$v(({
      visibility,
      data,
      ...props
    }) => {
      const [isVisible, setVisibility] = wp.element.useState(false);
      const evaluateVisibility = /* @__PURE__ */ __name$v(() => {
        if (!visibility.condition) {
          setVisibility(true);
          return;
        }
        const getValue = data.getValue ?? control.getValue;
        const result = evaluateFieldVisibility(visibility.condition, getValue);
        setVisibility(visibility.action !== "hide" ? result : !result);
      }, "evaluateVisibility");
      wp.element.useEffect(() => {
        evaluateVisibility();
        if (!visibility.condition || !triggerFields) {
          return;
        }
        addEventListener("valueChange", (field) => {
          if (field.props?.itemType === "subfield")
            return;
          if (!triggerFields.includes(field.name))
            return;
          setTimeout(evaluateVisibility);
        });
        if (data.watcher) {
          data.watcher((fieldName) => {
            if (triggerFields.includes(fieldName))
              evaluateVisibility();
          });
        }
      }, []);
      const triggerFields = wp.element.useMemo(() => visibility.condition ? getTriggerFields(visibility.condition) : false, []);
      return isVisible ? props.children : /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null);
    }, "VisibilityWrapper");

    var __defProp$u = Object.defineProperty;
    var __name$u = (target, value) => __defProp$u(target, "name", { value, configurable: true });
    const RenderWrapper = /* @__PURE__ */ __name$u(({
      children,
      itemType,
      setValue = false,
      name
    }) => {
      const [key, setKey] = wp.element.useState(0);
      const refreshRender = /* @__PURE__ */ __name$u(() => setKey(key + 1), "refreshRender");
      const fieldValueChanged = /* @__PURE__ */ __name$u((field) => {
        if (!name || name !== field.name)
          return;
        refreshRender();
        if (setValue)
          setValue(field.value);
      }, "fieldValueChanged");
      const maybeRerender = /* @__PURE__ */ __name$u((fieldName) => {
        fieldName === name ? refreshRender() : null;
      }, "maybeRerender");
      wp.element.useEffect(() => {
        if (itemType !== "field")
          return;
        const callbackValuechanged = addEventListener("_refreshFieldValue", fieldValueChanged);
        const callbackRerender = addEventListener("_fieldRerender", maybeRerender);
        return () => {
          removeEventListener("_refreshFieldValue", callbackValuechanged);
          removeEventListener("_fieldRerender", callbackRerender);
        };
      }, [key]);
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, { key }, children(refreshRender));
    }, "RenderWrapper");

    var __defProp$t = Object.defineProperty;
    var __name$t = (target, value) => __defProp$t(target, "name", { value, configurable: true });
    const Element$1 = /* @__PURE__ */ __name$t(({
      visibility,
      data,
      ...props
    }) => {
      const { ControlContext } = tangibleFields;
      const control = wp.element.useContext(ControlContext);
      const wrapper = {
        ...props.wrapper ?? {},
        className: `${props?.wrapper?.class ?? ""} ${control.wrapper}`
      };
      delete wrapper.class;
      const ElementComponent = types.get(props.type ?? false, "element");
      if (!ElementComponent)
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null);
      return /* @__PURE__ */ wp.element.createElement($f57aed4a881a3485$export$bf688221f59024e5, { ...wrapper }, /* @__PURE__ */ wp.element.createElement(VisibilityWrapper, { visibility, data }, /* @__PURE__ */ wp.element.createElement(
        RenderWrapper,
        {
          itemType: props.itemType ?? "field",
          name: props.name ?? false
        },
        (refreshRender) => /* @__PURE__ */ wp.element.createElement(
          DependendWrapper,
          {
            refresh: refreshRender,
            data,
            itemProps: props
          },
          (itemProps) => /* @__PURE__ */ wp.element.createElement(ElementComponent, { ...itemProps, data })
        )
      )));
    }, "Element");

    var __defProp$s = Object.defineProperty;
    var __name$s = (target, value) => __defProp$s(target, "name", { value, configurable: true });
    const FieldGroupItem = /* @__PURE__ */ __name$s(({
      config,
      values,
      onChange,
      data
    }) => {
      const elements = Object.keys(types._types.element);
      const isElement = elements.includes(config.type ?? "");
      const Component = isElement ? Element$1 : Control;
      const controlProps = !isElement ? {
        value: values[config.name] ?? "",
        onChange
      } : {};
      return /* @__PURE__ */ wp.element.createElement(
        Component,
        {
          itemType: isElement ? "subelement" : "subfield",
          visibility: {
            action: config.condition?.action ?? "show",
            condition: config.condition?.condition ?? false
          },
          data,
          ...config,
          ...controlProps
        }
      );
    }, "FieldGroupItem");

    var __defProp$r = Object.defineProperty;
    var __name$r = (target, value) => __defProp$r(target, "name", { value, configurable: true });
    const FieldGroup = /* @__PURE__ */ __name$r((props) => {
      const [onChangeCallback, setChangeCallback] = wp.element.useState([]);
      const [fieldUpdateCallback, setFieldUpdateCallback] = wp.element.useState(false);
      const [value, setValue] = wp.element.useState(
        initJSON(props.value ?? "")
      );
      const valueRef = wp.element.useRef();
      valueRef.current = value;
      const setAttribute = /* @__PURE__ */ __name$r((name, attributeValue) => {
        setValue({
          ...value,
          [name]: attributeValue
        });
        if (onChangeCallback.length === 0)
          return;
        setFieldUpdateCallback(
          () => () => {
            onChangeCallback.map((callback) => callback(name));
          }
        );
      }, "setAttribute");
      wp.element.useEffect(() => {
        props.onChange && props.onChange(value);
        if (!fieldUpdateCallback)
          return;
        fieldUpdateCallback();
        setFieldUpdateCallback(false);
      }, [value]);
      const fields = props.fields ?? [];
      const hasField = /* @__PURE__ */ __name$r((name) => fields.map(
        (field) => field.name ?? false
      ).includes(name), "hasField");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-field-group" }, /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: JSON.stringify(value) }), fields.map((config, index) => /* @__PURE__ */ wp.element.createElement("div", { key: index, className: "tf-field-group-item" }, /* @__PURE__ */ wp.element.createElement(
        FieldGroupItem,
        {
          values: value,
          config,
          onChange: (value2) => setAttribute(config.name, value2),
          data: {
            /**
             * The field value can either be from a subvalue or from another field value
             */
            getValue: (name) => hasField(name) ? valueRef.current[name] ?? "" : props.data.getValue(name) ?? "",
            /**
             * Needed to trigger a re-evaluatation of the visibility conditions / dependent values
             * when a subfield value change
             */
            watcher: (evaluationCallback) => {
              setChangeCallback((prevValue) => [
                ...prevValue,
                (name) => evaluationCallback(name)
              ]);
            }
          }
        }
      ))));
    }, "FieldGroup");

    var __defProp$q = Object.defineProperty;
    var __name$q = (target, value) => __defProp$q(target, "name", { value, configurable: true });
    const postMedia = /* @__PURE__ */ __name$q((file) => {
      const { api } = TangibleFields;
      const formData = new FormData();
      formData.append("file", file);
      formData.append("title", file.name);
      formData.append("caption", file.caption);
      return post(api.endpoint.media, formData);
    }, "postMedia");
    const getMedia = /* @__PURE__ */ __name$q((id) => {
      const { api } = TangibleFields;
      return get(api.endpoint.media + id);
    }, "getMedia");

    var __defProp$p = Object.defineProperty;
    var __name$p = (target, value) => __defProp$p(target, "name", { value, configurable: true });
    const FilePreview = /* @__PURE__ */ __name$p((props) => {
      const [loaded, isLoaded] = wp.element.useState(false);
      const [data, setData] = wp.element.useState(false);
      wp.element.useEffect(() => {
        const fetch = /* @__PURE__ */ __name$p(async () => {
          const data2 = await getMedia(props.id);
          setData(data2);
          isLoaded(true);
        }, "fetch");
        fetch();
      }, []);
      if (!loaded || !data) {
        return /* @__PURE__ */ wp.element.createElement("li", { className: "tf-file-item" }, "Loading...");
      }
      const fileUrl = data.source_url;
      const fileExtension = fileUrl.split("/").pop().split(".").length === 2 ? fileUrl.split("/").pop().split(".")[1] : "";
      return /* @__PURE__ */ wp.element.createElement("li", { className: "tf-file-item" }, data.media_type === "image" && /* @__PURE__ */ wp.element.createElement(
        "img",
        {
          loading: "lazy",
          decoding: "async",
          src: fileUrl,
          alt: data.alt_text,
          className: "attachment-medium size-medium"
        }
      ), /* @__PURE__ */ wp.element.createElement("span", null, `${data.title.rendered}${fileExtension !== "" ? "." + fileExtension : ""}`), /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: () => props.remove() }, "Remove"));
    }, "FilePreview");

    var __defProp$o = Object.defineProperty;
    var __name$o = (target, value) => __defProp$o(target, "name", { value, configurable: true });
    const FileUpload = /* @__PURE__ */ __name$o((props) => {
      const { mimetypes } = TangibleFields;
      const ref = wp.element.useRef(null);
      const [file, setFile] = wp.element.useState(false);
      const [loading, isLoading] = wp.element.useState(false);
      const [uploads, setUploads] = wp.element.useState(
        props.value ? Array.isArray(props.value) ? props.value : JSON.parse(props.value) : []
      );
      const [notice, setNotice] = wp.element.useState(false);
      const { labelProps, fieldProps, descriptionProps } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      wp.element.useEffect(() => props.onChange && props.onChange(uploads), [uploads]);
      const placeholder = props.placeholder ?? "No file selected";
      const maxUpload = props.maxUpload ?? false;
      const canUpload = /* @__PURE__ */ __name$o(() => (maxUpload === false || uploads.length < maxUpload) && !loading && file !== false, "canUpload");
      const canChooseFile = /* @__PURE__ */ __name$o(() => (maxUpload === false || uploads.length < maxUpload) && !loading, "canChooseFile");
      const upload = /* @__PURE__ */ __name$o(async () => {
        isLoading(true);
        setNotice(false);
        postMedia(file[0]).then((data) => setUploads([...uploads, data.id])).catch((data) => setNotice(data.message)).finally(() => {
          setFile(false);
          isLoading(false);
        });
      }, "upload");
      const removeUpload = /* @__PURE__ */ __name$o((i) => {
        setUploads([...uploads.slice(0, i), ...uploads.slice(i + 1)]);
      }, "removeUpload");
      const isWpMediaDisabled = /* @__PURE__ */ __name$o(() => props.wp_media === false || props.wp_media === "false", "isWpMediaDisabled");
      const getAllowedTypes = /* @__PURE__ */ __name$o(() => {
        const { mimeTypes } = props;
        const mimeValues = Object.values(mimetypes);
        const filterByMimetypePrefix = /* @__PURE__ */ __name$o((type) => type.includes("/") ? type : mimeValues.filter((val) => val.startsWith(`${type}/`)), "filterByMimetypePrefix");
        const allowedTypes = mimeTypes ? Array.isArray(mimeTypes) ? mimeTypes.flatMap(filterByMimetypePrefix) : filterByMimetypePrefix(mimeTypes) : mimeValues;
        return allowedTypes.join(", ");
      }, "getAllowedTypes");
      const open = /* @__PURE__ */ __name$o(() => {
        const media = wp.media({
          title: "Choose File",
          multiple: false,
          library: {
            type: getAllowedTypes()
          }
        });
        media.on("select", () => {
          const chosenFile = media.state().get("selection").first().toJSON();
          setUploads([...uploads, chosenFile.id]);
        });
        media.open();
      }, "open");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-file" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          type: "file",
          ref,
          accept: getAllowedTypes(),
          onChange: (e) => setFile(e.target.files),
          ...fieldProps
        }
      )), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-file-container" }, /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          type: "hidden",
          name: props.name ?? "",
          value: JSON.stringify(uploads)
        }
      ), /* @__PURE__ */ wp.element.createElement("ul", { className: "tf-file-list" }, uploads.map((upload2, i) => /* @__PURE__ */ wp.element.createElement(
        FilePreview,
        {
          key: upload2,
          id: upload2,
          remove: () => removeUpload(i)
        }
      ))), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-file-field" }, /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "action",
          onPress: () => isWpMediaDisabled() ? ref.current.click() : open(),
          isDisabled: !canChooseFile(),
          "aria-hidden": "true"
        },
        props.buttonText ?? "Choose"
      ), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-file-text", "aria-hidden": "true" }, file.length > 0 ? file[0].name : placeholder), isWpMediaDisabled() && /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: upload, isDisabled: !canUpload() }, props.uploadText ?? "Upload"))), notice && /* @__PURE__ */ wp.element.createElement(Notice, { message: notice, type: "error", onDismiss: () => setNotice(false) }), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "FileUpload");

    var __defProp$n = Object.defineProperty;
    var __name$n = (target, value) => __defProp$n(target, "name", { value, configurable: true });
    const Gradient = /* @__PURE__ */ __name$n((props) => {
      const [editColor, setEditColor] = wp.element.useState(false);
      const [open, isOpen] = wp.element.useState(false);
      const [value, setValue] = wp.element.useState(
        props.value && props.value !== "" ? typeof props.value !== "object" ? JSON.parse(props.value) : props.value : {
          type: "linear",
          angle: 45,
          shape: "ellipse",
          colors: [
            "rgba(0,255,255,1)",
            "rgba(0,255,255,1)"
          ]
        }
      );
      const input = wp.element.useRef();
      const gradientPopover = wp.element.useRef();
      const colorPopover = wp.element.useRef();
      const wrapperRef = wp.element.useRef();
      const {
        labelProps,
        fieldProps,
        descriptionProps
      } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      wp.element.useEffect(() => {
        props.onChange && props.onChange({
          ...value,
          stringValue: generateGradient()
        });
      }, [value]);
      const generateGradient = /* @__PURE__ */ __name$n(() => {
        switch (value.type) {
          case "linear":
            return `linear-gradient(${value.angle}deg, ${value.colors[0]} 0%, ${value.colors[1]} 100%)`;
          case "radial":
            return `radial-gradient(${value.shape}, ${value.colors[0]} 0%, ${value.colors[1]} 100%)`;
          case "conic":
            return `conic-gradient(${value.colors[0]} 0%, ${value.colors[1]} 100%)`;
        }
      }, "generateGradient");
      const updateColor = /* @__PURE__ */ __name$n((i, color) => {
        const newColors = [...value.colors];
        newColors[i] = color?.toString("rgba");
        updateValue("colors", newColors);
      }, "updateColor");
      const updateValue = /* @__PURE__ */ __name$n((key, attribute) => {
        setValue({
          ...value,
          [key]: attribute
        });
      }, "updateValue");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient-container", ref: wrapperRef }, /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          ref: gradientPopover,
          type: "text",
          className: "tf-gradient-input",
          value: generateGradient(),
          onClick: (e) => isOpen(true),
          readOnly: true
        }
      ), /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          type: "hidden",
          ref: input,
          value: JSON.stringify(value),
          name: props.name ?? "",
          ...fieldProps
        }
      ), open && /* @__PURE__ */ wp.element.createElement(
        Popover,
        {
          state: { isOpen: open, close: () => isOpen(false) },
          triggerRef: gradientPopover,
          placement: "bottom start",
          style: {
            width: wrapperRef?.current?.offsetWidth,
            minWidth: "fit-content"
          },
          className: "tf-gradient-popover"
        },
        /* @__PURE__ */ wp.element.createElement(Dialog, null, /* @__PURE__ */ wp.element.createElement($9bf71ea28793e738$export$20e40289641fbbb6, { autoFocus: true }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient-popover-content" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient-preview", ref: colorPopover, style: {
          background: generateGradient()
        } }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient-colors" }, value.colors?.map((color, i) => /* @__PURE__ */ wp.element.createElement(
          "div",
          {
            key: i,
            className: "tf-gradient-color tf-color-area-thumb",
            style: { background: value.colors[i] },
            onClick: () => setEditColor(i)
          }
        )))), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient-settings" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient-settings-row" }, /* @__PURE__ */ wp.element.createElement(
          Select$1,
          {
            label: "Gradient type",
            selectedKey: value.type ?? "linear",
            onSelectionChange: (type) => updateValue("type", type)
          },
          /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: "linear" }, "Linear"),
          /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: "radial" }, "Radial"),
          /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: "conic" }, "Conical")
        )), /* @__PURE__ */ wp.element.createElement("div", null, value.type === "linear" && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient-settings-row" }, /* @__PURE__ */ wp.element.createElement(
          NumberComponent,
          {
            label: "Angle",
            value: value.angle ?? 45,
            onChange: (angle) => updateValue("angle", angle)
          }
        )), value.type === "radial" && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gradient-settings-row" }, /* @__PURE__ */ wp.element.createElement(
          Select$1,
          {
            label: "Shape",
            selectedKey: value.shape ?? "ellipse",
            onSelectionChange: (shape) => updateValue("shape", shape)
          },
          /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: "circle" }, "Circle"),
          /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: "ellipse" }, "Ellipse")
        )))))))
      ), editColor !== false && /* @__PURE__ */ wp.element.createElement(
        Popover,
        {
          state: { isOpen: editColor !== false, close: () => setEditColor(false) },
          triggerRef: colorPopover,
          placement: editColor === 0 ? "bottom start" : "bottom end"
        },
        /* @__PURE__ */ wp.element.createElement(
          ColorPicker,
          {
            value: value.colors[editColor],
            onChange: (color) => updateColor(editColor, color),
            hasAlpha: true,
            onFocusChange: (isFocus) => isFocus === false ? setEditColor(false) : false
          }
        )
      )), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Gradient");

    var __defProp$m = Object.defineProperty;
    var __name$m = (target, value) => __defProp$m(target, "name", { value, configurable: true });
    const ImagePreview = /* @__PURE__ */ __name$m((props) => {
      const [loaded, isLoaded] = wp.element.useState(false);
      const [data, setData] = wp.element.useState(false);
      wp.element.useEffect(() => {
        const fetch = /* @__PURE__ */ __name$m(async () => {
          const data2 = await getMedia(props.id);
          setData(data2);
          isLoaded(true);
        }, "fetch");
        fetch();
      }, []);
      if (!loaded || !data) {
        return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gallery-item" }, "Loading...");
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gallery-item" }, /* @__PURE__ */ wp.element.createElement("img", { src: data.source_url }));
    }, "ImagePreview");

    var __defProp$l = Object.defineProperty;
    var __name$l = (target, value) => __defProp$l(target, "name", { value, configurable: true });
    const Gallery = /* @__PURE__ */ __name$l((props) => {
      const initValue = /* @__PURE__ */ __name$l((initialStringValue) => {
        const ids = initialStringValue !== "[]" ? initialStringValue.split(",") : [];
        return ids.map((id) => id.replaceAll("[", "").replaceAll("]", "").replaceAll('"', ""));
      }, "initValue");
      const [value, setValue] = wp.element.useState(
        props.value && Array.isArray(props.value) ? props.value : props.value ? initValue(props.value) : []
      );
      const {
        labelProps,
        inputProps,
        descriptionProps
      } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      wp.element.useEffect(() => {
        props.onChange && props.onChange(value);
      }, [value]);
      const open = /* @__PURE__ */ __name$l(() => {
        const media = wp.media({
          frame: "post",
          multiple: true,
          button: {
            text: "Use this media"
          },
          // @see https://wordpress.stackexchange.com/a/268597/190549 but dosen't seems to work anymore
          library: {
            type: ["image"]
          },
          state: value.length < 1 ? "gallery" : "gallery-edit",
          selection: getSelection()
        });
        media.on({
          update: (selection) => {
            setValue(selection.models.map((image) => image.id));
          },
          open: () => {
            media.menuView.unset("playlist");
            media.menuView.unset("video-playlist");
          }
        }, void 0);
        media.open();
      }, "open");
      const getSelection = /* @__PURE__ */ __name$l(() => {
        const selection = wp.media.query({
          orderby: "post__in",
          order: "ASC",
          type: "image",
          perPage: -1,
          post__in: value
        });
        return new wp.media.model.Selection(selection.models, {
          props: selection.props.toJSON(),
          multiple: true
        });
      }, "getSelection");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gallery" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gallery__controls" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gallery-preview" }, value.map((image) => /* @__PURE__ */ wp.element.createElement(ImagePreview, { key: image, id: image })))), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-gallery-buttons" }, /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: open }, value.length < 1 ? "Create gallery" : "Edit gallery"), value.length > 0 && /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: () => setValue([]) }, "Clear gallery")), /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: value.join(","), ...inputProps }), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Gallery");

    var __defProp$k = Object.defineProperty;
    var __name$k = (target, value) => __defProp$k(target, "name", { value, configurable: true });
    const InputHidden = /* @__PURE__ */ __name$k((props) => /* @__PURE__ */ wp.element.createElement(
      "input",
      {
        type: "hidden",
        name: props.name,
        value: props.value,
        ...props.attributes,
        className: `tf-hidden ${props.class ?? ""} ${props.className ?? ""}`
      }
    ), "InputHidden");

    var __defProp$j = Object.defineProperty;
    var __name$j = (target, value) => __defProp$j(target, "name", { value, configurable: true });
    const List = /* @__PURE__ */ __name$j((props) => {
      const emptyItem = {
        value: "",
        _canDelete: true,
        _enabled: true
      };
      const [items, setItems] = wp.element.useState(
        initJSON(props.value ?? "[]", [])
      );
      wp.element.useEffect(() => {
        props.onChange ? props.onChange(items) : "";
      }, [items]);
      const [selected, setSelected] = wp.element.useState("");
      const refresh = wp.element.useRef(0);
      const {
        labelProps,
        fieldProps,
        descriptionProps
      } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      const addSelectedItem = /* @__PURE__ */ __name$j(() => {
        setItems([
          ...items,
          {
            ...emptyItem,
            value: selected
          }
        ]);
        setSelected("");
        refresh.current = refresh.current + 1;
      }, "addSelectedItem");
      const removeItem = /* @__PURE__ */ __name$j((i) => {
        setItems([
          ...items.slice(0, i),
          ...items.slice(i + 1)
        ]);
      }, "removeItem");
      const updateItem = /* @__PURE__ */ __name$j((i, name, value) => {
        setTimeout(() => {
          setItems([
            ...items.slice(0, i),
            { ...items[i], [name]: value },
            ...items.slice(i + 1)
          ]);
        });
      }, "updateItem");
      const getItemText = /* @__PURE__ */ __name$j((item) => !props.isAsync ? props.choices[item] ?? item : item.label, "getItemText");
      if (props.isAsync) {
        console.warn("Async mode is not supported yet for the list field");
      }
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-list" }, /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: JSON.stringify(items), ...fieldProps }), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-list-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-list-items" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-list-header" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-list-header-actions" })), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-list-items" }, items.map((item, i) => /* @__PURE__ */ wp.element.createElement("div", { key: item.value, className: "tf-list-item" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-list-item-text" }, getItemText(item.value)), /* @__PURE__ */ wp.element.createElement("div", { key: item, className: "tf-list-item-actions" }, item._canDelete && /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "icon-trash",
          onPress: () => removeItem(i)
        }
      ), props.useVisibility && /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "icon-eye",
          onPress: () => updateItem(i, "_enabled", !item._enabled),
          style: !item._enabled ? { opacity: 0.5, filter: "grayscale(60%)" } : {}
        }
      )))))), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-list-search" }, /* @__PURE__ */ wp.element.createElement(
        ComboBox,
        {
          ...props,
          name: null,
          key: refresh.current,
          value: selected,
          description: false,
          labelVisuallyHidden: true,
          disabledKeys: items.map((item) => item.value),
          multiple: false,
          onChange: (item) => {
            if (!item)
              return;
            setSelected(item);
          }
        }
      ), /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "action",
          onPress: addSelectedItem,
          isDisabled: selected === ""
        },
        "Add"
      ))), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "List");

    var __defProp$i = Object.defineProperty;
    var __name$i = (target, value) => __defProp$i(target, "name", { value, configurable: true });
    var Radio = /* @__PURE__ */ __name$i((props) => {
      const [value, setValue] = wp.element.useState(props.value ?? "");
      const options = getOptions(props.choices ?? {});
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      return /* @__PURE__ */ wp.element.createElement(RadioGroup, { ...props, onChange: setValue }, options.map((option) => /* @__PURE__ */ wp.element.createElement(Radio$1, { key: option.value ?? "", ...option }, option.label ?? "")));
    }, "default");

    var __defProp$h = Object.defineProperty;
    var __name$h = (target, value) => __defProp$h(target, "name", { value, configurable: true });
    const MultipleSelect = /* @__PURE__ */ __name$h((props) => {
      const [selected, setSelected] = wp.element.useState(
        props.value ? initSet(props.value) : /* @__PURE__ */ new Set()
      );
      const [open, isOpen] = wp.element.useState(false);
      const state = $e72dd72e1c76a225$export$2f645645f7bca764({
        ...props,
        selectionMode: "multiple",
        onSelectionChange: setSelected,
        selectedKeys: selected
      });
      const listBoxRef = wp.element.useRef();
      const PopoverRef = wp.element.useRef();
      const wrapperRef = wp.element.useRef();
      const {
        listBoxProps,
        labelProps,
        descriptionProps
      } = $c132121280ec012d$export$50eacbbf140a3141(props, state, listBoxRef);
      wp.element.useEffect(() => {
        props.onChange && props.onChange([...selected]);
      }, [selected]);
      const ListBoxComponent = /* @__PURE__ */ wp.element.createElement(
        ListBox,
        {
          listBoxRef,
          state,
          items: props.items,
          ...listBoxProps
        }
      );
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-multiple-select", ref: wrapperRef }, /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: [...selected].join(",") }), props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "select",
          ref: PopoverRef,
          onPress: () => isOpen(!open)
        },
        /* @__PURE__ */ wp.element.createElement("span", { className: "tf-multiple-select__value" }, selected.size > 0 ? selected.size === 1 ? selected.size + " item selected" : selected.size + " items selected" : props.placeholder ?? "Select an option"),
        /* @__PURE__ */ wp.element.createElement("span", { "aria-hidden": "true", className: "tf-select-icon" }, "\u25BC")
      ), open ? /* @__PURE__ */ wp.element.createElement(
        Popover,
        {
          state: { isOpen: open, close: () => isOpen(false) },
          triggerRef: PopoverRef,
          placement: "bottom start",
          style: { width: wrapperRef?.current?.offsetWidth }
        },
        ListBoxComponent
      ) : /* @__PURE__ */ wp.element.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, ListBoxComponent), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "MultipleSelect");

    var __defProp$g = Object.defineProperty;
    var __name$g = (target, value) => __defProp$g(target, "name", { value, configurable: true });
    var Select = /* @__PURE__ */ __name$g((props) => props.multiple ? /* @__PURE__ */ wp.element.createElement(
      MultipleSelect,
      {
        items: getOptions(props.choices ?? {}),
        ...props,
        onChange: props.onChange
      },
      RenderChoices
    ) : /* @__PURE__ */ wp.element.createElement(
      Select$1,
      {
        selectedKey: props.value,
        onSelectionChange: props.onChange,
        items: getOptions(props.choices ?? {}),
        ...props
      },
      RenderChoices
    ), "default");

    var __defProp$f = Object.defineProperty;
    var __name$f = (target, value) => __defProp$f(target, "name", { value, configurable: true });
    const Dimensions = /* @__PURE__ */ __name$f((props) => {
      const units = props.units ?? ["px"];
      const {
        labelProps,
        fieldProps,
        // Not sure where to use this one
        descriptionProps
      } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      const [value, setValue] = wp.element.useState(
        initJSON(
          props.value ?? "",
          {
            value: 0,
            unit: units[0]
          }
        )
      );
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      const setAttribute = /* @__PURE__ */ __name$f((number, attribute) => {
        setValue({
          ...value,
          [attribute]: number
        });
      }, "setAttribute");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-simple-dimensions" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: JSON.stringify(value), ...fieldProps }), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-simple-dimensions-container" }, /* @__PURE__ */ wp.element.createElement("div", null, /* @__PURE__ */ wp.element.createElement(
        NumberComponent,
        {
          value: value["value"] ?? 0,
          name: "value",
          label: "Dimension number",
          labelVisuallyHidden: true,
          description: false,
          onChange: (number) => setAttribute(number, "value")
        }
      )), /* @__PURE__ */ wp.element.createElement(
        Select$1,
        {
          label: "Dimension unit",
          labelVisuallyHidden: true,
          description: false,
          selectedKey: value.unit ?? "px",
          onSelectionChange: (unit) => setAttribute(unit, "unit"),
          placeholder: "unit"
        },
        units.map((unit) => /* @__PURE__ */ wp.element.createElement($c1d7fb2ec91bae71$export$6d08773d2e66f8f2, { key: unit }, unit))
      )), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Dimensions");

    var __defProp$e = Object.defineProperty;
    var __name$e = (target, value) => __defProp$e(target, "name", { value, configurable: true });
    const Switch$1 = /* @__PURE__ */ __name$e((props) => {
      const state = $3017fa7ffdddec74$export$8042c6c013fd5226(props);
      const ref = wp.element.useRef();
      const { inputProps } = $b418ec0c85c52f27$export$d853f7095ae95f88({
        ...props,
        children: props.label ?? ""
      }, state, ref);
      const { focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
      const {
        labelProps,
        fieldProps,
        descriptionProps
      } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
      wp.element.useEffect(() => props.onChange && props.onChange(state.isSelected), [state.isSelected]);
      wp.element.useEffect(() => {
        if (props.value !== state.isSelected)
          state.setSelected(props.value);
      }, [props.value]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-switch" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement("label", { className: "tf-switch-label" }, /* @__PURE__ */ wp.element.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ wp.element.createElement(
        "input",
        {
          ...fieldProps,
          ...inputProps,
          ...focusProps,
          ref,
          name: ""
        }
      )), /* @__PURE__ */ wp.element.createElement("div", { className: `tf-switch-element${state.isSelected ? "-selected" : ""}`, "aria-hidden": "true" }, /* @__PURE__ */ wp.element.createElement("span", null))), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "Switch");

    var __defProp$d = Object.defineProperty;
    var __name$d = (target, value) => __defProp$d(target, "name", { value, configurable: true });
    var Switch = /* @__PURE__ */ __name$d((props) => {
      const valueOn = props.valueOn ?? "on";
      const valueOff = props.valueOff ?? "off";
      const [value, setValue] = wp.element.useState(props.value ?? valueOff);
      wp.element.useEffect(() => props.onChange && props.onChange(value), [value]);
      wp.element.useEffect(() => {
        if (![valueOn, valueOff].includes(props.value))
          return;
        if (props.value !== value)
          setValue(props.value);
      }, [props.value]);
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value }), /* @__PURE__ */ wp.element.createElement(
        Switch$1,
        {
          label: props.label ?? "",
          labelVisuallyHidden: props.labelVisuallyHidden ?? false,
          description: props.description ?? "",
          value: value === valueOn,
          onChange: (switchValue) => setValue(switchValue ? valueOn : valueOff)
        }
      ));
    }, "default");

    var __defProp$c = Object.defineProperty;
    var __name$c = (target, value) => __defProp$c(target, "name", { value, configurable: true });
    const TextField = /* @__PURE__ */ __name$c((props) => {
      const [value, setValue] = wp.element.useState(props.value ?? "");
      const ref = wp.element.useRef();
      const {
        labelProps,
        inputProps,
        descriptionProps
      } = $2d73ec29415bd339$export$712718f7aec83d5(props, ref);
      wp.element.useEffect(() => {
        if (props.onChange)
          props.onChange(value);
      }, [value]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-text" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement(
        TextInput,
        {
          ...props,
          inputProps,
          onChange: setValue,
          ref,
          dynamic: props.dynamic ?? false
        }
      ), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "TextField");

    var __defProp$b = Object.defineProperty;
    var __name$b = (target, value) => __defProp$b(target, "name", { value, configurable: true });
    const TextArea = /* @__PURE__ */ __name$b((props) => {
      const ref = wp.element.useRef();
      const { labelProps, inputProps, descriptionProps } = $2d73ec29415bd339$export$712718f7aec83d5(
        { ...props, inputElementType: "textarea" },
        ref
      );
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-text-area" }, props.label && /* @__PURE__ */ wp.element.createElement(Label, { labelProps, parent: props }, props.label), /* @__PURE__ */ wp.element.createElement(
        "textarea",
        {
          ...inputProps,
          maxLength: props.maxlength,
          minLength: props.minlength,
          required: props.required,
          rows: props.rows,
          ref,
          "data-identifier": props.identifier ?? ""
        }
      ), props.description && /* @__PURE__ */ wp.element.createElement(Description, { descriptionProps, parent: props }, props.description));
    }, "TextArea");

    var __defProp$a = Object.defineProperty;
    var __name$a = (target, value) => __defProp$a(target, "name", { value, configurable: true });
    const BulkActions = /* @__PURE__ */ __name$a((props) => {
      const [action, setAction] = wp.element.useState("");
      const [checkbox, setCheckbox] = wp.element.useState(false);
      wp.element.useEffect(() => {
        checkbox ? props.dispatch({ type: "bulkCheck" }) : props.dispatch({ type: "bulkUncheck" });
      }, [checkbox]);
      const applyAction = /* @__PURE__ */ __name$a(() => {
        switch (action) {
          case "enabled":
          case "disabled":
            props.dispatch({
              type: "bulkUpdate",
              control: "enabled",
              value: action === "enabled" ? "on" : "off",
              callback: () => {
                props.dispatch({ type: "bulkUncheck" });
                setCheckbox(false);
              }
            });
            break;
          case "deletion":
            props.dispatch({
              type: "bulkRemove",
              callback: () => {
                props.dispatch({ type: "bulkUncheck" });
                setCheckbox(false);
              }
            });
            break;
        }
      }, "applyAction");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-bulk-actions" }, /* @__PURE__ */ wp.element.createElement(
        Checkbox,
        {
          label: "Select or unselect all items",
          labelVisuallyHidden: true,
          value: checkbox,
          onChange: setCheckbox
        }
      ), /* @__PURE__ */ wp.element.createElement(
        Select,
        {
          label: "Select bulk action",
          labelVisuallyHidden: true,
          placeholder: "Bulk actions",
          choices: props.actions,
          value: action,
          onChange: setAction
        }
      ), action === "deletion" ? /* @__PURE__ */ wp.element.createElement(
        ModalTrigger,
        {
          title: "Confirmation",
          label: "Apply",
          onValidate: applyAction
        },
        "Are you sure you want to remove the selected items?"
      ) : /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: applyAction }, "Apply"));
    }, "BulkActions");

    var __defProp$9 = Object.defineProperty;
    var __name$9 = (target, value) => __defProp$9(target, "name", { value, configurable: true });
    const Block = /* @__PURE__ */ __name$9(({
      items,
      dispatch,
      rowFields,
      renderItem,
      maxLength,
      title = false,
      useSwitch,
      useBulk,
      name
    }) => {
      const [activeItem, setActiveItem] = wp.element.useState(0);
      const toggleItem = /* @__PURE__ */ __name$9((i) => setActiveItem(i !== activeItem ? i : false), "toggleItem");
      const bulkOptions = { "deletion": "Delete" };
      if (useSwitch) {
        bulkOptions["enabled"] = "Enabled";
        bulkOptions["disabled"] = "Disabled";
      }
      const getHeaderLeft = /* @__PURE__ */ __name$9((item, i) => {
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, useBulk ? /* @__PURE__ */ wp.element.createElement("div", { onClick: (e) => e.stopPropagation() }, /* @__PURE__ */ wp.element.createElement(
          Checkbox,
          {
            label: `Select item ${i + 1}`,
            labelVisuallyHidden: true,
            value: item._bulkCheckbox,
            onChange: (value) => dispatch({
              type: "update",
              item: i,
              control: "_bulkCheckbox",
              value
            })
          }
        )) : null, useSwitch ? /* @__PURE__ */ wp.element.createElement("div", { onClick: (e) => e.stopPropagation() }, /* @__PURE__ */ wp.element.createElement(
          Switch,
          {
            label: `Enable item ${i + 1}`,
            labelVisuallyHidden: true,
            value: item.enabled,
            onChange: (value) => dispatch({
              type: "update",
              item: i,
              control: "enabled",
              value
            })
          }
        )) : null);
      }, "getHeaderLeft");
      const actions = /* @__PURE__ */ __name$9((i, item) => /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, maxLength !== void 0 && /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "action",
          isDisabled: maxLength <= items.length,
          onPress: () => dispatch({
            type: "clone",
            item
          })
        },
        "Clone"
      ), /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: () => toggleItem(i) }, activeItem !== i ? "Edit" : "Close"), maxLength !== void 0 && /* @__PURE__ */ wp.element.createElement(
        ModalTrigger,
        {
          title: "Confirmation",
          label: "Remove",
          onValidate: () => dispatch({ type: "remove", item: i })
        },
        "Are you sure you want to remove item ",
        i + 1,
        "?"
      )), "actions");
      const renderTitle = /* @__PURE__ */ __name$9((item, i) => {
        const text = title ? title : "Item " + (i + 1);
        if (!isDependentString(text))
          return text;
        const element = {
          type: "wrapper",
          name: `_repeater-title-${name}-${item.key}`,
          content: title,
          dependent: true
        };
        return renderItem(element, item, i);
      }, "renderTitle");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-items tf-repeater-block-items" }, useBulk && /* @__PURE__ */ wp.element.createElement(
        BulkActions,
        {
          actions: bulkOptions,
          dispatch
        }
      ), items && items.slice(0, maxLength).map((item, i) => /* @__PURE__ */ wp.element.createElement(
        ExpandablePanel,
        {
          key: item.key ?? i,
          title: renderTitle(item, i),
          footer: actions(i, item),
          isOpen: activeItem === i,
          className: "tf-repeater-block-item",
          onChange: (visible) => visible ? activeItem !== i ? setActiveItem(i) : null : activeItem === i ? setActiveItem(false) : null,
          headerLeft: getHeaderLeft(item, i)
        },
        rowFields.map((control) => /* @__PURE__ */ wp.element.createElement("div", { key: control.name ?? i, className: "tf-repeater-block-item-field" }, renderItem(control, item, i)))
      )));
    }, "Block");

    var __defProp$8 = Object.defineProperty;
    var __name$8 = (target, value) => __defProp$8(target, "name", { value, configurable: true });
    const bulkOptions = { "deletion": "Delete" };
    const Table = /* @__PURE__ */ __name$8(({
      items,
      fields,
      dispatch,
      rowFields,
      renderItem,
      maxLength,
      useBulk
    }) => /* @__PURE__ */ wp.element.createElement("div", null, useBulk && /* @__PURE__ */ wp.element.createElement(
      BulkActions,
      {
        actions: bulkOptions,
        dispatch
      }
    ), /* @__PURE__ */ wp.element.createElement("table", null, /* @__PURE__ */ wp.element.createElement("thead", null, /* @__PURE__ */ wp.element.createElement("tr", null, /* @__PURE__ */ wp.element.createElement("th", null), fields.map((field, h) => /* @__PURE__ */ wp.element.createElement("th", { key: h }, field.label ?? "")), maxLength > 1 && /* @__PURE__ */ wp.element.createElement("th", { align: "end" }))), /* @__PURE__ */ wp.element.createElement("tbody", { className: "tf-repeater-items tf-repeater-table-items" }, items && items.slice(0, maxLength).map((item, i) => /* @__PURE__ */ wp.element.createElement("tr", { key: item.key ?? i }, /* @__PURE__ */ wp.element.createElement("td", { key: `${item.key}-enable` }, useBulk && /* @__PURE__ */ wp.element.createElement("div", { onClick: (e) => e.stopPropagation() }, /* @__PURE__ */ wp.element.createElement(
      Checkbox,
      {
        value: item._bulkCheckbox,
        onChange: (value) => dispatch({
          type: "update",
          item: i,
          control: "_bulkCheckbox",
          value
        })
      }
    ))), rowFields.map((control, j) => /* @__PURE__ */ wp.element.createElement("td", { key: `${item.key}-${j}` }, renderItem(control, item, i))), /* @__PURE__ */ wp.element.createElement("td", { className: "tf-repeater-row-actions" }, /* @__PURE__ */ wp.element.createElement("div", null, maxLength !== void 0 && /* @__PURE__ */ wp.element.createElement(
      Button,
      {
        type: "action",
        isDisabled: maxLength <= items.length,
        onPress: () => dispatch({
          type: "clone",
          item
        })
      },
      "Clone"
    ), maxLength !== void 0 && /* @__PURE__ */ wp.element.createElement(
      ModalTrigger,
      {
        label: "Remove",
        title: "Confirmation",
        onValidate: () => dispatch({ type: "remove", item: i }),
        buttonProps: {
          type: "danger"
        }
      },
      "Are you sure you want to remove item ",
      i + 1,
      "?"
    )))))))), "Table");

    var Layouts = {
      advanced: Advanced,
      bare: Bare,
      block: Block,
      table: Table
    };

    var __defProp$7 = Object.defineProperty;
    var __name$7 = (target, value) => __defProp$7(target, "name", { value, configurable: true });
    const Item = /* @__PURE__ */ __name$7(({
      config,
      values,
      onChange,
      data
    }) => {
      const elements = Object.keys(types._types.element);
      const isElement = elements.includes(config.type ?? "");
      const Component = isElement ? Element$1 : Control;
      const controlProps = !isElement ? {
        value: values[config.name] ?? "",
        onChange
      } : {};
      return /* @__PURE__ */ wp.element.createElement(
        Component,
        {
          itemType: isElement ? "subelement" : "subfield",
          visibility: {
            action: config.condition?.action ?? "show",
            condition: config.condition?.condition ?? false
          },
          data,
          ...controlProps,
          ...config
        }
      );
    }, "Item");

    var __defProp$6 = Object.defineProperty;
    var __name$6 = (target, value) => __defProp$6(target, "name", { value, configurable: true });
    const Repeater = /* @__PURE__ */ __name$6((props) => {
      const fields = props.fields ?? [];
      const layout = props.layout ?? "table";
      const Layout = Layouts[layout];
      const repeatable = props.repeatable ?? true;
      const maxLength = props.maxlength ?? Infinity;
      const rowFields = fields.map((field) => {
        const rowField = Object.assign({}, field);
        if (layout === "table") {
          rowField.labelVisuallyHidden = true;
          rowField.descriptionVisuallyHidden = true;
        }
        delete rowField.value;
        delete rowField.onChange;
        return rowField;
      });
      const emptyItem = {};
      fields.forEach((field) => emptyItem[field.name] = "");
      const [items, dispatch] = wp.element.useReducer(
        repeaterDispatcher(emptyItem, maxLength),
        props.value ?? "",
        initDispatcher
      );
      const hasField = /* @__PURE__ */ __name$6((name) => rowFields.map(
        (field) => field.name ?? false
      ).includes(name), "hasField");
      const [onChangeCallback, setChangeCallback] = wp.element.useState([]);
      const triggerRowCallbackEvents = /* @__PURE__ */ __name$6((rowKey, fieldName) => {
        onChangeCallback.forEach((callback) => callback(rowKey, fieldName));
      }, "triggerRowCallbackEvents");
      const values = wp.element.useRef();
      values.current = items;
      const renderItem = /* @__PURE__ */ __name$6((config, row, i) => /* @__PURE__ */ wp.element.createElement(
        Item,
        {
          key: row.key + i,
          values: row,
          config,
          onChange: (value) => dispatch({
            type: "update",
            item: i,
            control: config.name,
            value,
            callback: () => triggerRowCallbackEvents(row.key, config.name)
          }),
          data: {
            /**
             * The field value can either be from a subvalue or from the parent getter if no match
             */
            getValue: (name) => hasField(name) ? values.current[i][name] ?? "" : props.data.getValue(name ?? ""),
            /**
             * Possibility to add callback event that will be triggered each time a field from the current row will
             * change
             * @todo Avoid multiple definition (currently no way to remove watch from child which not ideal)
             */
            watcher: (callback) => setChangeCallback(
              (prevValue) => [
                ...prevValue,
                (rowKey, fieldName) => {
                  rowKey === row.key && config.name ? callback(fieldName, row.key) : null;
                }
              ]
            )
          }
        }
      ), "renderItem");
      const getSavedValue = /* @__PURE__ */ __name$6(() => items.map(
        ({
          _bulkCheckbox,
          ...item
        }) => item
      ), "getSavedValue");
      wp.element.useEffect(() => props.onChange && props.onChange(getSavedValue()), [items]);
      return /* @__PURE__ */ wp.element.createElement("div", { className: `tf-repeater tf-repeater-${layout}` }, /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: JSON.stringify(getSavedValue()) }), props.label && /* @__PURE__ */ wp.element.createElement(Title, { level: 2, className: "tf-repeater-title" }, props.label), /* @__PURE__ */ wp.element.createElement("div", { className: `tf-repeater-container tf-repeater-${layout}-container` }, /* @__PURE__ */ wp.element.createElement(
        Layout,
        {
          items,
          fields,
          dispatch,
          rowFields,
          headerFields: props.headerFields,
          renderItem,
          maxLength: repeatable ? maxLength : void 0,
          title: props.sectionTitle ?? false,
          useSwitch: props.useSwitch,
          useBulk: props.useBulk,
          afterRow: props.afterRow,
          beforeRow: props.beforeRow,
          name: props.name ?? ""
        }
      ), repeatable && /* @__PURE__ */ wp.element.createElement("div", { className: "tf-repeater-actions" }, /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "action",
          onPress: () => dispatch({ type: "add" }),
          isDisabled: maxLength <= items.length
        },
        "Add item"
      ), /* @__PURE__ */ wp.element.createElement(
        ModalTrigger,
        {
          title: "Confirmation",
          label: "Remove all",
          isDisabled: items.length <= 0,
          onValidate: () => dispatch({ type: "clear" })
        },
        "Are you sure you want to clear all item(s)?"
      ))));
    }, "Repeater");

    var __defProp$5 = Object.defineProperty;
    var __name$5 = (target, value) => __defProp$5(target, "name", { value, configurable: true });
    function getField(dynamic, operators) {
      return [
        {
          "label": "Text",
          "type": "text",
          "name": "left_value",
          "dynamic": {
            "mode": dynamic.getMode ? dynamic.getMode() : "replace",
            "types": dynamic.getTypes ? dynamic.getTypes() : ["text", "date", "color", "number"],
            "categories": dynamic.getCategories ? dynamic.getCategories() : Object.keys(TangibleFields.dynamics.categories)
          },
          "labelVisuallyHidden": true
        },
        {
          "label": "Operator",
          "type": "select",
          "name": "operator",
          "choices": operators != null ? operators : {
            _eq: "Is",
            _neq: "Is not",
            _lt: "Less than",
            _gt: "Greater than",
            _lte: "Less than or equal",
            _gte: "Greater than or equal",
            _in: "In array",
            _nin: "Not in array",
            _contains: "Contains",
            _ncontains: "Not contain",
            _re: "Regex"
          },
          "labelVisuallyHidden": true
        },
        {
          "label": "Text",
          "type": "text",
          "name": "right_value",
          "dynamic": {
            "mode": dynamic.getMode ? dynamic.getMode() : "replace",
            "types": dynamic.getTypes ? dynamic.getTypes() : ["text", "date", "color", "number"],
            "categories": dynamic.getCategories ? dynamic.getCategories() : Object.keys(TangibleFields.dynamics.categories)
          },
          "labelVisuallyHidden": true
        }
      ];
    }
    __name$5(getField, "getField");

    var __defProp$4 = Object.defineProperty;
    var __name$4 = (target, value) => __defProp$4(target, "name", { value, configurable: true });
    const ConditionGroup = /* @__PURE__ */ __name$4((props) => {
      const afterRow = /* @__PURE__ */ __name$4((item, i, dispatch) => /* @__PURE__ */ wp.element.createElement("div", { className: "tf-conditional-panel-condition-actions" }, /* @__PURE__ */ wp.element.createElement(Button, { type: "action", onPress: () => dispatch({ type: "insert", position: i + 1 }) }, "And"), /* @__PURE__ */ wp.element.createElement(
        Button,
        {
          type: "danger",
          onPress: () => dispatch({ type: "remove", item: i }),
          isDisabled: !props.canDelete,
          contentVisuallyHidden: true
        },
        "Delete condition"
      )), "afterRow");
      return /* @__PURE__ */ wp.element.createElement("div", { className: "tf-conditional-panel-conditions" }, /* @__PURE__ */ wp.element.createElement(
        Repeater,
        {
          ...props,
          fields: getField(props.dynamic, props.operators),
          type: "repeater",
          layout: "bare",
          afterRow,
          repeatable: false
        }
      ));
    }, "ConditionGroup");

    var __defProp$3 = Object.defineProperty;
    var __name$3 = (target, value) => __defProp$3(target, "name", { value, configurable: true });
    const ConditionalPanel = /* @__PURE__ */ __name$3((props) => {
      const emptyRow = /* @__PURE__ */ __name$3(() => ({
        key: uniqid(),
        data: [{ key: uniqid(), operator: "_eq" }]
      }), "emptyRow");
      const initialValue = /* @__PURE__ */ __name$3(() => initJSON(props.value ?? "", [emptyRow()]), "initialValue");
      const [savedValue, setSavedValue] = wp.element.useState(initialValue());
      const [value, setValue] = wp.element.useState(initialValue());
      wp.element.useEffect(() => {
        props.onChange && props.onChange(props.useModal ? savedValue : value);
      }, [props.useModal ? savedValue : value]);
      wp.element.useEffect(() => {
        if (value.length === 1)
          return;
        const groups = value.filter((group) => group.data.length !== 0);
        if (groups.length !== value.length)
          setValue([...groups]);
      }, [value]);
      const insertGroup = /* @__PURE__ */ __name$3((position) => setValue([
        ...value.slice(0, position),
        emptyRow(),
        ...value.slice(position)
      ]), "insertGroup");
      const updateGroup = /* @__PURE__ */ __name$3((groupValue, i) => {
        const updatedValue = value;
        updatedValue[i].data = groupValue;
        setValue([...updatedValue]);
      }, "updateGroup");
      const Wrapper = props.useModal ? ModalTrigger : wp.element.Fragment;
      const wrapperProps = props.useModal ? {
        title: "Conditional rules",
        label: "Open conditional panel",
        confirmText: "Save",
        onCancel: () => {
          setValue([...deepCopy(savedValue)]);
        },
        onValidate: () => {
          setSavedValue([...deepCopy(value)]);
        }
      } : {};
      return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null, /* @__PURE__ */ wp.element.createElement("input", { type: "hidden", name: props.name ?? "", value: JSON.stringify(props.useModal ? savedValue : value) }), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-label" }, props.label ?? ""), /* @__PURE__ */ wp.element.createElement(Wrapper, { ...wrapperProps }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-conditional-panel" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-conditional-panel-container" }, /* @__PURE__ */ wp.element.createElement("div", { className: "tf-conditional-groups" }, value.map((group, i) => /* @__PURE__ */ wp.element.createElement("div", { key: group.key, className: "tf-conditional-group" }, /* @__PURE__ */ wp.element.createElement(
        ConditionGroup,
        {
          canDelete: value.length !== 1 || group.data.length !== 1,
          value: group.data,
          onChange: (value2) => updateGroup(value2, i),
          dynamic: props.dynamic,
          operators: props.operators
        }
      ), /* @__PURE__ */ wp.element.createElement("div", { className: "tf-conditional-group-actions" }, /* @__PURE__ */ wp.element.createElement("strong", null, "Or"), /* @__PURE__ */ wp.element.createElement(Button, { type: "primary", onPress: () => insertGroup(i + 1) }, "Add group")))))))));
    }, "ConditionalPanel");

    const controls = {
      "accordion": Accordion,
      "alignment-matrix": AlignmentMatrix,
      "border": Border,
      "button-group": ButtonGroup,
      "checkbox": Checkbox,
      "color-picker": Color,
      "conditional-panel": ConditionalPanel,
      "combo-box": ComboBox,
      "date-picker": Date$1,
      "dimensions": Dimensions$1,
      "field-group": FieldGroup,
      "file": FileUpload,
      "gradient": Gradient,
      "gallery": Gallery,
      "list": List,
      "hidden": InputHidden,
      "number": NumberComponent,
      "repeater": Repeater,
      "radio": Radio,
      "select": Select,
      "simple-dimension": Dimensions,
      "switch": Switch,
      "text": TextField,
      "text-suggestion": DynamicText,
      "wysiwyg": Editor,
      "textarea": TextArea
    };
    const elements = {
      "button": Button,
      "description": Description,
      "label": Label,
      "modal": ModalTrigger,
      "wrapper": Wrapper
    };
    var types = {
      _types: {
        control: controls,
        element: elements
      },
      get(name, type = "control") {
        return this._types[type]?.[name] ?? false;
      },
      add(name, Component, type = "control") {
        this._types[type][name] = Component;
      }
    };

    var __defProp$2 = Object.defineProperty;
    var __name$2 = (target, value) => __defProp$2(target, "name", { value, configurable: true });
    const Control = /* @__PURE__ */ __name$2(({
      visibility,
      data,
      ...props
    }) => {
      const { ControlContext } = tangibleFields;
      const control = wp.element.useContext(ControlContext);
      const wrapper = {
        ...props.wrapper ?? {},
        className: `${props?.wrapper?.class ?? ""} ${control.wrapper}`
      };
      delete wrapper.class;
      const [value, setValue] = wp.element.useState(props.value ?? "");
      wp.element.useEffect(() => {
        props.onChange && props.onChange(value);
      }, [value]);
      const ControlComponent = types.get(props.type ?? "text");
      if (!ControlComponent)
        return /* @__PURE__ */ wp.element.createElement(wp.element.Fragment, null);
      const onChange = /* @__PURE__ */ __name$2((newValue) => {
        setValue(newValue);
        setTimeout(() => {
          triggerEvent("valueChange", {
            name: props.name ?? false,
            props,
            value: newValue
          });
        });
      }, "onChange");
      return /* @__PURE__ */ wp.element.createElement($f57aed4a881a3485$export$bf688221f59024e5, { ...wrapper }, /* @__PURE__ */ wp.element.createElement(VisibilityWrapper, { visibility, data }, /* @__PURE__ */ wp.element.createElement(
        RenderWrapper,
        {
          itemType: props.itemType ?? "field",
          name: props.name ?? false,
          setValue
        },
        (refreshRender) => /* @__PURE__ */ wp.element.createElement(
          DependendWrapper,
          {
            refresh: refreshRender,
            data,
            itemProps: props
          },
          (itemProps) => /* @__PURE__ */ wp.element.createElement(
            ControlComponent,
            {
              ...itemProps,
              value,
              onChange,
              data,
              dynamic: props.dynamic ? dynamicValuesAPI(value, setValue, props.dynamic) : false
            }
          )
        )
      )));
    }, "Control");

    var __defProp$1 = Object.defineProperty;
    var __name$1 = (target, value) => __defProp$1(target, "name", { value, configurable: true });
    const getRepeaterStore = /* @__PURE__ */ __name$1((name, store) => ({
      getRow(number) {
        const rows = store.getValue(name);
        return Array.isArray(rows) && rows[number] ? rows[number] : false;
      },
      setRow(number, value) {
        const rows = store.getValue(name);
        if (!Array.isArray(rows) || !rows[number])
          return false;
        rows[number] = value;
        store.setValue(name, rows);
      },
      getRowValue(number, valueName) {
        const row = this.getRow(number);
        return row ? row[valueName] : false;
      },
      setRowValue(number, valueName, value) {
        const row = this.getRow(number);
        if (!row)
          return false;
        row[valueName] = value;
        this.setRow(number, row);
      }
    }), "getRepeaterStore");
    var store = {
      _values: {},
      _setValueFromControl(name, value) {
        this._values[name] = value;
      },
      getAllValues() {
        return this._values;
      },
      getValue(name) {
        return this._values[name] ?? "";
      },
      setValue(name, value) {
        triggerEvent("_refreshFieldValue", {
          name,
          value
        });
      },
      getRepeater(name) {
        return getRepeaterStore(name, this);
      }
    };

    var fields = {
      rerender: (name) => triggerEvent("_fieldRerender", name)
    };

    var __defProp = Object.defineProperty;
    var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
    const ControlContext = wp.element.createContext(null);
    const renderComponent = /* @__PURE__ */ __name((props, type = "field") => type === "element" ? renderElement(props) : renderField(props), "renderComponent");
    const renderField = /* @__PURE__ */ __name((props) => /* @__PURE__ */ wp.element.createElement(ControlContext.Provider, { value: {
      name: props.context ?? "default",
      wrapper: `tf-context-${props.context ?? "default"}`,
      getValue: store.getValue.bind(store),
      portalContainer: props.portalContainer ?? document.body
    } }, /* @__PURE__ */ wp.element.createElement(
      Control,
      {
        ...props,
        onChange: (value) => {
          store._setValueFromControl(props.name, value);
          if (props.onChange)
            props.onChange(value);
        },
        visibility: {
          condition: props.condition?.condition ?? false,
          actiElementComponenton: props.condition?.action ?? "show"
        },
        data: {
          getValue: store.getValue.bind(store)
        }
      }
    )), "renderField");
    const renderElement = /* @__PURE__ */ __name((props) => /* @__PURE__ */ wp.element.createElement(ControlContext.Provider, { value: {
      name: props.context ?? "default",
      wrapper: `tf-context-${props.context ?? "default"}`,
      getValue: store.getValue.bind(store),
      portalContainer: props.portalContainer ?? document.body
    } }, /* @__PURE__ */ wp.element.createElement(
      Element$1,
      {
        ...props,
        onChange: (value) => {
          store._setValueFromControl(props.name, value);
          if (props.onChange)
            props.onChange(value);
        },
        visibility: {
          condition: props.condition?.condition ?? false,
          action: props.condition?.action ?? "show"
        },
        data: {
          getValue: store.getValue.bind(store)
        }
      }
    )), "renderElement");
    const init = /* @__PURE__ */ __name(() => {
      const { fields: fields2, elements } = TangibleFields;
      for (const field in fields2) {
        initItem(field, fields2[field], "fields");
      }
      for (const element in elements) {
        initItem(element, elements[element], "elements");
      }
    }, "init");
    const initItem = /* @__PURE__ */ __name((name, props, type) => {
      const element = document.getElementById(props.element);
      if (!element)
        return;
      const component = type === "fields" ? renderField({ name, ...props }) : renderElement({ name, ...props });
      wp.element.createRoot ? wp.element.createRoot(element).render(component) : wp.element.render(component, element);
      triggerEvent(
        type === "fields" ? "initField" : "initElement",
        { name, props }
      );
    }, "initItem");
    window.tangibleFields = {
      render: renderComponent,
      event: addEventListener,
      trigger: triggerEvent,
      store,
      types,
      utils,
      fields,
      ControlContext
    };
    window.addEventListener("load", init);

})();
//# sourceMappingURL=index.min.js.map
